
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000f31

Program Header:
0x70000001 off    0x00016ad8 vaddr 0x00006ad8 paddr 0x00006ad8 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00006b90 memsz 0x00006b90 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00006b90 align 2**16
         filesz 0x000000dc memsz 0x000000dc flags rw-
    LOAD off    0x000200e0 vaddr 0x100000e0 paddr 0x100000e0 align 2**16
         filesz 0x00000000 memsz 0x000001e8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00006ac0  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000dc  10000000  00006b90  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200dc  2**2  CONTENTS
  3 .bss             000001e8  100000e0  100000e0  000200e0  2**3  ALLOC
  4 .ARM.extab       00000018  00006ac0  00006ac0  00016ac0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  00006ad8  00006ad8  00016ad8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200dc  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200dc  2**2  CONTENTS
  8 .noinit          00000000  100002c8  100002c8  000200dc  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200dc  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  0002010c  2**0  CONTENTS, READONLY
 11 .debug_info      00080eb8  00000000  00000000  0002018a  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00004bd3  00000000  00000000  000a1042  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000ac8  00000000  00000000  000a5c15  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000a18  00000000  00000000  000a66dd  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      0000601c  00000000  00000000  000a70f5  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       00029a4d  00000000  00000000  000ad111  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00003790  00000000  00000000  000d6b60  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000e0 l    d  .bss	00000000 .bss
00006ac0 l    d  .ARM.extab	00000000 .ARM.extab
00006ad8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100002c8 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
000024d8 l     F .text	00000030 NVIC_EnableIRQ
00002508 l     F .text	00000030 NVIC_DisableIRQ
00002538 l     F .text	00000054 NVIC_SetPriority
00006760 l     O .text	00000004 config::kSystemClockRateMhz
000026b2 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000026ce l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00006764 l     O .text	00000004 config::kRtosFrequency
00002714 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002730 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002c44 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002c60 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000068f8 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
0000697c l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000069f8 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
0000377c l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000064 l     O .data	00000004 (anonymous namespace)::system_controller
100002a4 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100002a8 l     O .bss	0000000c (anonymous namespace)::uart0
10000068 l     O .data	0000000c (anonymous namespace)::system_timer
00003cc4 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00003ce8 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00006850 l     O .text	0000000c sjsu::InitializePlatform()::file
00006a40 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00003fdc l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000040aa l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000040d0 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
000041e0 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
100000e0 l       .bss	00000001 completed.9929
00000350 l     F .text	00000000 frame_dummy
100000e4 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 LabGPIO.cpp
000005a0 l     F .text	0000004c __static_initialization_and_destruction_0(int, int)
000005ec l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh
00000000 l    df *ABS*	00000000 main.cpp
00005954 l     O .text	00000009 main::file
000059b0 l     O .text	0000000b main::__PRETTY_FUNCTION__
00000a74 l     F .text	0000004c __static_initialization_and_destruction_0(int, int)
00000ac0 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00000d84 l     F .text	00000030 NVIC_DisableIRQ
00006160 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00000f20 l       .text	00000000 handler2_address_const
00000fa0 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00000fe4 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00000ad0 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 tasks.c
10000218 l     O .bss	00000064 pxReadyTasksLists
1000027c l     O .bss	00000004 uxTopReadyPriority
10000280 l     O .bss	00000004 xYieldPending
10000284 l     O .bss	00000004 uxSchedulerSuspended
10000288 l     O .bss	00000004 ulTaskSwitchedInTime
1000028c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
000011d8 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
000011f4 l     F .text	0000002e _strlen(char const*)
00001222 l     F .text	00000028 _is_digit(char)
0000124a l     F .text	00000048 _atoi(char const**)
00001292 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000014d4 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000015a4 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
000061b4 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00001684 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00001ac8 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
0000240c l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
10000290 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00004210 l       .text	00000000 pxCurrentTCBConst2
00004280 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
000048dc l     F .text	00000012 selfrel_offset31
000048f0 l     F .text	00000060 search_EIT_table
00004950 l     F .text	00000028 __gnu_unwind_get_pr_addr
00004978 l     F .text	000000a4 get_eit_entry
00004a1c l     F .text	00000058 restore_non_core_regs
00004a74 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00004a80 l     F .text	00000004 __gnu_unwind_24bit.isra.1
00004a84 l     F .text	00000002 _Unwind_DebugHook
00004a88 l     F .text	0000003e unwind_phase2
00004ac8 l     F .text	000000c6 unwind_phase2_forced
00004c98 l     F .text	00000018 _Unwind_GetGR
00004cdc l     F .text	0000001a _Unwind_SetGR
00004d68 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005474 l     F .text	00000038 next_unwind_byte
000054ac l     F .text	0000001a _Unwind_GetGR.constprop.0
000054c8 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
1000007c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000b38  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
0000542c g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00004b94 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00002924  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000004b8 g     F .text	00000028 sjsu::LabGPIO::Set(sjsu::Gpio::State) const
00000d04  w    F .text	0000006c sjsu::InitializeBssSection()
000010b8 g     F .text	00000010 _getpid
00006778  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000848  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000296c  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
000067d4  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00002618  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
000007b6  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
1000000c  w    O .data	00000004 sjsu::newlib::in
100002bc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
000028a0  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
000058cc g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
0000239c g     F .text	00000044 printf
00000000 g       *ABS*	00000000 __vectors_start__
00003ec6  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003de8  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00002878  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00000bc4  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000052e8 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005408 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00006b90 g       .ARM.exidx	00000000 __exidx_end
0000036c  w    F .text	00000020 sjsu::Gpio::Gpio()
000067ec  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00003d1c g     F .text	00000014 ThreadRuntimeCounter
0000503c g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000018  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00002e00  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
10000214 g     O .bss	00000004 pxCurrentTCB
000057b8 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005408 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00006770  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
10010000 g       *ABS*	00000000 __top_SRAM
100002c4 g     O .bss	00000004 errno
00006b90 g       .ARM.exidx	00000000 _etext
000034c4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00003e54  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00002ef8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00005450 g     F .text	00000022 .hidden _Unwind_Backtrace
00006768  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
100000fc  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000043d0 g     F .text	00000160 .hidden __aeabi_fadd
10000298  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
000043cc g     F .text	00000164 .hidden __subsf3
00002fc4  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000681c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
000052c8 g     F .text	00000018 .hidden __restore_core_regs
00005308 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
0000676c  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
0000685c  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00002790  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
000067f0  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00003394  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00004b90 g     F .text	00000004 .hidden _Unwind_GetCFA
00005844 g     F .text	00000016 memcpy
000030bc  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000042a0 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00000742  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()
00004cb0 g     F .text	0000002a .hidden _Unwind_VRS_Set
000045e0 g     F .text	00000000 .hidden __aeabi_uldivmod
100002c8 g       .noinit	00000000 _noinit
00002fdc  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00001114 g     F .text	00000048 puts
00000654  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
00002a76  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003574  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00003f36  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00002d2c  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
1000001c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00003968  w    F .text	00000020 sjsu::Uart::Uart()
0000586a g     F .text	00000050 _raise_r
00004538 g     F .text	0000001c .hidden __aeabi_i2f
10010000 g       *ABS*	00000000 __top_RAM
00004220 g     F .text	00000066 xPortPendSVHandler
00002670  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00003488  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000058f0 g     F .text	00000004 _getpid_r
00004cf8 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00003f88  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
10010000 g       *ABS*	00000000 StackTop
00003058  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00004610 g     F .text	000002cc .hidden __udivmoddi4
000000fc g       .text	00000000 bss_section_table
000067f4  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00002b2c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000066a  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
000052f8 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00003988  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00005048 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00005044  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
000029c4  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
100002b4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005450 g     F .text	00000022 .hidden ___Unwind_Backtrace
00000612  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00003bac  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000b80  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00006834  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00005930  w    O .text	00000024 vtable for sjsu::Gpio
20000000 g       *ABS*	00000000 __user_heap_base
10000294  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00006ad8 g       .ARM.extab	00000000 __exidx_start
000057fc g     F .text	00000048 __libc_init_array
000036ec  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
000053c0 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
00002b5c  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000057ec g     F .text	0000000e abort
000053e4 g     F .text	00000022 .hidden ___Unwind_Resume
00002b44  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000050  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
10000100  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000007d0  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00003718  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
00004288 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000067f8  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00003b56  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00004318 g     F .text	0000000a std::terminate()
00004324 g     F .text	0000009e .hidden __aeabi_d2f
00005310 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
0000087c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000043cc g     F .text	00000164 .hidden __aeabi_fsub
00003a7c  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00003eec  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
100002c0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00000f08 g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00002ace  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
100002c8 g       .bss	00000000 _ebss
00003b08  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000068ac  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000004e0 g     F .text	00000024 sjsu::LabGPIO::Toggle() const
00002da8  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00002990  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
000026f2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004564 g     F .text	0000007c .hidden __floatdisf
00006804  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00000e8c g     F .text	0000007c GetRegistersFromStack
00003988  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
000052e0 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00003d30  w    F .text	000000b8 sjsu::InitializePlatform()
0000090c  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00006a60 g     O .text	00000020 __sf_fake_stderr
000027b0  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00004308 g     F .text	00000010 std::get_terminate()
100002c8 g       .bss	00000000 end
00003968  w    F .text	00000020 sjsu::Uart::Uart()
000053e4 g     F .text	00000022 .hidden _Unwind_Resume
00000db4  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00004c60 g     F .text	0000000c .hidden _Unwind_DeleteException
000068e8  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
00004c5c g     F .text	00000002 .hidden _Unwind_Complete
00002eb0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
00000000 g       *ABS*	00000000 __base_Flash
00001168 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
0000075c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()
000068d0  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00006788  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
000023ee g     F .text	0000001c trace_write
0000038c g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
00000528 g     F .text	00000028 sjsu::LabGPIO::GetPin() const
100002b8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00000a24  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000e0 g       .bss	00000000 _bss
000067bc  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000023e0 g     F .text	0000000e trace_initialize
000042f8 g     F .text	00000006 __cxa_pure_virtual
00003094  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00004538 g     F .text	0000001c .hidden __floatsisf
0000680c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
100002a0  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
000054cc g     F .text	000002c4 .hidden __gnu_unwind_execute
10000024  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000210  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00002c90  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000052f0 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00003408  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00004050  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00000778  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
100002c8 g       .noinit	00000000 _end_noinit
10000110  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00002d84  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00000ff4 g     F .text	000000c4 vTaskSwitchContext
000033dc  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00006774  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000028f0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00006150  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00004c08 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00002908  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
0000258c  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00006814  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00005300 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00002b80  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004554 g     F .text	0000008c .hidden __floatundisf
000053c0 g     F .text	00000022 .hidden _Unwind_RaiseException
000057e8  w    F .text	00000002 .hidden __aeabi_ldiv0
10000028  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00000d70  w    F .text	00000014 sjsu::SystemInitialize()
00004530 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
10000108  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000042b8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00002644  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00006a80 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00003318  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
0000585a g     F .text	00000010 memset
00005960  w    O .text	00000008 std::integral_constant<long long, 500ll>::value
00000898 g     F .text	00000074 main
000025d0  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00000dc4  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00004564 g     F .text	0000007c .hidden __aeabi_l2f
00000942  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00002824  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
000025f0  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000683c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00006894  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004324 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
000041f0 g     F .text	00000026 vPortSVCHandler
00000000 g       *ABS*	00000000 __base_FLASH
00006780  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000010  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004554 g     F .text	0000008c .hidden __aeabi_ul2f
00002754  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004bf4 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
0000079a  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00003e8a  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004c4c g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000008  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00006758  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00003fae  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
000052c8 g     F .text	00000018 .hidden restore_core_regs
00002dc4  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
000053ac g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
0000682c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
000029a4  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00000954  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
0000036c  w    F .text	00000020 sjsu::Gpio::Gpio()
1000003c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000003c4 g     F .text	000000f4 sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const
00003ca0  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
000043c4 g     F .text	0000016c .hidden __aeabi_frsub
000057e0 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000078 g     O .data	00000004 _impure_ptr
00006784  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00002a58  w    F .text	0000001e units::linear_scale<float>::operator()() const
00002f88  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000027ec  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000034f8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
00003f5a  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00002af0  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000057c4 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000067a4  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000504 g     F .text	00000022 sjsu::LabGPIO::Read() const
00000f30 g     F .text	00000070 ArmResetHandler
00004c6c g     F .text	0000002a .hidden _Unwind_VRS_Get
000027c8  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000074 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005398 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00002e34  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
0000590c g     O .text	00000024 vtable for sjsu::LabGPIO
0000067c  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00002e68  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
000010e4 g     F .text	00000030 _write
00005790 g     F .text	00000028 .hidden __gnu_unwind_frame
0000542c g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000dc g       .data	00000000 _edata
00003c7c  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00003e24  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000e00  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
0000678c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00003000  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00004530 g     F .text	00000024 .hidden __floatunsisf
000042fe g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005354 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000010c8 g     F .text	0000001a _kill
00000c68  w    F .text	0000009c sjsu::InitializeDataSection()
00000634  w    F .text	00000020 sjsu::DefaultUptime()
00006aa0 g     O .text	00000020 __sf_fake_stdout
000005fc  w    F .text	00000016 std::numeric_limits<long long>::max()
0000030c g       .text	00000000 __init_array_start
000057e8  w    F .text	00000002 .hidden __aeabi_idiv0
00003f10  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
0000038c g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
0000057c g     F .text	00000024 sjsu::LabGPIO::DetachInterrupt() const
0000115c g     F .text	0000000c _exit
00006824  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000020  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00002692  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00003654  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000728  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000033f0  w    F .text	00000018 sjsu::Pin::GetPort() const
000058f4 g     F .text	00000010 strlen
00003420  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
00005040  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
000009ca  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00003250  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000042d8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00000af8  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
000057d8 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000036a0  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00003ff8  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00003454  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
00002f40  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
0000097c  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000e18  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
0000677c  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006878  w    O .text	0000001c vtable for sjsu::Uart
000043d0 g     F .text	00000160 .hidden __addsf3
000067fc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00000550 g     F .text	0000002c sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
000039bc  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000014  w    O .data	00000004 sjsu::cortex::DwtCounter::core
000058bc g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 31 0f 00 00 ed 27 00 00 09 0f 00 00     ....1....'......
      10:	ed 27 00 00 ed 27 00 00 ed 27 00 00 00 00 00 00     .'...'...'......
	...
      2c:	f1 41 00 00 ed 27 00 00 00 00 00 00 21 42 00 00     .A...'......!B..
      3c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      4c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      5c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      6c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      7c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      8c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      9c:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      ac:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      bc:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      cc:	ed 27 00 00 ed 27 00 00 ed 27 00 00 ed 27 00 00     .'...'...'...'..
      dc:	ed 27 00 00 ed 27 00 00                             .'...'..

000000e4 <data_section_table>:
      e4:	00006b90 	.word	0x00006b90
      e8:	10000000 	.word	0x10000000
      ec:	000000dc 	.word	0x000000dc
      f0:	00006b90 	.word	0x00006b90
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000e0 	.word	0x100000e0
     100:	000001e8 	.word	0x000001e8
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	000005ed 	.word	0x000005ed
     314:	00000ac1 	.word	0x00000ac1
     318:	00000fe5 	.word	0x00000fe5
     31c:	000041e1 	.word	0x000041e1

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	100000e0 	.word	0x100000e0
     348:	00000000 	.word	0x00000000
     34c:	00006ad8 	.word	0x00006ad8

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	100000e4 	.word	0x100000e4
     368:	00006ad8 	.word	0x00006ad8

0000036c <sjsu::Gpio::Gpio()>:
#include "utility/status.hpp"

namespace sjsu
{
/// An abstract interface for General Purpose I/O
class Gpio
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	4a04      	ldr	r2, [pc, #16]	; (388 <sjsu::Gpio::Gpio()+0x1c>)
     376:	687b      	ldr	r3, [r7, #4]
     378:	601a      	str	r2, [r3, #0]
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	4618      	mov	r0, r3
     37e:	370c      	adds	r7, #12
     380:	46bd      	mov	sp, r7
     382:	f85d 7b04 	ldr.w	r7, [sp], #4
     386:	4770      	bx	lr
     388:	00005938 	.word	0x00005938

0000038c <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "L0_Platform/lpc17xx/LPC17xx.h"

#include <cstdint>
using namespace sjsu;

LabGPIO::LabGPIO(uint8_t port, uint8_t pin)
     38c:	b580      	push	{r7, lr}
     38e:	b082      	sub	sp, #8
     390:	af00      	add	r7, sp, #0
     392:	6078      	str	r0, [r7, #4]
     394:	460b      	mov	r3, r1
     396:	70fb      	strb	r3, [r7, #3]
     398:	4613      	mov	r3, r2
     39a:	70bb      	strb	r3, [r7, #2]
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	4618      	mov	r0, r3
     3a0:	f7ff ffe4 	bl	36c <sjsu::Gpio::Gpio()>
     3a4:	4a06      	ldr	r2, [pc, #24]	; (3c0 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)+0x34>)
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	601a      	str	r2, [r3, #0]
{
    PIN = pin;
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	78ba      	ldrb	r2, [r7, #2]
     3ae:	711a      	strb	r2, [r3, #4]
    PORT = port;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	78fa      	ldrb	r2, [r7, #3]
     3b4:	715a      	strb	r2, [r3, #5]
}
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	4618      	mov	r0, r3
     3ba:	3708      	adds	r7, #8
     3bc:	46bd      	mov	sp, r7
     3be:	bd80      	pop	{r7, pc}
     3c0:	00005914 	.word	0x00005914

000003c4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>:

void LabGPIO::SetDirection(Direction direction) const
{
     3c4:	b480      	push	{r7}
     3c6:	b083      	sub	sp, #12
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
     3cc:	460b      	mov	r3, r1
     3ce:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	795b      	ldrb	r3, [r3, #5]
     3d4:	b2db      	uxtb	r3, r3
     3d6:	2b01      	cmp	r3, #1
     3d8:	d023      	beq.n	422 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x5e>
     3da:	2b02      	cmp	r3, #2
     3dc:	d040      	beq.n	460 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x9c>
     3de:	2b00      	cmp	r3, #0
     3e0:	d000      	beq.n	3e4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     3e2:	e05c      	b.n	49e <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     3e4:	78fb      	ldrb	r3, [r7, #3]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d10d      	bne.n	406 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x42>
                lpc40xx::LPC_GPIO0->DIR &= ~(1 << PIN);
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	791b      	ldrb	r3, [r3, #4]
     3ee:	b2db      	uxtb	r3, r3
     3f0:	461a      	mov	r2, r3
     3f2:	2301      	movs	r3, #1
     3f4:	4093      	lsls	r3, r2
     3f6:	43da      	mvns	r2, r3
     3f8:	4b2c      	ldr	r3, [pc, #176]	; (4ac <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     3fa:	681b      	ldr	r3, [r3, #0]
     3fc:	4611      	mov	r1, r2
     3fe:	4a2b      	ldr	r2, [pc, #172]	; (4ac <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     400:	400b      	ands	r3, r1
     402:	6013      	str	r3, [r2, #0]
            break;
     404:	e04b      	b.n	49e <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc40xx::LPC_GPIO0->DIR |= (1 << PIN);
     406:	687b      	ldr	r3, [r7, #4]
     408:	791b      	ldrb	r3, [r3, #4]
     40a:	b2db      	uxtb	r3, r3
     40c:	461a      	mov	r2, r3
     40e:	2301      	movs	r3, #1
     410:	fa03 f202 	lsl.w	r2, r3, r2
     414:	4b25      	ldr	r3, [pc, #148]	; (4ac <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     416:	681b      	ldr	r3, [r3, #0]
     418:	4611      	mov	r1, r2
     41a:	4a24      	ldr	r2, [pc, #144]	; (4ac <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     41c:	430b      	orrs	r3, r1
     41e:	6013      	str	r3, [r2, #0]
            break;
     420:	e03d      	b.n	49e <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     422:	78fb      	ldrb	r3, [r7, #3]
     424:	2b00      	cmp	r3, #0
     426:	d10d      	bne.n	444 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x80>
                lpc40xx::LPC_GPIO1->DIR &= ~(1 << PIN);
     428:	687b      	ldr	r3, [r7, #4]
     42a:	791b      	ldrb	r3, [r3, #4]
     42c:	b2db      	uxtb	r3, r3
     42e:	461a      	mov	r2, r3
     430:	2301      	movs	r3, #1
     432:	4093      	lsls	r3, r2
     434:	43da      	mvns	r2, r3
     436:	4b1e      	ldr	r3, [pc, #120]	; (4b0 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     438:	681b      	ldr	r3, [r3, #0]
     43a:	4611      	mov	r1, r2
     43c:	4a1c      	ldr	r2, [pc, #112]	; (4b0 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     43e:	400b      	ands	r3, r1
     440:	6013      	str	r3, [r2, #0]
            break;
     442:	e02c      	b.n	49e <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc40xx::LPC_GPIO1->DIR |= (1 << PIN);
     444:	687b      	ldr	r3, [r7, #4]
     446:	791b      	ldrb	r3, [r3, #4]
     448:	b2db      	uxtb	r3, r3
     44a:	461a      	mov	r2, r3
     44c:	2301      	movs	r3, #1
     44e:	fa03 f202 	lsl.w	r2, r3, r2
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	4611      	mov	r1, r2
     458:	4a15      	ldr	r2, [pc, #84]	; (4b0 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     45a:	430b      	orrs	r3, r1
     45c:	6013      	str	r3, [r2, #0]
            break;
     45e:	e01e      	b.n	49e <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     460:	78fb      	ldrb	r3, [r7, #3]
     462:	2b00      	cmp	r3, #0
     464:	d10d      	bne.n	482 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xbe>
                lpc40xx::LPC_GPIO2->DIR &= ~(1 << PIN);
     466:	687b      	ldr	r3, [r7, #4]
     468:	791b      	ldrb	r3, [r3, #4]
     46a:	b2db      	uxtb	r3, r3
     46c:	461a      	mov	r2, r3
     46e:	2301      	movs	r3, #1
     470:	4093      	lsls	r3, r2
     472:	43da      	mvns	r2, r3
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xf0>)
     476:	681b      	ldr	r3, [r3, #0]
     478:	4611      	mov	r1, r2
     47a:	4a0e      	ldr	r2, [pc, #56]	; (4b4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xf0>)
     47c:	400b      	ands	r3, r1
     47e:	6013      	str	r3, [r2, #0]
            break;
     480:	e00c      	b.n	49c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xd8>
                lpc40xx::LPC_GPIO2->DIR |= (1 << PIN);
     482:	687b      	ldr	r3, [r7, #4]
     484:	791b      	ldrb	r3, [r3, #4]
     486:	b2db      	uxtb	r3, r3
     488:	461a      	mov	r2, r3
     48a:	2301      	movs	r3, #1
     48c:	fa03 f202 	lsl.w	r2, r3, r2
     490:	4b08      	ldr	r3, [pc, #32]	; (4b4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xf0>)
     492:	681b      	ldr	r3, [r3, #0]
     494:	4611      	mov	r1, r2
     496:	4a07      	ldr	r2, [pc, #28]	; (4b4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xf0>)
     498:	430b      	orrs	r3, r1
     49a:	6013      	str	r3, [r2, #0]
            break;
     49c:	bf00      	nop
        }


    }
}
     49e:	bf00      	nop
     4a0:	370c      	adds	r7, #12
     4a2:	46bd      	mov	sp, r7
     4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	20098000 	.word	0x20098000
     4b0:	20098020 	.word	0x20098020
     4b4:	20098040 	.word	0x20098040

000004b8 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>:

void LabGPIO::Set(State output) const
{
     4b8:	b580      	push	{r7, lr}
     4ba:	b084      	sub	sp, #16
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	460b      	mov	r3, r1
     4c2:	70fb      	strb	r3, [r7, #3]
    int i = output;
     4c4:	78fb      	ldrb	r3, [r7, #3]
     4c6:	60fb      	str	r3, [r7, #12]
    if (i)
     4c8:	68fb      	ldr	r3, [r7, #12]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d002      	beq.n	4d4 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x1c>
        printf("woot");
     4ce:	4803      	ldr	r0, [pc, #12]	; (4dc <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x24>)
     4d0:	f001 ff64 	bl	239c <printf>
}
     4d4:	bf00      	nop
     4d6:	3710      	adds	r7, #16
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	00005904 	.word	0x00005904

000004e0 <sjsu::LabGPIO::Toggle() const>:

void LabGPIO::Toggle() const
{
     4e0:	b580      	push	{r7, lr}
     4e2:	b084      	sub	sp, #16
     4e4:	af00      	add	r7, sp, #0
     4e6:	6078      	str	r0, [r7, #4]
    int i = 1;
     4e8:	2301      	movs	r3, #1
     4ea:	60fb      	str	r3, [r7, #12]
    if (i)
     4ec:	68fb      	ldr	r3, [r7, #12]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d002      	beq.n	4f8 <sjsu::LabGPIO::Toggle() const+0x18>
        printf("woot");
     4f2:	4803      	ldr	r0, [pc, #12]	; (500 <sjsu::LabGPIO::Toggle() const+0x20>)
     4f4:	f001 ff52 	bl	239c <printf>
}
     4f8:	bf00      	nop
     4fa:	3710      	adds	r7, #16
     4fc:	46bd      	mov	sp, r7
     4fe:	bd80      	pop	{r7, pc}
     500:	00005904 	.word	0x00005904

00000504 <sjsu::LabGPIO::Read() const>:

bool LabGPIO::Read() const
{
     504:	b480      	push	{r7}
     506:	b085      	sub	sp, #20
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
    int i = 1;
     50c:	2301      	movs	r3, #1
     50e:	60fb      	str	r3, [r7, #12]
    if (i)
     510:	68fb      	ldr	r3, [r7, #12]
     512:	2b00      	cmp	r3, #0
     514:	d001      	beq.n	51a <sjsu::LabGPIO::Read() const+0x16>
        return true;
     516:	2301      	movs	r3, #1
     518:	e7ff      	b.n	51a <sjsu::LabGPIO::Read() const+0x16>

}
     51a:	4618      	mov	r0, r3
     51c:	3714      	adds	r7, #20
     51e:	46bd      	mov	sp, r7
     520:	f85d 7b04 	ldr.w	r7, [sp], #4
     524:	4770      	bx	lr
     526:	Address 0x0000000000000526 is out of bounds.


00000528 <sjsu::LabGPIO::GetPin() const>:

const sjsu::Pin & LabGPIO::GetPin() const
{
     528:	b580      	push	{r7, lr}
     52a:	b084      	sub	sp, #16
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
    int i = 1;
     530:	2301      	movs	r3, #1
     532:	60fb      	str	r3, [r7, #12]
    if (i)
     534:	68fb      	ldr	r3, [r7, #12]
     536:	2b00      	cmp	r3, #0
     538:	d002      	beq.n	540 <sjsu::LabGPIO::GetPin() const+0x18>
        printf("woot");
     53a:	4804      	ldr	r0, [pc, #16]	; (54c <sjsu::LabGPIO::GetPin() const+0x24>)
     53c:	f001 ff2e 	bl	239c <printf>
}
     540:	bf00      	nop
     542:	4618      	mov	r0, r3
     544:	3710      	adds	r7, #16
     546:	46bd      	mov	sp, r7
     548:	bd80      	pop	{r7, pc}
     54a:	bf00      	nop
     54c:	00005904 	.word	0x00005904

00000550 <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:

void LabGPIO::AttachInterrupt(IsrPointer function, Edge edge) const
{
     550:	b580      	push	{r7, lr}
     552:	b086      	sub	sp, #24
     554:	af00      	add	r7, sp, #0
     556:	60f8      	str	r0, [r7, #12]
     558:	60b9      	str	r1, [r7, #8]
     55a:	4613      	mov	r3, r2
     55c:	71fb      	strb	r3, [r7, #7]
    int i = 1;
     55e:	2301      	movs	r3, #1
     560:	617b      	str	r3, [r7, #20]
    if (i)
     562:	697b      	ldr	r3, [r7, #20]
     564:	2b00      	cmp	r3, #0
     566:	d002      	beq.n	56e <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const+0x1e>
        printf("woot");
     568:	4803      	ldr	r0, [pc, #12]	; (578 <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const+0x28>)
     56a:	f001 ff17 	bl	239c <printf>
}
     56e:	bf00      	nop
     570:	3718      	adds	r7, #24
     572:	46bd      	mov	sp, r7
     574:	bd80      	pop	{r7, pc}
     576:	bf00      	nop
     578:	00005904 	.word	0x00005904

0000057c <sjsu::LabGPIO::DetachInterrupt() const>:

void LabGPIO::DetachInterrupt() const
{   
     57c:	b580      	push	{r7, lr}
     57e:	b084      	sub	sp, #16
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
    int i = 1;
     584:	2301      	movs	r3, #1
     586:	60fb      	str	r3, [r7, #12]
    if (i)
     588:	68fb      	ldr	r3, [r7, #12]
     58a:	2b00      	cmp	r3, #0
     58c:	d002      	beq.n	594 <sjsu::LabGPIO::DetachInterrupt() const+0x18>
        printf("woot");
     58e:	4803      	ldr	r0, [pc, #12]	; (59c <sjsu::LabGPIO::DetachInterrupt() const+0x20>)
     590:	f001 ff04 	bl	239c <printf>
}
     594:	bf00      	nop
     596:	3710      	adds	r7, #16
     598:	46bd      	mov	sp, r7
     59a:	bd80      	pop	{r7, pc}
     59c:	00005904 	.word	0x00005904

000005a0 <__static_initialization_and_destruction_0(int, int)>:
     5a0:	b480      	push	{r7}
     5a2:	b083      	sub	sp, #12
     5a4:	af00      	add	r7, sp, #0
     5a6:	6078      	str	r0, [r7, #4]
     5a8:	6039      	str	r1, [r7, #0]
     5aa:	687b      	ldr	r3, [r7, #4]
     5ac:	2b01      	cmp	r3, #1
     5ae:	d110      	bne.n	5d2 <__static_initialization_and_destruction_0(int, int)+0x32>
     5b0:	683b      	ldr	r3, [r7, #0]
     5b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     5b6:	4293      	cmp	r3, r2
     5b8:	d10b      	bne.n	5d2 <__static_initialization_and_destruction_0(int, int)+0x32>
  };
  /// A pointer holding the address to the LPC40xx PIN peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
     5ba:	4b09      	ldr	r3, [pc, #36]	; (5e0 <__static_initialization_and_destruction_0(int, int)+0x40>)
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	f003 0301 	and.w	r3, r3, #1
     5c2:	2b00      	cmp	r3, #0
     5c4:	d105      	bne.n	5d2 <__static_initialization_and_destruction_0(int, int)+0x32>
     5c6:	4b06      	ldr	r3, [pc, #24]	; (5e0 <__static_initialization_and_destruction_0(int, int)+0x40>)
     5c8:	2201      	movs	r2, #1
     5ca:	601a      	str	r2, [r3, #0]
     5cc:	4a05      	ldr	r2, [pc, #20]	; (5e4 <__static_initialization_and_destruction_0(int, int)+0x44>)
     5ce:	4b06      	ldr	r3, [pc, #24]	; (5e8 <__static_initialization_and_destruction_0(int, int)+0x48>)
     5d0:	601a      	str	r2, [r3, #0]
     5d2:	bf00      	nop
     5d4:	370c      	adds	r7, #12
     5d6:	46bd      	mov	sp, r7
     5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5dc:	4770      	bx	lr
     5de:	bf00      	nop
     5e0:	10000100 	.word	0x10000100
     5e4:	4002c000 	.word	0x4002c000
     5e8:	100000fc 	.word	0x100000fc

000005ec <_GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh>:
     5ec:	b580      	push	{r7, lr}
     5ee:	af00      	add	r7, sp, #0
     5f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5f4:	2001      	movs	r0, #1
     5f6:	f7ff ffd3 	bl	5a0 <__static_initialization_and_destruction_0(int, int)>
     5fa:	bd80      	pop	{r7, pc}

000005fc <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     5fc:	b490      	push	{r4, r7}
     5fe:	af00      	add	r7, sp, #0
     600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     604:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     608:	4618      	mov	r0, r3
     60a:	4621      	mov	r1, r4
     60c:	46bd      	mov	sp, r7
     60e:	bc90      	pop	{r4, r7}
     610:	4770      	bx	lr

00000612 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     612:	b490      	push	{r4, r7}
     614:	b082      	sub	sp, #8
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	e9d3 3400 	ldrd	r3, r4, [r3]
     622:	687a      	ldr	r2, [r7, #4]
     624:	e9c2 3400 	strd	r3, r4, [r2]
     628:	687b      	ldr	r3, [r7, #4]
     62a:	4618      	mov	r0, r3
     62c:	3708      	adds	r7, #8
     62e:	46bd      	mov	sp, r7
     630:	bc90      	pop	{r4, r7}
     632:	4770      	bx	lr

00000634 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     634:	b580      	push	{r7, lr}
     636:	b082      	sub	sp, #8
     638:	af00      	add	r7, sp, #0
     63a:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	2200      	movs	r2, #0
     640:	4903      	ldr	r1, [pc, #12]	; (650 <sjsu::DefaultUptime()+0x1c>)
     642:	4618      	mov	r0, r3
     644:	f000 f962 	bl	90c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     648:	6878      	ldr	r0, [r7, #4]
     64a:	3708      	adds	r7, #8
     64c:	46bd      	mov	sp, r7
     64e:	bd80      	pop	{r7, pc}
     650:	10000108 	.word	0x10000108

00000654 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     654:	b480      	push	{r7}
     656:	b083      	sub	sp, #12
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
     65c:	2300      	movs	r3, #0
     65e:	4618      	mov	r0, r3
     660:	370c      	adds	r7, #12
     662:	46bd      	mov	sp, r7
     664:	f85d 7b04 	ldr.w	r7, [sp], #4
     668:	4770      	bx	lr

0000066a <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     66a:	b580      	push	{r7, lr}
     66c:	af00      	add	r7, sp, #0
     66e:	2000      	movs	r0, #0
     670:	f7ff fff0 	bl	654 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     674:	4603      	mov	r3, r0
     676:	4618      	mov	r0, r3
     678:	bd80      	pop	{r7, pc}
     67a:	Address 0x000000000000067a is out of bounds.


0000067c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     67c:	b590      	push	{r4, r7, lr}
     67e:	b093      	sub	sp, #76	; 0x4c
     680:	af00      	add	r7, sp, #0
     682:	e9c7 0102 	strd	r0, r1, [r7, #8]
     686:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     68a:	e9c7 3406 	strd	r3, r4, [r7, #24]
     68e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     692:	f107 0338 	add.w	r3, r7, #56	; 0x38
     696:	4618      	mov	r0, r3
     698:	f000 f95c 	bl	954 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     69c:	f107 0238 	add.w	r2, r7, #56	; 0x38
     6a0:	f107 0318 	add.w	r3, r7, #24
     6a4:	4611      	mov	r1, r2
     6a6:	4618      	mov	r0, r3
     6a8:	f000 f968 	bl	97c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6ac:	4603      	mov	r3, r0
     6ae:	2b00      	cmp	r3, #0
     6b0:	d004      	beq.n	6bc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     6b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     6b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
     6ba:	e011      	b.n	6e0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     6bc:	4b19      	ldr	r3, [pc, #100]	; (724 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
     6c4:	4610      	mov	r0, r2
     6c6:	4798      	blx	r3
     6c8:	463b      	mov	r3, r7
     6ca:	f107 0218 	add.w	r2, r7, #24
     6ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
     6d2:	4618      	mov	r0, r3
     6d4:	f000 f979 	bl	9ca <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6d8:	e9d7 3400 	ldrd	r3, r4, [r7]
     6dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     6e0:	2301      	movs	r3, #1
     6e2:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     6e4:	4b0f      	ldr	r3, [pc, #60]	; (724 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
     6ec:	4610      	mov	r0, r2
     6ee:	4798      	blx	r3
     6f0:	f107 0210 	add.w	r2, r7, #16
     6f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
     6f8:	4611      	mov	r1, r2
     6fa:	4618      	mov	r0, r3
     6fc:	f000 f992 	bl	a24 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     700:	4603      	mov	r3, r0
     702:	2b00      	cmp	r3, #0
     704:	d009      	beq.n	71a <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     706:	f107 0324 	add.w	r3, r7, #36	; 0x24
     70a:	4618      	mov	r0, r3
     70c:	f7ff ffa2 	bl	654 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     710:	4603      	mov	r3, r0
     712:	2b00      	cmp	r3, #0
     714:	d0e6      	beq.n	6e4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     716:	2300      	movs	r3, #0
     718:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     71c:	4618      	mov	r0, r3
     71e:	374c      	adds	r7, #76	; 0x4c
     720:	46bd      	mov	sp, r7
     722:	bd90      	pop	{r4, r7, pc}
     724:	10000000 	.word	0x10000000

00000728 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     732:	e9d7 0100 	ldrd	r0, r1, [r7]
     736:	f7ff ffa1 	bl	67c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     73a:	bf00      	nop
     73c:	3708      	adds	r7, #8
     73e:	46bd      	mov	sp, r7
     740:	bd80      	pop	{r7, pc}

00000742 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
     742:	b580      	push	{r7, lr}
     744:	b082      	sub	sp, #8
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	4618      	mov	r0, r3
     74e:	f000 f805 	bl	75c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>
     752:	6878      	ldr	r0, [r7, #4]
     754:	3708      	adds	r7, #8
     756:	46bd      	mov	sp, r7
     758:	bd80      	pop	{r7, pc}
     75a:	Address 0x000000000000075a is out of bounds.


0000075c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
     75c:	b580      	push	{r7, lr}
     75e:	b082      	sub	sp, #8
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     764:	4903      	ldr	r1, [pc, #12]	; (774 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()+0x18>)
     766:	6878      	ldr	r0, [r7, #4]
     768:	f000 f806 	bl	778 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
     76c:	6878      	ldr	r0, [r7, #4]
     76e:	3708      	adds	r7, #8
     770:	46bd      	mov	sp, r7
     772:	bd80      	pop	{r7, pc}
     774:	00005960 	.word	0x00005960

00000778 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     778:	b490      	push	{r4, r7}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
     77e:	6078      	str	r0, [r7, #4]
     780:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     782:	683b      	ldr	r3, [r7, #0]
     784:	e9d3 3400 	ldrd	r3, r4, [r3]
     788:	687a      	ldr	r2, [r7, #4]
     78a:	e9c2 3400 	strd	r3, r4, [r2]
     78e:	687b      	ldr	r3, [r7, #4]
     790:	4618      	mov	r0, r3
     792:	3708      	adds	r7, #8
     794:	46bd      	mov	sp, r7
     796:	bc90      	pop	{r4, r7}
     798:	4770      	bx	lr

0000079a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     79a:	b580      	push	{r7, lr}
     79c:	b082      	sub	sp, #8
     79e:	af00      	add	r7, sp, #0
     7a0:	6078      	str	r0, [r7, #4]
     7a2:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	6839      	ldr	r1, [r7, #0]
     7a8:	4618      	mov	r0, r3
     7aa:	f000 f811 	bl	7d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
     7ae:	6878      	ldr	r0, [r7, #4]
     7b0:	3708      	adds	r7, #8
     7b2:	46bd      	mov	sp, r7
     7b4:	bd80      	pop	{r7, pc}

000007b6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
     7b6:	b490      	push	{r4, r7}
     7b8:	b082      	sub	sp, #8
     7ba:	af00      	add	r7, sp, #0
     7bc:	6078      	str	r0, [r7, #4]
	{ return __r; }
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	e9d3 3400 	ldrd	r3, r4, [r3]
     7c4:	4618      	mov	r0, r3
     7c6:	4621      	mov	r1, r4
     7c8:	3708      	adds	r7, #8
     7ca:	46bd      	mov	sp, r7
     7cc:	bc90      	pop	{r4, r7}
     7ce:	4770      	bx	lr

000007d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	b085      	sub	sp, #20
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     7da:	6838      	ldr	r0, [r7, #0]
     7dc:	f7ff ffeb 	bl	7b6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
     7e0:	4605      	mov	r5, r0
     7e2:	460e      	mov	r6, r1
     7e4:	462b      	mov	r3, r5
     7e6:	4634      	mov	r4, r6
     7e8:	f04f 0100 	mov.w	r1, #0
     7ec:	f04f 0200 	mov.w	r2, #0
     7f0:	0162      	lsls	r2, r4, #5
     7f2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     7f6:	0159      	lsls	r1, r3, #5
     7f8:	460b      	mov	r3, r1
     7fa:	4614      	mov	r4, r2
     7fc:	1b5b      	subs	r3, r3, r5
     7fe:	eb64 0406 	sbc.w	r4, r4, r6
     802:	f04f 0100 	mov.w	r1, #0
     806:	f04f 0200 	mov.w	r2, #0
     80a:	00a2      	lsls	r2, r4, #2
     80c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     810:	0099      	lsls	r1, r3, #2
     812:	460b      	mov	r3, r1
     814:	4614      	mov	r4, r2
     816:	195b      	adds	r3, r3, r5
     818:	eb44 0406 	adc.w	r4, r4, r6
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f04f 0200 	mov.w	r2, #0
     824:	00e2      	lsls	r2, r4, #3
     826:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
     82a:	00d9      	lsls	r1, r3, #3
     82c:	460b      	mov	r3, r1
     82e:	4614      	mov	r4, r2
     830:	e9c7 3402 	strd	r3, r4, [r7, #8]
     834:	f107 0308 	add.w	r3, r7, #8
     838:	4619      	mov	r1, r3
     83a:	6878      	ldr	r0, [r7, #4]
     83c:	f7ff fee9 	bl	612 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     840:	6878      	ldr	r0, [r7, #4]
     842:	3714      	adds	r7, #20
     844:	46bd      	mov	sp, r7
     846:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000848 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     848:	b590      	push	{r4, r7, lr}
     84a:	b085      	sub	sp, #20
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
     850:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     852:	f107 0308 	add.w	r3, r7, #8
     856:	6839      	ldr	r1, [r7, #0]
     858:	4618      	mov	r0, r3
     85a:	f7ff ff9e 	bl	79a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     85e:	f107 0308 	add.w	r3, r7, #8
     862:	4618      	mov	r0, r3
     864:	f000 f80a 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     868:	4603      	mov	r3, r0
     86a:	460c      	mov	r4, r1
     86c:	687a      	ldr	r2, [r7, #4]
     86e:	e9c2 3400 	strd	r3, r4, [r2]
     872:	687b      	ldr	r3, [r7, #4]
     874:	4618      	mov	r0, r3
     876:	3714      	adds	r7, #20
     878:	46bd      	mov	sp, r7
     87a:	bd90      	pop	{r4, r7, pc}

0000087c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
     87c:	b490      	push	{r4, r7}
     87e:	b082      	sub	sp, #8
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
	{ return __r; }
     884:	687b      	ldr	r3, [r7, #4]
     886:	e9d3 3400 	ldrd	r3, r4, [r3]
     88a:	4618      	mov	r0, r3
     88c:	4621      	mov	r1, r4
     88e:	3708      	adds	r7, #8
     890:	46bd      	mov	sp, r7
     892:	bc90      	pop	{r4, r7}
     894:	4770      	bx	lr
     896:	Address 0x0000000000000896 is out of bounds.


00000898 <main>:

using namespace sjsu;


int main(void)
{
     898:	b580      	push	{r7, lr}
     89a:	b086      	sub	sp, #24
     89c:	af00      	add	r7, sp, #0
  
  LabGPIO gpioTest(2,1);
     89e:	463b      	mov	r3, r7
     8a0:	2201      	movs	r2, #1
     8a2:	2102      	movs	r1, #2
     8a4:	4618      	mov	r0, r3
     8a6:	f7ff fd71 	bl	38c <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>

  gpioTest.SetDirection(sjsu::Gpio::kInput);
     8aa:	463b      	mov	r3, r7
     8ac:	2100      	movs	r1, #0
     8ae:	4618      	mov	r0, r3
     8b0:	f7ff fd88 	bl	3c4 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>

  lpc17xx::LPC_GPIO0->FIODIR |= (1 << 3);
     8b4:	4b11      	ldr	r3, [pc, #68]	; (8fc <main+0x64>)
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	4a10      	ldr	r2, [pc, #64]	; (8fc <main+0x64>)
     8ba:	f043 0308 	orr.w	r3, r3, #8
     8be:	6013      	str	r3, [r2, #0]
  lpc17xx::LPC_GPIO0->FIOSET |= (1 << 3);
     8c0:	4b0e      	ldr	r3, [pc, #56]	; (8fc <main+0x64>)
     8c2:	699b      	ldr	r3, [r3, #24]
     8c4:	4a0d      	ldr	r2, [pc, #52]	; (8fc <main+0x64>)
     8c6:	f043 0308 	orr.w	r3, r3, #8
     8ca:	6193      	str	r3, [r2, #24]



  while(1)
  {
    LOG_INFO("Hello World\n");
     8cc:	2318      	movs	r3, #24
     8ce:	4a0c      	ldr	r2, [pc, #48]	; (900 <main+0x68>)
     8d0:	490c      	ldr	r1, [pc, #48]	; (904 <main+0x6c>)
     8d2:	480d      	ldr	r0, [pc, #52]	; (908 <main+0x70>)
     8d4:	f001 fd62 	bl	239c <printf>
    sjsu::Delay(500ms);
     8d8:	f107 0310 	add.w	r3, r7, #16
     8dc:	4618      	mov	r0, r3
     8de:	f7ff ff30 	bl	742 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>
     8e2:	f107 0210 	add.w	r2, r7, #16
     8e6:	f107 0308 	add.w	r3, r7, #8
     8ea:	4611      	mov	r1, r2
     8ec:	4618      	mov	r0, r3
     8ee:	f7ff ffab 	bl	848 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     8f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8f6:	f7ff ff17 	bl	728 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
     8fa:	e7e7      	b.n	8cc <main+0x34>
     8fc:	2009c000 	.word	0x2009c000
     900:	000059b0 	.word	0x000059b0
     904:	00005954 	.word	0x00005954
     908:	00005968 	.word	0x00005968

0000090c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
     90c:	b590      	push	{r4, r7, lr}
     90e:	b087      	sub	sp, #28
     910:	af00      	add	r7, sp, #0
     912:	60f8      	str	r0, [r7, #12]
     914:	60b9      	str	r1, [r7, #8]
     916:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
     918:	68bb      	ldr	r3, [r7, #8]
     91a:	e9d3 3400 	ldrd	r3, r4, [r3]
     91e:	1c59      	adds	r1, r3, #1
     920:	f144 0200 	adc.w	r2, r4, #0
     924:	68b8      	ldr	r0, [r7, #8]
     926:	e9c0 1200 	strd	r1, r2, [r0]
     92a:	e9c7 3404 	strd	r3, r4, [r7, #16]
     92e:	f107 0310 	add.w	r3, r7, #16
     932:	4619      	mov	r1, r3
     934:	68f8      	ldr	r0, [r7, #12]
     936:	f7ff fe6c 	bl	612 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     93a:	68f8      	ldr	r0, [r7, #12]
     93c:	371c      	adds	r7, #28
     93e:	46bd      	mov	sp, r7
     940:	bd90      	pop	{r4, r7, pc}

00000942 <std::chrono::duration_values<long long>::max()>:
	max()
     942:	b598      	push	{r3, r4, r7, lr}
     944:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
     946:	f7ff fe59 	bl	5fc <std::numeric_limits<long long>::max()>
     94a:	4603      	mov	r3, r0
     94c:	460c      	mov	r4, r1
     94e:	4618      	mov	r0, r3
     950:	4621      	mov	r1, r4
     952:	bd98      	pop	{r3, r4, r7, pc}

00000954 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
     954:	b590      	push	{r4, r7, lr}
     956:	b085      	sub	sp, #20
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
     95c:	f7ff fff1 	bl	942 <std::chrono::duration_values<long long>::max()>
     960:	4603      	mov	r3, r0
     962:	460c      	mov	r4, r1
     964:	e9c7 3402 	strd	r3, r4, [r7, #8]
     968:	f107 0308 	add.w	r3, r7, #8
     96c:	4619      	mov	r1, r3
     96e:	6878      	ldr	r0, [r7, #4]
     970:	f7ff fe4f 	bl	612 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     974:	6878      	ldr	r0, [r7, #4]
     976:	3714      	adds	r7, #20
     978:	46bd      	mov	sp, r7
     97a:	bd90      	pop	{r4, r7, pc}

0000097c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
     97c:	b5f0      	push	{r4, r5, r6, r7, lr}
     97e:	b087      	sub	sp, #28
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
     984:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
     986:	687b      	ldr	r3, [r7, #4]
     988:	e9d3 3400 	ldrd	r3, r4, [r3]
     98c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     990:	f107 0308 	add.w	r3, r7, #8
     994:	4618      	mov	r0, r3
     996:	f7ff ff71 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     99a:	4605      	mov	r5, r0
     99c:	460e      	mov	r6, r1
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	e9d3 3400 	ldrd	r3, r4, [r3]
     9a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
     9a8:	f107 0310 	add.w	r3, r7, #16
     9ac:	4618      	mov	r0, r3
     9ae:	f7ff ff65 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     9b2:	4603      	mov	r3, r0
     9b4:	460c      	mov	r4, r1
     9b6:	42a6      	cmp	r6, r4
     9b8:	bf06      	itte	eq
     9ba:	429d      	cmpeq	r5, r3
     9bc:	2301      	moveq	r3, #1
     9be:	2300      	movne	r3, #0
     9c0:	b2db      	uxtb	r3, r3
      }
     9c2:	4618      	mov	r0, r3
     9c4:	371c      	adds	r7, #28
     9c6:	46bd      	mov	sp, r7
     9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000009ca <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
     9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
     9cc:	b08b      	sub	sp, #44	; 0x2c
     9ce:	af00      	add	r7, sp, #0
     9d0:	60f8      	str	r0, [r7, #12]
     9d2:	60b9      	str	r1, [r7, #8]
     9d4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
     9d6:	68bb      	ldr	r3, [r7, #8]
     9d8:	e9d3 3400 	ldrd	r3, r4, [r3]
     9dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
     9e0:	f107 0318 	add.w	r3, r7, #24
     9e4:	4618      	mov	r0, r3
     9e6:	f7ff ff49 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     9ea:	4605      	mov	r5, r0
     9ec:	460e      	mov	r6, r1
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	e9d3 3400 	ldrd	r3, r4, [r3]
     9f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
     9f8:	f107 0320 	add.w	r3, r7, #32
     9fc:	4618      	mov	r0, r3
     9fe:	f7ff ff3d 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     a02:	460a      	mov	r2, r1
     a04:	4601      	mov	r1, r0
     a06:	194b      	adds	r3, r1, r5
     a08:	eb42 0406 	adc.w	r4, r2, r6
     a0c:	e9c7 3404 	strd	r3, r4, [r7, #16]
     a10:	f107 0310 	add.w	r3, r7, #16
     a14:	4619      	mov	r1, r3
     a16:	68f8      	ldr	r0, [r7, #12]
     a18:	f7ff fdfb 	bl	612 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
     a1c:	68f8      	ldr	r0, [r7, #12]
     a1e:	372c      	adds	r7, #44	; 0x2c
     a20:	46bd      	mov	sp, r7
     a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a24 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
     a24:	b5f0      	push	{r4, r5, r6, r7, lr}
     a26:	b087      	sub	sp, #28
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
     a2c:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	e9d3 3400 	ldrd	r3, r4, [r3]
     a34:	e9c7 3402 	strd	r3, r4, [r7, #8]
     a38:	f107 0308 	add.w	r3, r7, #8
     a3c:	4618      	mov	r0, r3
     a3e:	f7ff ff1d 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     a42:	4605      	mov	r5, r0
     a44:	460e      	mov	r6, r1
     a46:	683b      	ldr	r3, [r7, #0]
     a48:	e9d3 3400 	ldrd	r3, r4, [r3]
     a4c:	e9c7 3404 	strd	r3, r4, [r7, #16]
     a50:	f107 0310 	add.w	r3, r7, #16
     a54:	4618      	mov	r0, r3
     a56:	f7ff ff11 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     a5a:	4603      	mov	r3, r0
     a5c:	460c      	mov	r4, r1
     a5e:	429d      	cmp	r5, r3
     a60:	eb76 0304 	sbcs.w	r3, r6, r4
     a64:	bfb4      	ite	lt
     a66:	2301      	movlt	r3, #1
     a68:	2300      	movge	r3, #0
     a6a:	b2db      	uxtb	r3, r3
      }
     a6c:	4618      	mov	r0, r3
     a6e:	371c      	adds	r7, #28
     a70:	46bd      	mov	sp, r7
     a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a74 <__static_initialization_and_destruction_0(int, int)>:
  while(true)
  {
    // Logic to read if button has been RELEASED and if so, TOGGLE LED state;
  }
  return 0;
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	6039      	str	r1, [r7, #0]
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	2b01      	cmp	r3, #1
     a82:	d110      	bne.n	aa6 <__static_initialization_and_destruction_0(int, int)+0x32>
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
     a8a:	4293      	cmp	r3, r2
     a8c:	d10b      	bne.n	aa6 <__static_initialization_and_destruction_0(int, int)+0x32>
     a8e:	4b09      	ldr	r3, [pc, #36]	; (ab4 <__static_initialization_and_destruction_0(int, int)+0x40>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	f003 0301 	and.w	r3, r3, #1
     a96:	2b00      	cmp	r3, #0
     a98:	d105      	bne.n	aa6 <__static_initialization_and_destruction_0(int, int)+0x32>
     a9a:	4b06      	ldr	r3, [pc, #24]	; (ab4 <__static_initialization_and_destruction_0(int, int)+0x40>)
     a9c:	2201      	movs	r2, #1
     a9e:	601a      	str	r2, [r3, #0]
     aa0:	4a05      	ldr	r2, [pc, #20]	; (ab8 <__static_initialization_and_destruction_0(int, int)+0x44>)
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <__static_initialization_and_destruction_0(int, int)+0x48>)
     aa4:	601a      	str	r2, [r3, #0]
     aa6:	bf00      	nop
     aa8:	370c      	adds	r7, #12
     aaa:	46bd      	mov	sp, r7
     aac:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab0:	4770      	bx	lr
     ab2:	bf00      	nop
     ab4:	10000100 	.word	0x10000100
     ab8:	4002c000 	.word	0x4002c000
     abc:	100000fc 	.word	0x100000fc

00000ac0 <_GLOBAL__sub_I_main>:
     ac0:	b580      	push	{r7, lr}
     ac2:	af00      	add	r7, sp, #0
     ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     ac8:	2001      	movs	r0, #1
     aca:	f7ff ffd3 	bl	a74 <__static_initialization_and_destruction_0(int, int)>
     ace:	bd80      	pop	{r7, pc}

00000ad0 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     ad0:	b580      	push	{r7, lr}
     ad2:	b086      	sub	sp, #24
     ad4:	af02      	add	r7, sp, #8
     ad6:	6078      	str	r0, [r7, #4]
     ad8:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     ada:	683a      	ldr	r2, [r7, #0]
     adc:	f107 030c 	add.w	r3, r7, #12
     ae0:	9300      	str	r3, [sp, #0]
     ae2:	2300      	movs	r3, #0
     ae4:	2100      	movs	r1, #0
     ae6:	6878      	ldr	r0, [r7, #4]
     ae8:	f004 f8c0 	bl	4c6c <_Unwind_VRS_Get>
      return val;
     aec:	68fb      	ldr	r3, [r7, #12]
    }
     aee:	4618      	mov	r0, r3
     af0:	3710      	adds	r7, #16
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	Address 0x0000000000000af6 is out of bounds.


00000af8 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     af8:	b480      	push	{r7}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     b00:	4b0a      	ldr	r3, [pc, #40]	; (b2c <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     b02:	60fb      	str	r3, [r7, #12]
  switch (target)
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	2b00      	cmp	r3, #0
     b08:	d002      	beq.n	b10 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     b0a:	2b01      	cmp	r3, #1
     b0c:	d003      	beq.n	b16 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     b0e:	e005      	b.n	b1c <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     b10:	4b07      	ldr	r3, [pc, #28]	; (b30 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     b12:	60fb      	str	r3, [r7, #12]
     b14:	e002      	b.n	b1c <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     b16:	4b07      	ldr	r3, [pc, #28]	; (b34 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     b18:	60fb      	str	r3, [r7, #12]
     b1a:	bf00      	nop
  }
  return result;
     b1c:	68fb      	ldr	r3, [r7, #12]
}
     b1e:	4618      	mov	r0, r3
     b20:	3714      	adds	r7, #20
     b22:	46bd      	mov	sp, r7
     b24:	f85d 7b04 	ldr.w	r7, [sp], #4
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	000059bc 	.word	0x000059bc
     b30:	000059c4 	.word	0x000059c4
     b34:	000059d0 	.word	0x000059d0

00000b38 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
     b40:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     b42:	683b      	ldr	r3, [r7, #0]
     b44:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     b46:	210f      	movs	r1, #15
     b48:	6878      	ldr	r0, [r7, #4]
     b4a:	f7ff ffc1 	bl	ad0 <_Unwind_GetGR>
     b4e:	4603      	mov	r3, r0
     b50:	f023 0301 	bic.w	r3, r3, #1
     b54:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	6819      	ldr	r1, [r3, #0]
     b5a:	68bb      	ldr	r3, [r7, #8]
     b5c:	3b04      	subs	r3, #4
     b5e:	461a      	mov	r2, r3
     b60:	4806      	ldr	r0, [pc, #24]	; (b7c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     b62:	f001 fc1b 	bl	239c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     b66:	68fb      	ldr	r3, [r7, #12]
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	1c5a      	adds	r2, r3, #1
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     b70:	2300      	movs	r3, #0
}
     b72:	4618      	mov	r0, r3
     b74:	3710      	adds	r7, #16
     b76:	46bd      	mov	sp, r7
     b78:	bd80      	pop	{r7, pc}
     b7a:	bf00      	nop
     b7c:	000059dc 	.word	0x000059dc

00000b80 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     b80:	b580      	push	{r7, lr}
     b82:	b084      	sub	sp, #16
     b84:	af00      	add	r7, sp, #0
     b86:	6078      	str	r0, [r7, #4]
     b88:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     b8a:	683b      	ldr	r3, [r7, #0]
     b8c:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     b8e:	210f      	movs	r1, #15
     b90:	6878      	ldr	r0, [r7, #4]
     b92:	f7ff ff9d 	bl	ad0 <_Unwind_GetGR>
     b96:	4603      	mov	r3, r0
     b98:	f023 0301 	bic.w	r3, r3, #1
     b9c:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     b9e:	68bb      	ldr	r3, [r7, #8]
     ba0:	3b04      	subs	r3, #4
     ba2:	4619      	mov	r1, r3
     ba4:	4806      	ldr	r0, [pc, #24]	; (bc0 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     ba6:	f001 fbf9 	bl	239c <printf>
  (*depth)++;
     baa:	68fb      	ldr	r3, [r7, #12]
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	1c5a      	adds	r2, r3, #1
     bb0:	68fb      	ldr	r3, [r7, #12]
     bb2:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     bb4:	2300      	movs	r3, #0
}
     bb6:	4618      	mov	r0, r3
     bb8:	3710      	adds	r7, #16
     bba:	46bd      	mov	sp, r7
     bbc:	bd80      	pop	{r7, pc}
     bbe:	bf00      	nop
     bc0:	000059ec 	.word	0x000059ec

00000bc4 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	4603      	mov	r3, r0
     bcc:	6039      	str	r1, [r7, #0]
     bce:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     bd0:	2300      	movs	r3, #0
     bd2:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     bd4:	f107 030c 	add.w	r3, r7, #12
     bd8:	4619      	mov	r1, r3
     bda:	481a      	ldr	r0, [pc, #104]	; (c44 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     bdc:	f004 fc38 	bl	5450 <_Unwind_Backtrace>
    if (final_address)
     be0:	683b      	ldr	r3, [r7, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d005      	beq.n	bf2 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     be6:	68fb      	ldr	r3, [r7, #12]
     be8:	683a      	ldr	r2, [r7, #0]
     bea:	4619      	mov	r1, r3
     bec:	4816      	ldr	r0, [pc, #88]	; (c48 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     bee:	f001 fbd5 	bl	239c <printf>
    }

    if (show_make_command)
     bf2:	79fb      	ldrb	r3, [r7, #7]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d020      	beq.n	c3a <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     bf8:	4814      	ldr	r0, [pc, #80]	; (c4c <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     bfa:	f001 fbcf 	bl	239c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     bfe:	4814      	ldr	r0, [pc, #80]	; (c50 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     c00:	f001 fbcc 	bl	239c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     c04:	2000      	movs	r0, #0
     c06:	f7ff ff77 	bl	af8 <sjsu::build::Stringify(sjsu::build::Target)>
     c0a:	4603      	mov	r3, r0
     c0c:	4619      	mov	r1, r3
     c0e:	4811      	ldr	r0, [pc, #68]	; (c54 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     c10:	f001 fbc4 	bl	239c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     c14:	f107 030c 	add.w	r3, r7, #12
     c18:	4619      	mov	r1, r3
     c1a:	480f      	ldr	r0, [pc, #60]	; (c58 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     c1c:	f004 fc18 	bl	5450 <_Unwind_Backtrace>
      if (final_address)
     c20:	683b      	ldr	r3, [r7, #0]
     c22:	2b00      	cmp	r3, #0
     c24:	d003      	beq.n	c2e <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     c26:	6839      	ldr	r1, [r7, #0]
     c28:	480c      	ldr	r0, [pc, #48]	; (c5c <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     c2a:	f001 fbb7 	bl	239c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     c2e:	480c      	ldr	r0, [pc, #48]	; (c60 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     c30:	f001 fbb4 	bl	239c <printf>
      printf(
     c34:	480b      	ldr	r0, [pc, #44]	; (c64 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     c36:	f000 fa6d 	bl	1114 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     c3a:	bf00      	nop
     c3c:	3710      	adds	r7, #16
     c3e:	46bd      	mov	sp, r7
     c40:	bd80      	pop	{r7, pc}
     c42:	bf00      	nop
     c44:	00000b39 	.word	0x00000b39
     c48:	000059f4 	.word	0x000059f4
     c4c:	00005a00 	.word	0x00005a00
     c50:	00005a38 	.word	0x00005a38
     c54:	00005a44 	.word	0x00005a44
     c58:	00000b81 	.word	0x00000b81
     c5c:	00005a60 	.word	0x00005a60
     c60:	00005a68 	.word	0x00005a68
     c64:	00005a70 	.word	0x00005a70

00000c68 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
     c68:	b480      	push	{r7}
     c6a:	b087      	sub	sp, #28
     c6c:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
     c6e:	2300      	movs	r3, #0
     c70:	617b      	str	r3, [r7, #20]
     c72:	697a      	ldr	r2, [r7, #20]
     c74:	4613      	mov	r3, r2
     c76:	005b      	lsls	r3, r3, #1
     c78:	4413      	add	r3, r2
     c7a:	009b      	lsls	r3, r3, #2
     c7c:	4a1f      	ldr	r2, [pc, #124]	; (cfc <sjsu::InitializeDataSection()+0x94>)
     c7e:	4413      	add	r3, r2
     c80:	4a1f      	ldr	r2, [pc, #124]	; (d00 <sjsu::InitializeDataSection()+0x98>)
     c82:	4293      	cmp	r3, r2
     c84:	d233      	bcs.n	cee <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
     c86:	491d      	ldr	r1, [pc, #116]	; (cfc <sjsu::InitializeDataSection()+0x94>)
     c88:	697a      	ldr	r2, [r7, #20]
     c8a:	4613      	mov	r3, r2
     c8c:	005b      	lsls	r3, r3, #1
     c8e:	4413      	add	r3, r2
     c90:	009b      	lsls	r3, r3, #2
     c92:	440b      	add	r3, r1
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
     c98:	4918      	ldr	r1, [pc, #96]	; (cfc <sjsu::InitializeDataSection()+0x94>)
     c9a:	697a      	ldr	r2, [r7, #20]
     c9c:	4613      	mov	r3, r2
     c9e:	005b      	lsls	r3, r3, #1
     ca0:	4413      	add	r3, r2
     ca2:	009b      	lsls	r3, r3, #2
     ca4:	440b      	add	r3, r1
     ca6:	685b      	ldr	r3, [r3, #4]
     ca8:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
     caa:	4914      	ldr	r1, [pc, #80]	; (cfc <sjsu::InitializeDataSection()+0x94>)
     cac:	697a      	ldr	r2, [r7, #20]
     cae:	4613      	mov	r3, r2
     cb0:	005b      	lsls	r3, r3, #1
     cb2:	4413      	add	r3, r2
     cb4:	009b      	lsls	r3, r3, #2
     cb6:	440b      	add	r3, r1
     cb8:	3308      	adds	r3, #8
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
     cbe:	2300      	movs	r3, #0
     cc0:	613b      	str	r3, [r7, #16]
     cc2:	693a      	ldr	r2, [r7, #16]
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	429a      	cmp	r2, r3
     cc8:	d20d      	bcs.n	ce6 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
     cca:	693b      	ldr	r3, [r7, #16]
     ccc:	009b      	lsls	r3, r3, #2
     cce:	68fa      	ldr	r2, [r7, #12]
     cd0:	441a      	add	r2, r3
     cd2:	693b      	ldr	r3, [r7, #16]
     cd4:	009b      	lsls	r3, r3, #2
     cd6:	68b9      	ldr	r1, [r7, #8]
     cd8:	440b      	add	r3, r1
     cda:	6812      	ldr	r2, [r2, #0]
     cdc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
     cde:	693b      	ldr	r3, [r7, #16]
     ce0:	3301      	adds	r3, #1
     ce2:	613b      	str	r3, [r7, #16]
     ce4:	e7ed      	b.n	cc2 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
     ce6:	697b      	ldr	r3, [r7, #20]
     ce8:	3301      	adds	r3, #1
     cea:	617b      	str	r3, [r7, #20]
     cec:	e7c1      	b.n	c72 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
     cee:	bf00      	nop
     cf0:	371c      	adds	r7, #28
     cf2:	46bd      	mov	sp, r7
     cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf8:	4770      	bx	lr
     cfa:	bf00      	nop
     cfc:	000000e4 	.word	0x000000e4
     d00:	000000fc 	.word	0x000000fc

00000d04 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
     d04:	b480      	push	{r7}
     d06:	b085      	sub	sp, #20
     d08:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
     d0a:	2300      	movs	r3, #0
     d0c:	60fb      	str	r3, [r7, #12]
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	00db      	lsls	r3, r3, #3
     d12:	4a15      	ldr	r2, [pc, #84]	; (d68 <sjsu::InitializeBssSection()+0x64>)
     d14:	4413      	add	r3, r2
     d16:	4a15      	ldr	r2, [pc, #84]	; (d6c <sjsu::InitializeBssSection()+0x68>)
     d18:	4293      	cmp	r3, r2
     d1a:	d21e      	bcs.n	d5a <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
     d1c:	4a12      	ldr	r2, [pc, #72]	; (d68 <sjsu::InitializeBssSection()+0x64>)
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     d24:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
     d26:	4a10      	ldr	r2, [pc, #64]	; (d68 <sjsu::InitializeBssSection()+0x64>)
     d28:	68fb      	ldr	r3, [r7, #12]
     d2a:	00db      	lsls	r3, r3, #3
     d2c:	4413      	add	r3, r2
     d2e:	685b      	ldr	r3, [r3, #4]
     d30:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
     d32:	2300      	movs	r3, #0
     d34:	60bb      	str	r3, [r7, #8]
     d36:	68ba      	ldr	r2, [r7, #8]
     d38:	683b      	ldr	r3, [r7, #0]
     d3a:	429a      	cmp	r2, r3
     d3c:	d209      	bcs.n	d52 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
     d3e:	68bb      	ldr	r3, [r7, #8]
     d40:	009b      	lsls	r3, r3, #2
     d42:	687a      	ldr	r2, [r7, #4]
     d44:	4413      	add	r3, r2
     d46:	2200      	movs	r2, #0
     d48:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
     d4a:	68bb      	ldr	r3, [r7, #8]
     d4c:	3301      	adds	r3, #1
     d4e:	60bb      	str	r3, [r7, #8]
     d50:	e7f1      	b.n	d36 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
     d52:	68fb      	ldr	r3, [r7, #12]
     d54:	3301      	adds	r3, #1
     d56:	60fb      	str	r3, [r7, #12]
     d58:	e7d9      	b.n	d0e <sjsu::InitializeBssSection()+0xa>
    }
  }
}
     d5a:	bf00      	nop
     d5c:	3714      	adds	r7, #20
     d5e:	46bd      	mov	sp, r7
     d60:	f85d 7b04 	ldr.w	r7, [sp], #4
     d64:	4770      	bx	lr
     d66:	bf00      	nop
     d68:	000000fc 	.word	0x000000fc
     d6c:	0000010c 	.word	0x0000010c

00000d70 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
     d70:	b580      	push	{r7, lr}
     d72:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
     d74:	f7ff ff78 	bl	c68 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
     d78:	f7ff ffc4 	bl	d04 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
     d7c:	f004 fd3e 	bl	57fc <__libc_init_array>
}
     d80:	bf00      	nop
     d82:	bd80      	pop	{r7, pc}

00000d84 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     d84:	b480      	push	{r7}
     d86:	b083      	sub	sp, #12
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	f003 021f 	and.w	r2, r3, #31
     d92:	4907      	ldr	r1, [pc, #28]	; (db0 <NVIC_DisableIRQ+0x2c>)
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	095b      	lsrs	r3, r3, #5
     d98:	2001      	movs	r0, #1
     d9a:	fa00 f202 	lsl.w	r2, r0, r2
     d9e:	3320      	adds	r3, #32
     da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     da4:	bf00      	nop
     da6:	370c      	adds	r7, #12
     da8:	46bd      	mov	sp, r7
     daa:	f85d 7b04 	ldr.w	r7, [sp], #4
     dae:	4770      	bx	lr
     db0:	e000e100 	.word	0xe000e100

00000db4 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     db4:	b480      	push	{r7}
     db6:	af00      	add	r7, sp, #0
     db8:	bf00      	nop
     dba:	46bd      	mov	sp, r7
     dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
     dc0:	4770      	bx	lr
     dc2:	Address 0x0000000000000dc2 is out of bounds.


00000dc4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     dc4:	b580      	push	{r7, lr}
     dc6:	b082      	sub	sp, #8
     dc8:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     dca:	4b09      	ldr	r3, [pc, #36]	; (df0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	9300      	str	r3, [sp, #0]
     dd0:	231d      	movs	r3, #29
     dd2:	4a08      	ldr	r2, [pc, #32]	; (df4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     dd4:	4908      	ldr	r1, [pc, #32]	; (df8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     dd6:	4809      	ldr	r0, [pc, #36]	; (dfc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     dd8:	f001 fae0 	bl	239c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     ddc:	4b04      	ldr	r3, [pc, #16]	; (df0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	3b10      	subs	r3, #16
     de2:	4618      	mov	r0, r3
     de4:	f7ff ffce 	bl	d84 <NVIC_DisableIRQ>
  }
     de8:	bf00      	nop
     dea:	46bd      	mov	sp, r7
     dec:	bd80      	pop	{r7, pc}
     dee:	bf00      	nop
     df0:	10000004 	.word	0x10000004
     df4:	00006160 	.word	0x00006160
     df8:	00006150 	.word	0x00006150
     dfc:	00005fd0 	.word	0x00005fd0

00000e00 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     e00:	b480      	push	{r7}
     e02:	b083      	sub	sp, #12
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     e08:	2340      	movs	r3, #64	; 0x40
     e0a:	4618      	mov	r0, r3
     e0c:	370c      	adds	r7, #12
     e0e:	46bd      	mov	sp, r7
     e10:	f85d 7b04 	ldr.w	r7, [sp], #4
     e14:	4770      	bx	lr
     e16:	Address 0x0000000000000e16 is out of bounds.


00000e18 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     e18:	b580      	push	{r7, lr}
     e1a:	b084      	sub	sp, #16
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	4618      	mov	r0, r3
     e24:	f44f 7380 	mov.w	r3, #256	; 0x100
     e28:	461a      	mov	r2, r3
     e2a:	2100      	movs	r1, #0
     e2c:	f004 fd15 	bl	585a <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     e30:	2300      	movs	r3, #0
     e32:	60fb      	str	r3, [r7, #12]
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	2b0f      	cmp	r3, #15
     e38:	d808      	bhi.n	e4c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	68fa      	ldr	r2, [r7, #12]
     e3e:	4911      	ldr	r1, [pc, #68]	; (e84 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	3301      	adds	r3, #1
     e48:	60fb      	str	r3, [r7, #12]
     e4a:	e7f3      	b.n	e34 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     e4c:	2310      	movs	r3, #16
     e4e:	60bb      	str	r3, [r7, #8]
     e50:	6878      	ldr	r0, [r7, #4]
     e52:	f7ff ffd5 	bl	e00 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     e56:	4602      	mov	r2, r0
     e58:	68bb      	ldr	r3, [r7, #8]
     e5a:	4293      	cmp	r3, r2
     e5c:	bf34      	ite	cc
     e5e:	2301      	movcc	r3, #1
     e60:	2300      	movcs	r3, #0
     e62:	b2db      	uxtb	r3, r3
     e64:	2b00      	cmp	r3, #0
     e66:	d008      	beq.n	e7a <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	68ba      	ldr	r2, [r7, #8]
     e6c:	4906      	ldr	r1, [pc, #24]	; (e88 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	3301      	adds	r3, #1
     e76:	60bb      	str	r3, [r7, #8]
     e78:	e7ea      	b.n	e50 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     e7a:	bf00      	nop
    }
     e7c:	6878      	ldr	r0, [r7, #4]
     e7e:	3710      	adds	r7, #16
     e80:	46bd      	mov	sp, r7
     e82:	bd80      	pop	{r7, pc}
     e84:	00000db5 	.word	0x00000db5
     e88:	00000dc5 	.word	0x00000dc5

00000e8c <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
     e8c:	b580      	push	{r7, lr}
     e8e:	b08c      	sub	sp, #48	; 0x30
     e90:	af02      	add	r7, sp, #8
     e92:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
     e94:	687b      	ldr	r3, [r7, #4]
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	685b      	ldr	r3, [r3, #4]
     e9e:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	689b      	ldr	r3, [r3, #8]
     ea4:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	68db      	ldr	r3, [r3, #12]
     eaa:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	691b      	ldr	r3, [r3, #16]
     eb0:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	695b      	ldr	r3, [r3, #20]
     eb6:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	699b      	ldr	r3, [r3, #24]
     ebc:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	69db      	ldr	r3, [r3, #28]
     ec2:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
     ec4:	480d      	ldr	r0, [pc, #52]	; (efc <GetRegistersFromStack+0x70>)
     ec6:	f001 fa69 	bl	239c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
     eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
     ecc:	6a3a      	ldr	r2, [r7, #32]
     ece:	69f8      	ldr	r0, [r7, #28]
     ed0:	69bb      	ldr	r3, [r7, #24]
     ed2:	9300      	str	r3, [sp, #0]
     ed4:	4603      	mov	r3, r0
     ed6:	480a      	ldr	r0, [pc, #40]	; (f00 <GetRegistersFromStack+0x74>)
     ed8:	f001 fa60 	bl	239c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
     edc:	6979      	ldr	r1, [r7, #20]
     ede:	693a      	ldr	r2, [r7, #16]
     ee0:	68f8      	ldr	r0, [r7, #12]
     ee2:	68bb      	ldr	r3, [r7, #8]
     ee4:	9300      	str	r3, [sp, #0]
     ee6:	4603      	mov	r3, r0
     ee8:	4806      	ldr	r0, [pc, #24]	; (f04 <GetRegistersFromStack+0x78>)
     eea:	f001 fa57 	bl	239c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
     eee:	68fb      	ldr	r3, [r7, #12]
     ef0:	4619      	mov	r1, r3
     ef2:	2001      	movs	r0, #1
     ef4:	f7ff fe66 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
     ef8:	e7fe      	b.n	ef8 <GetRegistersFromStack+0x6c>
     efa:	bf00      	nop
     efc:	00006050 	.word	0x00006050
     f00:	0000607c 	.word	0x0000607c
     f04:	000060b0 	.word	0x000060b0

00000f08 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
     f08:	b480      	push	{r7}
     f0a:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
     f0c:	f01e 0f04 	tst.w	lr, #4
     f10:	bf0c      	ite	eq
     f12:	f3ef 8008 	mrseq	r0, MSP
     f16:	f3ef 8009 	mrsne	r0, PSP
     f1a:	6981      	ldr	r1, [r0, #24]
     f1c:	4a00      	ldr	r2, [pc, #0]	; (f20 <handler2_address_const>)
     f1e:	4710      	bx	r2

00000f20 <handler2_address_const>:
     f20:	00000e8d 	.word	0x00000e8d
    }
  }
     f24:	bf00      	nop
     f26:	46bd      	mov	sp, r7
     f28:	f85d 7b04 	ldr.w	r7, [sp], #4
     f2c:	4770      	bx	lr
     f2e:	Address 0x0000000000000f2e is out of bounds.


00000f30 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
     f30:	b580      	push	{r7, lr}
     f32:	b084      	sub	sp, #16
     f34:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
     f36:	4b16      	ldr	r3, [pc, #88]	; (f90 <ArmResetHandler+0x60>)
     f38:	60fb      	str	r3, [r7, #12]
     f3a:	68fb      	ldr	r3, [r7, #12]
     f3c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
     f3e:	683b      	ldr	r3, [r7, #0]
     f40:	f383 8809 	msr	PSP, r3
     f44:	68fb      	ldr	r3, [r7, #12]
     f46:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
     f4e:	f7ff ff0f 	bl	d70 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
     f52:	4b10      	ldr	r3, [pc, #64]	; (f94 <ArmResetHandler+0x64>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	f003 0301 	and.w	r3, r3, #1
     f5a:	2b00      	cmp	r3, #0
     f5c:	bf14      	ite	ne
     f5e:	2301      	movne	r3, #1
     f60:	2300      	moveq	r3, #0
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d001      	beq.n	f6c <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
     f68:	f001 fa3a 	bl	23e0 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
     f6c:	f002 fee0 	bl	3d30 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
     f70:	f7ff fc92 	bl	898 <main>
     f74:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
     f76:	68bb      	ldr	r3, [r7, #8]
     f78:	2b00      	cmp	r3, #0
     f7a:	db04      	blt.n	f86 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
     f7c:	68b9      	ldr	r1, [r7, #8]
     f7e:	4806      	ldr	r0, [pc, #24]	; (f98 <ArmResetHandler+0x68>)
     f80:	f001 fa0c 	bl	239c <printf>
     f84:	e003      	b.n	f8e <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
     f86:	68b9      	ldr	r1, [r7, #8]
     f88:	4804      	ldr	r0, [pc, #16]	; (f9c <ArmResetHandler+0x6c>)
     f8a:	f001 fa07 	bl	239c <printf>
     f8e:	e7fe      	b.n	f8e <ArmResetHandler+0x5e>
     f90:	10010000 	.word	0x10010000
     f94:	e000edf0 	.word	0xe000edf0
     f98:	000060e8 	.word	0x000060e8
     f9c:	0000611c 	.word	0x0000611c

00000fa0 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
     fa0:	b580      	push	{r7, lr}
     fa2:	b082      	sub	sp, #8
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
     fa8:	6039      	str	r1, [r7, #0]
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	2b01      	cmp	r3, #1
     fae:	d111      	bne.n	fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     fb6:	4293      	cmp	r3, r2
     fb8:	d10c      	bne.n	fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
     fba:	4b08      	ldr	r3, [pc, #32]	; (fdc <__static_initialization_and_destruction_0(int, int)+0x3c>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	f003 0301 	and.w	r3, r3, #1
     fc2:	2b00      	cmp	r3, #0
     fc4:	d106      	bne.n	fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <__static_initialization_and_destruction_0(int, int)+0x3c>)
     fc8:	2201      	movs	r2, #1
     fca:	601a      	str	r2, [r3, #0]
     fcc:	4b04      	ldr	r3, [pc, #16]	; (fe0 <__static_initialization_and_destruction_0(int, int)+0x40>)
     fce:	4618      	mov	r0, r3
     fd0:	f7ff ff22 	bl	e18 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
     fd4:	bf00      	nop
     fd6:	3708      	adds	r7, #8
     fd8:	46bd      	mov	sp, r7
     fda:	bd80      	pop	{r7, pc}
     fdc:	10000210 	.word	0x10000210
     fe0:	10000110 	.word	0x10000110

00000fe4 <_GLOBAL__sub_I_GetRegistersFromStack>:
     fe4:	b580      	push	{r7, lr}
     fe6:	af00      	add	r7, sp, #0
     fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     fec:	2001      	movs	r0, #1
     fee:	f7ff ffd7 	bl	fa0 <__static_initialization_and_destruction_0(int, int)>
     ff2:	bd80      	pop	{r7, pc}

00000ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     ff4:	b580      	push	{r7, lr}
     ff6:	b084      	sub	sp, #16
     ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     ffa:	4b28      	ldr	r3, [pc, #160]	; (109c <vTaskSwitchContext+0xa8>)
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	2b00      	cmp	r3, #0
    1000:	d003      	beq.n	100a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1002:	4b27      	ldr	r3, [pc, #156]	; (10a0 <vTaskSwitchContext+0xac>)
    1004:	2201      	movs	r2, #1
    1006:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1008:	e043      	b.n	1092 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    100a:	4b25      	ldr	r3, [pc, #148]	; (10a0 <vTaskSwitchContext+0xac>)
    100c:	2200      	movs	r2, #0
    100e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    1010:	f002 fe84 	bl	3d1c <ThreadRuntimeCounter>
    1014:	4602      	mov	r2, r0
    1016:	4b23      	ldr	r3, [pc, #140]	; (10a4 <vTaskSwitchContext+0xb0>)
    1018:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    101a:	4b22      	ldr	r3, [pc, #136]	; (10a4 <vTaskSwitchContext+0xb0>)
    101c:	681a      	ldr	r2, [r3, #0]
    101e:	4b22      	ldr	r3, [pc, #136]	; (10a8 <vTaskSwitchContext+0xb4>)
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	429a      	cmp	r2, r3
    1024:	d909      	bls.n	103a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    1026:	4b21      	ldr	r3, [pc, #132]	; (10ac <vTaskSwitchContext+0xb8>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	6d59      	ldr	r1, [r3, #84]	; 0x54
    102c:	4a1d      	ldr	r2, [pc, #116]	; (10a4 <vTaskSwitchContext+0xb0>)
    102e:	6810      	ldr	r0, [r2, #0]
    1030:	4a1d      	ldr	r2, [pc, #116]	; (10a8 <vTaskSwitchContext+0xb4>)
    1032:	6812      	ldr	r2, [r2, #0]
    1034:	1a82      	subs	r2, r0, r2
    1036:	440a      	add	r2, r1
    1038:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    103a:	4b1a      	ldr	r3, [pc, #104]	; (10a4 <vTaskSwitchContext+0xb0>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	4a1a      	ldr	r2, [pc, #104]	; (10a8 <vTaskSwitchContext+0xb4>)
    1040:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1042:	4b1b      	ldr	r3, [pc, #108]	; (10b0 <vTaskSwitchContext+0xbc>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	fab3 f383 	clz	r3, r3
    104e:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    1050:	78fb      	ldrb	r3, [r7, #3]
    1052:	f1c3 031f 	rsb	r3, r3, #31
    1056:	60fb      	str	r3, [r7, #12]
    1058:	68fa      	ldr	r2, [r7, #12]
    105a:	4613      	mov	r3, r2
    105c:	009b      	lsls	r3, r3, #2
    105e:	4413      	add	r3, r2
    1060:	009b      	lsls	r3, r3, #2
    1062:	4a14      	ldr	r2, [pc, #80]	; (10b4 <vTaskSwitchContext+0xc0>)
    1064:	4413      	add	r3, r2
    1066:	60bb      	str	r3, [r7, #8]
    1068:	68bb      	ldr	r3, [r7, #8]
    106a:	685b      	ldr	r3, [r3, #4]
    106c:	685a      	ldr	r2, [r3, #4]
    106e:	68bb      	ldr	r3, [r7, #8]
    1070:	605a      	str	r2, [r3, #4]
    1072:	68bb      	ldr	r3, [r7, #8]
    1074:	685a      	ldr	r2, [r3, #4]
    1076:	68bb      	ldr	r3, [r7, #8]
    1078:	3308      	adds	r3, #8
    107a:	429a      	cmp	r2, r3
    107c:	d104      	bne.n	1088 <vTaskSwitchContext+0x94>
    107e:	68bb      	ldr	r3, [r7, #8]
    1080:	685b      	ldr	r3, [r3, #4]
    1082:	685a      	ldr	r2, [r3, #4]
    1084:	68bb      	ldr	r3, [r7, #8]
    1086:	605a      	str	r2, [r3, #4]
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	685b      	ldr	r3, [r3, #4]
    108c:	68db      	ldr	r3, [r3, #12]
    108e:	4a07      	ldr	r2, [pc, #28]	; (10ac <vTaskSwitchContext+0xb8>)
    1090:	6013      	str	r3, [r2, #0]
}
    1092:	bf00      	nop
    1094:	3710      	adds	r7, #16
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	bf00      	nop
    109c:	10000284 	.word	0x10000284
    10a0:	10000280 	.word	0x10000280
    10a4:	1000028c 	.word	0x1000028c
    10a8:	10000288 	.word	0x10000288
    10ac:	10000214 	.word	0x10000214
    10b0:	1000027c 	.word	0x1000027c
    10b4:	10000218 	.word	0x10000218

000010b8 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    10b8:	b480      	push	{r7}
    10ba:	af00      	add	r7, sp, #0
    return 1;
    10bc:	2301      	movs	r3, #1
  }
    10be:	4618      	mov	r0, r3
    10c0:	46bd      	mov	sp, r7
    10c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c6:	4770      	bx	lr

000010c8 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    10c8:	b480      	push	{r7}
    10ca:	b083      	sub	sp, #12
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
    10d0:	6039      	str	r1, [r7, #0]
    return -1;
    10d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    10d6:	4618      	mov	r0, r3
    10d8:	370c      	adds	r7, #12
    10da:	46bd      	mov	sp, r7
    10dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10e0:	4770      	bx	lr
    10e2:	Address 0x00000000000010e2 is out of bounds.


000010e4 <_write>:
    heap_position += increment;
    return previous_heap_position;
  }
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    10e4:	b580      	push	{r7, lr}
    10e6:	b084      	sub	sp, #16
    10e8:	af00      	add	r7, sp, #0
    10ea:	60f8      	str	r0, [r7, #12]
    10ec:	60b9      	str	r1, [r7, #8]
    10ee:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	4619      	mov	r1, r3
    10f4:	68b8      	ldr	r0, [r7, #8]
    10f6:	f001 f97a 	bl	23ee <trace_write>
    return sjsu::newlib::out(ptr, length);
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <_write+0x2c>)
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	687a      	ldr	r2, [r7, #4]
    1100:	4611      	mov	r1, r2
    1102:	68b8      	ldr	r0, [r7, #8]
    1104:	4798      	blx	r3
    1106:	4603      	mov	r3, r0
  }
    1108:	4618      	mov	r0, r3
    110a:	3710      	adds	r7, #16
    110c:	46bd      	mov	sp, r7
    110e:	bd80      	pop	{r7, pc}
    1110:	10000008 	.word	0x10000008

00001114 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    1114:	b580      	push	{r7, lr}
    1116:	b084      	sub	sp, #16
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    111c:	6878      	ldr	r0, [r7, #4]
    111e:	f004 fbe9 	bl	58f4 <strlen>
    1122:	4603      	mov	r3, r0
    1124:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    1126:	2300      	movs	r3, #0
    1128:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    112a:	68fa      	ldr	r2, [r7, #12]
    112c:	6879      	ldr	r1, [r7, #4]
    112e:	2000      	movs	r0, #0
    1130:	f7ff ffd8 	bl	10e4 <_write>
    1134:	4602      	mov	r2, r0
    1136:	68bb      	ldr	r3, [r7, #8]
    1138:	4413      	add	r3, r2
    113a:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    113c:	2201      	movs	r2, #1
    113e:	4906      	ldr	r1, [pc, #24]	; (1158 <puts+0x44>)
    1140:	2000      	movs	r0, #0
    1142:	f7ff ffcf 	bl	10e4 <_write>
    1146:	4602      	mov	r2, r0
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	4413      	add	r3, r2
    114c:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    114e:	68bb      	ldr	r3, [r7, #8]
  }
    1150:	4618      	mov	r0, r3
    1152:	3710      	adds	r7, #16
    1154:	46bd      	mov	sp, r7
    1156:	bd80      	pop	{r7, pc}
    1158:	000061b0 	.word	0x000061b0

0000115c <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    115c:	b480      	push	{r7}
    115e:	b083      	sub	sp, #12
    1160:	af00      	add	r7, sp, #0
    1162:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    1164:	bf00      	nop
    while (1)
    1166:	e7fd      	b.n	1164 <_exit+0x8>

00001168 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    1168:	b580      	push	{r7, lr}
    116a:	b088      	sub	sp, #32
    116c:	af00      	add	r7, sp, #0
    116e:	60b9      	str	r1, [r7, #8]
    1170:	607a      	str	r2, [r7, #4]
    1172:	603b      	str	r3, [r7, #0]
    1174:	4603      	mov	r3, r0
    1176:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    1178:	23fe      	movs	r3, #254	; 0xfe
    117a:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    117c:	697a      	ldr	r2, [r7, #20]
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	fbb3 f1f2 	udiv	r1, r3, r2
    1184:	fb02 f201 	mul.w	r2, r2, r1
    1188:	1a9b      	subs	r3, r3, r2
    118a:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    118c:	68ba      	ldr	r2, [r7, #8]
    118e:	69fb      	ldr	r3, [r7, #28]
    1190:	4413      	add	r3, r2
    1192:	7bfa      	ldrb	r2, [r7, #15]
    1194:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    1196:	7bfb      	ldrb	r3, [r7, #15]
    1198:	2b00      	cmp	r3, #0
    119a:	d106      	bne.n	11aa <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    119c:	69fb      	ldr	r3, [r7, #28]
    119e:	461a      	mov	r2, r3
    11a0:	68b9      	ldr	r1, [r7, #8]
    11a2:	2001      	movs	r0, #1
    11a4:	f7ff ff9e 	bl	10e4 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    11a8:	e012      	b.n	11d0 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    11aa:	69fb      	ldr	r3, [r7, #28]
    11ac:	1c5a      	adds	r2, r3, #1
    11ae:	697b      	ldr	r3, [r7, #20]
    11b0:	429a      	cmp	r2, r3
    11b2:	d10d      	bne.n	11d0 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    11b4:	697b      	ldr	r3, [r7, #20]
    11b6:	3301      	adds	r3, #1
    11b8:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    11ba:	68ba      	ldr	r2, [r7, #8]
    11bc:	69bb      	ldr	r3, [r7, #24]
    11be:	4413      	add	r3, r2
    11c0:	2200      	movs	r2, #0
    11c2:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    11c4:	69bb      	ldr	r3, [r7, #24]
    11c6:	461a      	mov	r2, r3
    11c8:	68b9      	ldr	r1, [r7, #8]
    11ca:	2001      	movs	r0, #1
    11cc:	f7ff ff8a 	bl	10e4 <_write>
}
    11d0:	bf00      	nop
    11d2:	3720      	adds	r7, #32
    11d4:	46bd      	mov	sp, r7
    11d6:	bd80      	pop	{r7, pc}

000011d8 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    11d8:	b480      	push	{r7}
    11da:	b085      	sub	sp, #20
    11dc:	af00      	add	r7, sp, #0
    11de:	60b9      	str	r1, [r7, #8]
    11e0:	607a      	str	r2, [r7, #4]
    11e2:	603b      	str	r3, [r7, #0]
    11e4:	4603      	mov	r3, r0
    11e6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    11e8:	bf00      	nop
    11ea:	3714      	adds	r7, #20
    11ec:	46bd      	mov	sp, r7
    11ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f2:	4770      	bx	lr

000011f4 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    11f4:	b480      	push	{r7}
    11f6:	b085      	sub	sp, #20
    11f8:	af00      	add	r7, sp, #0
    11fa:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	60fb      	str	r3, [r7, #12]
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	2b00      	cmp	r3, #0
    1206:	d003      	beq.n	1210 <_strlen(char const*)+0x1c>
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	3301      	adds	r3, #1
    120c:	60fb      	str	r3, [r7, #12]
    120e:	e7f7      	b.n	1200 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    1210:	68fa      	ldr	r2, [r7, #12]
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	1ad3      	subs	r3, r2, r3
}
    1216:	4618      	mov	r0, r3
    1218:	3714      	adds	r7, #20
    121a:	46bd      	mov	sp, r7
    121c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1220:	4770      	bx	lr

00001222 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    1222:	b480      	push	{r7}
    1224:	b083      	sub	sp, #12
    1226:	af00      	add	r7, sp, #0
    1228:	4603      	mov	r3, r0
    122a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    122c:	79fb      	ldrb	r3, [r7, #7]
    122e:	2b2f      	cmp	r3, #47	; 0x2f
    1230:	d904      	bls.n	123c <_is_digit(char)+0x1a>
    1232:	79fb      	ldrb	r3, [r7, #7]
    1234:	2b39      	cmp	r3, #57	; 0x39
    1236:	d801      	bhi.n	123c <_is_digit(char)+0x1a>
    1238:	2301      	movs	r3, #1
    123a:	e000      	b.n	123e <_is_digit(char)+0x1c>
    123c:	2300      	movs	r3, #0
}
    123e:	4618      	mov	r0, r3
    1240:	370c      	adds	r7, #12
    1242:	46bd      	mov	sp, r7
    1244:	f85d 7b04 	ldr.w	r7, [sp], #4
    1248:	4770      	bx	lr

0000124a <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    124a:	b580      	push	{r7, lr}
    124c:	b084      	sub	sp, #16
    124e:	af00      	add	r7, sp, #0
    1250:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    1252:	2300      	movs	r3, #0
    1254:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	681b      	ldr	r3, [r3, #0]
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	4618      	mov	r0, r3
    125e:	f7ff ffe0 	bl	1222 <_is_digit(char)>
    1262:	4603      	mov	r3, r0
    1264:	2b00      	cmp	r3, #0
    1266:	d00f      	beq.n	1288 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1268:	68fa      	ldr	r2, [r7, #12]
    126a:	4613      	mov	r3, r2
    126c:	009b      	lsls	r3, r3, #2
    126e:	4413      	add	r3, r2
    1270:	005b      	lsls	r3, r3, #1
    1272:	4618      	mov	r0, r3
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	681b      	ldr	r3, [r3, #0]
    1278:	1c59      	adds	r1, r3, #1
    127a:	687a      	ldr	r2, [r7, #4]
    127c:	6011      	str	r1, [r2, #0]
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	4403      	add	r3, r0
    1282:	3b30      	subs	r3, #48	; 0x30
    1284:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1286:	e7e6      	b.n	1256 <_atoi(char const**)+0xc>
  }
  return i;
    1288:	68fb      	ldr	r3, [r7, #12]
}
    128a:	4618      	mov	r0, r3
    128c:	3710      	adds	r7, #16
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}

00001292 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1292:	b590      	push	{r4, r7, lr}
    1294:	b089      	sub	sp, #36	; 0x24
    1296:	af00      	add	r7, sp, #0
    1298:	60f8      	str	r0, [r7, #12]
    129a:	60b9      	str	r1, [r7, #8]
    129c:	607a      	str	r2, [r7, #4]
    129e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    12a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    12a6:	f003 0302 	and.w	r3, r3, #2
    12aa:	2b00      	cmp	r3, #0
    12ac:	d10e      	bne.n	12cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    12ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    12b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12b2:	429a      	cmp	r2, r3
    12b4:	d20a      	bcs.n	12cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    12b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12b8:	2b1f      	cmp	r3, #31
    12ba:	d807      	bhi.n	12cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    12bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12be:	1c5a      	adds	r2, r3, #1
    12c0:	637a      	str	r2, [r7, #52]	; 0x34
    12c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12c4:	4413      	add	r3, r2
    12c6:	2230      	movs	r2, #48	; 0x30
    12c8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    12ca:	e7eb      	b.n	12a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    12cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    12ce:	f003 0302 	and.w	r3, r3, #2
    12d2:	2b00      	cmp	r3, #0
    12d4:	d113      	bne.n	12fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    12d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    12d8:	f003 0301 	and.w	r3, r3, #1
    12dc:	2b00      	cmp	r3, #0
    12de:	d00e      	beq.n	12fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    12e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    12e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    12e4:	429a      	cmp	r2, r3
    12e6:	d20a      	bcs.n	12fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    12e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ea:	2b1f      	cmp	r3, #31
    12ec:	d807      	bhi.n	12fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    12ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12f0:	1c5a      	adds	r2, r3, #1
    12f2:	637a      	str	r2, [r7, #52]	; 0x34
    12f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12f6:	4413      	add	r3, r2
    12f8:	2230      	movs	r2, #48	; 0x30
    12fa:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    12fc:	e7e6      	b.n	12cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    12fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1300:	f003 0310 	and.w	r3, r3, #16
    1304:	2b00      	cmp	r3, #0
    1306:	d058      	beq.n	13ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    130e:	2b00      	cmp	r3, #0
    1310:	d116      	bne.n	1340 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1314:	2b00      	cmp	r3, #0
    1316:	d013      	beq.n	1340 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    131a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    131c:	429a      	cmp	r2, r3
    131e:	d003      	beq.n	1328 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    1320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1324:	429a      	cmp	r2, r3
    1326:	d10b      	bne.n	1340 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    1328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    132a:	3b01      	subs	r3, #1
    132c:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1330:	2b00      	cmp	r3, #0
    1332:	d005      	beq.n	1340 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1336:	2b10      	cmp	r3, #16
    1338:	d102      	bne.n	1340 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    133c:	3b01      	subs	r3, #1
    133e:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1342:	2b10      	cmp	r3, #16
    1344:	d10f      	bne.n	1366 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1348:	f003 0320 	and.w	r3, r3, #32
    134c:	2b00      	cmp	r3, #0
    134e:	d10a      	bne.n	1366 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1352:	2b1f      	cmp	r3, #31
    1354:	d807      	bhi.n	1366 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    1356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1358:	1c5a      	adds	r2, r3, #1
    135a:	637a      	str	r2, [r7, #52]	; 0x34
    135c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    135e:	4413      	add	r3, r2
    1360:	2278      	movs	r2, #120	; 0x78
    1362:	701a      	strb	r2, [r3, #0]
    1364:	e01f      	b.n	13a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1368:	2b10      	cmp	r3, #16
    136a:	d10f      	bne.n	138c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    136c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    136e:	f003 0320 	and.w	r3, r3, #32
    1372:	2b00      	cmp	r3, #0
    1374:	d00a      	beq.n	138c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1378:	2b1f      	cmp	r3, #31
    137a:	d807      	bhi.n	138c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    137e:	1c5a      	adds	r2, r3, #1
    1380:	637a      	str	r2, [r7, #52]	; 0x34
    1382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1384:	4413      	add	r3, r2
    1386:	2258      	movs	r2, #88	; 0x58
    1388:	701a      	strb	r2, [r3, #0]
    138a:	e00c      	b.n	13a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    138c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    138e:	2b02      	cmp	r3, #2
    1390:	d109      	bne.n	13a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    1392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1394:	2b1f      	cmp	r3, #31
    1396:	d806      	bhi.n	13a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    1398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    139a:	1c5a      	adds	r2, r3, #1
    139c:	637a      	str	r2, [r7, #52]	; 0x34
    139e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    13a0:	4413      	add	r3, r2
    13a2:	2262      	movs	r2, #98	; 0x62
    13a4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    13a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13a8:	2b1f      	cmp	r3, #31
    13aa:	d806      	bhi.n	13ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    13ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13ae:	1c5a      	adds	r2, r3, #1
    13b0:	637a      	str	r2, [r7, #52]	; 0x34
    13b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    13b4:	4413      	add	r3, r2
    13b6:	2230      	movs	r2, #48	; 0x30
    13b8:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    13ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13bc:	2b00      	cmp	r3, #0
    13be:	d014      	beq.n	13ea <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    13c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    13c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13c4:	429a      	cmp	r2, r3
    13c6:	d110      	bne.n	13ea <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    13c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    13cc:	2b00      	cmp	r3, #0
    13ce:	d109      	bne.n	13e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    13d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    13d2:	f003 0304 	and.w	r3, r3, #4
    13d6:	2b00      	cmp	r3, #0
    13d8:	d104      	bne.n	13e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    13da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    13dc:	f003 0308 	and.w	r3, r3, #8
    13e0:	2b00      	cmp	r3, #0
    13e2:	d002      	beq.n	13ea <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    13e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e6:	3b01      	subs	r3, #1
    13e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    13ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13ec:	2b1f      	cmp	r3, #31
    13ee:	d824      	bhi.n	143a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    13f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    13f4:	2b00      	cmp	r3, #0
    13f6:	d007      	beq.n	1408 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    13f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13fa:	1c5a      	adds	r2, r3, #1
    13fc:	637a      	str	r2, [r7, #52]	; 0x34
    13fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1400:	4413      	add	r3, r2
    1402:	222d      	movs	r2, #45	; 0x2d
    1404:	701a      	strb	r2, [r3, #0]
    1406:	e018      	b.n	143a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    1408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    140a:	f003 0304 	and.w	r3, r3, #4
    140e:	2b00      	cmp	r3, #0
    1410:	d007      	beq.n	1422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1414:	1c5a      	adds	r2, r3, #1
    1416:	637a      	str	r2, [r7, #52]	; 0x34
    1418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    141a:	4413      	add	r3, r2
    141c:	222b      	movs	r2, #43	; 0x2b
    141e:	701a      	strb	r2, [r3, #0]
    1420:	e00b      	b.n	143a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    1422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1424:	f003 0308 	and.w	r3, r3, #8
    1428:	2b00      	cmp	r3, #0
    142a:	d006      	beq.n	143a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    142e:	1c5a      	adds	r2, r3, #1
    1430:	637a      	str	r2, [r7, #52]	; 0x34
    1432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1434:	4413      	add	r3, r2
    1436:	2220      	movs	r2, #32
    1438:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    143a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    143c:	f003 0302 	and.w	r3, r3, #2
    1440:	2b00      	cmp	r3, #0
    1442:	d116      	bne.n	1472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    1444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1446:	f003 0301 	and.w	r3, r3, #1
    144a:	2b00      	cmp	r3, #0
    144c:	d111      	bne.n	1472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1450:	61fb      	str	r3, [r7, #28]
    1452:	69fa      	ldr	r2, [r7, #28]
    1454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1456:	429a      	cmp	r2, r3
    1458:	d20b      	bcs.n	1472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    145a:	687a      	ldr	r2, [r7, #4]
    145c:	1c53      	adds	r3, r2, #1
    145e:	607b      	str	r3, [r7, #4]
    1460:	68fc      	ldr	r4, [r7, #12]
    1462:	683b      	ldr	r3, [r7, #0]
    1464:	68b9      	ldr	r1, [r7, #8]
    1466:	2020      	movs	r0, #32
    1468:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    146a:	69fb      	ldr	r3, [r7, #28]
    146c:	3301      	adds	r3, #1
    146e:	61fb      	str	r3, [r7, #28]
    1470:	e7ef      	b.n	1452 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1472:	2300      	movs	r3, #0
    1474:	61bb      	str	r3, [r7, #24]
    1476:	69ba      	ldr	r2, [r7, #24]
    1478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    147a:	429a      	cmp	r2, r3
    147c:	d211      	bcs.n	14a2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    147e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1480:	69bb      	ldr	r3, [r7, #24]
    1482:	1ad3      	subs	r3, r2, r3
    1484:	3b01      	subs	r3, #1
    1486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1488:	4413      	add	r3, r2
    148a:	7818      	ldrb	r0, [r3, #0]
    148c:	687a      	ldr	r2, [r7, #4]
    148e:	1c53      	adds	r3, r2, #1
    1490:	607b      	str	r3, [r7, #4]
    1492:	68fc      	ldr	r4, [r7, #12]
    1494:	683b      	ldr	r3, [r7, #0]
    1496:	68b9      	ldr	r1, [r7, #8]
    1498:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    149a:	69bb      	ldr	r3, [r7, #24]
    149c:	3301      	adds	r3, #1
    149e:	61bb      	str	r3, [r7, #24]
    14a0:	e7e9      	b.n	1476 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    14a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14a4:	f003 0302 	and.w	r3, r3, #2
    14a8:	2b00      	cmp	r3, #0
    14aa:	d00e      	beq.n	14ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    14ac:	687a      	ldr	r2, [r7, #4]
    14ae:	697b      	ldr	r3, [r7, #20]
    14b0:	1ad3      	subs	r3, r2, r3
    14b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    14b4:	429a      	cmp	r2, r3
    14b6:	d908      	bls.n	14ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    14b8:	687a      	ldr	r2, [r7, #4]
    14ba:	1c53      	adds	r3, r2, #1
    14bc:	607b      	str	r3, [r7, #4]
    14be:	68fc      	ldr	r4, [r7, #12]
    14c0:	683b      	ldr	r3, [r7, #0]
    14c2:	68b9      	ldr	r1, [r7, #8]
    14c4:	2020      	movs	r0, #32
    14c6:	47a0      	blx	r4
    while (idx - start_idx < width) {
    14c8:	e7f0      	b.n	14ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    14ca:	687b      	ldr	r3, [r7, #4]
}
    14cc:	4618      	mov	r0, r3
    14ce:	3724      	adds	r7, #36	; 0x24
    14d0:	46bd      	mov	sp, r7
    14d2:	bd90      	pop	{r4, r7, pc}

000014d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b096      	sub	sp, #88	; 0x58
    14d8:	af08      	add	r7, sp, #32
    14da:	60f8      	str	r0, [r7, #12]
    14dc:	60b9      	str	r1, [r7, #8]
    14de:	607a      	str	r2, [r7, #4]
    14e0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    14e2:	2300      	movs	r3, #0
    14e4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    14e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    14e8:	2b00      	cmp	r3, #0
    14ea:	d103      	bne.n	14f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    14ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    14ee:	f023 0310 	bic.w	r3, r3, #16
    14f2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    14f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    14f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    14fa:	2b00      	cmp	r3, #0
    14fc:	d002      	beq.n	1504 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    14fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1500:	2b00      	cmp	r3, #0
    1502:	d034      	beq.n	156e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    1504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1506:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1508:	fbb3 f2f2 	udiv	r2, r3, r2
    150c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    150e:	fb01 f202 	mul.w	r2, r1, r2
    1512:	1a9b      	subs	r3, r3, r2
    1514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1518:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    151c:	2b09      	cmp	r3, #9
    151e:	d804      	bhi.n	152a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    1520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1524:	3330      	adds	r3, #48	; 0x30
    1526:	b2da      	uxtb	r2, r3
    1528:	e00d      	b.n	1546 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    152c:	f003 0320 	and.w	r3, r3, #32
    1530:	2b00      	cmp	r3, #0
    1532:	d001      	beq.n	1538 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    1534:	2241      	movs	r2, #65	; 0x41
    1536:	e000      	b.n	153a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    1538:	2261      	movs	r2, #97	; 0x61
    153a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    153e:	4413      	add	r3, r2
    1540:	b2db      	uxtb	r3, r3
    1542:	3b0a      	subs	r3, #10
    1544:	b2da      	uxtb	r2, r3
    1546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1548:	1c59      	adds	r1, r3, #1
    154a:	6379      	str	r1, [r7, #52]	; 0x34
    154c:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1550:	440b      	add	r3, r1
    1552:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    155a:	fbb2 f3f3 	udiv	r3, r2, r3
    155e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1562:	2b00      	cmp	r3, #0
    1564:	d003      	beq.n	156e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    1566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1568:	2b1f      	cmp	r3, #31
    156a:	d800      	bhi.n	156e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    156c:	e7ca      	b.n	1504 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    156e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1570:	9306      	str	r3, [sp, #24]
    1572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1574:	9305      	str	r3, [sp, #20]
    1576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1578:	9304      	str	r3, [sp, #16]
    157a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    157c:	9303      	str	r3, [sp, #12]
    157e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1582:	9302      	str	r3, [sp, #8]
    1584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1586:	9301      	str	r3, [sp, #4]
    1588:	f107 0310 	add.w	r3, r7, #16
    158c:	9300      	str	r3, [sp, #0]
    158e:	683b      	ldr	r3, [r7, #0]
    1590:	687a      	ldr	r2, [r7, #4]
    1592:	68b9      	ldr	r1, [r7, #8]
    1594:	68f8      	ldr	r0, [r7, #12]
    1596:	f7ff fe7c 	bl	1292 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    159a:	4603      	mov	r3, r0
}
    159c:	4618      	mov	r0, r3
    159e:	3738      	adds	r7, #56	; 0x38
    15a0:	46bd      	mov	sp, r7
    15a2:	bd80      	pop	{r7, pc}

000015a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    15a4:	b590      	push	{r4, r7, lr}
    15a6:	b097      	sub	sp, #92	; 0x5c
    15a8:	af08      	add	r7, sp, #32
    15aa:	60f8      	str	r0, [r7, #12]
    15ac:	60b9      	str	r1, [r7, #8]
    15ae:	607a      	str	r2, [r7, #4]
    15b0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    15b2:	2300      	movs	r3, #0
    15b4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    15b6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    15ba:	4323      	orrs	r3, r4
    15bc:	d103      	bne.n	15c6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    15be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    15c0:	f023 0310 	bic.w	r3, r3, #16
    15c4:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    15c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    15c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    15cc:	2b00      	cmp	r3, #0
    15ce:	d003      	beq.n	15d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    15d0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    15d4:	4323      	orrs	r3, r4
    15d6:	d03a      	beq.n	164e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    15d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    15dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    15e0:	f002 fffe 	bl	45e0 <__aeabi_uldivmod>
    15e4:	461c      	mov	r4, r3
    15e6:	4613      	mov	r3, r2
    15e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    15ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    15f0:	2b09      	cmp	r3, #9
    15f2:	d804      	bhi.n	15fe <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    15f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    15f8:	3330      	adds	r3, #48	; 0x30
    15fa:	b2da      	uxtb	r2, r3
    15fc:	e00d      	b.n	161a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    15fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1600:	f003 0320 	and.w	r3, r3, #32
    1604:	2b00      	cmp	r3, #0
    1606:	d001      	beq.n	160c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    1608:	2241      	movs	r2, #65	; 0x41
    160a:	e000      	b.n	160e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    160c:	2261      	movs	r2, #97	; 0x61
    160e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1612:	4413      	add	r3, r2
    1614:	b2db      	uxtb	r3, r3
    1616:	3b0a      	subs	r3, #10
    1618:	b2da      	uxtb	r2, r3
    161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    161c:	1c59      	adds	r1, r3, #1
    161e:	6379      	str	r1, [r7, #52]	; 0x34
    1620:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1624:	440b      	add	r3, r1
    1626:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    162a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    162e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    1632:	f002 ffd5 	bl	45e0 <__aeabi_uldivmod>
    1636:	4603      	mov	r3, r0
    1638:	460c      	mov	r4, r1
    163a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    163e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1642:	4323      	orrs	r3, r4
    1644:	d003      	beq.n	164e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    1646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1648:	2b1f      	cmp	r3, #31
    164a:	d800      	bhi.n	164e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    164c:	e7c4      	b.n	15d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    164e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1650:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1652:	9206      	str	r2, [sp, #24]
    1654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1656:	9205      	str	r2, [sp, #20]
    1658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    165a:	9204      	str	r2, [sp, #16]
    165c:	9303      	str	r3, [sp, #12]
    165e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    1662:	9302      	str	r3, [sp, #8]
    1664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1666:	9301      	str	r3, [sp, #4]
    1668:	f107 0310 	add.w	r3, r7, #16
    166c:	9300      	str	r3, [sp, #0]
    166e:	683b      	ldr	r3, [r7, #0]
    1670:	687a      	ldr	r2, [r7, #4]
    1672:	68b9      	ldr	r1, [r7, #8]
    1674:	68f8      	ldr	r0, [r7, #12]
    1676:	f7ff fe0c 	bl	1292 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    167a:	4603      	mov	r3, r0
}
    167c:	4618      	mov	r0, r3
    167e:	373c      	adds	r7, #60	; 0x3c
    1680:	46bd      	mov	sp, r7
    1682:	bd90      	pop	{r4, r7, pc}

00001684 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    1684:	b590      	push	{r4, r7, lr}
    1686:	b09b      	sub	sp, #108	; 0x6c
    1688:	af00      	add	r7, sp, #0
    168a:	6178      	str	r0, [r7, #20]
    168c:	6139      	str	r1, [r7, #16]
    168e:	60fa      	str	r2, [r7, #12]
    1690:	60bb      	str	r3, [r7, #8]
    1692:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    1696:	68fb      	ldr	r3, [r7, #12]
    1698:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    169a:	e9d7 0100 	ldrd	r0, r1, [r7]
    169e:	f002 fe41 	bl	4324 <__aeabi_d2f>
    16a2:	4603      	mov	r3, r0
    16a4:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    16a6:	2300      	movs	r3, #0
    16a8:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    16aa:	f04f 0300 	mov.w	r3, #0
    16ae:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    16b0:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    16b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    16b6:	2300      	movs	r3, #0
    16b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    16bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    16c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    16c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16c8:	d50a      	bpl.n	16e0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    16ca:	2301      	movs	r3, #1
    16cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    16d0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 1980 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    16d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    16d8:	ee77 7a67 	vsub.f32	s15, s14, s15
    16dc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    16e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    16e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    16e8:	2b00      	cmp	r3, #0
    16ea:	d101      	bne.n	16f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    16ec:	2306      	movs	r3, #6
    16ee:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    16f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    16f2:	2b1f      	cmp	r3, #31
    16f4:	d80f      	bhi.n	1716 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    16f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    16f8:	2b09      	cmp	r3, #9
    16fa:	d90c      	bls.n	1716 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    16fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    16fe:	1c5a      	adds	r2, r3, #1
    1700:	663a      	str	r2, [r7, #96]	; 0x60
    1702:	f107 0268 	add.w	r2, r7, #104	; 0x68
    1706:	4413      	add	r3, r2
    1708:	2230      	movs	r2, #48	; 0x30
    170a:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    170e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1710:	3b01      	subs	r3, #1
    1712:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1714:	e7ec      	b.n	16f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    1716:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    171a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    171e:	ee17 3a90 	vmov	r3, s15
    1722:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    1724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1726:	ee07 3a90 	vmov	s15, r3
    172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    172e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    1732:	ee37 7a67 	vsub.f32	s14, s14, s15
    1736:	4a93      	ldr	r2, [pc, #588]	; (1984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    1738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    173a:	009b      	lsls	r3, r3, #2
    173c:	4413      	add	r3, r2
    173e:	edd3 7a00 	vldr	s15, [r3]
    1742:	ee67 7a27 	vmul.f32	s15, s14, s15
    1746:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    174a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    174e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1752:	ee17 3a90 	vmov	r3, s15
    1756:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    1758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    175a:	ee07 3a90 	vmov	s15, r3
    175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    1766:	ee77 7a67 	vsub.f32	s15, s14, s15
    176a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    176e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1776:	eef4 7ac7 	vcmpe.f32	s15, s14
    177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    177e:	dd18      	ble.n	17b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    1780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1782:	3301      	adds	r3, #1
    1784:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1788:	ee07 3a90 	vmov	s15, r3
    178c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1790:	4a7c      	ldr	r2, [pc, #496]	; (1984 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    1792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1794:	009b      	lsls	r3, r3, #2
    1796:	4413      	add	r3, r2
    1798:	edd3 7a00 	vldr	s15, [r3]
    179c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    17a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    17a4:	db19      	blt.n	17da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    17a6:	2300      	movs	r3, #0
    17a8:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    17aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    17ac:	3301      	adds	r3, #1
    17ae:	65bb      	str	r3, [r7, #88]	; 0x58
    17b0:	e013      	b.n	17da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    17b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    17b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    17ba:	eef4 7a47 	vcmp.f32	s15, s14
    17be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    17c2:	d10a      	bne.n	17da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    17c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    17c6:	2b00      	cmp	r3, #0
    17c8:	d004      	beq.n	17d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    17ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    17cc:	f003 0301 	and.w	r3, r3, #1
    17d0:	2b00      	cmp	r3, #0
    17d2:	d002      	beq.n	17da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    17d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    17d6:	3301      	adds	r3, #1
    17d8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    17da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    17de:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 1988 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    17e2:	eef4 7ac7 	vcmpe.f32	s15, s14
    17e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    17ea:	dd01      	ble.n	17f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    17ec:	2300      	movs	r3, #0
    17ee:	e166      	b.n	1abe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    17f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    17f2:	2b00      	cmp	r3, #0
    17f4:	d129      	bne.n	184a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    17f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    17f8:	ee07 3a90 	vmov	s15, r3
    17fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1800:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    1804:	ee77 7a67 	vsub.f32	s15, s14, s15
    1808:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    180c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1814:	eef4 7ac7 	vcmpe.f32	s15, s14
    1818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    181c:	dd03      	ble.n	1826 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1820:	3301      	adds	r3, #1
    1822:	65bb      	str	r3, [r7, #88]	; 0x58
    1824:	e062      	b.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    1826:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    182a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    182e:	eef4 7a47 	vcmp.f32	s15, s14
    1832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1836:	d159      	bne.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    1838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    183a:	f003 0301 	and.w	r3, r3, #1
    183e:	2b00      	cmp	r3, #0
    1840:	d054      	beq.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    1842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1844:	3301      	adds	r3, #1
    1846:	65bb      	str	r3, [r7, #88]	; 0x58
    1848:	e050      	b.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    184a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    184c:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    184e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1850:	2b1f      	cmp	r3, #31
    1852:	d828      	bhi.n	18a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    1854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1856:	3b01      	subs	r3, #1
    1858:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    185a:	6d79      	ldr	r1, [r7, #84]	; 0x54
    185c:	4b4b      	ldr	r3, [pc, #300]	; (198c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    185e:	fba3 2301 	umull	r2, r3, r3, r1
    1862:	08da      	lsrs	r2, r3, #3
    1864:	4613      	mov	r3, r2
    1866:	009b      	lsls	r3, r3, #2
    1868:	4413      	add	r3, r2
    186a:	005b      	lsls	r3, r3, #1
    186c:	1aca      	subs	r2, r1, r3
    186e:	b2d3      	uxtb	r3, r2
    1870:	3330      	adds	r3, #48	; 0x30
    1872:	b2d9      	uxtb	r1, r3
    1874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1876:	1c5a      	adds	r2, r3, #1
    1878:	663a      	str	r2, [r7, #96]	; 0x60
    187a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    187e:	4413      	add	r3, r2
    1880:	460a      	mov	r2, r1
    1882:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    1886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1888:	4a40      	ldr	r2, [pc, #256]	; (198c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    188a:	fba2 2303 	umull	r2, r3, r2, r3
    188e:	08db      	lsrs	r3, r3, #3
    1890:	657b      	str	r3, [r7, #84]	; 0x54
    1892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1894:	2b00      	cmp	r3, #0
    1896:	bf0c      	ite	eq
    1898:	2301      	moveq	r3, #1
    189a:	2300      	movne	r3, #0
    189c:	b2db      	uxtb	r3, r3
    189e:	2b00      	cmp	r3, #0
    18a0:	d100      	bne.n	18a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    18a2:	e7d4      	b.n	184e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    18a4:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    18a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    18a8:	2b1f      	cmp	r3, #31
    18aa:	d806      	bhi.n	18ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    18ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18ae:	1e5a      	subs	r2, r3, #1
    18b0:	653a      	str	r2, [r7, #80]	; 0x50
    18b2:	2b00      	cmp	r3, #0
    18b4:	d001      	beq.n	18ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    18b6:	2301      	movs	r3, #1
    18b8:	e000      	b.n	18bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    18ba:	2300      	movs	r3, #0
    18bc:	2b00      	cmp	r3, #0
    18be:	d009      	beq.n	18d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    18c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    18c2:	1c5a      	adds	r2, r3, #1
    18c4:	663a      	str	r2, [r7, #96]	; 0x60
    18c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    18ca:	4413      	add	r3, r2
    18cc:	2230      	movs	r2, #48	; 0x30
    18ce:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    18d2:	e7e8      	b.n	18a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    18d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    18d6:	2b1f      	cmp	r3, #31
    18d8:	d808      	bhi.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    18da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    18dc:	1c5a      	adds	r2, r3, #1
    18de:	663a      	str	r2, [r7, #96]	; 0x60
    18e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
    18e4:	4413      	add	r3, r2
    18e6:	222e      	movs	r2, #46	; 0x2e
    18e8:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    18ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    18ee:	2b1f      	cmp	r3, #31
    18f0:	d829      	bhi.n	1946 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    18f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    18f4:	4b26      	ldr	r3, [pc, #152]	; (1990 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    18f6:	fb83 1302 	smull	r1, r3, r3, r2
    18fa:	1099      	asrs	r1, r3, #2
    18fc:	17d3      	asrs	r3, r2, #31
    18fe:	1ac9      	subs	r1, r1, r3
    1900:	460b      	mov	r3, r1
    1902:	009b      	lsls	r3, r3, #2
    1904:	440b      	add	r3, r1
    1906:	005b      	lsls	r3, r3, #1
    1908:	1ad1      	subs	r1, r2, r3
    190a:	b2cb      	uxtb	r3, r1
    190c:	3330      	adds	r3, #48	; 0x30
    190e:	b2d9      	uxtb	r1, r3
    1910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1912:	1c5a      	adds	r2, r3, #1
    1914:	663a      	str	r2, [r7, #96]	; 0x60
    1916:	f107 0268 	add.w	r2, r7, #104	; 0x68
    191a:	4413      	add	r3, r2
    191c:	460a      	mov	r2, r1
    191e:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    1922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1924:	4a1a      	ldr	r2, [pc, #104]	; (1990 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    1926:	fb82 1203 	smull	r1, r2, r2, r3
    192a:	1092      	asrs	r2, r2, #2
    192c:	17db      	asrs	r3, r3, #31
    192e:	1ad3      	subs	r3, r2, r3
    1930:	65bb      	str	r3, [r7, #88]	; 0x58
    1932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1934:	2b00      	cmp	r3, #0
    1936:	bf0c      	ite	eq
    1938:	2301      	moveq	r3, #1
    193a:	2300      	movne	r3, #0
    193c:	b2db      	uxtb	r3, r3
    193e:	2b00      	cmp	r3, #0
    1940:	d100      	bne.n	1944 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1942:	e7d3      	b.n	18ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    1944:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1946:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    194a:	f003 0302 	and.w	r3, r3, #2
    194e:	2b00      	cmp	r3, #0
    1950:	d120      	bne.n	1994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    1952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1956:	f003 0301 	and.w	r3, r3, #1
    195a:	2b00      	cmp	r3, #0
    195c:	d01a      	beq.n	1994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    195e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1962:	429a      	cmp	r2, r3
    1964:	d216      	bcs.n	1994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    1966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1968:	2b1f      	cmp	r3, #31
    196a:	d813      	bhi.n	1994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    196c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    196e:	1c5a      	adds	r2, r3, #1
    1970:	663a      	str	r2, [r7, #96]	; 0x60
    1972:	f107 0268 	add.w	r2, r7, #104	; 0x68
    1976:	4413      	add	r3, r2
    1978:	2230      	movs	r2, #48	; 0x30
    197a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    197e:	e7e2      	b.n	1946 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    1980:	00000000 	.word	0x00000000
    1984:	000061b4 	.word	0x000061b4
    1988:	4f000000 	.word	0x4f000000
    198c:	cccccccd 	.word	0xcccccccd
    1990:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1998:	429a      	cmp	r2, r3
    199a:	d112      	bne.n	19c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    199c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    19a0:	2b00      	cmp	r3, #0
    19a2:	d10b      	bne.n	19bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    19a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    19a8:	f003 0304 	and.w	r3, r3, #4
    19ac:	2b00      	cmp	r3, #0
    19ae:	d105      	bne.n	19bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    19b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    19b4:	f003 0308 	and.w	r3, r3, #8
    19b8:	2b00      	cmp	r3, #0
    19ba:	d002      	beq.n	19c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    19bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    19be:	3b01      	subs	r3, #1
    19c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    19c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    19c4:	2b1f      	cmp	r3, #31
    19c6:	d82c      	bhi.n	1a22 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    19c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    19cc:	2b00      	cmp	r3, #0
    19ce:	d009      	beq.n	19e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    19d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    19d2:	1c5a      	adds	r2, r3, #1
    19d4:	663a      	str	r2, [r7, #96]	; 0x60
    19d6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    19da:	4413      	add	r3, r2
    19dc:	222d      	movs	r2, #45	; 0x2d
    19de:	f803 2c50 	strb.w	r2, [r3, #-80]
    19e2:	e01e      	b.n	1a22 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    19e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    19e8:	f003 0304 	and.w	r3, r3, #4
    19ec:	2b00      	cmp	r3, #0
    19ee:	d009      	beq.n	1a04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    19f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    19f2:	1c5a      	adds	r2, r3, #1
    19f4:	663a      	str	r2, [r7, #96]	; 0x60
    19f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    19fa:	4413      	add	r3, r2
    19fc:	222b      	movs	r2, #43	; 0x2b
    19fe:	f803 2c50 	strb.w	r2, [r3, #-80]
    1a02:	e00e      	b.n	1a22 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    1a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1a08:	f003 0308 	and.w	r3, r3, #8
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d008      	beq.n	1a22 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    1a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1a12:	1c5a      	adds	r2, r3, #1
    1a14:	663a      	str	r2, [r7, #96]	; 0x60
    1a16:	f107 0268 	add.w	r2, r7, #104	; 0x68
    1a1a:	4413      	add	r3, r2
    1a1c:	2220      	movs	r2, #32
    1a1e:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1a26:	f003 0302 	and.w	r3, r3, #2
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d117      	bne.n	1a5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    1a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1a32:	f003 0301 	and.w	r3, r3, #1
    1a36:	2b00      	cmp	r3, #0
    1a38:	d111      	bne.n	1a5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    1a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    1a3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1a42:	429a      	cmp	r2, r3
    1a44:	d20b      	bcs.n	1a5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    1a46:	68fa      	ldr	r2, [r7, #12]
    1a48:	1c53      	adds	r3, r2, #1
    1a4a:	60fb      	str	r3, [r7, #12]
    1a4c:	697c      	ldr	r4, [r7, #20]
    1a4e:	68bb      	ldr	r3, [r7, #8]
    1a50:	6939      	ldr	r1, [r7, #16]
    1a52:	2020      	movs	r0, #32
    1a54:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a58:	3301      	adds	r3, #1
    1a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    1a5c:	e7ef      	b.n	1a3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1a5e:	2300      	movs	r3, #0
    1a60:	64bb      	str	r3, [r7, #72]	; 0x48
    1a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1a66:	429a      	cmp	r2, r3
    1a68:	d213      	bcs.n	1a92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a6e:	1ad3      	subs	r3, r2, r3
    1a70:	3b01      	subs	r3, #1
    1a72:	f107 0268 	add.w	r2, r7, #104	; 0x68
    1a76:	4413      	add	r3, r2
    1a78:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    1a7c:	68fa      	ldr	r2, [r7, #12]
    1a7e:	1c53      	adds	r3, r2, #1
    1a80:	60fb      	str	r3, [r7, #12]
    1a82:	697c      	ldr	r4, [r7, #20]
    1a84:	68bb      	ldr	r3, [r7, #8]
    1a86:	6939      	ldr	r1, [r7, #16]
    1a88:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a8c:	3301      	adds	r3, #1
    1a8e:	64bb      	str	r3, [r7, #72]	; 0x48
    1a90:	e7e7      	b.n	1a62 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1a96:	f003 0302 	and.w	r3, r3, #2
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d00e      	beq.n	1abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    1a9e:	68fa      	ldr	r2, [r7, #12]
    1aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1aa2:	1ad3      	subs	r3, r2, r3
    1aa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1aa6:	429a      	cmp	r2, r3
    1aa8:	d908      	bls.n	1abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    1aaa:	68fa      	ldr	r2, [r7, #12]
    1aac:	1c53      	adds	r3, r2, #1
    1aae:	60fb      	str	r3, [r7, #12]
    1ab0:	697c      	ldr	r4, [r7, #20]
    1ab2:	68bb      	ldr	r3, [r7, #8]
    1ab4:	6939      	ldr	r1, [r7, #16]
    1ab6:	2020      	movs	r0, #32
    1ab8:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1aba:	e7f0      	b.n	1a9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    1abc:	68fb      	ldr	r3, [r7, #12]
}
    1abe:	4618      	mov	r0, r3
    1ac0:	376c      	adds	r7, #108	; 0x6c
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bd90      	pop	{r4, r7, pc}
    1ac6:	bf00      	nop

00001ac8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1ac8:	b5b0      	push	{r4, r5, r7, lr}
    1aca:	b0a0      	sub	sp, #128	; 0x80
    1acc:	af0a      	add	r7, sp, #40	; 0x28
    1ace:	60f8      	str	r0, [r7, #12]
    1ad0:	60b9      	str	r1, [r7, #8]
    1ad2:	607a      	str	r2, [r7, #4]
    1ad4:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    1ad6:	2300      	movs	r3, #0
    1ad8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    1ada:	68bb      	ldr	r3, [r7, #8]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d101      	bne.n	1ae4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    1ae0:	4ba2      	ldr	r3, [pc, #648]	; (1d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    1ae2:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    1ae4:	683b      	ldr	r3, [r7, #0]
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	f000 8445 	beq.w	2378 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	2b25      	cmp	r3, #37	; 0x25
    1af4:	d00d      	beq.n	1b12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    1af6:	683b      	ldr	r3, [r7, #0]
    1af8:	7818      	ldrb	r0, [r3, #0]
    1afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1afc:	1c53      	adds	r3, r2, #1
    1afe:	647b      	str	r3, [r7, #68]	; 0x44
    1b00:	68fc      	ldr	r4, [r7, #12]
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	68b9      	ldr	r1, [r7, #8]
    1b06:	47a0      	blx	r4
      format++;
    1b08:	683b      	ldr	r3, [r7, #0]
    1b0a:	3301      	adds	r3, #1
    1b0c:	603b      	str	r3, [r7, #0]
      continue;
    1b0e:	f000 bc31 	b.w	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    1b12:	683b      	ldr	r3, [r7, #0]
    1b14:	3301      	adds	r3, #1
    1b16:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    1b18:	2300      	movs	r3, #0
    1b1a:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	3b20      	subs	r3, #32
    1b22:	2b10      	cmp	r3, #16
    1b24:	d856      	bhi.n	1bd4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    1b26:	a201      	add	r2, pc, #4	; (adr r2, 1b2c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    1b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b2c:	00001bad 	.word	0x00001bad
    1b30:	00001bd5 	.word	0x00001bd5
    1b34:	00001bd5 	.word	0x00001bd5
    1b38:	00001bc1 	.word	0x00001bc1
    1b3c:	00001bd5 	.word	0x00001bd5
    1b40:	00001bd5 	.word	0x00001bd5
    1b44:	00001bd5 	.word	0x00001bd5
    1b48:	00001bd5 	.word	0x00001bd5
    1b4c:	00001bd5 	.word	0x00001bd5
    1b50:	00001bd5 	.word	0x00001bd5
    1b54:	00001bd5 	.word	0x00001bd5
    1b58:	00001b99 	.word	0x00001b99
    1b5c:	00001bd5 	.word	0x00001bd5
    1b60:	00001b85 	.word	0x00001b85
    1b64:	00001bd5 	.word	0x00001bd5
    1b68:	00001bd5 	.word	0x00001bd5
    1b6c:	00001b71 	.word	0x00001b71
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1b72:	f043 0301 	orr.w	r3, r3, #1
    1b76:	657b      	str	r3, [r7, #84]	; 0x54
    1b78:	683b      	ldr	r3, [r7, #0]
    1b7a:	3301      	adds	r3, #1
    1b7c:	603b      	str	r3, [r7, #0]
    1b7e:	2301      	movs	r3, #1
    1b80:	64bb      	str	r3, [r7, #72]	; 0x48
    1b82:	e02a      	b.n	1bda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1b86:	f043 0302 	orr.w	r3, r3, #2
    1b8a:	657b      	str	r3, [r7, #84]	; 0x54
    1b8c:	683b      	ldr	r3, [r7, #0]
    1b8e:	3301      	adds	r3, #1
    1b90:	603b      	str	r3, [r7, #0]
    1b92:	2301      	movs	r3, #1
    1b94:	64bb      	str	r3, [r7, #72]	; 0x48
    1b96:	e020      	b.n	1bda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1b9a:	f043 0304 	orr.w	r3, r3, #4
    1b9e:	657b      	str	r3, [r7, #84]	; 0x54
    1ba0:	683b      	ldr	r3, [r7, #0]
    1ba2:	3301      	adds	r3, #1
    1ba4:	603b      	str	r3, [r7, #0]
    1ba6:	2301      	movs	r3, #1
    1ba8:	64bb      	str	r3, [r7, #72]	; 0x48
    1baa:	e016      	b.n	1bda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bae:	f043 0308 	orr.w	r3, r3, #8
    1bb2:	657b      	str	r3, [r7, #84]	; 0x54
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	3301      	adds	r3, #1
    1bb8:	603b      	str	r3, [r7, #0]
    1bba:	2301      	movs	r3, #1
    1bbc:	64bb      	str	r3, [r7, #72]	; 0x48
    1bbe:	e00c      	b.n	1bda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bc2:	f043 0310 	orr.w	r3, r3, #16
    1bc6:	657b      	str	r3, [r7, #84]	; 0x54
    1bc8:	683b      	ldr	r3, [r7, #0]
    1bca:	3301      	adds	r3, #1
    1bcc:	603b      	str	r3, [r7, #0]
    1bce:	2301      	movs	r3, #1
    1bd0:	64bb      	str	r3, [r7, #72]	; 0x48
    1bd2:	e002      	b.n	1bda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    1bd4:	2300      	movs	r3, #0
    1bd6:	64bb      	str	r3, [r7, #72]	; 0x48
    1bd8:	bf00      	nop
      }
    } while (n);
    1bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d000      	beq.n	1be2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    1be0:	e79c      	b.n	1b1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    1be2:	2300      	movs	r3, #0
    1be4:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    1be6:	683b      	ldr	r3, [r7, #0]
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	4618      	mov	r0, r3
    1bec:	f7ff fb19 	bl	1222 <_is_digit(char)>
    1bf0:	4603      	mov	r3, r0
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d005      	beq.n	1c02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    1bf6:	463b      	mov	r3, r7
    1bf8:	4618      	mov	r0, r3
    1bfa:	f7ff fb26 	bl	124a <_atoi(char const**)>
    1bfe:	6538      	str	r0, [r7, #80]	; 0x50
    1c00:	e018      	b.n	1c34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	781b      	ldrb	r3, [r3, #0]
    1c06:	2b2a      	cmp	r3, #42	; 0x2a
    1c08:	d114      	bne.n	1c34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    1c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c0c:	1d1a      	adds	r2, r3, #4
    1c0e:	66ba      	str	r2, [r7, #104]	; 0x68
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    1c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c16:	2b00      	cmp	r3, #0
    1c18:	da07      	bge.n	1c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    1c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c1c:	f043 0302 	orr.w	r3, r3, #2
    1c20:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    1c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c24:	425b      	negs	r3, r3
    1c26:	653b      	str	r3, [r7, #80]	; 0x50
    1c28:	e001      	b.n	1c2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    1c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c2c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    1c2e:	683b      	ldr	r3, [r7, #0]
    1c30:	3301      	adds	r3, #1
    1c32:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    1c34:	2300      	movs	r3, #0
    1c36:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    1c38:	683b      	ldr	r3, [r7, #0]
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	2b2e      	cmp	r3, #46	; 0x2e
    1c3e:	d124      	bne.n	1c8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    1c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1c46:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    1c48:	683b      	ldr	r3, [r7, #0]
    1c4a:	3301      	adds	r3, #1
    1c4c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    1c4e:	683b      	ldr	r3, [r7, #0]
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	4618      	mov	r0, r3
    1c54:	f7ff fae5 	bl	1222 <_is_digit(char)>
    1c58:	4603      	mov	r3, r0
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d005      	beq.n	1c6a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    1c5e:	463b      	mov	r3, r7
    1c60:	4618      	mov	r0, r3
    1c62:	f7ff faf2 	bl	124a <_atoi(char const**)>
    1c66:	64f8      	str	r0, [r7, #76]	; 0x4c
    1c68:	e00f      	b.n	1c8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    1c6a:	683b      	ldr	r3, [r7, #0]
    1c6c:	781b      	ldrb	r3, [r3, #0]
    1c6e:	2b2a      	cmp	r3, #42	; 0x2a
    1c70:	d10b      	bne.n	1c8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    1c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c74:	1d1a      	adds	r2, r3, #4
    1c76:	66ba      	str	r2, [r7, #104]	; 0x68
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1c82:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    1c84:	683b      	ldr	r3, [r7, #0]
    1c86:	3301      	adds	r3, #1
    1c88:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    1c8a:	683b      	ldr	r3, [r7, #0]
    1c8c:	781b      	ldrb	r3, [r3, #0]
    1c8e:	3b68      	subs	r3, #104	; 0x68
    1c90:	2b12      	cmp	r3, #18
    1c92:	d867      	bhi.n	1d64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    1c94:	a201      	add	r2, pc, #4	; (adr r2, 1c9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    1c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c9a:	bf00      	nop
    1c9c:	00001d0f 	.word	0x00001d0f
    1ca0:	00001d65 	.word	0x00001d65
    1ca4:	00001d45 	.word	0x00001d45
    1ca8:	00001d65 	.word	0x00001d65
    1cac:	00001ce9 	.word	0x00001ce9
    1cb0:	00001d65 	.word	0x00001d65
    1cb4:	00001d65 	.word	0x00001d65
    1cb8:	00001d65 	.word	0x00001d65
    1cbc:	00001d65 	.word	0x00001d65
    1cc0:	00001d65 	.word	0x00001d65
    1cc4:	00001d65 	.word	0x00001d65
    1cc8:	00001d65 	.word	0x00001d65
    1ccc:	00001d35 	.word	0x00001d35
    1cd0:	00001d65 	.word	0x00001d65
    1cd4:	00001d65 	.word	0x00001d65
    1cd8:	00001d65 	.word	0x00001d65
    1cdc:	00001d65 	.word	0x00001d65
    1ce0:	00001d65 	.word	0x00001d65
    1ce4:	00001d55 	.word	0x00001d55
      case 'l' :
        flags |= FLAGS_LONG;
    1ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1cee:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1cf0:	683b      	ldr	r3, [r7, #0]
    1cf2:	3301      	adds	r3, #1
    1cf4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    1cf6:	683b      	ldr	r3, [r7, #0]
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	2b6c      	cmp	r3, #108	; 0x6c
    1cfc:	d134      	bne.n	1d68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    1cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1d04:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1d06:	683b      	ldr	r3, [r7, #0]
    1d08:	3301      	adds	r3, #1
    1d0a:	603b      	str	r3, [r7, #0]
        }
        break;
    1d0c:	e02c      	b.n	1d68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    1d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d14:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	3301      	adds	r3, #1
    1d1a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    1d1c:	683b      	ldr	r3, [r7, #0]
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	2b68      	cmp	r3, #104	; 0x68
    1d22:	d125      	bne.n	1d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    1d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d2a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	3301      	adds	r3, #1
    1d30:	603b      	str	r3, [r7, #0]
        }
        break;
    1d32:	e01d      	b.n	1d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1d3a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	3301      	adds	r3, #1
    1d40:	603b      	str	r3, [r7, #0]
        break;
    1d42:	e016      	b.n	1d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1d4a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1d4c:	683b      	ldr	r3, [r7, #0]
    1d4e:	3301      	adds	r3, #1
    1d50:	603b      	str	r3, [r7, #0]
        break;
    1d52:	e00e      	b.n	1d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1d5a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1d5c:	683b      	ldr	r3, [r7, #0]
    1d5e:	3301      	adds	r3, #1
    1d60:	603b      	str	r3, [r7, #0]
        break;
    1d62:	e006      	b.n	1d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    1d64:	bf00      	nop
    1d66:	e004      	b.n	1d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    1d68:	bf00      	nop
    1d6a:	e002      	b.n	1d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    1d6c:	000011d9 	.word	0x000011d9
        break;
    1d70:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    1d72:	683b      	ldr	r3, [r7, #0]
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	3b25      	subs	r3, #37	; 0x25
    1d78:	2b53      	cmp	r3, #83	; 0x53
    1d7a:	f200 82ee 	bhi.w	235a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    1d7e:	a201      	add	r2, pc, #4	; (adr r2, 1d84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    1d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d84:	00002343 	.word	0x00002343
    1d88:	0000235b 	.word	0x0000235b
    1d8c:	0000235b 	.word	0x0000235b
    1d90:	0000235b 	.word	0x0000235b
    1d94:	0000235b 	.word	0x0000235b
    1d98:	0000235b 	.word	0x0000235b
    1d9c:	0000235b 	.word	0x0000235b
    1da0:	0000235b 	.word	0x0000235b
    1da4:	0000235b 	.word	0x0000235b
    1da8:	0000235b 	.word	0x0000235b
    1dac:	0000235b 	.word	0x0000235b
    1db0:	0000235b 	.word	0x0000235b
    1db4:	0000235b 	.word	0x0000235b
    1db8:	0000235b 	.word	0x0000235b
    1dbc:	0000235b 	.word	0x0000235b
    1dc0:	0000235b 	.word	0x0000235b
    1dc4:	0000235b 	.word	0x0000235b
    1dc8:	0000235b 	.word	0x0000235b
    1dcc:	0000235b 	.word	0x0000235b
    1dd0:	0000235b 	.word	0x0000235b
    1dd4:	0000235b 	.word	0x0000235b
    1dd8:	0000235b 	.word	0x0000235b
    1ddc:	0000235b 	.word	0x0000235b
    1de0:	0000235b 	.word	0x0000235b
    1de4:	0000235b 	.word	0x0000235b
    1de8:	0000235b 	.word	0x0000235b
    1dec:	0000235b 	.word	0x0000235b
    1df0:	0000235b 	.word	0x0000235b
    1df4:	0000235b 	.word	0x0000235b
    1df8:	0000235b 	.word	0x0000235b
    1dfc:	0000235b 	.word	0x0000235b
    1e00:	0000235b 	.word	0x0000235b
    1e04:	0000235b 	.word	0x0000235b
    1e08:	00002161 	.word	0x00002161
    1e0c:	0000235b 	.word	0x0000235b
    1e10:	0000235b 	.word	0x0000235b
    1e14:	0000235b 	.word	0x0000235b
    1e18:	0000235b 	.word	0x0000235b
    1e1c:	0000235b 	.word	0x0000235b
    1e20:	0000235b 	.word	0x0000235b
    1e24:	0000235b 	.word	0x0000235b
    1e28:	0000235b 	.word	0x0000235b
    1e2c:	0000235b 	.word	0x0000235b
    1e30:	0000235b 	.word	0x0000235b
    1e34:	0000235b 	.word	0x0000235b
    1e38:	0000235b 	.word	0x0000235b
    1e3c:	0000235b 	.word	0x0000235b
    1e40:	0000235b 	.word	0x0000235b
    1e44:	0000235b 	.word	0x0000235b
    1e48:	0000235b 	.word	0x0000235b
    1e4c:	0000235b 	.word	0x0000235b
    1e50:	00001ed5 	.word	0x00001ed5
    1e54:	0000235b 	.word	0x0000235b
    1e58:	0000235b 	.word	0x0000235b
    1e5c:	0000235b 	.word	0x0000235b
    1e60:	0000235b 	.word	0x0000235b
    1e64:	0000235b 	.word	0x0000235b
    1e68:	0000235b 	.word	0x0000235b
    1e6c:	0000235b 	.word	0x0000235b
    1e70:	0000235b 	.word	0x0000235b
    1e74:	0000235b 	.word	0x0000235b
    1e78:	00001ed5 	.word	0x00001ed5
    1e7c:	0000219d 	.word	0x0000219d
    1e80:	00001ed5 	.word	0x00001ed5
    1e84:	0000235b 	.word	0x0000235b
    1e88:	00002161 	.word	0x00002161
    1e8c:	0000235b 	.word	0x0000235b
    1e90:	0000235b 	.word	0x0000235b
    1e94:	00001ed5 	.word	0x00001ed5
    1e98:	0000235b 	.word	0x0000235b
    1e9c:	0000235b 	.word	0x0000235b
    1ea0:	0000235b 	.word	0x0000235b
    1ea4:	0000235b 	.word	0x0000235b
    1ea8:	0000235b 	.word	0x0000235b
    1eac:	00001ed5 	.word	0x00001ed5
    1eb0:	000022fb 	.word	0x000022fb
    1eb4:	0000235b 	.word	0x0000235b
    1eb8:	0000235b 	.word	0x0000235b
    1ebc:	00002225 	.word	0x00002225
    1ec0:	0000235b 	.word	0x0000235b
    1ec4:	00001ed5 	.word	0x00001ed5
    1ec8:	0000235b 	.word	0x0000235b
    1ecc:	0000235b 	.word	0x0000235b
    1ed0:	00001ed5 	.word	0x00001ed5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    1ed4:	683b      	ldr	r3, [r7, #0]
    1ed6:	781b      	ldrb	r3, [r3, #0]
    1ed8:	2b78      	cmp	r3, #120	; 0x78
    1eda:	d003      	beq.n	1ee4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    1edc:	683b      	ldr	r3, [r7, #0]
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	2b58      	cmp	r3, #88	; 0x58
    1ee2:	d102      	bne.n	1eea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    1ee4:	2310      	movs	r3, #16
    1ee6:	643b      	str	r3, [r7, #64]	; 0x40
    1ee8:	e013      	b.n	1f12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	2b6f      	cmp	r3, #111	; 0x6f
    1ef0:	d102      	bne.n	1ef8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    1ef2:	2308      	movs	r3, #8
    1ef4:	643b      	str	r3, [r7, #64]	; 0x40
    1ef6:	e00c      	b.n	1f12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    1ef8:	683b      	ldr	r3, [r7, #0]
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	2b62      	cmp	r3, #98	; 0x62
    1efe:	d102      	bne.n	1f06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    1f00:	2302      	movs	r3, #2
    1f02:	643b      	str	r3, [r7, #64]	; 0x40
    1f04:	e005      	b.n	1f12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    1f06:	230a      	movs	r3, #10
    1f08:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f0c:	f023 0310 	bic.w	r3, r3, #16
    1f10:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    1f12:	683b      	ldr	r3, [r7, #0]
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	2b58      	cmp	r3, #88	; 0x58
    1f18:	d103      	bne.n	1f22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    1f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f1c:	f043 0320 	orr.w	r3, r3, #32
    1f20:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    1f22:	683b      	ldr	r3, [r7, #0]
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	2b69      	cmp	r3, #105	; 0x69
    1f28:	d007      	beq.n	1f3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    1f2a:	683b      	ldr	r3, [r7, #0]
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	2b64      	cmp	r3, #100	; 0x64
    1f30:	d003      	beq.n	1f3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f34:	f023 030c 	bic.w	r3, r3, #12
    1f38:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    1f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1f40:	2b00      	cmp	r3, #0
    1f42:	d003      	beq.n	1f4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    1f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f46:	f023 0301 	bic.w	r3, r3, #1
    1f4a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	781b      	ldrb	r3, [r3, #0]
    1f50:	2b69      	cmp	r3, #105	; 0x69
    1f52:	d004      	beq.n	1f5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    1f54:	683b      	ldr	r3, [r7, #0]
    1f56:	781b      	ldrb	r3, [r3, #0]
    1f58:	2b64      	cmp	r3, #100	; 0x64
    1f5a:	f040 808d 	bne.w	2078 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    1f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1f64:	2b00      	cmp	r3, #0
    1f66:	d02e      	beq.n	1fc6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    1f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f6a:	3307      	adds	r3, #7
    1f6c:	f023 0307 	bic.w	r3, r3, #7
    1f70:	f103 0208 	add.w	r2, r3, #8
    1f74:	66ba      	str	r2, [r7, #104]	; 0x68
    1f76:	e9d3 3400 	ldrd	r3, r4, [r3]
    1f7a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1f7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    1f82:	2b00      	cmp	r3, #0
    1f84:	f174 0200 	sbcs.w	r2, r4, #0
    1f88:	da02      	bge.n	1f90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    1f8a:	425b      	negs	r3, r3
    1f8c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1f90:	4619      	mov	r1, r3
    1f92:	4622      	mov	r2, r4
    1f94:	697b      	ldr	r3, [r7, #20]
    1f96:	0fdb      	lsrs	r3, r3, #31
    1f98:	b2d8      	uxtb	r0, r3
    1f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f9c:	f04f 0400 	mov.w	r4, #0
    1fa0:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    1fa2:	9508      	str	r5, [sp, #32]
    1fa4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    1fa6:	9507      	str	r5, [sp, #28]
    1fa8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    1faa:	9506      	str	r5, [sp, #24]
    1fac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1fb0:	9002      	str	r0, [sp, #8]
    1fb2:	e9cd 1200 	strd	r1, r2, [sp]
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1fba:	68b9      	ldr	r1, [r7, #8]
    1fbc:	68f8      	ldr	r0, [r7, #12]
    1fbe:	f7ff faf1 	bl	15a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    1fc2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    1fc4:	e0c8      	b.n	2158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    1fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d01e      	beq.n	200e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    1fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1fd2:	1d1a      	adds	r2, r3, #4
    1fd4:	66ba      	str	r2, [r7, #104]	; 0x68
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1fda:	69fb      	ldr	r3, [r7, #28]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	bfb8      	it	lt
    1fe0:	425b      	neglt	r3, r3
    1fe2:	4619      	mov	r1, r3
    1fe4:	69fb      	ldr	r3, [r7, #28]
    1fe6:	0fdb      	lsrs	r3, r3, #31
    1fe8:	b2db      	uxtb	r3, r3
    1fea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1fec:	9205      	str	r2, [sp, #20]
    1fee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1ff0:	9204      	str	r2, [sp, #16]
    1ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1ff4:	9203      	str	r2, [sp, #12]
    1ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ff8:	9202      	str	r2, [sp, #8]
    1ffa:	9301      	str	r3, [sp, #4]
    1ffc:	9100      	str	r1, [sp, #0]
    1ffe:	687b      	ldr	r3, [r7, #4]
    2000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2002:	68b9      	ldr	r1, [r7, #8]
    2004:	68f8      	ldr	r0, [r7, #12]
    2006:	f7ff fa65 	bl	14d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    200a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    200c:	e0a4      	b.n	2158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2010:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2014:	2b00      	cmp	r3, #0
    2016:	d005      	beq.n	2024 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    2018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    201a:	1d1a      	adds	r2, r3, #4
    201c:	66ba      	str	r2, [r7, #104]	; 0x68
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	b2db      	uxtb	r3, r3
    2022:	e00e      	b.n	2042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    2024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2026:	f003 0380 	and.w	r3, r3, #128	; 0x80
    202a:	2b00      	cmp	r3, #0
    202c:	d005      	beq.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    202e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2030:	1d1a      	adds	r2, r3, #4
    2032:	66ba      	str	r2, [r7, #104]	; 0x68
    2034:	681b      	ldr	r3, [r3, #0]
    2036:	b21b      	sxth	r3, r3
    2038:	e003      	b.n	2042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    203a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    203c:	1d1a      	adds	r2, r3, #4
    203e:	66ba      	str	r2, [r7, #104]	; 0x68
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2044:	6a3b      	ldr	r3, [r7, #32]
    2046:	2b00      	cmp	r3, #0
    2048:	bfb8      	it	lt
    204a:	425b      	neglt	r3, r3
    204c:	4619      	mov	r1, r3
    204e:	6a3b      	ldr	r3, [r7, #32]
    2050:	0fdb      	lsrs	r3, r3, #31
    2052:	b2db      	uxtb	r3, r3
    2054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2056:	9205      	str	r2, [sp, #20]
    2058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    205a:	9204      	str	r2, [sp, #16]
    205c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    205e:	9203      	str	r2, [sp, #12]
    2060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2062:	9202      	str	r2, [sp, #8]
    2064:	9301      	str	r3, [sp, #4]
    2066:	9100      	str	r1, [sp, #0]
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    206c:	68b9      	ldr	r1, [r7, #8]
    206e:	68f8      	ldr	r0, [r7, #12]
    2070:	f7ff fa30 	bl	14d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2074:	6478      	str	r0, [r7, #68]	; 0x44
          }
    2076:	e06f      	b.n	2158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    207e:	2b00      	cmp	r3, #0
    2080:	d020      	beq.n	20c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2084:	3307      	adds	r3, #7
    2086:	f023 0307 	bic.w	r3, r3, #7
    208a:	f103 0208 	add.w	r2, r3, #8
    208e:	66ba      	str	r2, [r7, #104]	; 0x68
    2090:	e9d3 3400 	ldrd	r3, r4, [r3]
    2094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2096:	4611      	mov	r1, r2
    2098:	f04f 0200 	mov.w	r2, #0
    209c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    209e:	9008      	str	r0, [sp, #32]
    20a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    20a2:	9007      	str	r0, [sp, #28]
    20a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    20a6:	9006      	str	r0, [sp, #24]
    20a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
    20ac:	2200      	movs	r2, #0
    20ae:	9202      	str	r2, [sp, #8]
    20b0:	e9cd 3400 	strd	r3, r4, [sp]
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    20b8:	68b9      	ldr	r1, [r7, #8]
    20ba:	68f8      	ldr	r0, [r7, #12]
    20bc:	f7ff fa72 	bl	15a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    20c0:	6478      	str	r0, [r7, #68]	; 0x44
    20c2:	e049      	b.n	2158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    20c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    20ca:	2b00      	cmp	r3, #0
    20cc:	d016      	beq.n	20fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    20ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    20d0:	1d1a      	adds	r2, r3, #4
    20d2:	66ba      	str	r2, [r7, #104]	; 0x68
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    20d8:	9205      	str	r2, [sp, #20]
    20da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    20dc:	9204      	str	r2, [sp, #16]
    20de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    20e0:	9203      	str	r2, [sp, #12]
    20e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    20e4:	9202      	str	r2, [sp, #8]
    20e6:	2200      	movs	r2, #0
    20e8:	9201      	str	r2, [sp, #4]
    20ea:	9300      	str	r3, [sp, #0]
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    20f0:	68b9      	ldr	r1, [r7, #8]
    20f2:	68f8      	ldr	r0, [r7, #12]
    20f4:	f7ff f9ee 	bl	14d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    20f8:	6478      	str	r0, [r7, #68]	; 0x44
    20fa:	e02d      	b.n	2158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    20fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2102:	2b00      	cmp	r3, #0
    2104:	d005      	beq.n	2112 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    2106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2108:	1d1a      	adds	r2, r3, #4
    210a:	66ba      	str	r2, [r7, #104]	; 0x68
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	b2db      	uxtb	r3, r3
    2110:	e00e      	b.n	2130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    2112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2114:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2118:	2b00      	cmp	r3, #0
    211a:	d005      	beq.n	2128 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    211c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    211e:	1d1a      	adds	r2, r3, #4
    2120:	66ba      	str	r2, [r7, #104]	; 0x68
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	b29b      	uxth	r3, r3
    2126:	e003      	b.n	2130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    2128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    212a:	1d1a      	adds	r2, r3, #4
    212c:	66ba      	str	r2, [r7, #104]	; 0x68
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2134:	9305      	str	r3, [sp, #20]
    2136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2138:	9304      	str	r3, [sp, #16]
    213a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    213c:	9303      	str	r3, [sp, #12]
    213e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2140:	9302      	str	r3, [sp, #8]
    2142:	2300      	movs	r3, #0
    2144:	9301      	str	r3, [sp, #4]
    2146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2148:	9300      	str	r3, [sp, #0]
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    214e:	68b9      	ldr	r1, [r7, #8]
    2150:	68f8      	ldr	r0, [r7, #12]
    2152:	f7ff f9bf 	bl	14d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2156:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    2158:	683b      	ldr	r3, [r7, #0]
    215a:	3301      	adds	r3, #1
    215c:	603b      	str	r3, [r7, #0]
        break;
    215e:	e109      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2162:	3307      	adds	r3, #7
    2164:	f023 0307 	bic.w	r3, r3, #7
    2168:	f103 0208 	add.w	r2, r3, #8
    216c:	66ba      	str	r2, [r7, #104]	; 0x68
    216e:	ed93 7b00 	vldr	d7, [r3]
    2172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2174:	9302      	str	r3, [sp, #8]
    2176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2178:	9301      	str	r3, [sp, #4]
    217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    217c:	9300      	str	r3, [sp, #0]
    217e:	eeb0 0a47 	vmov.f32	s0, s14
    2182:	eef0 0a67 	vmov.f32	s1, s15
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    218a:	68b9      	ldr	r1, [r7, #8]
    218c:	68f8      	ldr	r0, [r7, #12]
    218e:	f7ff fa79 	bl	1684 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2192:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2194:	683b      	ldr	r3, [r7, #0]
    2196:	3301      	adds	r3, #1
    2198:	603b      	str	r3, [r7, #0]
        break;
    219a:	e0eb      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    219c:	2301      	movs	r3, #1
    219e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    21a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21a2:	f003 0302 	and.w	r3, r3, #2
    21a6:	2b00      	cmp	r3, #0
    21a8:	d113      	bne.n	21d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    21aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21ac:	1c5a      	adds	r2, r3, #1
    21ae:	63fa      	str	r2, [r7, #60]	; 0x3c
    21b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    21b2:	429a      	cmp	r2, r3
    21b4:	bf8c      	ite	hi
    21b6:	2301      	movhi	r3, #1
    21b8:	2300      	movls	r3, #0
    21ba:	b2db      	uxtb	r3, r3
    21bc:	2b00      	cmp	r3, #0
    21be:	d008      	beq.n	21d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    21c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    21c2:	1c53      	adds	r3, r2, #1
    21c4:	647b      	str	r3, [r7, #68]	; 0x44
    21c6:	68fc      	ldr	r4, [r7, #12]
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	68b9      	ldr	r1, [r7, #8]
    21cc:	2020      	movs	r0, #32
    21ce:	47a0      	blx	r4
          while (l++ < width) {
    21d0:	e7eb      	b.n	21aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    21d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21d4:	1d1a      	adds	r2, r3, #4
    21d6:	66ba      	str	r2, [r7, #104]	; 0x68
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	b2d8      	uxtb	r0, r3
    21dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    21de:	1c53      	adds	r3, r2, #1
    21e0:	647b      	str	r3, [r7, #68]	; 0x44
    21e2:	68fc      	ldr	r4, [r7, #12]
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	68b9      	ldr	r1, [r7, #8]
    21e8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    21ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21ec:	f003 0302 	and.w	r3, r3, #2
    21f0:	2b00      	cmp	r3, #0
    21f2:	d013      	beq.n	221c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    21f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21f6:	1c5a      	adds	r2, r3, #1
    21f8:	63fa      	str	r2, [r7, #60]	; 0x3c
    21fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    21fc:	429a      	cmp	r2, r3
    21fe:	bf8c      	ite	hi
    2200:	2301      	movhi	r3, #1
    2202:	2300      	movls	r3, #0
    2204:	b2db      	uxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	d008      	beq.n	221c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    220a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    220c:	1c53      	adds	r3, r2, #1
    220e:	647b      	str	r3, [r7, #68]	; 0x44
    2210:	68fc      	ldr	r4, [r7, #12]
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	68b9      	ldr	r1, [r7, #8]
    2216:	2020      	movs	r0, #32
    2218:	47a0      	blx	r4
          while (l++ < width) {
    221a:	e7eb      	b.n	21f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    221c:	683b      	ldr	r3, [r7, #0]
    221e:	3301      	adds	r3, #1
    2220:	603b      	str	r3, [r7, #0]
        break;
    2222:	e0a7      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    2224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2226:	1d1a      	adds	r2, r3, #4
    2228:	66ba      	str	r2, [r7, #104]	; 0x68
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    222e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    2230:	f7fe ffe0 	bl	11f4 <_strlen(char const*)>
    2234:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    223c:	2b00      	cmp	r3, #0
    223e:	d007      	beq.n	2250 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    2240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2244:	429a      	cmp	r2, r3
    2246:	d201      	bcs.n	224c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    2248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    224a:	e000      	b.n	224e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    224c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    224e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    2250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2252:	f003 0302 	and.w	r3, r3, #2
    2256:	2b00      	cmp	r3, #0
    2258:	d113      	bne.n	2282 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    225c:	1c5a      	adds	r2, r3, #1
    225e:	637a      	str	r2, [r7, #52]	; 0x34
    2260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2262:	429a      	cmp	r2, r3
    2264:	bf8c      	ite	hi
    2266:	2301      	movhi	r3, #1
    2268:	2300      	movls	r3, #0
    226a:	b2db      	uxtb	r3, r3
    226c:	2b00      	cmp	r3, #0
    226e:	d008      	beq.n	2282 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    2270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2272:	1c53      	adds	r3, r2, #1
    2274:	647b      	str	r3, [r7, #68]	; 0x44
    2276:	68fc      	ldr	r4, [r7, #12]
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	68b9      	ldr	r1, [r7, #8]
    227c:	2020      	movs	r0, #32
    227e:	47a0      	blx	r4
          while (l++ < width) {
    2280:	e7eb      	b.n	225a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2284:	781b      	ldrb	r3, [r3, #0]
    2286:	2b00      	cmp	r3, #0
    2288:	d00b      	beq.n	22a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    228a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2290:	2b00      	cmp	r3, #0
    2292:	d004      	beq.n	229e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    2294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2296:	1e5a      	subs	r2, r3, #1
    2298:	64fa      	str	r2, [r7, #76]	; 0x4c
    229a:	2b00      	cmp	r3, #0
    229c:	d001      	beq.n	22a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    229e:	2301      	movs	r3, #1
    22a0:	e000      	b.n	22a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    22a2:	2300      	movs	r3, #0
    22a4:	2b00      	cmp	r3, #0
    22a6:	d00b      	beq.n	22c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    22a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22aa:	1c5a      	adds	r2, r3, #1
    22ac:	63ba      	str	r2, [r7, #56]	; 0x38
    22ae:	7818      	ldrb	r0, [r3, #0]
    22b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    22b2:	1c53      	adds	r3, r2, #1
    22b4:	647b      	str	r3, [r7, #68]	; 0x44
    22b6:	68fc      	ldr	r4, [r7, #12]
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	68b9      	ldr	r1, [r7, #8]
    22bc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    22be:	e7e0      	b.n	2282 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    22c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22c2:	f003 0302 	and.w	r3, r3, #2
    22c6:	2b00      	cmp	r3, #0
    22c8:	d013      	beq.n	22f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    22ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22cc:	1c5a      	adds	r2, r3, #1
    22ce:	637a      	str	r2, [r7, #52]	; 0x34
    22d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    22d2:	429a      	cmp	r2, r3
    22d4:	bf8c      	ite	hi
    22d6:	2301      	movhi	r3, #1
    22d8:	2300      	movls	r3, #0
    22da:	b2db      	uxtb	r3, r3
    22dc:	2b00      	cmp	r3, #0
    22de:	d008      	beq.n	22f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    22e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    22e2:	1c53      	adds	r3, r2, #1
    22e4:	647b      	str	r3, [r7, #68]	; 0x44
    22e6:	68fc      	ldr	r4, [r7, #12]
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	68b9      	ldr	r1, [r7, #8]
    22ec:	2020      	movs	r0, #32
    22ee:	47a0      	blx	r4
          while (l++ < width) {
    22f0:	e7eb      	b.n	22ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	3301      	adds	r3, #1
    22f6:	603b      	str	r3, [r7, #0]
        break;
    22f8:	e03c      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    22fa:	2308      	movs	r3, #8
    22fc:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    22fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2300:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    2304:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    2306:	2300      	movs	r3, #0
    2308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    230c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    230e:	1d1a      	adds	r2, r3, #4
    2310:	66ba      	str	r2, [r7, #104]	; 0x68
    2312:	681b      	ldr	r3, [r3, #0]
    2314:	461a      	mov	r2, r3
    2316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2318:	9305      	str	r3, [sp, #20]
    231a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    231c:	9304      	str	r3, [sp, #16]
    231e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2320:	9303      	str	r3, [sp, #12]
    2322:	2310      	movs	r3, #16
    2324:	9302      	str	r3, [sp, #8]
    2326:	2300      	movs	r3, #0
    2328:	9301      	str	r3, [sp, #4]
    232a:	9200      	str	r2, [sp, #0]
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2330:	68b9      	ldr	r1, [r7, #8]
    2332:	68f8      	ldr	r0, [r7, #12]
    2334:	f7ff f8ce 	bl	14d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2338:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    233a:	683b      	ldr	r3, [r7, #0]
    233c:	3301      	adds	r3, #1
    233e:	603b      	str	r3, [r7, #0]
        break;
    2340:	e018      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2344:	1c53      	adds	r3, r2, #1
    2346:	647b      	str	r3, [r7, #68]	; 0x44
    2348:	68fc      	ldr	r4, [r7, #12]
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	68b9      	ldr	r1, [r7, #8]
    234e:	2025      	movs	r0, #37	; 0x25
    2350:	47a0      	blx	r4
        format++;
    2352:	683b      	ldr	r3, [r7, #0]
    2354:	3301      	adds	r3, #1
    2356:	603b      	str	r3, [r7, #0]
        break;
    2358:	e00c      	b.n	2374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    235a:	683b      	ldr	r3, [r7, #0]
    235c:	7818      	ldrb	r0, [r3, #0]
    235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2360:	1c53      	adds	r3, r2, #1
    2362:	647b      	str	r3, [r7, #68]	; 0x44
    2364:	68fc      	ldr	r4, [r7, #12]
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	68b9      	ldr	r1, [r7, #8]
    236a:	47a0      	blx	r4
        format++;
    236c:	683b      	ldr	r3, [r7, #0]
    236e:	3301      	adds	r3, #1
    2370:	603b      	str	r3, [r7, #0]
        break;
    2372:	bf00      	nop
  while (*format)
    2374:	f7ff bbb6 	b.w	1ae4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	429a      	cmp	r2, r3
    237e:	d302      	bcc.n	2386 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	1e5a      	subs	r2, r3, #1
    2384:	e000      	b.n	2388 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    2386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2388:	68fc      	ldr	r4, [r7, #12]
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	68b9      	ldr	r1, [r7, #8]
    238e:	2000      	movs	r0, #0
    2390:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    2392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2394:	4618      	mov	r0, r3
    2396:	3758      	adds	r7, #88	; 0x58
    2398:	46bd      	mov	sp, r7
    239a:	bdb0      	pop	{r4, r5, r7, pc}

0000239c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    239c:	b40f      	push	{r0, r1, r2, r3}
    239e:	b580      	push	{r7, lr}
    23a0:	b0c4      	sub	sp, #272	; 0x110
    23a2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    23a4:	f507 738a 	add.w	r3, r7, #276	; 0x114
    23a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    23ac:	4639      	mov	r1, r7
    23ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    23b2:	9300      	str	r3, [sp, #0]
    23b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    23b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    23bc:	4807      	ldr	r0, [pc, #28]	; (23dc <printf+0x40>)
    23be:	f7ff fb83 	bl	1ac8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    23c2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    23c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    23ca:	4618      	mov	r0, r3
    23cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
    23d0:	46bd      	mov	sp, r7
    23d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    23d6:	b004      	add	sp, #16
    23d8:	4770      	bx	lr
    23da:	bf00      	nop
    23dc:	00001169 	.word	0x00001169

000023e0 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    23e0:	b480      	push	{r7}
    23e2:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    23e4:	bf00      	nop
    23e6:	46bd      	mov	sp, r7
    23e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ec:	4770      	bx	lr

000023ee <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    23ee:	b580      	push	{r7, lr}
    23f0:	b082      	sub	sp, #8
    23f2:	af00      	add	r7, sp, #0
    23f4:	6078      	str	r0, [r7, #4]
    23f6:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    23f8:	6839      	ldr	r1, [r7, #0]
    23fa:	6878      	ldr	r0, [r7, #4]
    23fc:	f000 f806 	bl	240c <_trace_write_semihosting_stdout(char const*, unsigned int)>
    2400:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    2402:	4618      	mov	r0, r3
    2404:	3708      	adds	r7, #8
    2406:	46bd      	mov	sp, r7
    2408:	bd80      	pop	{r7, pc}
    240a:	Address 0x000000000000240a is out of bounds.


0000240c <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    240c:	b5b0      	push	{r4, r5, r7, lr}
    240e:	b08c      	sub	sp, #48	; 0x30
    2410:	af00      	add	r7, sp, #0
    2412:	6078      	str	r0, [r7, #4]
    2414:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    2416:	4b2d      	ldr	r3, [pc, #180]	; (24cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	f003 0301 	and.w	r3, r3, #1
    241e:	2b00      	cmp	r3, #0
    2420:	bf0c      	ite	eq
    2422:	2301      	moveq	r3, #1
    2424:	2300      	movne	r3, #0
    2426:	b2db      	uxtb	r3, r3
    2428:	2b00      	cmp	r3, #0
    242a:	d001      	beq.n	2430 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    242c:	683b      	ldr	r3, [r7, #0]
    242e:	e049      	b.n	24c4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    2430:	4b27      	ldr	r3, [pc, #156]	; (24d0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2432:	681b      	ldr	r3, [r3, #0]
    2434:	2b00      	cmp	r3, #0
    2436:	d11d      	bne.n	2474 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    2438:	4b26      	ldr	r3, [pc, #152]	; (24d4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    243a:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    243c:	2304      	movs	r3, #4
    243e:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    2440:	2303      	movs	r3, #3
    2442:	613b      	str	r3, [r7, #16]
    2444:	2301      	movs	r3, #1
    2446:	62bb      	str	r3, [r7, #40]	; 0x28
    2448:	f107 0308 	add.w	r3, r7, #8
    244c:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    244e:	6abc      	ldr	r4, [r7, #40]	; 0x28
    2450:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    2452:	4620      	mov	r0, r4
    2454:	4629      	mov	r1, r5
    2456:	beab      	bkpt	0x00ab
    2458:	4604      	mov	r4, r0
    245a:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    245c:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    245e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    2460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2466:	d102      	bne.n	246e <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    2468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    246c:	e02a      	b.n	24c4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    246e:	4a18      	ldr	r2, [pc, #96]	; (24d0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2472:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    2474:	4b16      	ldr	r3, [pc, #88]	; (24d0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2476:	681b      	ldr	r3, [r3, #0]
    2478:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    247e:	683b      	ldr	r3, [r7, #0]
    2480:	613b      	str	r3, [r7, #16]
    2482:	2305      	movs	r3, #5
    2484:	61fb      	str	r3, [r7, #28]
    2486:	f107 0308 	add.w	r3, r7, #8
    248a:	61bb      	str	r3, [r7, #24]
  );
    248c:	69fc      	ldr	r4, [r7, #28]
    248e:	69bd      	ldr	r5, [r7, #24]
    2490:	4620      	mov	r0, r4
    2492:	4629      	mov	r1, r5
    2494:	beab      	bkpt	0x00ab
    2496:	4604      	mov	r4, r0
    2498:	617c      	str	r4, [r7, #20]
  return value;
    249a:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    249c:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    24a4:	d102      	bne.n	24ac <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    24a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24aa:	e00b      	b.n	24c4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	461a      	mov	r2, r3
    24b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24b2:	4293      	cmp	r3, r2
    24b4:	d102      	bne.n	24bc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    24b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24ba:	e003      	b.n	24c4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    24bc:	683b      	ldr	r3, [r7, #0]
    24be:	461a      	mov	r2, r3
    24c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24c2:	1ad3      	subs	r3, r2, r3
}
    24c4:	4618      	mov	r0, r3
    24c6:	3730      	adds	r7, #48	; 0x30
    24c8:	46bd      	mov	sp, r7
    24ca:	bdb0      	pop	{r4, r5, r7, pc}
    24cc:	e000edf0 	.word	0xe000edf0
    24d0:	10000290 	.word	0x10000290
    24d4:	000061dc 	.word	0x000061dc

000024d8 <NVIC_EnableIRQ>:
{
    24d8:	b480      	push	{r7}
    24da:	b083      	sub	sp, #12
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	f003 021f 	and.w	r2, r3, #31
    24e6:	4907      	ldr	r1, [pc, #28]	; (2504 <NVIC_EnableIRQ+0x2c>)
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	095b      	lsrs	r3, r3, #5
    24ec:	2001      	movs	r0, #1
    24ee:	fa00 f202 	lsl.w	r2, r0, r2
    24f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    24f6:	bf00      	nop
    24f8:	370c      	adds	r7, #12
    24fa:	46bd      	mov	sp, r7
    24fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	e000e100 	.word	0xe000e100

00002508 <NVIC_DisableIRQ>:
{
    2508:	b480      	push	{r7}
    250a:	b083      	sub	sp, #12
    250c:	af00      	add	r7, sp, #0
    250e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	f003 021f 	and.w	r2, r3, #31
    2516:	4907      	ldr	r1, [pc, #28]	; (2534 <NVIC_DisableIRQ+0x2c>)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	095b      	lsrs	r3, r3, #5
    251c:	2001      	movs	r0, #1
    251e:	fa00 f202 	lsl.w	r2, r0, r2
    2522:	3320      	adds	r3, #32
    2524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2528:	bf00      	nop
    252a:	370c      	adds	r7, #12
    252c:	46bd      	mov	sp, r7
    252e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2532:	4770      	bx	lr
    2534:	e000e100 	.word	0xe000e100

00002538 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    2538:	b480      	push	{r7}
    253a:	b083      	sub	sp, #12
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
    2540:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	2b00      	cmp	r3, #0
    2546:	da0b      	bge.n	2560 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2548:	683b      	ldr	r3, [r7, #0]
    254a:	b2da      	uxtb	r2, r3
    254c:	490d      	ldr	r1, [pc, #52]	; (2584 <NVIC_SetPriority+0x4c>)
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	f003 030f 	and.w	r3, r3, #15
    2554:	3b04      	subs	r3, #4
    2556:	0152      	lsls	r2, r2, #5
    2558:	b2d2      	uxtb	r2, r2
    255a:	440b      	add	r3, r1
    255c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    255e:	e00a      	b.n	2576 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2560:	683b      	ldr	r3, [r7, #0]
    2562:	b2db      	uxtb	r3, r3
    2564:	4a08      	ldr	r2, [pc, #32]	; (2588 <NVIC_SetPriority+0x50>)
    2566:	6879      	ldr	r1, [r7, #4]
    2568:	4608      	mov	r0, r1
    256a:	015b      	lsls	r3, r3, #5
    256c:	b2d9      	uxtb	r1, r3
    256e:	1813      	adds	r3, r2, r0
    2570:	460a      	mov	r2, r1
    2572:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    2576:	bf00      	nop
    2578:	370c      	adds	r7, #12
    257a:	46bd      	mov	sp, r7
    257c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	e000ed00 	.word	0xe000ed00
    2588:	e000e100 	.word	0xe000e100

0000258c <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    258c:	b480      	push	{r7}
    258e:	b083      	sub	sp, #12
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2594:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	68da      	ldr	r2, [r3, #12]
    259a:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    25a2:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    25a4:	4b09      	ldr	r3, [pc, #36]	; (25cc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	2200      	movs	r2, #0
    25aa:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    25ac:	4b07      	ldr	r3, [pc, #28]	; (25cc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    25ae:	681b      	ldr	r3, [r3, #0]
    25b0:	681a      	ldr	r2, [r3, #0]
    25b2:	4b06      	ldr	r3, [pc, #24]	; (25cc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	f042 0201 	orr.w	r2, r2, #1
    25ba:	601a      	str	r2, [r3, #0]
  }
    25bc:	bf00      	nop
    25be:	370c      	adds	r7, #12
    25c0:	46bd      	mov	sp, r7
    25c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    25c6:	4770      	bx	lr
    25c8:	10000014 	.word	0x10000014
    25cc:	10000010 	.word	0x10000010

000025d0 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    25d8:	4b04      	ldr	r3, [pc, #16]	; (25ec <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    25da:	681b      	ldr	r3, [r3, #0]
    25dc:	685b      	ldr	r3, [r3, #4]
  }
    25de:	4618      	mov	r0, r3
    25e0:	370c      	adds	r7, #12
    25e2:	46bd      	mov	sp, r7
    25e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	10000010 	.word	0x10000010

000025f0 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    25f0:	b480      	push	{r7}
    25f2:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    25f4:	f8df 001c 	ldr.w	r0, [pc, #28]	; 2614 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    25f8:	6801      	ldr	r1, [r0, #0]
    25fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    25fe:	6001      	str	r1, [r0, #0]
    2600:	f3bf 8f4f 	dsb	sy
    2604:	f3bf 8f6f 	isb	sy
  }
}
    2608:	bf00      	nop
    260a:	46bd      	mov	sp, r7
    260c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2610:	4770      	bx	lr
    2612:	0000      	.short	0x0000
    2614:	e000ed88 	.word	0xe000ed88

00002618 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    2618:	b580      	push	{r7, lr}
    261a:	b084      	sub	sp, #16
    261c:	af00      	add	r7, sp, #0
    261e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    2622:	e9d7 0100 	ldrd	r0, r1, [r7]
    2626:	f001 ff95 	bl	4554 <__aeabi_ul2f>
    262a:	4602      	mov	r2, r0
    262c:	f107 030c 	add.w	r3, r7, #12
    2630:	ee00 2a10 	vmov	s0, r2
    2634:	4618      	mov	r0, r3
    2636:	f000 f85c 	bl	26f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    263a:	68fb      	ldr	r3, [r7, #12]
    263c:	4618      	mov	r0, r3
    263e:	3710      	adds	r7, #16
    2640:	46bd      	mov	sp, r7
    2642:	bd80      	pop	{r7, pc}

00002644 <units::literals::operator"" _MHz(unsigned long long)>:
    2644:	b580      	push	{r7, lr}
    2646:	b084      	sub	sp, #16
    2648:	af00      	add	r7, sp, #0
    264a:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
    264e:	e9d7 0100 	ldrd	r0, r1, [r7]
    2652:	f001 ff7f 	bl	4554 <__aeabi_ul2f>
    2656:	4602      	mov	r2, r0
    2658:	f107 030c 	add.w	r3, r7, #12
    265c:	ee00 2a10 	vmov	s0, r2
    2660:	4618      	mov	r0, r3
    2662:	f000 f805 	bl	2670 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	4618      	mov	r0, r3
    266a:	3710      	adds	r7, #16
    266c:	46bd      	mov	sp, r7
    266e:	bd80      	pop	{r7, pc}

00002670 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
    2678:	ed87 0a00 	vstr	s0, [r7]
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	463a      	mov	r2, r7
    2680:	4611      	mov	r1, r2
    2682:	4618      	mov	r0, r3
    2684:	f000 f805 	bl	2692 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	4618      	mov	r0, r3
    268c:	3708      	adds	r7, #8
    268e:	46bd      	mov	sp, r7
    2690:	bd80      	pop	{r7, pc}

00002692 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2692:	b480      	push	{r7}
    2694:	b083      	sub	sp, #12
    2696:	af00      	add	r7, sp, #0
    2698:	6078      	str	r0, [r7, #4]
    269a:	6039      	str	r1, [r7, #0]
    269c:	683b      	ldr	r3, [r7, #0]
    269e:	681a      	ldr	r2, [r3, #0]
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	601a      	str	r2, [r3, #0]
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	4618      	mov	r0, r3
    26a8:	370c      	adds	r7, #12
    26aa:	46bd      	mov	sp, r7
    26ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b0:	4770      	bx	lr

000026b2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    26b2:	b580      	push	{r7, lr}
    26b4:	b086      	sub	sp, #24
    26b6:	af00      	add	r7, sp, #0
    26b8:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    26ba:	6878      	ldr	r0, [r7, #4]
    26bc:	f000 f807 	bl	26ce <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    26c0:	eef0 7a40 	vmov.f32	s15, s0
	}
    26c4:	eeb0 0a67 	vmov.f32	s0, s15
    26c8:	3718      	adds	r7, #24
    26ca:	46bd      	mov	sp, r7
    26cc:	bd80      	pop	{r7, pc}

000026ce <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    26ce:	b480      	push	{r7}
    26d0:	b085      	sub	sp, #20
    26d2:	af00      	add	r7, sp, #0
    26d4:	60f8      	str	r0, [r7, #12]
    26d6:	7239      	strb	r1, [r7, #8]
    26d8:	713a      	strb	r2, [r7, #4]
    26da:	703b      	strb	r3, [r7, #0]
			return value;
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	ee07 3a90 	vmov	s15, r3
		}
    26e4:	eeb0 0a67 	vmov.f32	s0, s15
    26e8:	3714      	adds	r7, #20
    26ea:	46bd      	mov	sp, r7
    26ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    26f0:	4770      	bx	lr

000026f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    26f2:	b580      	push	{r7, lr}
    26f4:	b082      	sub	sp, #8
    26f6:	af00      	add	r7, sp, #0
    26f8:	6078      	str	r0, [r7, #4]
    26fa:	ed87 0a00 	vstr	s0, [r7]
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	463a      	mov	r2, r7
    2702:	4611      	mov	r1, r2
    2704:	4618      	mov	r0, r3
    2706:	f7ff ffc4 	bl	2692 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	4618      	mov	r0, r3
    270e:	3708      	adds	r7, #8
    2710:	46bd      	mov	sp, r7
    2712:	bd80      	pop	{r7, pc}

00002714 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2714:	b580      	push	{r7, lr}
    2716:	b086      	sub	sp, #24
    2718:	af00      	add	r7, sp, #0
    271a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    271c:	6878      	ldr	r0, [r7, #4]
    271e:	f000 f807 	bl	2730 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2722:	eef0 7a40 	vmov.f32	s15, s0
	}
    2726:	eeb0 0a67 	vmov.f32	s0, s15
    272a:	3718      	adds	r7, #24
    272c:	46bd      	mov	sp, r7
    272e:	bd80      	pop	{r7, pc}

00002730 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2730:	b480      	push	{r7}
    2732:	b085      	sub	sp, #20
    2734:	af00      	add	r7, sp, #0
    2736:	60f8      	str	r0, [r7, #12]
    2738:	7239      	strb	r1, [r7, #8]
    273a:	713a      	strb	r2, [r7, #4]
    273c:	703b      	strb	r3, [r7, #0]
			return value;
    273e:	68fb      	ldr	r3, [r7, #12]
    2740:	681b      	ldr	r3, [r3, #0]
    2742:	ee07 3a90 	vmov	s15, r3
		}
    2746:	eeb0 0a67 	vmov.f32	s0, s15
    274a:	3714      	adds	r7, #20
    274c:	46bd      	mov	sp, r7
    274e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2752:	4770      	bx	lr

00002754 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2754:	b580      	push	{r7, lr}
    2756:	ed2d 8b02 	vpush	{d8}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	ed93 8a00 	vldr	s16, [r3]
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	4618      	mov	r0, r3
    276c:	f7ff ffd2 	bl	2714 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2770:	eef0 7a40 	vmov.f32	s15, s0
    2774:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    277c:	bf94      	ite	ls
    277e:	2301      	movls	r3, #1
    2780:	2300      	movhi	r3, #0
    2782:	b2db      	uxtb	r3, r3
		}
    2784:	4618      	mov	r0, r3
    2786:	3708      	adds	r7, #8
    2788:	46bd      	mov	sp, r7
    278a:	ecbd 8b02 	vpop	{d8}
    278e:	bd80      	pop	{r7, pc}

00002790 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    2790:	b480      	push	{r7}
    2792:	b083      	sub	sp, #12
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    2798:	4a04      	ldr	r2, [pc, #16]	; (27ac <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	6013      	str	r3, [r2, #0]
}
    279e:	bf00      	nop
    27a0:	370c      	adds	r7, #12
    27a2:	46bd      	mov	sp, r7
    27a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27a8:	4770      	bx	lr
    27aa:	bf00      	nop
    27ac:	10000000 	.word	0x10000000

000027b0 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    27b0:	b480      	push	{r7}
    27b2:	b083      	sub	sp, #12
    27b4:	af00      	add	r7, sp, #0
    27b6:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	3310      	adds	r3, #16
  }
    27bc:	4618      	mov	r0, r3
    27be:	370c      	adds	r7, #12
    27c0:	46bd      	mov	sp, r7
    27c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c6:	4770      	bx	lr

000027c8 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    27c8:	b580      	push	{r7, lr}
    27ca:	b082      	sub	sp, #8
    27cc:	af00      	add	r7, sp, #0
    27ce:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    27d0:	6878      	ldr	r0, [r7, #4]
    27d2:	f7ff ffed 	bl	27b0 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    27d6:	4603      	mov	r3, r0
    27d8:	009b      	lsls	r3, r3, #2
    27da:	4a03      	ldr	r2, [pc, #12]	; (27e8 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    27dc:	4413      	add	r3, r2
  }
    27de:	4618      	mov	r0, r3
    27e0:	3708      	adds	r7, #8
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	bf00      	nop
    27e8:	10000110 	.word	0x10000110

000027ec <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    27ec:	b580      	push	{r7, lr}
    27ee:	b082      	sub	sp, #8
    27f0:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    27f2:	4b09      	ldr	r3, [pc, #36]	; (2818 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    27f4:	681b      	ldr	r3, [r3, #0]
    27f6:	685b      	ldr	r3, [r3, #4]
    27f8:	b2db      	uxtb	r3, r3
    27fa:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    27fc:	4a07      	ldr	r2, [pc, #28]	; (281c <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    2802:	4a07      	ldr	r2, [pc, #28]	; (2820 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    280a:	603b      	str	r3, [r7, #0]
    isr();
    280c:	683b      	ldr	r3, [r7, #0]
    280e:	4798      	blx	r3
  }
    2810:	bf00      	nop
    2812:	3708      	adds	r7, #8
    2814:	46bd      	mov	sp, r7
    2816:	bd80      	pop	{r7, pc}
    2818:	10000018 	.word	0x10000018
    281c:	10000004 	.word	0x10000004
    2820:	10000110 	.word	0x10000110

00002824 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    2824:	b084      	sub	sp, #16
    2826:	b590      	push	{r4, r7, lr}
    2828:	b085      	sub	sp, #20
    282a:	af00      	add	r7, sp, #0
    282c:	6078      	str	r0, [r7, #4]
    282e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    2836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2838:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    283a:	6abc      	ldr	r4, [r7, #40]	; 0x28
    283c:	68f8      	ldr	r0, [r7, #12]
    283e:	f7ff ffc3 	bl	27c8 <sjsu::cortex::InterruptController::GetVector(int)>
    2842:	4603      	mov	r3, r0
    2844:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    2846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    284a:	2b00      	cmp	r3, #0
    284c:	d005      	beq.n	285a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    284e:	68fb      	ldr	r3, [r7, #12]
    2850:	2b00      	cmp	r3, #0
    2852:	db02      	blt.n	285a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    2854:	68f8      	ldr	r0, [r7, #12]
    2856:	f7ff fe3f 	bl	24d8 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    285c:	2b00      	cmp	r3, #0
    285e:	db04      	blt.n	286a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    2860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2862:	4619      	mov	r1, r3
    2864:	68f8      	ldr	r0, [r7, #12]
    2866:	f7ff fe67 	bl	2538 <NVIC_SetPriority>
    }
  }
    286a:	bf00      	nop
    286c:	3714      	adds	r7, #20
    286e:	46bd      	mov	sp, r7
    2870:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    2874:	b004      	add	sp, #16
    2876:	4770      	bx	lr

00002878 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    2878:	b580      	push	{r7, lr}
    287a:	b082      	sub	sp, #8
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
    2880:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    2882:	6838      	ldr	r0, [r7, #0]
    2884:	f7ff fe40 	bl	2508 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    2888:	6838      	ldr	r0, [r7, #0]
    288a:	f7ff ff9d 	bl	27c8 <sjsu::cortex::InterruptController::GetVector(int)>
    288e:	4602      	mov	r2, r0
    2890:	4b02      	ldr	r3, [pc, #8]	; (289c <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    2892:	6013      	str	r3, [r2, #0]
  }
    2894:	bf00      	nop
    2896:	3708      	adds	r7, #8
    2898:	46bd      	mov	sp, r7
    289a:	bd80      	pop	{r7, pc}
    289c:	00000dc5 	.word	0x00000dc5

000028a0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    28a0:	b580      	push	{r7, lr}
    28a2:	b086      	sub	sp, #24
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    28a8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	3308      	adds	r3, #8
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	6839      	ldr	r1, [r7, #0]
    28b4:	6878      	ldr	r0, [r7, #4]
    28b6:	4798      	blx	r3
    28b8:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    28ba:	f04f 0300 	mov.w	r3, #0
    28be:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    28c0:	697b      	ldr	r3, [r7, #20]
    28c2:	2b00      	cmp	r3, #0
    28c4:	d00f      	beq.n	28e6 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	681b      	ldr	r3, [r3, #0]
    28ca:	330c      	adds	r3, #12
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	6878      	ldr	r0, [r7, #4]
    28d0:	4798      	blx	r3
    28d2:	4603      	mov	r3, r0
    28d4:	613b      	str	r3, [r7, #16]
    28d6:	f107 0310 	add.w	r3, r7, #16
    28da:	6979      	ldr	r1, [r7, #20]
    28dc:	4618      	mov	r0, r3
    28de:	f001 fa83 	bl	3de8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    28e2:	4603      	mov	r3, r0
    28e4:	60fb      	str	r3, [r7, #12]
    }
    return result;
    28e6:	68fb      	ldr	r3, [r7, #12]
  }
    28e8:	4618      	mov	r0, r3
    28ea:	3718      	adds	r7, #24
    28ec:	46bd      	mov	sp, r7
    28ee:	bd80      	pop	{r7, pc}

000028f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    28f0:	b580      	push	{r7, lr}
    28f2:	b082      	sub	sp, #8
    28f4:	af00      	add	r7, sp, #0
    28f6:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	4618      	mov	r0, r3
    28fc:	f000 f804 	bl	2908 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    2900:	6878      	ldr	r0, [r7, #4]
    2902:	3708      	adds	r7, #8
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2910:	4903      	ldr	r1, [pc, #12]	; (2920 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    2912:	6878      	ldr	r0, [r7, #4]
    2914:	f7fd ff30 	bl	778 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2918:	6878      	ldr	r0, [r7, #4]
    291a:	3708      	adds	r7, #8
    291c:	46bd      	mov	sp, r7
    291e:	bd80      	pop	{r7, pc}
    2920:	00006758 	.word	0x00006758

00002924 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    2924:	b580      	push	{r7, lr}
    2926:	b084      	sub	sp, #16
    2928:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    292a:	f107 0308 	add.w	r3, r7, #8
    292e:	4618      	mov	r0, r3
    2930:	f7ff ffde 	bl	28f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    2934:	f107 0208 	add.w	r2, r7, #8
    2938:	463b      	mov	r3, r7
    293a:	4611      	mov	r1, r2
    293c:	4618      	mov	r0, r3
    293e:	f7fd ff83 	bl	848 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2942:	463b      	mov	r3, r7
    2944:	4619      	mov	r1, r3
    2946:	4807      	ldr	r0, [pc, #28]	; (2964 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    2948:	f001 fa6c 	bl	3e24 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    294c:	4b06      	ldr	r3, [pc, #24]	; (2968 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	2b00      	cmp	r3, #0
    2952:	d002      	beq.n	295a <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2956:	681b      	ldr	r3, [r3, #0]
    2958:	4798      	blx	r3
    }
  }
    295a:	bf00      	nop
    295c:	3710      	adds	r7, #16
    295e:	46bd      	mov	sp, r7
    2960:	bd80      	pop	{r7, pc}
    2962:	bf00      	nop
    2964:	10000298 	.word	0x10000298
    2968:	10000294 	.word	0x10000294

0000296c <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    296c:	b490      	push	{r4, r7}
    296e:	b082      	sub	sp, #8
    2970:	af00      	add	r7, sp, #0
    2972:	6078      	str	r0, [r7, #4]
  {
    return counter;
    2974:	687a      	ldr	r2, [r7, #4]
    2976:	4b05      	ldr	r3, [pc, #20]	; (298c <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    2978:	e9d3 3400 	ldrd	r3, r4, [r3]
    297c:	e9c2 3400 	strd	r3, r4, [r2]
  }
    2980:	6878      	ldr	r0, [r7, #4]
    2982:	3708      	adds	r7, #8
    2984:	46bd      	mov	sp, r7
    2986:	bc90      	pop	{r4, r7}
    2988:	4770      	bx	lr
    298a:	bf00      	nop
    298c:	10000298 	.word	0x10000298

00002990 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    2990:	b480      	push	{r7}
    2992:	b083      	sub	sp, #12
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
    2998:	bf00      	nop
    299a:	370c      	adds	r7, #12
    299c:	46bd      	mov	sp, r7
    299e:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a2:	4770      	bx	lr

000029a4 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    29a4:	b480      	push	{r7}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
    29ac:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    29ae:	4a04      	ldr	r2, [pc, #16]	; (29c0 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    29b0:	683b      	ldr	r3, [r7, #0]
    29b2:	6013      	str	r3, [r2, #0]
  }
    29b4:	bf00      	nop
    29b6:	370c      	adds	r7, #12
    29b8:	46bd      	mov	sp, r7
    29ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    29be:	4770      	bx	lr
    29c0:	10000294 	.word	0x10000294

000029c4 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    29c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c6:	b08b      	sub	sp, #44	; 0x2c
    29c8:	af02      	add	r7, sp, #8
    29ca:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    29cc:	2304      	movs	r3, #4
    29ce:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    29d0:	4b1f      	ldr	r3, [pc, #124]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	685b      	ldr	r3, [r3, #4]
    29d6:	2b00      	cmp	r3, #0
    29d8:	bf14      	ite	ne
    29da:	2301      	movne	r3, #1
    29dc:	2300      	moveq	r3, #0
    29de:	b2db      	uxtb	r3, r3
    29e0:	2b00      	cmp	r3, #0
    29e2:	d030      	beq.n	2a46 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    29e4:	4b1a      	ldr	r3, [pc, #104]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    29e6:	681b      	ldr	r3, [r3, #0]
    29e8:	2200      	movs	r2, #0
    29ea:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    29ec:	4b18      	ldr	r3, [pc, #96]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	681a      	ldr	r2, [r3, #0]
    29f2:	4b17      	ldr	r3, [pc, #92]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	f042 0202 	orr.w	r2, r2, #2
    29fa:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    29fc:	4b14      	ldr	r3, [pc, #80]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    29fe:	681b      	ldr	r3, [r3, #0]
    2a00:	681a      	ldr	r2, [r3, #0]
    2a02:	4b13      	ldr	r3, [pc, #76]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	f042 0201 	orr.w	r2, r2, #1
    2a0a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    2a0c:	4b10      	ldr	r3, [pc, #64]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	681a      	ldr	r2, [r3, #0]
    2a12:	4b0f      	ldr	r3, [pc, #60]	; (2a50 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	f042 0204 	orr.w	r2, r2, #4
    2a1a:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	689e      	ldr	r6, [r3, #8]
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    2a28:	4b0a      	ldr	r3, [pc, #40]	; (2a54 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    2a2a:	f107 040c 	add.w	r4, r7, #12
    2a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2a34:	69bb      	ldr	r3, [r7, #24]
    2a36:	9300      	str	r3, [sp, #0]
    2a38:	f107 030c 	add.w	r3, r7, #12
    2a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
    2a3e:	4630      	mov	r0, r6
    2a40:	47a8      	blx	r5
      status = Status::kSuccess;
    2a42:	2300      	movs	r3, #0
    2a44:	61fb      	str	r3, [r7, #28]
    }

    return status;
    2a46:	69fb      	ldr	r3, [r7, #28]
  }
    2a48:	4618      	mov	r0, r3
    2a4a:	3724      	adds	r7, #36	; 0x24
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a50:	1000001c 	.word	0x1000001c
    2a54:	00006368 	.word	0x00006368

00002a58 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    2a58:	b480      	push	{r7}
    2a5a:	b083      	sub	sp, #12
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	6078      	str	r0, [r7, #4]
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	ee07 3a90 	vmov	s15, r3
    2a68:	eeb0 0a67 	vmov.f32	s0, s15
    2a6c:	370c      	adds	r7, #12
    2a6e:	46bd      	mov	sp, r7
    2a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a74:	4770      	bx	lr

00002a76 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2a76:	b580      	push	{r7, lr}
    2a78:	ed2d 8b02 	vpush	{d8}
    2a7c:	b084      	sub	sp, #16
    2a7e:	af00      	add	r7, sp, #0
    2a80:	6078      	str	r0, [r7, #4]
    2a82:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	4618      	mov	r0, r3
    2a88:	f7ff ffe6 	bl	2a58 <units::linear_scale<float>::operator()() const>
    2a8c:	eeb0 8a40 	vmov.f32	s16, s0
    2a90:	683b      	ldr	r3, [r7, #0]
    2a92:	4618      	mov	r0, r3
    2a94:	f7ff ffe0 	bl	2a58 <units::linear_scale<float>::operator()() const>
    2a98:	eef0 7a40 	vmov.f32	s15, s0
    2a9c:	edc7 7a03 	vstr	s15, [r7, #12]
    2aa0:	f107 030c 	add.w	r3, r7, #12
    2aa4:	4618      	mov	r0, r3
    2aa6:	f7ff fe35 	bl	2714 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2aaa:	eeb0 7a40 	vmov.f32	s14, s0
    2aae:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2ab2:	f107 0308 	add.w	r3, r7, #8
    2ab6:	eeb0 0a67 	vmov.f32	s0, s15
    2aba:	4618      	mov	r0, r3
    2abc:	f000 f807 	bl	2ace <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2ac0:	68bb      	ldr	r3, [r7, #8]
	}
    2ac2:	4618      	mov	r0, r3
    2ac4:	3710      	adds	r7, #16
    2ac6:	46bd      	mov	sp, r7
    2ac8:	ecbd 8b02 	vpop	{d8}
    2acc:	bd80      	pop	{r7, pc}

00002ace <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2ace:	b580      	push	{r7, lr}
    2ad0:	b082      	sub	sp, #8
    2ad2:	af00      	add	r7, sp, #0
    2ad4:	6078      	str	r0, [r7, #4]
    2ad6:	ed87 0a00 	vstr	s0, [r7]
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	463a      	mov	r2, r7
    2ade:	4611      	mov	r1, r2
    2ae0:	4618      	mov	r0, r3
    2ae2:	f7ff fdd6 	bl	2692 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	4618      	mov	r0, r3
    2aea:	3708      	adds	r7, #8
    2aec:	46bd      	mov	sp, r7
    2aee:	bd80      	pop	{r7, pc}

00002af0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    2af0:	b580      	push	{r7, lr}
    2af2:	b084      	sub	sp, #16
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
    2af8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	4618      	mov	r0, r3
    2afe:	f7ff ffab 	bl	2a58 <units::linear_scale<float>::operator()() const>
    2b02:	eeb0 7a40 	vmov.f32	s14, s0
    2b06:	683b      	ldr	r3, [r7, #0]
    2b08:	ee07 3a90 	vmov	s15, r3
    2b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b10:	ee77 7a67 	vsub.f32	s15, s14, s15
    2b14:	f107 030c 	add.w	r3, r7, #12
    2b18:	eeb0 0a67 	vmov.f32	s0, s15
    2b1c:	4618      	mov	r0, r3
    2b1e:	f7ff ffd6 	bl	2ace <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2b22:	68fb      	ldr	r3, [r7, #12]
	}
    2b24:	4618      	mov	r0, r3
    2b26:	3710      	adds	r7, #16
    2b28:	46bd      	mov	sp, r7
    2b2a:	bd80      	pop	{r7, pc}

00002b2c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b082      	sub	sp, #8
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2b34:	6878      	ldr	r0, [r7, #4]
    2b36:	f001 f98d 	bl	3e54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2b3a:	4603      	mov	r3, r0
	}
    2b3c:	4618      	mov	r0, r3
    2b3e:	3708      	adds	r7, #8
    2b40:	46bd      	mov	sp, r7
    2b42:	bd80      	pop	{r7, pc}

00002b44 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2b44:	b580      	push	{r7, lr}
    2b46:	b082      	sub	sp, #8
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2b4c:	6878      	ldr	r0, [r7, #4]
    2b4e:	f000 f805 	bl	2b5c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2b52:	4603      	mov	r3, r0
	}
    2b54:	4618      	mov	r0, r3
    2b56:	3708      	adds	r7, #8
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd80      	pop	{r7, pc}

00002b5c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b082      	sub	sp, #8
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2b64:	687b      	ldr	r3, [r7, #4]
    2b66:	4618      	mov	r0, r3
    2b68:	f7ff ff76 	bl	2a58 <units::linear_scale<float>::operator()() const>
    2b6c:	eef0 7a40 	vmov.f32	s15, s0
    2b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b74:	ee17 3a90 	vmov	r3, s15
		}
    2b78:	4618      	mov	r0, r3
    2b7a:	3708      	adds	r7, #8
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}

00002b80 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    2b80:	b590      	push	{r4, r7, lr}
    2b82:	b089      	sub	sp, #36	; 0x24
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    2b8a:	f04f 0001 	mov.w	r0, #1
    2b8e:	f04f 0100 	mov.w	r1, #0
    2b92:	f7ff fd41 	bl	2618 <units::literals::operator"" _Hz(unsigned long long)>
    2b96:	4603      	mov	r3, r0
    2b98:	60fb      	str	r3, [r7, #12]
    2b9a:	f107 020c 	add.w	r2, r7, #12
    2b9e:	463b      	mov	r3, r7
    2ba0:	4611      	mov	r1, r2
    2ba2:	4618      	mov	r0, r3
    2ba4:	f7ff fdd6 	bl	2754 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2ba8:	4603      	mov	r3, r0
    2baa:	2b00      	cmp	r3, #0
    2bac:	d002      	beq.n	2bb4 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    2bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2bb2:	e041      	b.n	2c38 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	685a      	ldr	r2, [r3, #4]
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	685b      	ldr	r3, [r3, #4]
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	330c      	adds	r3, #12
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	4610      	mov	r0, r2
    2bc4:	4798      	blx	r3
    2bc6:	4603      	mov	r3, r0
    2bc8:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    2bca:	463a      	mov	r2, r7
    2bcc:	f107 0308 	add.w	r3, r7, #8
    2bd0:	4611      	mov	r1, r2
    2bd2:	4618      	mov	r0, r3
    2bd4:	f7ff ff4f 	bl	2a76 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2bd8:	4603      	mov	r3, r0
    2bda:	617b      	str	r3, [r7, #20]
    2bdc:	f107 0314 	add.w	r3, r7, #20
    2be0:	2101      	movs	r1, #1
    2be2:	4618      	mov	r0, r3
    2be4:	f7ff ff84 	bl	2af0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    2be8:	4603      	mov	r3, r0
    2bea:	613b      	str	r3, [r7, #16]
    2bec:	f107 0310 	add.w	r3, r7, #16
    2bf0:	4618      	mov	r0, r3
    2bf2:	f7ff ff9b 	bl	2b2c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2bf6:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2bf8:	f107 0308 	add.w	r3, r7, #8
    2bfc:	4618      	mov	r0, r3
    2bfe:	f7ff ffa1 	bl	2b44 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c02:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    2c04:	463b      	mov	r3, r7
    2c06:	4618      	mov	r0, r3
    2c08:	f7ff ff9c 	bl	2b44 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c0c:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2c0e:	fbb4 f2f3 	udiv	r2, r4, r3
    2c12:	fb03 f302 	mul.w	r3, r3, r2
    2c16:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    2c18:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    2c1a:	69fb      	ldr	r3, [r7, #28]
    2c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2c20:	d305      	bcc.n	2c2e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    2c22:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2c26:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    2c28:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2c2c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    2c2e:	4b04      	ldr	r3, [pc, #16]	; (2c40 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	69fa      	ldr	r2, [r7, #28]
    2c34:	605a      	str	r2, [r3, #4]
    return remainder;
    2c36:	69bb      	ldr	r3, [r7, #24]
  }
    2c38:	4618      	mov	r0, r3
    2c3a:	3724      	adds	r7, #36	; 0x24
    2c3c:	46bd      	mov	sp, r7
    2c3e:	bd90      	pop	{r4, r7, pc}
    2c40:	1000001c 	.word	0x1000001c

00002c44 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2c44:	b580      	push	{r7, lr}
    2c46:	b086      	sub	sp, #24
    2c48:	af00      	add	r7, sp, #0
    2c4a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2c4c:	6878      	ldr	r0, [r7, #4]
    2c4e:	f000 f807 	bl	2c60 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2c52:	eef0 7a40 	vmov.f32	s15, s0
	}
    2c56:	eeb0 0a67 	vmov.f32	s0, s15
    2c5a:	3718      	adds	r7, #24
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    2c60:	b480      	push	{r7}
    2c62:	b085      	sub	sp, #20
    2c64:	af00      	add	r7, sp, #0
    2c66:	60f8      	str	r0, [r7, #12]
    2c68:	7239      	strb	r1, [r7, #8]
    2c6a:	713a      	strb	r2, [r7, #4]
    2c6c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	edd3 7a00 	vldr	s15, [r3]
    2c74:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2c8c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    2c78:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    2c7c:	eeb0 0a67 	vmov.f32	s0, s15
    2c80:	3714      	adds	r7, #20
    2c82:	46bd      	mov	sp, r7
    2c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c88:	4770      	bx	lr
    2c8a:	bf00      	nop
    2c8c:	49742400 	.word	0x49742400

00002c90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    2c90:	b580      	push	{r7, lr}
    2c92:	b084      	sub	sp, #16
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
    2c98:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    2c9a:	2100      	movs	r1, #0
    2c9c:	6878      	ldr	r0, [r7, #4]
    2c9e:	f000 f8e3 	bl	2e68 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    2ca2:	f04f 000c 	mov.w	r0, #12
    2ca6:	f04f 0100 	mov.w	r1, #0
    2caa:	f7ff fccb 	bl	2644 <units::literals::operator"" _MHz(unsigned long long)>
    2cae:	4603      	mov	r3, r0
    2cb0:	60bb      	str	r3, [r7, #8]
    2cb2:	f107 0208 	add.w	r2, r7, #8
    2cb6:	463b      	mov	r3, r7
    2cb8:	4611      	mov	r1, r2
    2cba:	4618      	mov	r0, r3
    2cbc:	f001 f8e5 	bl	3e8a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2cc0:	4603      	mov	r3, r0
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d00f      	beq.n	2ce6 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    2cc6:	4b16      	ldr	r3, [pc, #88]	; (2d20 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    2cc8:	683a      	ldr	r2, [r7, #0]
    2cca:	6819      	ldr	r1, [r3, #0]
    2ccc:	6878      	ldr	r0, [r7, #4]
    2cce:	f000 fabf 	bl	3250 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    2cd2:	2101      	movs	r1, #1
    2cd4:	6878      	ldr	r0, [r7, #4]
    2cd6:	f000 f8eb 	bl	2eb0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    2cda:	463b      	mov	r3, r7
    2cdc:	4619      	mov	r1, r3
    2cde:	4811      	ldr	r0, [pc, #68]	; (2d24 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    2ce0:	f001 f8f1 	bl	3ec6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2ce4:	e007      	b.n	2cf6 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    2ce6:	2100      	movs	r1, #0
    2ce8:	6878      	ldr	r0, [r7, #4]
    2cea:	f000 f8e1 	bl	2eb0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    2cee:	490e      	ldr	r1, [pc, #56]	; (2d28 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    2cf0:	480c      	ldr	r0, [pc, #48]	; (2d24 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    2cf2:	f001 f8e8 	bl	3ec6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    2cf6:	2101      	movs	r1, #1
    2cf8:	6878      	ldr	r0, [r7, #4]
    2cfa:	f000 fb0d 	bl	3318 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    2cfe:	23ff      	movs	r3, #255	; 0xff
    2d00:	733b      	strb	r3, [r7, #12]
    2d02:	f107 030c 	add.w	r3, r7, #12
    2d06:	2201      	movs	r2, #1
    2d08:	4619      	mov	r1, r3
    2d0a:	6878      	ldr	r0, [r7, #4]
    2d0c:	f000 f80e 	bl	2d2c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    2d10:	2100      	movs	r1, #0
    2d12:	6878      	ldr	r0, [r7, #4]
    2d14:	f000 fb3e 	bl	3394 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    2d18:	bf00      	nop
    2d1a:	3710      	adds	r7, #16
    2d1c:	46bd      	mov	sp, r7
    2d1e:	bd80      	pop	{r7, pc}
    2d20:	0000676c 	.word	0x0000676c
    2d24:	10000020 	.word	0x10000020
    2d28:	00006770 	.word	0x00006770

00002d2c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    2d2c:	b580      	push	{r7, lr}
    2d2e:	b084      	sub	sp, #16
    2d30:	af00      	add	r7, sp, #0
    2d32:	60f8      	str	r0, [r7, #12]
    2d34:	60b9      	str	r1, [r7, #8]
    2d36:	4613      	mov	r3, r2
    2d38:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    2d3a:	79fb      	ldrb	r3, [r7, #7]
    2d3c:	2b04      	cmp	r3, #4
    2d3e:	d90d      	bls.n	2d5c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
    2d40:	23b2      	movs	r3, #178	; 0xb2
    2d42:	4a0b      	ldr	r2, [pc, #44]	; (2d70 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    2d44:	490b      	ldr	r1, [pc, #44]	; (2d74 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    2d46:	480c      	ldr	r0, [pc, #48]	; (2d78 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    2d48:	f7ff fb28 	bl	239c <printf>
    2d4c:	480b      	ldr	r0, [pc, #44]	; (2d7c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    2d4e:	f7fe f9e1 	bl	1114 <puts>
    2d52:	2100      	movs	r1, #0
    2d54:	2001      	movs	r0, #1
    2d56:	f7fd ff35 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2d5a:	e7fe      	b.n	2d5a <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
    2d5c:	4b08      	ldr	r3, [pc, #32]	; (2d80 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	79fa      	ldrb	r2, [r7, #7]
    2d62:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    2d66:	bf00      	nop
    2d68:	3710      	adds	r7, #16
    2d6a:	46bd      	mov	sp, r7
    2d6c:	bd80      	pop	{r7, pc}
    2d6e:	bf00      	nop
    2d70:	000068f8 	.word	0x000068f8
    2d74:	0000678c 	.word	0x0000678c
    2d78:	00006378 	.word	0x00006378
    2d7c:	00006418 	.word	0x00006418
    2d80:	100002a0 	.word	0x100002a0

00002d84 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    2d84:	b480      	push	{r7}
    2d86:	b083      	sub	sp, #12
    2d88:	af00      	add	r7, sp, #0
    2d8a:	6078      	str	r0, [r7, #4]
    2d8c:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    2d8e:	4b05      	ldr	r3, [pc, #20]	; (2da4 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    2d96:	4618      	mov	r0, r3
    2d98:	370c      	adds	r7, #12
    2d9a:	46bd      	mov	sp, r7
    2d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2da0:	4770      	bx	lr
    2da2:	bf00      	nop
    2da4:	100002a0 	.word	0x100002a0

00002da8 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    2da8:	b480      	push	{r7}
    2daa:	b083      	sub	sp, #12
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    2db0:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    2db2:	681b      	ldr	r3, [r3, #0]
  }
    2db4:	4618      	mov	r0, r3
    2db6:	370c      	adds	r7, #12
    2db8:	46bd      	mov	sp, r7
    2dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dbe:	4770      	bx	lr
    2dc0:	10000020 	.word	0x10000020

00002dc4 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    2dc4:	b480      	push	{r7}
    2dc6:	b085      	sub	sp, #20
    2dc8:	af00      	add	r7, sp, #0
    2dca:	6078      	str	r0, [r7, #4]
    2dcc:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    2dce:	4b0b      	ldr	r3, [pc, #44]	; (2dfc <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    2dd0:	681b      	ldr	r3, [r3, #0]
    2dd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2dd6:	683a      	ldr	r2, [r7, #0]
    2dd8:	7812      	ldrb	r2, [r2, #0]
    2dda:	4611      	mov	r1, r2
    2ddc:	2201      	movs	r2, #1
    2dde:	408a      	lsls	r2, r1
    2de0:	4013      	ands	r3, r2
    2de2:	2b00      	cmp	r3, #0
    2de4:	bf14      	ite	ne
    2de6:	2301      	movne	r3, #1
    2de8:	2300      	moveq	r3, #0
    2dea:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    2dec:	7bfb      	ldrb	r3, [r7, #15]
  }
    2dee:	4618      	mov	r0, r3
    2df0:	3714      	adds	r7, #20
    2df2:	46bd      	mov	sp, r7
    2df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2df8:	4770      	bx	lr
    2dfa:	bf00      	nop
    2dfc:	100002a0 	.word	0x100002a0

00002e00 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    2e00:	b590      	push	{r4, r7, lr}
    2e02:	b083      	sub	sp, #12
    2e04:	af00      	add	r7, sp, #0
    2e06:	6078      	str	r0, [r7, #4]
    2e08:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    2e0a:	4b09      	ldr	r3, [pc, #36]	; (2e30 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    2e12:	683b      	ldr	r3, [r7, #0]
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	4619      	mov	r1, r3
    system_controller->PCONP =
    2e18:	4b05      	ldr	r3, [pc, #20]	; (2e30 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    2e1a:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    2e1c:	4610      	mov	r0, r2
    2e1e:	f001 f865 	bl	3eec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2e22:	4603      	mov	r3, r0
    system_controller->PCONP =
    2e24:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    2e28:	bf00      	nop
    2e2a:	370c      	adds	r7, #12
    2e2c:	46bd      	mov	sp, r7
    2e2e:	bd90      	pop	{r4, r7, pc}
    2e30:	100002a0 	.word	0x100002a0

00002e34 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    2e34:	b590      	push	{r4, r7, lr}
    2e36:	b083      	sub	sp, #12
    2e38:	af00      	add	r7, sp, #0
    2e3a:	6078      	str	r0, [r7, #4]
    2e3c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    2e3e:	4b09      	ldr	r3, [pc, #36]	; (2e64 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	4619      	mov	r1, r3
    system_controller->PCONP =
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    2e4e:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    2e50:	4610      	mov	r0, r2
    2e52:	f001 f85d 	bl	3f10 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2e56:	4603      	mov	r3, r0
    system_controller->PCONP =
    2e58:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    2e5c:	bf00      	nop
    2e5e:	370c      	adds	r7, #12
    2e60:	46bd      	mov	sp, r7
    2e62:	bd90      	pop	{r4, r7, pc}
    2e64:	100002a0 	.word	0x100002a0

00002e68 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    2e68:	b590      	push	{r4, r7, lr}
    2e6a:	b083      	sub	sp, #12
    2e6c:	af00      	add	r7, sp, #0
    2e6e:	6078      	str	r0, [r7, #4]
    2e70:	460b      	mov	r3, r1
    2e72:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    2e74:	4b0c      	ldr	r3, [pc, #48]	; (2ea8 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    2e7c:	8879      	ldrh	r1, [r7, #2]
    2e7e:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    2e80:	681c      	ldr	r4, [r3, #0]
    2e82:	4b0a      	ldr	r3, [pc, #40]	; (2eac <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    2e84:	781a      	ldrb	r2, [r3, #0]
    2e86:	785b      	ldrb	r3, [r3, #1]
    2e88:	021b      	lsls	r3, r3, #8
    2e8a:	431a      	orrs	r2, r3
    2e8c:	2300      	movs	r3, #0
    2e8e:	f362 030f 	bfi	r3, r2, #0, #16
    2e92:	461a      	mov	r2, r3
    2e94:	f001 f84f 	bl	3f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2e98:	4603      	mov	r3, r0
    2e9a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    2e9e:	bf00      	nop
    2ea0:	370c      	adds	r7, #12
    2ea2:	46bd      	mov	sp, r7
    2ea4:	bd90      	pop	{r4, r7, pc}
    2ea6:	bf00      	nop
    2ea8:	100002a0 	.word	0x100002a0
    2eac:	00006774 	.word	0x00006774

00002eb0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    2eb0:	b590      	push	{r4, r7, lr}
    2eb2:	b083      	sub	sp, #12
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	6078      	str	r0, [r7, #4]
    2eb8:	460b      	mov	r3, r1
    2eba:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    2ebc:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    2ec4:	8879      	ldrh	r1, [r7, #2]
    2ec6:	4b0a      	ldr	r3, [pc, #40]	; (2ef0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    2ec8:	681c      	ldr	r4, [r3, #0]
    2eca:	4b0a      	ldr	r3, [pc, #40]	; (2ef4 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    2ecc:	781a      	ldrb	r2, [r3, #0]
    2ece:	785b      	ldrb	r3, [r3, #1]
    2ed0:	021b      	lsls	r3, r3, #8
    2ed2:	431a      	orrs	r2, r3
    2ed4:	2300      	movs	r3, #0
    2ed6:	f362 030f 	bfi	r3, r2, #0, #16
    2eda:	461a      	mov	r2, r3
    2edc:	f001 f82b 	bl	3f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2ee0:	4603      	mov	r3, r0
    2ee2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    2ee6:	bf00      	nop
    2ee8:	370c      	adds	r7, #12
    2eea:	46bd      	mov	sp, r7
    2eec:	bd90      	pop	{r4, r7, pc}
    2eee:	bf00      	nop
    2ef0:	100002a0 	.word	0x100002a0
    2ef4:	00006780 	.word	0x00006780

00002ef8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    2ef8:	b590      	push	{r4, r7, lr}
    2efa:	b083      	sub	sp, #12
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    2f00:	460b      	mov	r3, r1
    2f02:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    2f04:	4b0c      	ldr	r3, [pc, #48]	; (2f38 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    2f0c:	8879      	ldrh	r1, [r7, #2]
    2f0e:	4b0a      	ldr	r3, [pc, #40]	; (2f38 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    2f10:	681c      	ldr	r4, [r3, #0]
    2f12:	4b0a      	ldr	r3, [pc, #40]	; (2f3c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    2f14:	781a      	ldrb	r2, [r3, #0]
    2f16:	785b      	ldrb	r3, [r3, #1]
    2f18:	021b      	lsls	r3, r3, #8
    2f1a:	431a      	orrs	r2, r3
    2f1c:	2300      	movs	r3, #0
    2f1e:	f362 030f 	bfi	r3, r2, #0, #16
    2f22:	461a      	mov	r2, r3
    2f24:	f001 f807 	bl	3f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2f28:	4603      	mov	r3, r0
    2f2a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    2f2e:	bf00      	nop
    2f30:	370c      	adds	r7, #12
    2f32:	46bd      	mov	sp, r7
    2f34:	bd90      	pop	{r4, r7, pc}
    2f36:	bf00      	nop
    2f38:	100002a0 	.word	0x100002a0
    2f3c:	00006784 	.word	0x00006784

00002f40 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    2f40:	b590      	push	{r4, r7, lr}
    2f42:	b083      	sub	sp, #12
    2f44:	af00      	add	r7, sp, #0
    2f46:	6078      	str	r0, [r7, #4]
    2f48:	460b      	mov	r3, r1
    2f4a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    2f4c:	4b0c      	ldr	r3, [pc, #48]	; (2f80 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    2f54:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    2f56:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    2f58:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    2f5a:	4b0a      	ldr	r3, [pc, #40]	; (2f84 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    2f5c:	781a      	ldrb	r2, [r3, #0]
    2f5e:	785b      	ldrb	r3, [r3, #1]
    2f60:	021b      	lsls	r3, r3, #8
    2f62:	431a      	orrs	r2, r3
    2f64:	2300      	movs	r3, #0
    2f66:	f362 030f 	bfi	r3, r2, #0, #16
    2f6a:	461a      	mov	r2, r3
    2f6c:	f000 ffe3 	bl	3f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2f70:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    2f72:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    2f76:	bf00      	nop
    2f78:	370c      	adds	r7, #12
    2f7a:	46bd      	mov	sp, r7
    2f7c:	bd90      	pop	{r4, r7, pc}
    2f7e:	bf00      	nop
    2f80:	100002a0 	.word	0x100002a0
    2f84:	00006788 	.word	0x00006788

00002f88 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2f88:	b580      	push	{r7, lr}
    2f8a:	ed2d 8b02 	vpush	{d8}
    2f8e:	b082      	sub	sp, #8
    2f90:	af00      	add	r7, sp, #0
    2f92:	6078      	str	r0, [r7, #4]
    2f94:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	ed93 8a00 	vldr	s16, [r3]
    2f9c:	683b      	ldr	r3, [r7, #0]
    2f9e:	4618      	mov	r0, r3
    2fa0:	f7ff fb87 	bl	26b2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2fa4:	eef0 7a40 	vmov.f32	s15, s0
    2fa8:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2fb0:	bf4c      	ite	mi
    2fb2:	2301      	movmi	r3, #1
    2fb4:	2300      	movpl	r3, #0
    2fb6:	b2db      	uxtb	r3, r3
		}
    2fb8:	4618      	mov	r0, r3
    2fba:	3708      	adds	r7, #8
    2fbc:	46bd      	mov	sp, r7
    2fbe:	ecbd 8b02 	vpop	{d8}
    2fc2:	bd80      	pop	{r7, pc}

00002fc4 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b082      	sub	sp, #8
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    2fcc:	6878      	ldr	r0, [r7, #4]
    2fce:	f000 f805 	bl	2fdc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2fd2:	4603      	mov	r3, r0
		}
    2fd4:	4618      	mov	r0, r3
    2fd6:	3708      	adds	r7, #8
    2fd8:	46bd      	mov	sp, r7
    2fda:	bd80      	pop	{r7, pc}

00002fdc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2fdc:	b580      	push	{r7, lr}
    2fde:	b082      	sub	sp, #8
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	4618      	mov	r0, r3
    2fe8:	f7ff fd36 	bl	2a58 <units::linear_scale<float>::operator()() const>
    2fec:	eef0 7a40 	vmov.f32	s15, s0
    2ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2ff4:	ee17 3a90 	vmov	r3, s15
		}
    2ff8:	4618      	mov	r0, r3
    2ffa:	3708      	adds	r7, #8
    2ffc:	46bd      	mov	sp, r7
    2ffe:	bd80      	pop	{r7, pc}

00003000 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    3000:	b580      	push	{r7, lr}
    3002:	ed2d 8b02 	vpush	{d8}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
    300c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	4618      	mov	r0, r3
    3012:	f7ff fd21 	bl	2a58 <units::linear_scale<float>::operator()() const>
    3016:	eeb0 8a40 	vmov.f32	s16, s0
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	4618      	mov	r0, r3
    301e:	f7ff fd1b 	bl	2a58 <units::linear_scale<float>::operator()() const>
    3022:	eef0 7a40 	vmov.f32	s15, s0
    3026:	edc7 7a03 	vstr	s15, [r7, #12]
    302a:	f107 030c 	add.w	r3, r7, #12
    302e:	4618      	mov	r0, r3
    3030:	f7ff fb3f 	bl	26b2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3034:	eeb0 7a40 	vmov.f32	s14, s0
    3038:	eec8 7a07 	vdiv.f32	s15, s16, s14
    303c:	f107 0308 	add.w	r3, r7, #8
    3040:	eeb0 0a67 	vmov.f32	s0, s15
    3044:	4618      	mov	r0, r3
    3046:	f7ff fd42 	bl	2ace <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    304a:	68bb      	ldr	r3, [r7, #8]
	}
    304c:	4618      	mov	r0, r3
    304e:	3710      	adds	r7, #16
    3050:	46bd      	mov	sp, r7
    3052:	ecbd 8b02 	vpop	{d8}
    3056:	bd80      	pop	{r7, pc}

00003058 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    3058:	b580      	push	{r7, lr}
    305a:	b084      	sub	sp, #16
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
    3060:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    3062:	687b      	ldr	r3, [r7, #4]
    3064:	4618      	mov	r0, r3
    3066:	f7ff fcf7 	bl	2a58 <units::linear_scale<float>::operator()() const>
    306a:	eeb0 7a40 	vmov.f32	s14, s0
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	ee07 3a90 	vmov	s15, r3
    3074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3078:	ee77 7a27 	vadd.f32	s15, s14, s15
    307c:	f107 030c 	add.w	r3, r7, #12
    3080:	eeb0 0a67 	vmov.f32	s0, s15
    3084:	4618      	mov	r0, r3
    3086:	f7ff fd22 	bl	2ace <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    308a:	68fb      	ldr	r3, [r7, #12]
	}
    308c:	4618      	mov	r0, r3
    308e:	3710      	adds	r7, #16
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}

00003094 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	4618      	mov	r0, r3
    30a0:	f7ff fcda 	bl	2a58 <units::linear_scale<float>::operator()() const>
    30a4:	eef0 7a40 	vmov.f32	s15, s0
    30a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    30ac:	ee17 3a90 	vmov	r3, s15
    30b0:	b29b      	uxth	r3, r3
		}
    30b2:	4618      	mov	r0, r3
    30b4:	3708      	adds	r7, #8
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	Address 0x00000000000030ba is out of bounds.


000030bc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    30bc:	b590      	push	{r4, r7, lr}
    30be:	b08d      	sub	sp, #52	; 0x34
    30c0:	af00      	add	r7, sp, #0
    30c2:	60f8      	str	r0, [r7, #12]
    30c4:	60b9      	str	r1, [r7, #8]
    30c6:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    30c8:	f44f 70c0 	mov.w	r0, #384	; 0x180
    30cc:	f04f 0100 	mov.w	r1, #0
    30d0:	f7ff fab8 	bl	2644 <units::literals::operator"" _MHz(unsigned long long)>
    30d4:	4603      	mov	r3, r0
    30d6:	613b      	str	r3, [r7, #16]
    30d8:	f107 0210 	add.w	r2, r7, #16
    30dc:	1d3b      	adds	r3, r7, #4
    30de:	4611      	mov	r1, r2
    30e0:	4618      	mov	r0, r3
    30e2:	f7ff ff51 	bl	2f88 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    30e6:	4603      	mov	r3, r0
    30e8:	f083 0301 	eor.w	r3, r3, #1
    30ec:	b2db      	uxtb	r3, r3
    30ee:	2b00      	cmp	r3, #0
    30f0:	d114      	bne.n	311c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    30f2:	f04f 000c 	mov.w	r0, #12
    30f6:	f04f 0100 	mov.w	r1, #0
    30fa:	f7ff faa3 	bl	2644 <units::literals::operator"" _MHz(unsigned long long)>
    30fe:	4603      	mov	r3, r0
    3100:	617b      	str	r3, [r7, #20]
    3102:	f107 0214 	add.w	r2, r7, #20
    3106:	1d3b      	adds	r3, r7, #4
    3108:	4611      	mov	r1, r2
    310a:	4618      	mov	r0, r3
    310c:	f000 febd 	bl	3e8a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3110:	4603      	mov	r3, r0
    3112:	f083 0301 	eor.w	r3, r3, #1
    3116:	b2db      	uxtb	r3, r3
    3118:	2b00      	cmp	r3, #0
    311a:	d001      	beq.n	3120 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    311c:	2301      	movs	r3, #1
    311e:	e000      	b.n	3122 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    3120:	2300      	movs	r3, #0
    3122:	2b00      	cmp	r3, #0
    3124:	d00d      	beq.n	3142 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
    3126:	23f6      	movs	r3, #246	; 0xf6
    3128:	4a43      	ldr	r2, [pc, #268]	; (3238 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    312a:	4944      	ldr	r1, [pc, #272]	; (323c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    312c:	4844      	ldr	r0, [pc, #272]	; (3240 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    312e:	f7ff f935 	bl	239c <printf>
    3132:	4844      	ldr	r0, [pc, #272]	; (3244 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    3134:	f7fd ffee 	bl	1114 <puts>
    3138:	2100      	movs	r1, #0
    313a:	2001      	movs	r0, #1
    313c:	f7fd fd42 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
    3140:	e7fe      	b.n	3140 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    3142:	2301      	movs	r3, #1
    3144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    3148:	1d3b      	adds	r3, r7, #4
    314a:	4618      	mov	r0, r3
    314c:	f7ff ff3a 	bl	2fc4 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    3150:	4604      	mov	r4, r0
    3152:	f107 0308 	add.w	r3, r7, #8
    3156:	4618      	mov	r0, r3
    3158:	f7ff ff34 	bl	2fc4 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    315c:	4603      	mov	r3, r0
    315e:	fbb4 f2f3 	udiv	r2, r4, r3
    3162:	fb03 f302 	mul.w	r3, r3, r2
    3166:	1ae3      	subs	r3, r4, r3
    3168:	2b00      	cmp	r3, #0
    316a:	bf14      	ite	ne
    316c:	2301      	movne	r3, #1
    316e:	2300      	moveq	r3, #0
    3170:	b2db      	uxtb	r3, r3
    3172:	2b00      	cmp	r3, #0
    3174:	d017      	beq.n	31a6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    3176:	f107 0208 	add.w	r2, r7, #8
    317a:	1d3b      	adds	r3, r7, #4
    317c:	4611      	mov	r1, r2
    317e:	4618      	mov	r0, r3
    3180:	f7ff ff3e 	bl	3000 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3184:	4603      	mov	r3, r0
    3186:	61fb      	str	r3, [r7, #28]
    3188:	f107 031c 	add.w	r3, r7, #28
    318c:	2101      	movs	r1, #1
    318e:	4618      	mov	r0, r3
    3190:	f7ff ff62 	bl	3058 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3194:	4603      	mov	r3, r0
    3196:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    3198:	f107 0318 	add.w	r3, r7, #24
    319c:	4618      	mov	r0, r3
    319e:	f000 fe59 	bl	3e54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    31a2:	62b8      	str	r0, [r7, #40]	; 0x28
    31a4:	e00e      	b.n	31c4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    31a6:	f107 0208 	add.w	r2, r7, #8
    31aa:	1d3b      	adds	r3, r7, #4
    31ac:	4611      	mov	r1, r2
    31ae:	4618      	mov	r0, r3
    31b0:	f7ff ff26 	bl	3000 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    31b4:	4603      	mov	r3, r0
    31b6:	623b      	str	r3, [r7, #32]
      multiplier_value =
    31b8:	f107 0320 	add.w	r3, r7, #32
    31bc:	4618      	mov	r0, r3
    31be:	f000 fe49 	bl	3e54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    31c2:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    31c4:	2301      	movs	r3, #1
    31c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    31c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    31cc:	2b00      	cmp	r3, #0
    31ce:	d02d      	beq.n	322c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    31d0:	f107 0308 	add.w	r3, r7, #8
    31d4:	4618      	mov	r0, r3
    31d6:	f7ff ff5d 	bl	3094 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    31da:	4603      	mov	r3, r0
    31dc:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    31de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31e0:	b29b      	uxth	r3, r3
    31e2:	fb12 f303 	smulbb	r3, r2, r3
    31e6:	b29b      	uxth	r3, r3
    31e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    31ea:	fb12 f303 	smulbb	r3, r2, r3
    31ee:	b29b      	uxth	r3, r3
    31f0:	005b      	lsls	r3, r3, #1
    31f2:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    31f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    31f6:	2b9b      	cmp	r3, #155	; 0x9b
    31f8:	d903      	bls.n	3202 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    31fa:	2300      	movs	r3, #0
    31fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    3200:	e7e2      	b.n	31c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    3202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    3204:	005b      	lsls	r3, r3, #1
    3206:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    3208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    320a:	2b07      	cmp	r3, #7
    320c:	d9dc      	bls.n	31c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    320e:	f44f 7389 	mov.w	r3, #274	; 0x112
    3212:	4a09      	ldr	r2, [pc, #36]	; (3238 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    3214:	490c      	ldr	r1, [pc, #48]	; (3248 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    3216:	480d      	ldr	r0, [pc, #52]	; (324c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    3218:	f7ff f8c0 	bl	239c <printf>
    321c:	4809      	ldr	r0, [pc, #36]	; (3244 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    321e:	f7fd ff79 	bl	1114 <puts>
    3222:	2100      	movs	r1, #0
    3224:	2001      	movs	r0, #1
    3226:	f7fd fccd 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
    322a:	e7fe      	b.n	322a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    322e:	4618      	mov	r0, r3
    3230:	3734      	adds	r7, #52	; 0x34
    3232:	46bd      	mov	sp, r7
    3234:	bd90      	pop	{r4, r7, pc}
    3236:	bf00      	nop
    3238:	0000697c 	.word	0x0000697c
    323c:	000067a4 	.word	0x000067a4
    3240:	00006430 	.word	0x00006430
    3244:	00006418 	.word	0x00006418
    3248:	000067bc 	.word	0x000067bc
    324c:	00006520 	.word	0x00006520

00003250 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    3250:	b580      	push	{r7, lr}
    3252:	b086      	sub	sp, #24
    3254:	af00      	add	r7, sp, #0
    3256:	60f8      	str	r0, [r7, #12]
    3258:	60b9      	str	r1, [r7, #8]
    325a:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    325c:	2301      	movs	r3, #1
    325e:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    3260:	687a      	ldr	r2, [r7, #4]
    3262:	68b9      	ldr	r1, [r7, #8]
    3264:	68f8      	ldr	r0, [r7, #12]
    3266:	f7ff ff29 	bl	30bc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    326a:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    326c:	2100      	movs	r1, #0
    326e:	68f8      	ldr	r0, [r7, #12]
    3270:	f7ff fdfa 	bl	2e68 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    3274:	2100      	movs	r1, #0
    3276:	68f8      	ldr	r0, [r7, #12]
    3278:	f7ff fe1a 	bl	2eb0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    327c:	2100      	movs	r1, #0
    327e:	68f8      	ldr	r0, [r7, #12]
    3280:	f7ff fe3a 	bl	2ef8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    3284:	2100      	movs	r1, #0
    3286:	68f8      	ldr	r0, [r7, #12]
    3288:	f7ff fe5a 	bl	2f40 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    328c:	4b21      	ldr	r3, [pc, #132]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    328e:	681b      	ldr	r3, [r3, #0]
    3290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    3294:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    329c:	4b1d      	ldr	r3, [pc, #116]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    329e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    32a0:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    32a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    32a6:	4b1b      	ldr	r3, [pc, #108]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    32ae:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    32b2:	8afb      	ldrh	r3, [r7, #22]
    32b4:	015b      	lsls	r3, r3, #5
    32b6:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    32b8:	4b16      	ldr	r3, [pc, #88]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32ba:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    32bc:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    32be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    32c2:	4b14      	ldr	r3, [pc, #80]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    32ca:	4b12      	ldr	r3, [pc, #72]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	f042 0201 	orr.w	r2, r2, #1
    32d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    32d6:	4b0f      	ldr	r3, [pc, #60]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	22aa      	movs	r2, #170	; 0xaa
    32dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    32e0:	4b0c      	ldr	r3, [pc, #48]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	2255      	movs	r2, #85	; 0x55
    32e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    32ea:	4b0a      	ldr	r3, [pc, #40]	; (3314 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    32ec:	681b      	ldr	r3, [r3, #0]
    32ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    32f2:	210a      	movs	r1, #10
    32f4:	4618      	mov	r0, r3
    32f6:	f000 fe30 	bl	3f5a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    32fa:	4603      	mov	r3, r0
    32fc:	f083 0301 	eor.w	r3, r3, #1
    3300:	b2db      	uxtb	r3, r3
    3302:	2b00      	cmp	r3, #0
    3304:	d001      	beq.n	330a <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    3306:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    3308:	e7ef      	b.n	32ea <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    330a:	bf00      	nop
    330c:	3718      	adds	r7, #24
    330e:	46bd      	mov	sp, r7
    3310:	bd80      	pop	{r7, pc}
    3312:	bf00      	nop
    3314:	100002a0 	.word	0x100002a0

00003318 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    3318:	b590      	push	{r4, r7, lr}
    331a:	b083      	sub	sp, #12
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
    3320:	460b      	mov	r3, r1
    3322:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    3324:	78fb      	ldrb	r3, [r7, #3]
    3326:	2b1f      	cmp	r3, #31
    3328:	d90e      	bls.n	3348 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    332a:	f44f 73a9 	mov.w	r3, #338	; 0x152
    332e:	4a13      	ldr	r2, [pc, #76]	; (337c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    3330:	4913      	ldr	r1, [pc, #76]	; (3380 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    3332:	4814      	ldr	r0, [pc, #80]	; (3384 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    3334:	f7ff f832 	bl	239c <printf>
    3338:	4813      	ldr	r0, [pc, #76]	; (3388 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    333a:	f7fd feeb 	bl	1114 <puts>
    333e:	2100      	movs	r1, #0
    3340:	2001      	movs	r0, #1
    3342:	f7fd fc3f 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
    3346:	e7fe      	b.n	3346 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    3348:	4b10      	ldr	r3, [pc, #64]	; (338c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    334a:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    334c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    3350:	4b0e      	ldr	r3, [pc, #56]	; (338c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    3352:	681c      	ldr	r4, [r3, #0]
    3354:	4b0e      	ldr	r3, [pc, #56]	; (3390 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    3356:	78f9      	ldrb	r1, [r7, #3]
    3358:	781a      	ldrb	r2, [r3, #0]
    335a:	785b      	ldrb	r3, [r3, #1]
    335c:	021b      	lsls	r3, r3, #8
    335e:	431a      	orrs	r2, r3
    3360:	2300      	movs	r3, #0
    3362:	f362 030f 	bfi	r3, r2, #0, #16
    3366:	461a      	mov	r2, r3
    3368:	f000 fe0e 	bl	3f88 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    336c:	4603      	mov	r3, r0
    336e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    3372:	bf00      	nop
    3374:	370c      	adds	r7, #12
    3376:	46bd      	mov	sp, r7
    3378:	bd90      	pop	{r4, r7, pc}
    337a:	bf00      	nop
    337c:	000069f8 	.word	0x000069f8
    3380:	000067d4 	.word	0x000067d4
    3384:	000065c8 	.word	0x000065c8
    3388:	00006418 	.word	0x00006418
    338c:	100002a0 	.word	0x100002a0
    3390:	0000677c 	.word	0x0000677c

00003394 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    3394:	b590      	push	{r4, r7, lr}
    3396:	b083      	sub	sp, #12
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	460b      	mov	r3, r1
    339e:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    33a0:	4b0c      	ldr	r3, [pc, #48]	; (33d4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    33a8:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    33ac:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    33ae:	4b0a      	ldr	r3, [pc, #40]	; (33d8 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    33b0:	781a      	ldrb	r2, [r3, #0]
    33b2:	785b      	ldrb	r3, [r3, #1]
    33b4:	021b      	lsls	r3, r3, #8
    33b6:	431a      	orrs	r2, r3
    33b8:	2300      	movs	r3, #0
    33ba:	f362 030f 	bfi	r3, r2, #0, #16
    33be:	461a      	mov	r2, r3
    33c0:	f000 fdb9 	bl	3f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    33c4:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    33c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    33ca:	bf00      	nop
    33cc:	370c      	adds	r7, #12
    33ce:	46bd      	mov	sp, r7
    33d0:	bd90      	pop	{r4, r7, pc}
    33d2:	bf00      	nop
    33d4:	100002a0 	.word	0x100002a0
    33d8:	00006778 	.word	0x00006778

000033dc <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    33dc:	b480      	push	{r7}
    33de:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    33e0:	4b02      	ldr	r3, [pc, #8]	; (33ec <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    33e2:	4618      	mov	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ea:	4770      	bx	lr
    33ec:	10000024 	.word	0x10000024

000033f0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
    33f0:	b480      	push	{r7}
    33f2:	b083      	sub	sp, #12
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
  {
    return port_;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	791b      	ldrb	r3, [r3, #4]
  }
    33fc:	4618      	mov	r0, r3
    33fe:	370c      	adds	r7, #12
    3400:	46bd      	mov	sp, r7
    3402:	f85d 7b04 	ldr.w	r7, [sp], #4
    3406:	4770      	bx	lr

00003408 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
    3408:	b480      	push	{r7}
    340a:	b083      	sub	sp, #12
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	795b      	ldrb	r3, [r3, #5]
  }
    3414:	4618      	mov	r0, r3
    3416:	370c      	adds	r7, #12
    3418:	46bd      	mov	sp, r7
    341a:	f85d 7b04 	ldr.w	r7, [sp], #4
    341e:	4770      	bx	lr

00003420 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
    3420:	b580      	push	{r7, lr}
    3422:	b082      	sub	sp, #8
    3424:	af00      	add	r7, sp, #0
    3426:	6078      	str	r0, [r7, #4]
    3428:	460b      	mov	r3, r1
    342a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
    342c:	4b08      	ldr	r3, [pc, #32]	; (3450 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
    342e:	78f9      	ldrb	r1, [r7, #3]
    3430:	781a      	ldrb	r2, [r3, #0]
    3432:	785b      	ldrb	r3, [r3, #1]
    3434:	021b      	lsls	r3, r3, #8
    3436:	431a      	orrs	r2, r3
    3438:	2300      	movs	r3, #0
    343a:	f362 030f 	bfi	r3, r2, #0, #16
    343e:	461a      	mov	r2, r3
    3440:	6878      	ldr	r0, [r7, #4]
    3442:	f000 f859 	bl	34f8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3446:	bf00      	nop
    3448:	3708      	adds	r7, #8
    344a:	46bd      	mov	sp, r7
    344c:	bd80      	pop	{r7, pc}
    344e:	bf00      	nop
    3450:	000067ec 	.word	0x000067ec

00003454 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    3454:	b580      	push	{r7, lr}
    3456:	b082      	sub	sp, #8
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
    345c:	460b      	mov	r3, r1
    345e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
    3460:	4b08      	ldr	r3, [pc, #32]	; (3484 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
    3462:	78f9      	ldrb	r1, [r7, #3]
    3464:	781a      	ldrb	r2, [r3, #0]
    3466:	785b      	ldrb	r3, [r3, #1]
    3468:	021b      	lsls	r3, r3, #8
    346a:	431a      	orrs	r2, r3
    346c:	2300      	movs	r3, #0
    346e:	f362 030f 	bfi	r3, r2, #0, #16
    3472:	461a      	mov	r2, r3
    3474:	6878      	ldr	r0, [r7, #4]
    3476:	f000 f83f 	bl	34f8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    347a:	bf00      	nop
    347c:	3708      	adds	r7, #8
    347e:	46bd      	mov	sp, r7
    3480:	bd80      	pop	{r7, pc}
    3482:	bf00      	nop
    3484:	000067f0 	.word	0x000067f0

00003488 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	460b      	mov	r3, r1
    3492:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
    3494:	78fb      	ldrb	r3, [r7, #3]
    3496:	f083 0301 	eor.w	r3, r3, #1
    349a:	b2db      	uxtb	r3, r3
    349c:	4619      	mov	r1, r3
    349e:	4b08      	ldr	r3, [pc, #32]	; (34c0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
    34a0:	781a      	ldrb	r2, [r3, #0]
    34a2:	785b      	ldrb	r3, [r3, #1]
    34a4:	021b      	lsls	r3, r3, #8
    34a6:	431a      	orrs	r2, r3
    34a8:	2300      	movs	r3, #0
    34aa:	f362 030f 	bfi	r3, r2, #0, #16
    34ae:	461a      	mov	r2, r3
    34b0:	6878      	ldr	r0, [r7, #4]
    34b2:	f000 f821 	bl	34f8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    34b6:	bf00      	nop
    34b8:	3708      	adds	r7, #8
    34ba:	46bd      	mov	sp, r7
    34bc:	bd80      	pop	{r7, pc}
    34be:	bf00      	nop
    34c0:	000067f4 	.word	0x000067f4

000034c4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    34c4:	b580      	push	{r7, lr}
    34c6:	b082      	sub	sp, #8
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    34cc:	460b      	mov	r3, r1
    34ce:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
    34d0:	78f9      	ldrb	r1, [r7, #3]
    34d2:	4b08      	ldr	r3, [pc, #32]	; (34f4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
    34d4:	781a      	ldrb	r2, [r3, #0]
    34d6:	785b      	ldrb	r3, [r3, #1]
    34d8:	021b      	lsls	r3, r3, #8
    34da:	431a      	orrs	r2, r3
    34dc:	2300      	movs	r3, #0
    34de:	f362 030f 	bfi	r3, r2, #0, #16
    34e2:	461a      	mov	r2, r3
    34e4:	6878      	ldr	r0, [r7, #4]
    34e6:	f000 f807 	bl	34f8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    34ea:	bf00      	nop
    34ec:	3708      	adds	r7, #8
    34ee:	46bd      	mov	sp, r7
    34f0:	bd80      	pop	{r7, pc}
    34f2:	bf00      	nop
    34f4:	000067f8 	.word	0x000067f8

000034f8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
    34f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34fa:	b087      	sub	sp, #28
    34fc:	af00      	add	r7, sp, #0
    34fe:	60f8      	str	r0, [r7, #12]
    3500:	460b      	mov	r3, r1
    3502:	80ba      	strh	r2, [r7, #4]
    3504:	72fb      	strb	r3, [r7, #11]
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
    350a:	4b19      	ldr	r3, [pc, #100]	; (3570 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    350c:	681c      	ldr	r4, [r3, #0]
    350e:	693b      	ldr	r3, [r7, #16]
    3510:	4618      	mov	r0, r3
    3512:	f7ff ff6d 	bl	33f0 <sjsu::Pin::GetPort() const>
    3516:	4603      	mov	r3, r0
    3518:	461d      	mov	r5, r3
    351a:	693b      	ldr	r3, [r7, #16]
    351c:	4618      	mov	r0, r3
    351e:	f7ff ff73 	bl	3408 <sjsu::Pin::GetPin() const>
    3522:	4603      	mov	r3, r0
    3524:	461a      	mov	r2, r3
    3526:	016b      	lsls	r3, r5, #5
    3528:	4413      	add	r3, r2
    352a:	009b      	lsls	r3, r3, #2
    352c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	7af9      	ldrb	r1, [r7, #11]
    3532:	687a      	ldr	r2, [r7, #4]
    3534:	4618      	mov	r0, r3
    3536:	f000 fd27 	bl	3f88 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    353a:	4605      	mov	r5, r0
    353c:	68fb      	ldr	r3, [r7, #12]
    353e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
    3540:	4b0b      	ldr	r3, [pc, #44]	; (3570 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    3542:	681c      	ldr	r4, [r3, #0]
    3544:	697b      	ldr	r3, [r7, #20]
    3546:	4618      	mov	r0, r3
    3548:	f7ff ff52 	bl	33f0 <sjsu::Pin::GetPort() const>
    354c:	4603      	mov	r3, r0
    354e:	461e      	mov	r6, r3
    3550:	697b      	ldr	r3, [r7, #20]
    3552:	4618      	mov	r0, r3
    3554:	f7ff ff58 	bl	3408 <sjsu::Pin::GetPin() const>
    3558:	4603      	mov	r3, r0
    355a:	461a      	mov	r2, r3
    355c:	0173      	lsls	r3, r6, #5
    355e:	4413      	add	r3, r2
    3560:	009b      	lsls	r3, r3, #2
    3562:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3564:	601d      	str	r5, [r3, #0]
  }
    3566:	bf00      	nop
    3568:	371c      	adds	r7, #28
    356a:	46bd      	mov	sp, r7
    356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    356e:	bf00      	nop
    3570:	100000fc 	.word	0x100000fc

00003574 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3574:	b480      	push	{r7}
    3576:	b089      	sub	sp, #36	; 0x24
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	2200      	movs	r2, #0
    3584:	601a      	str	r2, [r3, #0]
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	2200      	movs	r2, #0
    358a:	605a      	str	r2, [r3, #4]
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	2201      	movs	r2, #1
    3590:	609a      	str	r2, [r3, #8]
  bool finished = false;
    3592:	2300      	movs	r3, #0
    3594:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3596:	2300      	movs	r3, #0
    3598:	61bb      	str	r3, [r7, #24]
    359a:	69bb      	ldr	r3, [r7, #24]
    359c:	2b0e      	cmp	r3, #14
    359e:	dc4f      	bgt.n	3640 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    35a0:	7ffb      	ldrb	r3, [r7, #31]
    35a2:	2b00      	cmp	r3, #0
    35a4:	d14c      	bne.n	3640 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    35a6:	69bb      	ldr	r3, [r7, #24]
    35a8:	3301      	adds	r3, #1
    35aa:	617b      	str	r3, [r7, #20]
    35ac:	697b      	ldr	r3, [r7, #20]
    35ae:	2b0e      	cmp	r3, #14
    35b0:	dc42      	bgt.n	3638 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    35b2:	7ffb      	ldrb	r3, [r7, #31]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d13f      	bne.n	3638 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    35b8:	69bb      	ldr	r3, [r7, #24]
    35ba:	ee07 3a90 	vmov	s15, r3
    35be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    35c2:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    35c6:	697b      	ldr	r3, [r7, #20]
    35c8:	ee07 3a90 	vmov	s15, r3
    35cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    35d0:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    35d4:	edd7 6a04 	vldr	s13, [r7, #16]
    35d8:	ed97 7a03 	vldr	s14, [r7, #12]
    35dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    35e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    35e4:	ee77 7a87 	vadd.f32	s15, s15, s14
    35e8:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    35ec:	edd7 7a02 	vldr	s15, [r7, #8]
    35f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3650 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    35f4:	ee77 7a87 	vadd.f32	s15, s15, s14
    35f8:	ed97 7a00 	vldr	s14, [r7]
    35fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3604:	d814      	bhi.n	3630 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    3606:	edd7 7a02 	vldr	s15, [r7, #8]
    360a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 3650 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    360e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    3612:	ed97 7a00 	vldr	s14, [r7]
    3616:	eeb4 7ae7 	vcmpe.f32	s14, s15
    361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    361e:	db07      	blt.n	3630 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    3620:	69ba      	ldr	r2, [r7, #24]
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3626:	697a      	ldr	r2, [r7, #20]
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	609a      	str	r2, [r3, #8]
        finished          = true;
    362c:	2301      	movs	r3, #1
    362e:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3630:	697b      	ldr	r3, [r7, #20]
    3632:	3301      	adds	r3, #1
    3634:	617b      	str	r3, [r7, #20]
    3636:	e7b9      	b.n	35ac <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    3638:	69bb      	ldr	r3, [r7, #24]
    363a:	3301      	adds	r3, #1
    363c:	61bb      	str	r3, [r7, #24]
    363e:	e7ac      	b.n	359a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    3640:	bf00      	nop
}
    3642:	6878      	ldr	r0, [r7, #4]
    3644:	3724      	adds	r7, #36	; 0x24
    3646:	46bd      	mov	sp, r7
    3648:	f85d 7b04 	ldr.w	r7, [sp], #4
    364c:	4770      	bx	lr
    364e:	bf00      	nop
    3650:	3d4ccccd 	.word	0x3d4ccccd

00003654 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3654:	b480      	push	{r7}
    3656:	b087      	sub	sp, #28
    3658:	af00      	add	r7, sp, #0
    365a:	ed87 0a03 	vstr	s0, [r7, #12]
    365e:	edc7 0a02 	vstr	s1, [r7, #8]
    3662:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	ee07 3a90 	vmov	s15, r3
    366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    366e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3672:	edd7 7a03 	vldr	s15, [r7, #12]
    3676:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    367a:	ee27 7a87 	vmul.f32	s14, s15, s14
    367e:	edd7 7a02 	vldr	s15, [r7, #8]
    3682:	ee67 7a27 	vmul.f32	s15, s14, s15
    3686:	ed97 7a05 	vldr	s14, [r7, #20]
    368a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    368e:	eef0 7a66 	vmov.f32	s15, s13
}
    3692:	eeb0 0a67 	vmov.f32	s0, s15
    3696:	371c      	adds	r7, #28
    3698:	46bd      	mov	sp, r7
    369a:	f85d 7b04 	ldr.w	r7, [sp], #4
    369e:	4770      	bx	lr

000036a0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    36a0:	b480      	push	{r7}
    36a2:	b087      	sub	sp, #28
    36a4:	af00      	add	r7, sp, #0
    36a6:	ed87 0a03 	vstr	s0, [r7, #12]
    36aa:	edc7 0a02 	vstr	s1, [r7, #8]
    36ae:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	ee07 3a90 	vmov	s15, r3
    36b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    36ba:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    36be:	edd7 7a03 	vldr	s15, [r7, #12]
    36c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    36c6:	ee27 7a87 	vmul.f32	s14, s15, s14
    36ca:	edd7 7a02 	vldr	s15, [r7, #8]
    36ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    36d2:	ed97 7a05 	vldr	s14, [r7, #20]
    36d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    36da:	eef0 7a66 	vmov.f32	s15, s13
}
    36de:	eeb0 0a67 	vmov.f32	s0, s15
    36e2:	371c      	adds	r7, #28
    36e4:	46bd      	mov	sp, r7
    36e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ea:	4770      	bx	lr

000036ec <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    36ec:	b480      	push	{r7}
    36ee:	b083      	sub	sp, #12
    36f0:	af00      	add	r7, sp, #0
    36f2:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    36f6:	edd7 7a01 	vldr	s15, [r7, #4]
    36fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    36fe:	ee77 7a87 	vadd.f32	s15, s15, s14
    3702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    370a:	eeb0 0a67 	vmov.f32	s0, s15
    370e:	370c      	adds	r7, #12
    3710:	46bd      	mov	sp, r7
    3712:	f85d 7b04 	ldr.w	r7, [sp], #4
    3716:	4770      	bx	lr

00003718 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    3718:	b580      	push	{r7, lr}
    371a:	b086      	sub	sp, #24
    371c:	af00      	add	r7, sp, #0
    371e:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    3722:	2300      	movs	r3, #0
    3724:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    3726:	ed97 0a01 	vldr	s0, [r7, #4]
    372a:	f7ff ffdf 	bl	36ec <sjsu::lpc40xx::uart::RoundFloat(float)>
    372e:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    3732:	ed97 7a01 	vldr	s14, [r7, #4]
    3736:	edd7 7a04 	vldr	s15, [r7, #16]
    373a:	ee77 7a67 	vsub.f32	s15, s14, s15
    373e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    3742:	edd7 7a03 	vldr	s15, [r7, #12]
    3746:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3774 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    374a:	eef4 7ac7 	vcmpe.f32	s15, s14
    374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3752:	db0a      	blt.n	376a <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    3754:	edd7 7a03 	vldr	s15, [r7, #12]
    3758:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3778 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    375c:	eef4 7ac7 	vcmpe.f32	s15, s14
    3760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3764:	d801      	bhi.n	376a <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    3766:	2301      	movs	r3, #1
    3768:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    376a:	7dfb      	ldrb	r3, [r7, #23]
}
    376c:	4618      	mov	r0, r3
    376e:	3718      	adds	r7, #24
    3770:	46bd      	mov	sp, r7
    3772:	bd80      	pop	{r7, pc}
    3774:	bd4ccccd 	.word	0xbd4ccccd
    3778:	3d4ccccd 	.word	0x3d4ccccd

0000377c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    377c:	b590      	push	{r4, r7, lr}
    377e:	b091      	sub	sp, #68	; 0x44
    3780:	af00      	add	r7, sp, #0
    3782:	61f8      	str	r0, [r7, #28]
    3784:	61b9      	str	r1, [r7, #24]
    3786:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    3788:	f107 0314 	add.w	r3, r7, #20
    378c:	4618      	mov	r0, r3
    378e:	f7ff f9d9 	bl	2b44 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3792:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    3794:	2300      	movs	r3, #0
    3796:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    3798:	69fb      	ldr	r3, [r7, #28]
    379a:	2200      	movs	r2, #0
    379c:	601a      	str	r2, [r3, #0]
    379e:	69fb      	ldr	r3, [r7, #28]
    37a0:	2200      	movs	r2, #0
    37a2:	605a      	str	r2, [r3, #4]
    37a4:	69fb      	ldr	r3, [r7, #28]
    37a6:	2201      	movs	r2, #1
    37a8:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    37aa:	69bb      	ldr	r3, [r7, #24]
    37ac:	ee07 3a90 	vmov	s15, r3
    37b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    37b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    37b8:	f04f 0300 	mov.w	r3, #0
    37bc:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    37be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    37c2:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    37c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    37c8:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    37ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    37d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37d2:	2b04      	cmp	r3, #4
    37d4:	f000 80be 	beq.w	3954 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    37d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37da:	2b03      	cmp	r3, #3
    37dc:	f200 80b8 	bhi.w	3950 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    37e0:	a201      	add	r2, pc, #4	; (adr r2, 37e8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    37e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    37e6:	bf00      	nop
    37e8:	000037f9 	.word	0x000037f9
    37ec:	00003853 	.word	0x00003853
    37f0:	000038b3 	.word	0x000038b3
    37f4:	00003923 	.word	0x00003923
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    37f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    37fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    37fe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    3802:	f7ff ff27 	bl	3654 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3806:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    380a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    380e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3812:	eef4 7ac7 	vcmpe.f32	s15, s14
    3816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    381a:	d505      	bpl.n	3828 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    381c:	69fb      	ldr	r3, [r7, #28]
    381e:	2200      	movs	r2, #0
    3820:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    3822:	2304      	movs	r3, #4
    3824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    3826:	e094      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    3828:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    382c:	f7ff ff74 	bl	3718 <sjsu::lpc40xx::uart::IsDecmial(float)>
    3830:	4603      	mov	r3, r0
    3832:	2b00      	cmp	r3, #0
    3834:	d00a      	beq.n	384c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    3836:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    383a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    383e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    3842:	69fb      	ldr	r3, [r7, #28]
    3844:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    3846:	2304      	movs	r3, #4
    3848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    384a:	e082      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    384c:	2301      	movs	r3, #1
    384e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3850:	e07f      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    3852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3854:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    3858:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    385c:	f7ff fefa 	bl	3654 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3860:	eef0 7a40 	vmov.f32	s15, s0
    3864:	eeb0 0a67 	vmov.f32	s0, s15
    3868:	f7ff ff40 	bl	36ec <sjsu::lpc40xx::uart::RoundFloat(float)>
    386c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    3870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3872:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    3876:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    387a:	f7ff ff11 	bl	36a0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    387e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    3882:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    3886:	ed9f 7a36 	vldr	s14, [pc, #216]	; 3960 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    388a:	eef4 7ac7 	vcmpe.f32	s15, s14
    388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3892:	db0b      	blt.n	38ac <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    3894:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    3898:	ed9f 7a32 	vldr	s14, [pc, #200]	; 3964 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    389c:	eef4 7ac7 	vcmpe.f32	s15, s14
    38a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38a4:	d802      	bhi.n	38ac <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    38a6:	2303      	movs	r3, #3
    38a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    38aa:	e052      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    38ac:	2302      	movs	r3, #2
    38ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    38b0:	e04f      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    38b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    38b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    38ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    38be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    38c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    38c6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    38ca:	eef4 7ac7 	vcmpe.f32	s15, s14
    38ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38d2:	dd02      	ble.n	38da <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    38d4:	2304      	movs	r3, #4
    38d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    38d8:	e03b      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    38da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    38de:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    38e2:	eef4 7ac7 	vcmpe.f32	s15, s14
    38e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38ea:	dd0f      	ble.n	390c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    38ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    38f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    38f4:	ee77 7a87 	vadd.f32	s15, s15, s14
    38f8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    38fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3904:	ee77 7a87 	vadd.f32	s15, s15, s14
    3908:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    390c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    3910:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    3914:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3918:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    391c:	2301      	movs	r3, #1
    391e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3920:	e017      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    3922:	69fc      	ldr	r4, [r7, #28]
    3924:	463b      	mov	r3, r7
    3926:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    392a:	4618      	mov	r0, r3
    392c:	f7ff fe22 	bl	3574 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    3930:	463b      	mov	r3, r7
    3932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    393a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3942:	ee17 2a90 	vmov	r2, s15
    3946:	69fb      	ldr	r3, [r7, #28]
    3948:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    394a:	2304      	movs	r3, #4
    394c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    394e:	e000      	b.n	3952 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    3950:	bf00      	nop
  while (state != States::kDone)
    3952:	e73d      	b.n	37d0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    3954:	bf00      	nop
}
    3956:	69f8      	ldr	r0, [r7, #28]
    3958:	3744      	adds	r7, #68	; 0x44
    395a:	46bd      	mov	sp, r7
    395c:	bd90      	pop	{r4, r7, pc}
    395e:	bf00      	nop
    3960:	3f8ccccd 	.word	0x3f8ccccd
    3964:	3ff33333 	.word	0x3ff33333

00003968 <sjsu::Uart::Uart()>:

namespace sjsu
{
/// An abstract interface for hardware that implements the Universal
/// Asynchronous Receiver Transmitter (UART) hardware communication Protocol.
class Uart
    3968:	b480      	push	{r7}
    396a:	b083      	sub	sp, #12
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
    3970:	4a04      	ldr	r2, [pc, #16]	; (3984 <sjsu::Uart::Uart()+0x1c>)
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	601a      	str	r2, [r3, #0]
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	4618      	mov	r0, r3
    397a:	370c      	adds	r7, #12
    397c:	46bd      	mov	sp, r7
    397e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3982:	4770      	bx	lr
    3984:	00006880 	.word	0x00006880

00003988 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    3988:	b580      	push	{r7, lr}
    398a:	b084      	sub	sp, #16
    398c:	af00      	add	r7, sp, #0
    398e:	60f8      	str	r0, [r7, #12]
    3990:	60b9      	str	r1, [r7, #8]
    3992:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    3994:	68fb      	ldr	r3, [r7, #12]
    3996:	4618      	mov	r0, r3
    3998:	f7ff ffe6 	bl	3968 <sjsu::Uart::Uart()>
    399c:	4a06      	ldr	r2, [pc, #24]	; (39b8 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	601a      	str	r2, [r3, #0]
    39a2:	68fb      	ldr	r3, [r7, #12]
    39a4:	68ba      	ldr	r2, [r7, #8]
    39a6:	605a      	str	r2, [r3, #4]
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	687a      	ldr	r2, [r7, #4]
    39ac:	609a      	str	r2, [r3, #8]
  {
  }
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	4618      	mov	r0, r3
    39b2:	3710      	adds	r7, #16
    39b4:	46bd      	mov	sp, r7
    39b6:	bd80      	pop	{r7, pc}
    39b8:	00006864 	.word	0x00006864

000039bc <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    39bc:	b580      	push	{r7, lr}
    39be:	b084      	sub	sp, #16
    39c0:	af00      	add	r7, sp, #0
    39c2:	6078      	str	r0, [r7, #4]
    39c4:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    39c6:	2307      	movs	r3, #7
    39c8:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	6898      	ldr	r0, [r3, #8]
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	689b      	ldr	r3, [r3, #8]
    39d2:	681b      	ldr	r3, [r3, #0]
    39d4:	3314      	adds	r3, #20
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	687a      	ldr	r2, [r7, #4]
    39da:	6852      	ldr	r2, [r2, #4]
    39dc:	3204      	adds	r2, #4
    39de:	4611      	mov	r1, r2
    39e0:	4798      	blx	r3

    SetBaudRate(baud_rate);
    39e2:	6839      	ldr	r1, [r7, #0]
    39e4:	6878      	ldr	r0, [r7, #4]
    39e6:	f000 f849 	bl	3a7c <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	685b      	ldr	r3, [r3, #4]
    39ee:	68d8      	ldr	r0, [r3, #12]
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	685b      	ldr	r3, [r3, #4]
    39f4:	68db      	ldr	r3, [r3, #12]
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	687a      	ldr	r2, [r7, #4]
    39fc:	6852      	ldr	r2, [r2, #4]
    39fe:	7c12      	ldrb	r2, [r2, #16]
    3a00:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    3a04:	b2d2      	uxtb	r2, r2
    3a06:	4611      	mov	r1, r2
    3a08:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	685b      	ldr	r3, [r3, #4]
    3a0e:	6898      	ldr	r0, [r3, #8]
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	689b      	ldr	r3, [r3, #8]
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	687a      	ldr	r2, [r7, #4]
    3a1c:	6852      	ldr	r2, [r2, #4]
    3a1e:	7c12      	ldrb	r2, [r2, #16]
    3a20:	f3c2 0202 	ubfx	r2, r2, #0, #3
    3a24:	b2d2      	uxtb	r2, r2
    3a26:	4611      	mov	r1, r2
    3a28:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	685b      	ldr	r3, [r3, #4]
    3a2e:	68da      	ldr	r2, [r3, #12]
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	685b      	ldr	r3, [r3, #4]
    3a34:	68db      	ldr	r3, [r3, #12]
    3a36:	681b      	ldr	r3, [r3, #0]
    3a38:	3304      	adds	r3, #4
    3a3a:	681b      	ldr	r3, [r3, #0]
    3a3c:	2102      	movs	r1, #2
    3a3e:	4610      	mov	r0, r2
    3a40:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	685b      	ldr	r3, [r3, #4]
    3a46:	689a      	ldr	r2, [r3, #8]
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	685b      	ldr	r3, [r3, #4]
    3a4c:	689b      	ldr	r3, [r3, #8]
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	3304      	adds	r3, #4
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	2102      	movs	r1, #2
    3a56:	4610      	mov	r0, r2
    3a58:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	685b      	ldr	r3, [r3, #4]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	7a1b      	ldrb	r3, [r3, #8]
    3a62:	b2da      	uxtb	r2, r3
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	685b      	ldr	r3, [r3, #4]
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	f042 0207 	orr.w	r2, r2, #7
    3a6e:	b2d2      	uxtb	r2, r2
    3a70:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    3a72:	2300      	movs	r3, #0
  }
    3a74:	4618      	mov	r0, r3
    3a76:	3710      	adds	r7, #16
    3a78:	46bd      	mov	sp, r7
    3a7a:	bd80      	pop	{r7, pc}

00003a7c <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b086      	sub	sp, #24
    3a80:	af00      	add	r7, sp, #0
    3a82:	6078      	str	r0, [r7, #4]
    3a84:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	689a      	ldr	r2, [r3, #8]
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	685b      	ldr	r3, [r3, #4]
    3a8e:	3304      	adds	r3, #4
    3a90:	4619      	mov	r1, r3
    3a92:	4610      	mov	r0, r2
    3a94:	f7fe ff04 	bl	28a0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    3a98:	4602      	mov	r2, r0
    3a9a:	f107 0308 	add.w	r3, r7, #8
    3a9e:	6839      	ldr	r1, [r7, #0]
    3aa0:	4618      	mov	r0, r3
    3aa2:	f7ff fe6b 	bl	377c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    3aa6:	2380      	movs	r3, #128	; 0x80
    3aa8:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    3aaa:	68bb      	ldr	r3, [r7, #8]
    3aac:	0a1b      	lsrs	r3, r3, #8
    3aae:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    3ab0:	68bb      	ldr	r3, [r7, #8]
    3ab2:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3ab4:	693b      	ldr	r3, [r7, #16]
    3ab6:	b2db      	uxtb	r3, r3
    3ab8:	011b      	lsls	r3, r3, #4
    3aba:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    3abc:	68fb      	ldr	r3, [r7, #12]
    3abe:	b2db      	uxtb	r3, r3
    3ac0:	f003 030f 	and.w	r3, r3, #15
    3ac4:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3ac6:	4313      	orrs	r3, r2
    3ac8:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	685b      	ldr	r3, [r3, #4]
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	2280      	movs	r2, #128	; 0x80
    3ad2:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	685b      	ldr	r3, [r3, #4]
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	7dba      	ldrb	r2, [r7, #22]
    3adc:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	685b      	ldr	r3, [r3, #4]
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	7d7a      	ldrb	r2, [r7, #21]
    3ae6:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	685b      	ldr	r3, [r3, #4]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	7d3a      	ldrb	r2, [r7, #20]
    3af0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	685b      	ldr	r3, [r3, #4]
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2203      	movs	r2, #3
    3afc:	731a      	strb	r2, [r3, #12]
    return true;
    3afe:	2301      	movs	r3, #1
  }
    3b00:	4618      	mov	r0, r3
    3b02:	3718      	adds	r7, #24
    3b04:	46bd      	mov	sp, r7
    3b06:	bd80      	pop	{r7, pc}

00003b08 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    3b08:	b580      	push	{r7, lr}
    3b0a:	b086      	sub	sp, #24
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	60f8      	str	r0, [r7, #12]
    3b10:	60b9      	str	r1, [r7, #8]
    3b12:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    3b14:	2300      	movs	r3, #0
    3b16:	617b      	str	r3, [r7, #20]
    3b18:	697a      	ldr	r2, [r7, #20]
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	429a      	cmp	r2, r3
    3b1e:	d216      	bcs.n	3b4e <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    3b20:	68ba      	ldr	r2, [r7, #8]
    3b22:	697b      	ldr	r3, [r7, #20]
    3b24:	441a      	add	r2, r3
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	685b      	ldr	r3, [r3, #4]
    3b2a:	681b      	ldr	r3, [r3, #0]
    3b2c:	7812      	ldrb	r2, [r2, #0]
    3b2e:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    3b30:	68f8      	ldr	r0, [r7, #12]
    3b32:	f000 f8b5 	bl	3ca0 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    3b36:	4603      	mov	r3, r0
    3b38:	f083 0301 	eor.w	r3, r3, #1
    3b3c:	b2db      	uxtb	r3, r3
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d001      	beq.n	3b46 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    3b42:	bf00      	nop
      while (!TransmissionComplete())
    3b44:	e7f4      	b.n	3b30 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    3b46:	697b      	ldr	r3, [r7, #20]
    3b48:	3301      	adds	r3, #1
    3b4a:	617b      	str	r3, [r7, #20]
    3b4c:	e7e4      	b.n	3b18 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    3b4e:	bf00      	nop
    3b50:	3718      	adds	r7, #24
    3b52:	46bd      	mov	sp, r7
    3b54:	bd80      	pop	{r7, pc}

00003b56 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b56:	b590      	push	{r4, r7, lr}
    3b58:	b083      	sub	sp, #12
    3b5a:	af00      	add	r7, sp, #0
    3b5c:	6078      	str	r0, [r7, #4]
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    3b62:	4618      	mov	r0, r3
    3b64:	f000 f88a 	bl	3c7c <sjsu::lpc40xx::Uart::HasData() const>
    3b68:	4603      	mov	r3, r0
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d010      	beq.n	3b90 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3b72:	685b      	ldr	r3, [r3, #4]
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	781b      	ldrb	r3, [r3, #0]
    3b78:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3b7e:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3b84:	6813      	ldr	r3, [r2, #0]
    3b86:	1c58      	adds	r0, r3, #1
    3b88:	6010      	str	r0, [r2, #0]
    3b8a:	440b      	add	r3, r1
    3b8c:	4622      	mov	r2, r4
    3b8e:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b90:	687b      	ldr	r3, [r7, #4]
    3b92:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    3b94:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    3b9a:	429a      	cmp	r2, r3
    3b9c:	d301      	bcc.n	3ba2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    3b9e:	2301      	movs	r3, #1
    3ba0:	e000      	b.n	3ba4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    3ba2:	2300      	movs	r3, #0
    });
    3ba4:	4618      	mov	r0, r3
    3ba6:	370c      	adds	r7, #12
    3ba8:	46bd      	mov	sp, r7
    3baa:	bd90      	pop	{r4, r7, pc}

00003bac <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    3bac:	b590      	push	{r4, r7, lr}
    3bae:	b09d      	sub	sp, #116	; 0x74
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6178      	str	r0, [r7, #20]
    3bb4:	6139      	str	r1, [r7, #16]
    3bb6:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    3bb8:	2300      	movs	r3, #0
    3bba:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3bbc:	697b      	ldr	r3, [r7, #20]
    3bbe:	643b      	str	r3, [r7, #64]	; 0x40
    3bc0:	f107 0310 	add.w	r3, r7, #16
    3bc4:	647b      	str	r3, [r7, #68]	; 0x44
    3bc6:	68fb      	ldr	r3, [r7, #12]
    3bc8:	64bb      	str	r3, [r7, #72]	; 0x48
    3bca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    3bd0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    3bd4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    3bd8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    3bdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
    3be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    3be6:	f107 0360 	add.w	r3, r7, #96	; 0x60
    3bea:	4618      	mov	r0, r3
    3bec:	f7fc feb2 	bl	954 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    3bf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3bf4:	f107 0320 	add.w	r3, r7, #32
    3bf8:	4611      	mov	r1, r2
    3bfa:	4618      	mov	r0, r3
    3bfc:	f7fc febe 	bl	97c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3c00:	4603      	mov	r3, r0
    3c02:	2b00      	cmp	r3, #0
    3c04:	d004      	beq.n	3c10 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    3c06:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    3c0a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    3c0e:	e011      	b.n	3c34 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    3c10:	4b19      	ldr	r3, [pc, #100]	; (3c78 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    3c12:	681b      	ldr	r3, [r3, #0]
    3c14:	f107 0258 	add.w	r2, r7, #88	; 0x58
    3c18:	4610      	mov	r0, r2
    3c1a:	4798      	blx	r3
    3c1c:	463b      	mov	r3, r7
    3c1e:	f107 0220 	add.w	r2, r7, #32
    3c22:	f107 0158 	add.w	r1, r7, #88	; 0x58
    3c26:	4618      	mov	r0, r3
    3c28:	f7fc fecf 	bl	9ca <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3c2c:	e9d7 3400 	ldrd	r3, r4, [r7]
    3c30:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    3c34:	2301      	movs	r3, #1
    3c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    3c38:	4b0f      	ldr	r3, [pc, #60]	; (3c78 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    3c3a:	681b      	ldr	r3, [r3, #0]
    3c3c:	f107 0250 	add.w	r2, r7, #80	; 0x50
    3c40:	4610      	mov	r0, r2
    3c42:	4798      	blx	r3
    3c44:	f107 0218 	add.w	r2, r7, #24
    3c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
    3c4c:	4611      	mov	r1, r2
    3c4e:	4618      	mov	r0, r3
    3c50:	f7fc fee8 	bl	a24 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3c54:	4603      	mov	r3, r0
    3c56:	2b00      	cmp	r3, #0
    3c58:	d009      	beq.n	3c6e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    3c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    3c5e:	4618      	mov	r0, r3
    3c60:	f7ff ff79 	bl	3b56 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    3c64:	4603      	mov	r3, r0
    3c66:	2b00      	cmp	r3, #0
    3c68:	d0e6      	beq.n	3c38 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    3c6a:	2300      	movs	r3, #0
    3c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    3c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    3c70:	4618      	mov	r0, r3
    3c72:	3774      	adds	r7, #116	; 0x74
    3c74:	46bd      	mov	sp, r7
    3c76:	bd90      	pop	{r4, r7, pc}
    3c78:	10000000 	.word	0x10000000

00003c7c <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b082      	sub	sp, #8
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	685b      	ldr	r3, [r3, #4]
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	7d1b      	ldrb	r3, [r3, #20]
    3c8c:	b2db      	uxtb	r3, r3
    3c8e:	2100      	movs	r1, #0
    3c90:	4618      	mov	r0, r3
    3c92:	f000 f98c 	bl	3fae <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    3c96:	4603      	mov	r3, r0
  }
    3c98:	4618      	mov	r0, r3
    3c9a:	3708      	adds	r7, #8
    3c9c:	46bd      	mov	sp, r7
    3c9e:	bd80      	pop	{r7, pc}

00003ca0 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	685b      	ldr	r3, [r3, #4]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	7d1b      	ldrb	r3, [r3, #20]
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	2105      	movs	r1, #5
    3cb4:	4618      	mov	r0, r3
    3cb6:	f000 f97a 	bl	3fae <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    3cba:	4603      	mov	r3, r0
  }
    3cbc:	4618      	mov	r0, r3
    3cbe:	3708      	adds	r7, #8
    3cc0:	46bd      	mov	sp, r7
    3cc2:	bd80      	pop	{r7, pc}

00003cc4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b082      	sub	sp, #8
    3cc8:	af00      	add	r7, sp, #0
    3cca:	6078      	str	r0, [r7, #4]
    3ccc:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    3cce:	683a      	ldr	r2, [r7, #0]
    3cd0:	6879      	ldr	r1, [r7, #4]
    3cd2:	4804      	ldr	r0, [pc, #16]	; (3ce4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    3cd4:	f7ff ff18 	bl	3b08 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    3cd8:	683b      	ldr	r3, [r7, #0]
}
    3cda:	4618      	mov	r0, r3
    3cdc:	3708      	adds	r7, #8
    3cde:	46bd      	mov	sp, r7
    3ce0:	bd80      	pop	{r7, pc}
    3ce2:	bf00      	nop
    3ce4:	100002a8 	.word	0x100002a8

00003ce8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    3ce8:	b590      	push	{r4, r7, lr}
    3cea:	b087      	sub	sp, #28
    3cec:	af02      	add	r7, sp, #8
    3cee:	6078      	str	r0, [r7, #4]
    3cf0:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    3cf2:	f107 0308 	add.w	r3, r7, #8
    3cf6:	4618      	mov	r0, r3
    3cf8:	f7fc fe2c 	bl	954 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    3cfc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    3d00:	e9cd 3400 	strd	r3, r4, [sp]
    3d04:	683a      	ldr	r2, [r7, #0]
    3d06:	6879      	ldr	r1, [r7, #4]
    3d08:	4803      	ldr	r0, [pc, #12]	; (3d18 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    3d0a:	f7ff ff4f 	bl	3bac <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    3d0e:	683b      	ldr	r3, [r7, #0]
}
    3d10:	4618      	mov	r0, r3
    3d12:	3714      	adds	r7, #20
    3d14:	46bd      	mov	sp, r7
    3d16:	bd90      	pop	{r4, r7, pc}
    3d18:	100002a8 	.word	0x100002a8

00003d1c <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    3d20:	4802      	ldr	r0, [pc, #8]	; (3d2c <ThreadRuntimeCounter+0x10>)
    3d22:	f7fe fc55 	bl	25d0 <sjsu::cortex::DwtCounter::GetCount()>
    3d26:	4603      	mov	r3, r0
}
    3d28:	4618      	mov	r0, r3
    3d2a:	bd80      	pop	{r7, pc}
    3d2c:	100002a4 	.word	0x100002a4

00003d30 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    3d30:	b580      	push	{r7, lr}
    3d32:	b082      	sub	sp, #8
    3d34:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    3d36:	f7fe fc5b 	bl	25f0 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    3d3a:	4b1e      	ldr	r3, [pc, #120]	; (3db4 <sjsu::InitializePlatform()+0x84>)
    3d3c:	6819      	ldr	r1, [r3, #0]
    3d3e:	481e      	ldr	r0, [pc, #120]	; (3db8 <sjsu::InitializePlatform()+0x88>)
    3d40:	f7fe ffa6 	bl	2c90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    3d44:	23ff      	movs	r3, #255	; 0xff
    3d46:	703b      	strb	r3, [r7, #0]
    3d48:	463b      	mov	r3, r7
    3d4a:	2201      	movs	r2, #1
    3d4c:	4619      	mov	r1, r3
    3d4e:	481a      	ldr	r0, [pc, #104]	; (3db8 <sjsu::InitializePlatform()+0x88>)
    3d50:	f7fe ffec 	bl	2d2c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    3d54:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    3d58:	4818      	ldr	r0, [pc, #96]	; (3dbc <sjsu::InitializePlatform()+0x8c>)
    3d5a:	f7ff fe2f 	bl	39bc <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    3d5e:	4818      	ldr	r0, [pc, #96]	; (3dc0 <sjsu::InitializePlatform()+0x90>)
    3d60:	f000 faaa 	bl	42b8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    3d64:	4817      	ldr	r0, [pc, #92]	; (3dc4 <sjsu::InitializePlatform()+0x94>)
    3d66:	f000 fab7 	bl	42d8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    3d6a:	4b17      	ldr	r3, [pc, #92]	; (3dc8 <sjsu::InitializePlatform()+0x98>)
    3d6c:	6819      	ldr	r1, [r3, #0]
    3d6e:	4817      	ldr	r0, [pc, #92]	; (3dcc <sjsu::InitializePlatform()+0x9c>)
    3d70:	f7fe ff06 	bl	2b80 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    3d74:	4815      	ldr	r0, [pc, #84]	; (3dcc <sjsu::InitializePlatform()+0x9c>)
    3d76:	f7fe fe25 	bl	29c4 <sjsu::cortex::SystemTimer::StartTimer() const>
    3d7a:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d00d      	beq.n	3d9e <sjsu::InitializePlatform()+0x6e>
    3d82:	23d6      	movs	r3, #214	; 0xd6
    3d84:	4a12      	ldr	r2, [pc, #72]	; (3dd0 <sjsu::InitializePlatform()+0xa0>)
    3d86:	4913      	ldr	r1, [pc, #76]	; (3dd4 <sjsu::InitializePlatform()+0xa4>)
    3d88:	4813      	ldr	r0, [pc, #76]	; (3dd8 <sjsu::InitializePlatform()+0xa8>)
    3d8a:	f7fe fb07 	bl	239c <printf>
    3d8e:	4813      	ldr	r0, [pc, #76]	; (3ddc <sjsu::InitializePlatform()+0xac>)
    3d90:	f7fd f9c0 	bl	1114 <puts>
    3d94:	2100      	movs	r1, #0
    3d96:	2001      	movs	r0, #1
    3d98:	f7fc ff14 	bl	bc4 <sjsu::debug::PrintBacktrace(bool, void*)>
    3d9c:	e7fe      	b.n	3d9c <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    3d9e:	4810      	ldr	r0, [pc, #64]	; (3de0 <sjsu::InitializePlatform()+0xb0>)
    3da0:	f7fe fbf4 	bl	258c <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    3da4:	480f      	ldr	r0, [pc, #60]	; (3de4 <sjsu::InitializePlatform()+0xb4>)
    3da6:	f7fe fcf3 	bl	2790 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    3daa:	bf00      	nop
    3dac:	3708      	adds	r7, #8
    3dae:	46bd      	mov	sp, r7
    3db0:	bd80      	pop	{r7, pc}
    3db2:	bf00      	nop
    3db4:	00006760 	.word	0x00006760
    3db8:	10000064 	.word	0x10000064
    3dbc:	100002a8 	.word	0x100002a8
    3dc0:	00003cc5 	.word	0x00003cc5
    3dc4:	00003ce9 	.word	0x00003ce9
    3dc8:	00006764 	.word	0x00006764
    3dcc:	10000068 	.word	0x10000068
    3dd0:	00006a40 	.word	0x00006a40
    3dd4:	00006850 	.word	0x00006850
    3dd8:	00006684 	.word	0x00006684
    3ddc:	00006418 	.word	0x00006418
    3de0:	100002a4 	.word	0x100002a4
    3de4:	0000296d 	.word	0x0000296d

00003de8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    3de8:	b580      	push	{r7, lr}
    3dea:	b084      	sub	sp, #16
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
    3df0:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	4618      	mov	r0, r3
    3df6:	f7fe fe2f 	bl	2a58 <units::linear_scale<float>::operator()() const>
    3dfa:	eef0 6a40 	vmov.f32	s13, s0
    3dfe:	683b      	ldr	r3, [r7, #0]
    3e00:	ee07 3a90 	vmov	s15, r3
    3e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    3e0c:	f107 030c 	add.w	r3, r7, #12
    3e10:	eeb0 0a47 	vmov.f32	s0, s14
    3e14:	4618      	mov	r0, r3
    3e16:	f7fe fc6c 	bl	26f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3e1a:	68fb      	ldr	r3, [r7, #12]
	}
    3e1c:	4618      	mov	r0, r3
    3e1e:	3710      	adds	r7, #16
    3e20:	46bd      	mov	sp, r7
    3e22:	bd80      	pop	{r7, pc}

00003e24 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    3e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e26:	b083      	sub	sp, #12
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
    3e2c:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    3e2e:	6838      	ldr	r0, [r7, #0]
    3e30:	f7fc fd24 	bl	87c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3e34:	460a      	mov	r2, r1
    3e36:	4601      	mov	r1, r0
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	e9d3 5600 	ldrd	r5, r6, [r3]
    3e3e:	186b      	adds	r3, r5, r1
    3e40:	eb46 0402 	adc.w	r4, r6, r2
    3e44:	687a      	ldr	r2, [r7, #4]
    3e46:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    3e4a:	687b      	ldr	r3, [r7, #4]
	}
    3e4c:	4618      	mov	r0, r3
    3e4e:	370c      	adds	r7, #12
    3e50:	46bd      	mov	sp, r7
    3e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    3e54:	b580      	push	{r7, lr}
    3e56:	b084      	sub	sp, #16
    3e58:	af00      	add	r7, sp, #0
    3e5a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	4618      	mov	r0, r3
    3e60:	f7fe fdfa 	bl	2a58 <units::linear_scale<float>::operator()() const>
    3e64:	eef0 7a40 	vmov.f32	s15, s0
    3e68:	edc7 7a03 	vstr	s15, [r7, #12]
    3e6c:	f107 030c 	add.w	r3, r7, #12
    3e70:	4618      	mov	r0, r3
    3e72:	f000 f8b3 	bl	3fdc <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3e76:	eef0 7a40 	vmov.f32	s15, s0
    3e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3e7e:	ee17 3a90 	vmov	r3, s15
		}
    3e82:	4618      	mov	r0, r3
    3e84:	3710      	adds	r7, #16
    3e86:	46bd      	mov	sp, r7
    3e88:	bd80      	pop	{r7, pc}

00003e8a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3e8a:	b580      	push	{r7, lr}
    3e8c:	ed2d 8b02 	vpush	{d8}
    3e90:	b082      	sub	sp, #8
    3e92:	af00      	add	r7, sp, #0
    3e94:	6078      	str	r0, [r7, #4]
    3e96:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	ed93 8a00 	vldr	s16, [r3]
    3e9e:	683b      	ldr	r3, [r7, #0]
    3ea0:	4618      	mov	r0, r3
    3ea2:	f7fe fc06 	bl	26b2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3ea6:	eef0 7a40 	vmov.f32	s15, s0
    3eaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3eb2:	bfcc      	ite	gt
    3eb4:	2301      	movgt	r3, #1
    3eb6:	2300      	movle	r3, #0
    3eb8:	b2db      	uxtb	r3, r3
		}
    3eba:	4618      	mov	r0, r3
    3ebc:	3708      	adds	r7, #8
    3ebe:	46bd      	mov	sp, r7
    3ec0:	ecbd 8b02 	vpop	{d8}
    3ec4:	bd80      	pop	{r7, pc}

00003ec6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    3ec6:	b580      	push	{r7, lr}
    3ec8:	b082      	sub	sp, #8
    3eca:	af00      	add	r7, sp, #0
    3ecc:	6078      	str	r0, [r7, #4]
    3ece:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    3ed0:	683b      	ldr	r3, [r7, #0]
    3ed2:	4618      	mov	r0, r3
    3ed4:	f7fe feb6 	bl	2c44 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3ed8:	eef0 7a40 	vmov.f32	s15, s0
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    3ee2:	687b      	ldr	r3, [r7, #4]
		}
    3ee4:	4618      	mov	r0, r3
    3ee6:	3708      	adds	r7, #8
    3ee8:	46bd      	mov	sp, r7
    3eea:	bd80      	pop	{r7, pc}

00003eec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    3eec:	b480      	push	{r7}
    3eee:	b083      	sub	sp, #12
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
    3ef4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    3ef6:	2201      	movs	r2, #1
    3ef8:	683b      	ldr	r3, [r7, #0]
    3efa:	fa02 f303 	lsl.w	r3, r2, r3
    3efe:	461a      	mov	r2, r3
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	4313      	orrs	r3, r2
}
    3f04:	4618      	mov	r0, r3
    3f06:	370c      	adds	r7, #12
    3f08:	46bd      	mov	sp, r7
    3f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f0e:	4770      	bx	lr

00003f10 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    3f10:	b480      	push	{r7}
    3f12:	b083      	sub	sp, #12
    3f14:	af00      	add	r7, sp, #0
    3f16:	6078      	str	r0, [r7, #4]
    3f18:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    3f1a:	2201      	movs	r2, #1
    3f1c:	683b      	ldr	r3, [r7, #0]
    3f1e:	fa02 f303 	lsl.w	r3, r2, r3
    3f22:	43db      	mvns	r3, r3
    3f24:	461a      	mov	r2, r3
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	4013      	ands	r3, r2
}
    3f2a:	4618      	mov	r0, r3
    3f2c:	370c      	adds	r7, #12
    3f2e:	46bd      	mov	sp, r7
    3f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f34:	4770      	bx	lr

00003f36 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    3f36:	b580      	push	{r7, lr}
    3f38:	b084      	sub	sp, #16
    3f3a:	af00      	add	r7, sp, #0
    3f3c:	60f8      	str	r0, [r7, #12]
    3f3e:	60b9      	str	r1, [r7, #8]
    3f40:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    3f42:	793b      	ldrb	r3, [r7, #4]
    3f44:	461a      	mov	r2, r3
    3f46:	797b      	ldrb	r3, [r7, #5]
    3f48:	68b9      	ldr	r1, [r7, #8]
    3f4a:	68f8      	ldr	r0, [r7, #12]
    3f4c:	f000 f854 	bl	3ff8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    3f50:	4603      	mov	r3, r0
}
    3f52:	4618      	mov	r0, r3
    3f54:	3710      	adds	r7, #16
    3f56:	46bd      	mov	sp, r7
    3f58:	bd80      	pop	{r7, pc}

00003f5a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    3f5a:	b480      	push	{r7}
    3f5c:	b083      	sub	sp, #12
    3f5e:	af00      	add	r7, sp, #0
    3f60:	6078      	str	r0, [r7, #4]
    3f62:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    3f64:	2201      	movs	r2, #1
    3f66:	683b      	ldr	r3, [r7, #0]
    3f68:	fa02 f303 	lsl.w	r3, r2, r3
    3f6c:	461a      	mov	r2, r3
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	4013      	ands	r3, r2
    3f72:	2b00      	cmp	r3, #0
    3f74:	bf14      	ite	ne
    3f76:	2301      	movne	r3, #1
    3f78:	2300      	moveq	r3, #0
    3f7a:	b2db      	uxtb	r3, r3
}
    3f7c:	4618      	mov	r0, r3
    3f7e:	370c      	adds	r7, #12
    3f80:	46bd      	mov	sp, r7
    3f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f86:	4770      	bx	lr

00003f88 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    3f88:	b580      	push	{r7, lr}
    3f8a:	b084      	sub	sp, #16
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	60f8      	str	r0, [r7, #12]
    3f90:	460b      	mov	r3, r1
    3f92:	80ba      	strh	r2, [r7, #4]
    3f94:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    3f96:	793b      	ldrb	r3, [r7, #4]
    3f98:	461a      	mov	r2, r3
    3f9a:	797b      	ldrb	r3, [r7, #5]
    3f9c:	7af9      	ldrb	r1, [r7, #11]
    3f9e:	68f8      	ldr	r0, [r7, #12]
    3fa0:	f000 f856 	bl	4050 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    3fa4:	4603      	mov	r3, r0
}
    3fa6:	4618      	mov	r0, r3
    3fa8:	3710      	adds	r7, #16
    3faa:	46bd      	mov	sp, r7
    3fac:	bd80      	pop	{r7, pc}

00003fae <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    3fae:	b480      	push	{r7}
    3fb0:	b083      	sub	sp, #12
    3fb2:	af00      	add	r7, sp, #0
    3fb4:	4603      	mov	r3, r0
    3fb6:	6039      	str	r1, [r7, #0]
    3fb8:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    3fba:	79fa      	ldrb	r2, [r7, #7]
    3fbc:	683b      	ldr	r3, [r7, #0]
    3fbe:	fa42 f303 	asr.w	r3, r2, r3
    3fc2:	f003 0301 	and.w	r3, r3, #1
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	bf14      	ite	ne
    3fca:	2301      	movne	r3, #1
    3fcc:	2300      	moveq	r3, #0
    3fce:	b2db      	uxtb	r3, r3
}
    3fd0:	4618      	mov	r0, r3
    3fd2:	370c      	adds	r7, #12
    3fd4:	46bd      	mov	sp, r7
    3fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fda:	4770      	bx	lr

00003fdc <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3fdc:	b580      	push	{r7, lr}
    3fde:	b086      	sub	sp, #24
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3fe4:	6878      	ldr	r0, [r7, #4]
    3fe6:	f000 f860 	bl	40aa <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3fea:	eef0 7a40 	vmov.f32	s15, s0
	}
    3fee:	eeb0 0a67 	vmov.f32	s0, s15
    3ff2:	3718      	adds	r7, #24
    3ff4:	46bd      	mov	sp, r7
    3ff6:	bd80      	pop	{r7, pc}

00003ff8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3ff8:	b480      	push	{r7}
    3ffa:	b089      	sub	sp, #36	; 0x24
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	60f8      	str	r0, [r7, #12]
    4000:	60b9      	str	r1, [r7, #8]
    4002:	607a      	str	r2, [r7, #4]
    4004:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    4006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    400a:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    400c:	2320      	movs	r3, #32
    400e:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	f1c3 0320 	rsb	r3, r3, #32
    4016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    401a:	fa22 f303 	lsr.w	r3, r2, r3
    401e:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4020:	697a      	ldr	r2, [r7, #20]
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	fa02 f303 	lsl.w	r3, r2, r3
    4028:	43db      	mvns	r3, r3
    402a:	68fa      	ldr	r2, [r7, #12]
    402c:	4013      	ands	r3, r2
    402e:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4030:	68ba      	ldr	r2, [r7, #8]
    4032:	697b      	ldr	r3, [r7, #20]
    4034:	401a      	ands	r2, r3
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	fa02 f303 	lsl.w	r3, r2, r3
    403c:	68fa      	ldr	r2, [r7, #12]
    403e:	4313      	orrs	r3, r2
    4040:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4042:	68fb      	ldr	r3, [r7, #12]
}
    4044:	4618      	mov	r0, r3
    4046:	3724      	adds	r7, #36	; 0x24
    4048:	46bd      	mov	sp, r7
    404a:	f85d 7b04 	ldr.w	r7, [sp], #4
    404e:	4770      	bx	lr

00004050 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    4050:	b480      	push	{r7}
    4052:	b089      	sub	sp, #36	; 0x24
    4054:	af00      	add	r7, sp, #0
    4056:	60f8      	str	r0, [r7, #12]
    4058:	607a      	str	r2, [r7, #4]
    405a:	603b      	str	r3, [r7, #0]
    405c:	460b      	mov	r3, r1
    405e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    4060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4064:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4066:	2320      	movs	r3, #32
    4068:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    406a:	683b      	ldr	r3, [r7, #0]
    406c:	f1c3 0320 	rsb	r3, r3, #32
    4070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4074:	fa22 f303 	lsr.w	r3, r2, r3
    4078:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    407a:	697a      	ldr	r2, [r7, #20]
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	fa02 f303 	lsl.w	r3, r2, r3
    4082:	43db      	mvns	r3, r3
    4084:	68fa      	ldr	r2, [r7, #12]
    4086:	4013      	ands	r3, r2
    4088:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    408a:	7afa      	ldrb	r2, [r7, #11]
    408c:	697b      	ldr	r3, [r7, #20]
    408e:	401a      	ands	r2, r3
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	fa02 f303 	lsl.w	r3, r2, r3
    4096:	68fa      	ldr	r2, [r7, #12]
    4098:	4313      	orrs	r3, r2
    409a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    409c:	68fb      	ldr	r3, [r7, #12]
}
    409e:	4618      	mov	r0, r3
    40a0:	3724      	adds	r7, #36	; 0x24
    40a2:	46bd      	mov	sp, r7
    40a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a8:	4770      	bx	lr

000040aa <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    40aa:	b480      	push	{r7}
    40ac:	b085      	sub	sp, #20
    40ae:	af00      	add	r7, sp, #0
    40b0:	60f8      	str	r0, [r7, #12]
    40b2:	7239      	strb	r1, [r7, #8]
    40b4:	713a      	strb	r2, [r7, #4]
    40b6:	703b      	strb	r3, [r7, #0]
			return value;
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	ee07 3a90 	vmov	s15, r3
		}
    40c0:	eeb0 0a67 	vmov.f32	s0, s15
    40c4:	3714      	adds	r7, #20
    40c6:	46bd      	mov	sp, r7
    40c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40cc:	4770      	bx	lr
    40ce:	Address 0x00000000000040ce is out of bounds.


000040d0 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    40d8:	6039      	str	r1, [r7, #0]
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	2b01      	cmp	r3, #1
    40de:	d155      	bne.n	418c <__static_initialization_and_destruction_0(int, int)+0xbc>
    40e0:	683b      	ldr	r3, [r7, #0]
    40e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    40e6:	4293      	cmp	r3, r2
    40e8:	d150      	bne.n	418c <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    40ea:	4b2a      	ldr	r3, [pc, #168]	; (4194 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	f003 0301 	and.w	r3, r3, #1
    40f2:	2b00      	cmp	r3, #0
    40f4:	d106      	bne.n	4104 <__static_initialization_and_destruction_0(int, int)+0x34>
    40f6:	4b27      	ldr	r3, [pc, #156]	; (4194 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    40f8:	2201      	movs	r2, #1
    40fa:	601a      	str	r2, [r3, #0]
    40fc:	4b26      	ldr	r3, [pc, #152]	; (4198 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    40fe:	4618      	mov	r0, r3
    4100:	f7fc fe8a 	bl	e18 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    4104:	4b25      	ldr	r3, [pc, #148]	; (419c <__static_initialization_and_destruction_0(int, int)+0xcc>)
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	f003 0301 	and.w	r3, r3, #1
    410c:	2b00      	cmp	r3, #0
    410e:	d105      	bne.n	411c <__static_initialization_and_destruction_0(int, int)+0x4c>
    4110:	4b22      	ldr	r3, [pc, #136]	; (419c <__static_initialization_and_destruction_0(int, int)+0xcc>)
    4112:	2201      	movs	r2, #1
    4114:	601a      	str	r2, [r3, #0]
    4116:	4a22      	ldr	r2, [pc, #136]	; (41a0 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    4118:	4b22      	ldr	r3, [pc, #136]	; (41a4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    411a:	601a      	str	r2, [r3, #0]
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    411c:	4b22      	ldr	r3, [pc, #136]	; (41a8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    411e:	681b      	ldr	r3, [r3, #0]
    4120:	f003 0301 	and.w	r3, r3, #1
    4124:	2b00      	cmp	r3, #0
    4126:	d105      	bne.n	4134 <__static_initialization_and_destruction_0(int, int)+0x64>
    4128:	4b1f      	ldr	r3, [pc, #124]	; (41a8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    412a:	2201      	movs	r2, #1
    412c:	601a      	str	r2, [r3, #0]
    412e:	4a1f      	ldr	r2, [pc, #124]	; (41ac <__static_initialization_and_destruction_0(int, int)+0xdc>)
    4130:	4b1f      	ldr	r3, [pc, #124]	; (41b0 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    4132:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    4134:	4b1f      	ldr	r3, [pc, #124]	; (41b4 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    4136:	681b      	ldr	r3, [r3, #0]
    4138:	f003 0301 	and.w	r3, r3, #1
    413c:	2b00      	cmp	r3, #0
    413e:	d105      	bne.n	414c <__static_initialization_and_destruction_0(int, int)+0x7c>
    4140:	4b1c      	ldr	r3, [pc, #112]	; (41b4 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    4142:	2201      	movs	r2, #1
    4144:	601a      	str	r2, [r3, #0]
    };
    4146:	4a1c      	ldr	r2, [pc, #112]	; (41b8 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    4148:	4b1c      	ldr	r3, [pc, #112]	; (41bc <__static_initialization_and_destruction_0(int, int)+0xec>)
    414a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    414c:	4b1c      	ldr	r3, [pc, #112]	; (41c0 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	f003 0301 	and.w	r3, r3, #1
    4154:	2b00      	cmp	r3, #0
    4156:	d105      	bne.n	4164 <__static_initialization_and_destruction_0(int, int)+0x94>
    4158:	4b19      	ldr	r3, [pc, #100]	; (41c0 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    415a:	2201      	movs	r2, #1
    415c:	601a      	str	r2, [r3, #0]
    };
    415e:	4a19      	ldr	r2, [pc, #100]	; (41c4 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    4160:	4b19      	ldr	r3, [pc, #100]	; (41c8 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    4162:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    4164:	4b19      	ldr	r3, [pc, #100]	; (41cc <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	f003 0301 	and.w	r3, r3, #1
    416c:	2b00      	cmp	r3, #0
    416e:	d105      	bne.n	417c <__static_initialization_and_destruction_0(int, int)+0xac>
    4170:	4b16      	ldr	r3, [pc, #88]	; (41cc <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4172:	2201      	movs	r2, #1
    4174:	601a      	str	r2, [r3, #0]
    };
    4176:	4a16      	ldr	r2, [pc, #88]	; (41d0 <__static_initialization_and_destruction_0(int, int)+0x100>)
    4178:	4b16      	ldr	r3, [pc, #88]	; (41d4 <__static_initialization_and_destruction_0(int, int)+0x104>)
    417a:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    417c:	f7ff f92e 	bl	33dc <sjsu::lpc40xx::DefaultSystemController()>
    4180:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    4182:	461a      	mov	r2, r3
    4184:	4914      	ldr	r1, [pc, #80]	; (41d8 <__static_initialization_and_destruction_0(int, int)+0x108>)
    4186:	4815      	ldr	r0, [pc, #84]	; (41dc <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4188:	f7ff fbfe 	bl	3988 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    418c:	bf00      	nop
    418e:	3708      	adds	r7, #8
    4190:	46bd      	mov	sp, r7
    4192:	bd80      	pop	{r7, pc}
    4194:	10000210 	.word	0x10000210
    4198:	10000110 	.word	0x10000110
    419c:	100002b4 	.word	0x100002b4
    41a0:	400fc000 	.word	0x400fc000
    41a4:	100002a0 	.word	0x100002a0
    41a8:	10000100 	.word	0x10000100
    41ac:	4002c000 	.word	0x4002c000
    41b0:	100000fc 	.word	0x100000fc
    41b4:	100002b8 	.word	0x100002b8
    41b8:	40098000 	.word	0x40098000
    41bc:	10000028 	.word	0x10000028
    41c0:	100002bc 	.word	0x100002bc
    41c4:	4009c000 	.word	0x4009c000
    41c8:	1000003c 	.word	0x1000003c
    41cc:	100002c0 	.word	0x100002c0
    41d0:	400a4000 	.word	0x400a4000
    41d4:	10000050 	.word	0x10000050
    41d8:	0000683c 	.word	0x0000683c
    41dc:	100002a8 	.word	0x100002a8

000041e0 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    41e0:	b580      	push	{r7, lr}
    41e2:	af00      	add	r7, sp, #0
    41e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    41e8:	2001      	movs	r0, #1
    41ea:	f7ff ff71 	bl	40d0 <__static_initialization_and_destruction_0(int, int)>
    41ee:	bd80      	pop	{r7, pc}

000041f0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    41f0:	4b07      	ldr	r3, [pc, #28]	; (4210 <pxCurrentTCBConst2>)
    41f2:	6819      	ldr	r1, [r3, #0]
    41f4:	6808      	ldr	r0, [r1, #0]
    41f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41fa:	f380 8809 	msr	PSP, r0
    41fe:	f3bf 8f6f 	isb	sy
    4202:	f04f 0000 	mov.w	r0, #0
    4206:	f380 8811 	msr	BASEPRI, r0
    420a:	4770      	bx	lr
    420c:	f3af 8000 	nop.w

00004210 <pxCurrentTCBConst2>:
    4210:	10000214 	.word	0x10000214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    4214:	bf00      	nop
    4216:	bf00      	nop
    4218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    421c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004220 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4220:	f3ef 8009 	mrs	r0, PSP
    4224:	f3bf 8f6f 	isb	sy
    4228:	4b15      	ldr	r3, [pc, #84]	; (4280 <pxCurrentTCBConst>)
    422a:	681a      	ldr	r2, [r3, #0]
    422c:	f01e 0f10 	tst.w	lr, #16
    4230:	bf08      	it	eq
    4232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    423a:	6010      	str	r0, [r2, #0]
    423c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4240:	f04f 0028 	mov.w	r0, #40	; 0x28
    4244:	f380 8811 	msr	BASEPRI, r0
    4248:	f3bf 8f4f 	dsb	sy
    424c:	f3bf 8f6f 	isb	sy
    4250:	f7fc fed0 	bl	ff4 <vTaskSwitchContext>
    4254:	f04f 0000 	mov.w	r0, #0
    4258:	f380 8811 	msr	BASEPRI, r0
    425c:	bc09      	pop	{r0, r3}
    425e:	6819      	ldr	r1, [r3, #0]
    4260:	6808      	ldr	r0, [r1, #0]
    4262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4266:	f01e 0f10 	tst.w	lr, #16
    426a:	bf08      	it	eq
    426c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4270:	f380 8809 	msr	PSP, r0
    4274:	f3bf 8f6f 	isb	sy
    4278:	4770      	bx	lr
    427a:	bf00      	nop
    427c:	f3af 8000 	nop.w

00004280 <pxCurrentTCBConst>:
    4280:	10000214 	.word	0x10000214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4284:	bf00      	nop
    4286:	bf00      	nop

00004288 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4288:	b480      	push	{r7}
    428a:	b083      	sub	sp, #12
    428c:	af00      	add	r7, sp, #0
    428e:	6078      	str	r0, [r7, #4]
    4290:	6039      	str	r1, [r7, #0]
  return 1;
    4292:	2301      	movs	r3, #1
}
    4294:	4618      	mov	r0, r3
    4296:	370c      	adds	r7, #12
    4298:	46bd      	mov	sp, r7
    429a:	f85d 7b04 	ldr.w	r7, [sp], #4
    429e:	4770      	bx	lr

000042a0 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    42a0:	b480      	push	{r7}
    42a2:	b083      	sub	sp, #12
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
    42a8:	6039      	str	r1, [r7, #0]
  return 0;
    42aa:	2300      	movs	r3, #0
}
    42ac:	4618      	mov	r0, r3
    42ae:	370c      	adds	r7, #12
    42b0:	46bd      	mov	sp, r7
    42b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b6:	4770      	bx	lr

000042b8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    42b8:	b480      	push	{r7}
    42ba:	b083      	sub	sp, #12
    42bc:	af00      	add	r7, sp, #0
    42be:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    42c0:	4a04      	ldr	r2, [pc, #16]	; (42d4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	6013      	str	r3, [r2, #0]
}
    42c6:	bf00      	nop
    42c8:	370c      	adds	r7, #12
    42ca:	46bd      	mov	sp, r7
    42cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d0:	4770      	bx	lr
    42d2:	bf00      	nop
    42d4:	10000008 	.word	0x10000008

000042d8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    42d8:	b480      	push	{r7}
    42da:	b083      	sub	sp, #12
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    42e0:	4a04      	ldr	r2, [pc, #16]	; (42f4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	6013      	str	r3, [r2, #0]
}
    42e6:	bf00      	nop
    42e8:	370c      	adds	r7, #12
    42ea:	46bd      	mov	sp, r7
    42ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f0:	4770      	bx	lr
    42f2:	bf00      	nop
    42f4:	1000000c 	.word	0x1000000c

000042f8 <__cxa_pure_virtual>:
    42f8:	b508      	push	{r3, lr}
    42fa:	f000 f80d 	bl	4318 <std::terminate()>

000042fe <__cxxabiv1::__terminate(void (*)())>:
    42fe:	b508      	push	{r3, lr}
    4300:	4780      	blx	r0
    4302:	f001 fa73 	bl	57ec <abort>
    4306:	Address 0x0000000000004306 is out of bounds.


00004308 <std::get_terminate()>:
    4308:	4b02      	ldr	r3, [pc, #8]	; (4314 <std::get_terminate()+0xc>)
    430a:	6818      	ldr	r0, [r3, #0]
    430c:	f3bf 8f5b 	dmb	ish
    4310:	4770      	bx	lr
    4312:	bf00      	nop
    4314:	10000074 	.word	0x10000074

00004318 <std::terminate()>:
    4318:	b508      	push	{r3, lr}
    431a:	f7ff fff5 	bl	4308 <std::get_terminate()>
    431e:	f7ff ffee 	bl	42fe <__cxxabiv1::__terminate(void (*)())>
    4322:	Address 0x0000000000004322 is out of bounds.


00004324 <__aeabi_d2f>:
    4324:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4328:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    432c:	bf24      	itt	cs
    432e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4332:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4336:	d90d      	bls.n	4354 <__aeabi_d2f+0x30>
    4338:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    433c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4340:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4344:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4348:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    434c:	bf08      	it	eq
    434e:	f020 0001 	biceq.w	r0, r0, #1
    4352:	4770      	bx	lr
    4354:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4358:	d121      	bne.n	439e <__aeabi_d2f+0x7a>
    435a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    435e:	bfbc      	itt	lt
    4360:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4364:	4770      	bxlt	lr
    4366:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    436a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    436e:	f1c2 0218 	rsb	r2, r2, #24
    4372:	f1c2 0c20 	rsb	ip, r2, #32
    4376:	fa10 f30c 	lsls.w	r3, r0, ip
    437a:	fa20 f002 	lsr.w	r0, r0, r2
    437e:	bf18      	it	ne
    4380:	f040 0001 	orrne.w	r0, r0, #1
    4384:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4388:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    438c:	fa03 fc0c 	lsl.w	ip, r3, ip
    4390:	ea40 000c 	orr.w	r0, r0, ip
    4394:	fa23 f302 	lsr.w	r3, r3, r2
    4398:	ea4f 0343 	mov.w	r3, r3, lsl #1
    439c:	e7cc      	b.n	4338 <__aeabi_d2f+0x14>
    439e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    43a2:	d107      	bne.n	43b4 <__aeabi_d2f+0x90>
    43a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    43a8:	bf1e      	ittt	ne
    43aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    43ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    43b2:	4770      	bxne	lr
    43b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    43b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    43bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop

000043c4 <__aeabi_frsub>:
    43c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    43c8:	e002      	b.n	43d0 <__addsf3>
    43ca:	bf00      	nop

000043cc <__aeabi_fsub>:
    43cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000043d0 <__addsf3>:
    43d0:	0042      	lsls	r2, r0, #1
    43d2:	bf1f      	itttt	ne
    43d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    43d8:	ea92 0f03 	teqne	r2, r3
    43dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    43e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    43e4:	d06a      	beq.n	44bc <__addsf3+0xec>
    43e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    43ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    43ee:	bfc1      	itttt	gt
    43f0:	18d2      	addgt	r2, r2, r3
    43f2:	4041      	eorgt	r1, r0
    43f4:	4048      	eorgt	r0, r1
    43f6:	4041      	eorgt	r1, r0
    43f8:	bfb8      	it	lt
    43fa:	425b      	neglt	r3, r3
    43fc:	2b19      	cmp	r3, #25
    43fe:	bf88      	it	hi
    4400:	4770      	bxhi	lr
    4402:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    440a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    440e:	bf18      	it	ne
    4410:	4240      	negne	r0, r0
    4412:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4416:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    441a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    441e:	bf18      	it	ne
    4420:	4249      	negne	r1, r1
    4422:	ea92 0f03 	teq	r2, r3
    4426:	d03f      	beq.n	44a8 <__addsf3+0xd8>
    4428:	f1a2 0201 	sub.w	r2, r2, #1
    442c:	fa41 fc03 	asr.w	ip, r1, r3
    4430:	eb10 000c 	adds.w	r0, r0, ip
    4434:	f1c3 0320 	rsb	r3, r3, #32
    4438:	fa01 f103 	lsl.w	r1, r1, r3
    443c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4440:	d502      	bpl.n	4448 <__addsf3+0x78>
    4442:	4249      	negs	r1, r1
    4444:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4448:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    444c:	d313      	bcc.n	4476 <__addsf3+0xa6>
    444e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4452:	d306      	bcc.n	4462 <__addsf3+0x92>
    4454:	0840      	lsrs	r0, r0, #1
    4456:	ea4f 0131 	mov.w	r1, r1, rrx
    445a:	f102 0201 	add.w	r2, r2, #1
    445e:	2afe      	cmp	r2, #254	; 0xfe
    4460:	d251      	bcs.n	4506 <__addsf3+0x136>
    4462:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4466:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    446a:	bf08      	it	eq
    446c:	f020 0001 	biceq.w	r0, r0, #1
    4470:	ea40 0003 	orr.w	r0, r0, r3
    4474:	4770      	bx	lr
    4476:	0049      	lsls	r1, r1, #1
    4478:	eb40 0000 	adc.w	r0, r0, r0
    447c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4480:	f1a2 0201 	sub.w	r2, r2, #1
    4484:	d1ed      	bne.n	4462 <__addsf3+0x92>
    4486:	fab0 fc80 	clz	ip, r0
    448a:	f1ac 0c08 	sub.w	ip, ip, #8
    448e:	ebb2 020c 	subs.w	r2, r2, ip
    4492:	fa00 f00c 	lsl.w	r0, r0, ip
    4496:	bfaa      	itet	ge
    4498:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    449c:	4252      	neglt	r2, r2
    449e:	4318      	orrge	r0, r3
    44a0:	bfbc      	itt	lt
    44a2:	40d0      	lsrlt	r0, r2
    44a4:	4318      	orrlt	r0, r3
    44a6:	4770      	bx	lr
    44a8:	f092 0f00 	teq	r2, #0
    44ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    44b0:	bf06      	itte	eq
    44b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    44b6:	3201      	addeq	r2, #1
    44b8:	3b01      	subne	r3, #1
    44ba:	e7b5      	b.n	4428 <__addsf3+0x58>
    44bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    44c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    44c4:	bf18      	it	ne
    44c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    44ca:	d021      	beq.n	4510 <__addsf3+0x140>
    44cc:	ea92 0f03 	teq	r2, r3
    44d0:	d004      	beq.n	44dc <__addsf3+0x10c>
    44d2:	f092 0f00 	teq	r2, #0
    44d6:	bf08      	it	eq
    44d8:	4608      	moveq	r0, r1
    44da:	4770      	bx	lr
    44dc:	ea90 0f01 	teq	r0, r1
    44e0:	bf1c      	itt	ne
    44e2:	2000      	movne	r0, #0
    44e4:	4770      	bxne	lr
    44e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    44ea:	d104      	bne.n	44f6 <__addsf3+0x126>
    44ec:	0040      	lsls	r0, r0, #1
    44ee:	bf28      	it	cs
    44f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    44f4:	4770      	bx	lr
    44f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    44fa:	bf3c      	itt	cc
    44fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4500:	4770      	bxcc	lr
    4502:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4506:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    450a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    450e:	4770      	bx	lr
    4510:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4514:	bf16      	itet	ne
    4516:	4608      	movne	r0, r1
    4518:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    451c:	4601      	movne	r1, r0
    451e:	0242      	lsls	r2, r0, #9
    4520:	bf06      	itte	eq
    4522:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4526:	ea90 0f01 	teqeq	r0, r1
    452a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    452e:	4770      	bx	lr

00004530 <__aeabi_ui2f>:
    4530:	f04f 0300 	mov.w	r3, #0
    4534:	e004      	b.n	4540 <__aeabi_i2f+0x8>
    4536:	bf00      	nop

00004538 <__aeabi_i2f>:
    4538:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    453c:	bf48      	it	mi
    453e:	4240      	negmi	r0, r0
    4540:	ea5f 0c00 	movs.w	ip, r0
    4544:	bf08      	it	eq
    4546:	4770      	bxeq	lr
    4548:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    454c:	4601      	mov	r1, r0
    454e:	f04f 0000 	mov.w	r0, #0
    4552:	e01c      	b.n	458e <__aeabi_l2f+0x2a>

00004554 <__aeabi_ul2f>:
    4554:	ea50 0201 	orrs.w	r2, r0, r1
    4558:	bf08      	it	eq
    455a:	4770      	bxeq	lr
    455c:	f04f 0300 	mov.w	r3, #0
    4560:	e00a      	b.n	4578 <__aeabi_l2f+0x14>
    4562:	bf00      	nop

00004564 <__aeabi_l2f>:
    4564:	ea50 0201 	orrs.w	r2, r0, r1
    4568:	bf08      	it	eq
    456a:	4770      	bxeq	lr
    456c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4570:	d502      	bpl.n	4578 <__aeabi_l2f+0x14>
    4572:	4240      	negs	r0, r0
    4574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4578:	ea5f 0c01 	movs.w	ip, r1
    457c:	bf02      	ittt	eq
    457e:	4684      	moveq	ip, r0
    4580:	4601      	moveq	r1, r0
    4582:	2000      	moveq	r0, #0
    4584:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4588:	bf08      	it	eq
    458a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    458e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4592:	fabc f28c 	clz	r2, ip
    4596:	3a08      	subs	r2, #8
    4598:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    459c:	db10      	blt.n	45c0 <__aeabi_l2f+0x5c>
    459e:	fa01 fc02 	lsl.w	ip, r1, r2
    45a2:	4463      	add	r3, ip
    45a4:	fa00 fc02 	lsl.w	ip, r0, r2
    45a8:	f1c2 0220 	rsb	r2, r2, #32
    45ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    45b0:	fa20 f202 	lsr.w	r2, r0, r2
    45b4:	eb43 0002 	adc.w	r0, r3, r2
    45b8:	bf08      	it	eq
    45ba:	f020 0001 	biceq.w	r0, r0, #1
    45be:	4770      	bx	lr
    45c0:	f102 0220 	add.w	r2, r2, #32
    45c4:	fa01 fc02 	lsl.w	ip, r1, r2
    45c8:	f1c2 0220 	rsb	r2, r2, #32
    45cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    45d0:	fa21 f202 	lsr.w	r2, r1, r2
    45d4:	eb43 0002 	adc.w	r0, r3, r2
    45d8:	bf08      	it	eq
    45da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    45de:	4770      	bx	lr

000045e0 <__aeabi_uldivmod>:
    45e0:	b953      	cbnz	r3, 45f8 <__aeabi_uldivmod+0x18>
    45e2:	b94a      	cbnz	r2, 45f8 <__aeabi_uldivmod+0x18>
    45e4:	2900      	cmp	r1, #0
    45e6:	bf08      	it	eq
    45e8:	2800      	cmpeq	r0, #0
    45ea:	bf1c      	itt	ne
    45ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    45f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    45f4:	f001 b8f8 	b.w	57e8 <__aeabi_idiv0>
    45f8:	f1ad 0c08 	sub.w	ip, sp, #8
    45fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4600:	f000 f806 	bl	4610 <__udivmoddi4>
    4604:	f8dd e004 	ldr.w	lr, [sp, #4]
    4608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    460c:	b004      	add	sp, #16
    460e:	4770      	bx	lr

00004610 <__udivmoddi4>:
    4610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4614:	9e08      	ldr	r6, [sp, #32]
    4616:	4604      	mov	r4, r0
    4618:	4688      	mov	r8, r1
    461a:	2b00      	cmp	r3, #0
    461c:	d14b      	bne.n	46b6 <__udivmoddi4+0xa6>
    461e:	428a      	cmp	r2, r1
    4620:	4615      	mov	r5, r2
    4622:	d967      	bls.n	46f4 <__udivmoddi4+0xe4>
    4624:	fab2 f282 	clz	r2, r2
    4628:	b14a      	cbz	r2, 463e <__udivmoddi4+0x2e>
    462a:	f1c2 0720 	rsb	r7, r2, #32
    462e:	fa01 f302 	lsl.w	r3, r1, r2
    4632:	fa20 f707 	lsr.w	r7, r0, r7
    4636:	4095      	lsls	r5, r2
    4638:	ea47 0803 	orr.w	r8, r7, r3
    463c:	4094      	lsls	r4, r2
    463e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4642:	0c23      	lsrs	r3, r4, #16
    4644:	fbb8 f7fe 	udiv	r7, r8, lr
    4648:	fa1f fc85 	uxth.w	ip, r5
    464c:	fb0e 8817 	mls	r8, lr, r7, r8
    4650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4654:	fb07 f10c 	mul.w	r1, r7, ip
    4658:	4299      	cmp	r1, r3
    465a:	d909      	bls.n	4670 <__udivmoddi4+0x60>
    465c:	18eb      	adds	r3, r5, r3
    465e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4662:	f080 811b 	bcs.w	489c <__udivmoddi4+0x28c>
    4666:	4299      	cmp	r1, r3
    4668:	f240 8118 	bls.w	489c <__udivmoddi4+0x28c>
    466c:	3f02      	subs	r7, #2
    466e:	442b      	add	r3, r5
    4670:	1a5b      	subs	r3, r3, r1
    4672:	b2a4      	uxth	r4, r4
    4674:	fbb3 f0fe 	udiv	r0, r3, lr
    4678:	fb0e 3310 	mls	r3, lr, r0, r3
    467c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4680:	fb00 fc0c 	mul.w	ip, r0, ip
    4684:	45a4      	cmp	ip, r4
    4686:	d909      	bls.n	469c <__udivmoddi4+0x8c>
    4688:	192c      	adds	r4, r5, r4
    468a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    468e:	f080 8107 	bcs.w	48a0 <__udivmoddi4+0x290>
    4692:	45a4      	cmp	ip, r4
    4694:	f240 8104 	bls.w	48a0 <__udivmoddi4+0x290>
    4698:	3802      	subs	r0, #2
    469a:	442c      	add	r4, r5
    469c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    46a0:	eba4 040c 	sub.w	r4, r4, ip
    46a4:	2700      	movs	r7, #0
    46a6:	b11e      	cbz	r6, 46b0 <__udivmoddi4+0xa0>
    46a8:	40d4      	lsrs	r4, r2
    46aa:	2300      	movs	r3, #0
    46ac:	e9c6 4300 	strd	r4, r3, [r6]
    46b0:	4639      	mov	r1, r7
    46b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46b6:	428b      	cmp	r3, r1
    46b8:	d909      	bls.n	46ce <__udivmoddi4+0xbe>
    46ba:	2e00      	cmp	r6, #0
    46bc:	f000 80eb 	beq.w	4896 <__udivmoddi4+0x286>
    46c0:	2700      	movs	r7, #0
    46c2:	e9c6 0100 	strd	r0, r1, [r6]
    46c6:	4638      	mov	r0, r7
    46c8:	4639      	mov	r1, r7
    46ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46ce:	fab3 f783 	clz	r7, r3
    46d2:	2f00      	cmp	r7, #0
    46d4:	d147      	bne.n	4766 <__udivmoddi4+0x156>
    46d6:	428b      	cmp	r3, r1
    46d8:	d302      	bcc.n	46e0 <__udivmoddi4+0xd0>
    46da:	4282      	cmp	r2, r0
    46dc:	f200 80fa 	bhi.w	48d4 <__udivmoddi4+0x2c4>
    46e0:	1a84      	subs	r4, r0, r2
    46e2:	eb61 0303 	sbc.w	r3, r1, r3
    46e6:	2001      	movs	r0, #1
    46e8:	4698      	mov	r8, r3
    46ea:	2e00      	cmp	r6, #0
    46ec:	d0e0      	beq.n	46b0 <__udivmoddi4+0xa0>
    46ee:	e9c6 4800 	strd	r4, r8, [r6]
    46f2:	e7dd      	b.n	46b0 <__udivmoddi4+0xa0>
    46f4:	b902      	cbnz	r2, 46f8 <__udivmoddi4+0xe8>
    46f6:	deff      	udf	#255	; 0xff
    46f8:	fab2 f282 	clz	r2, r2
    46fc:	2a00      	cmp	r2, #0
    46fe:	f040 808f 	bne.w	4820 <__udivmoddi4+0x210>
    4702:	1b49      	subs	r1, r1, r5
    4704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4708:	fa1f f885 	uxth.w	r8, r5
    470c:	2701      	movs	r7, #1
    470e:	fbb1 fcfe 	udiv	ip, r1, lr
    4712:	0c23      	lsrs	r3, r4, #16
    4714:	fb0e 111c 	mls	r1, lr, ip, r1
    4718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    471c:	fb08 f10c 	mul.w	r1, r8, ip
    4720:	4299      	cmp	r1, r3
    4722:	d907      	bls.n	4734 <__udivmoddi4+0x124>
    4724:	18eb      	adds	r3, r5, r3
    4726:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    472a:	d202      	bcs.n	4732 <__udivmoddi4+0x122>
    472c:	4299      	cmp	r1, r3
    472e:	f200 80cd 	bhi.w	48cc <__udivmoddi4+0x2bc>
    4732:	4684      	mov	ip, r0
    4734:	1a59      	subs	r1, r3, r1
    4736:	b2a3      	uxth	r3, r4
    4738:	fbb1 f0fe 	udiv	r0, r1, lr
    473c:	fb0e 1410 	mls	r4, lr, r0, r1
    4740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4744:	fb08 f800 	mul.w	r8, r8, r0
    4748:	45a0      	cmp	r8, r4
    474a:	d907      	bls.n	475c <__udivmoddi4+0x14c>
    474c:	192c      	adds	r4, r5, r4
    474e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4752:	d202      	bcs.n	475a <__udivmoddi4+0x14a>
    4754:	45a0      	cmp	r8, r4
    4756:	f200 80b6 	bhi.w	48c6 <__udivmoddi4+0x2b6>
    475a:	4618      	mov	r0, r3
    475c:	eba4 0408 	sub.w	r4, r4, r8
    4760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4764:	e79f      	b.n	46a6 <__udivmoddi4+0x96>
    4766:	f1c7 0c20 	rsb	ip, r7, #32
    476a:	40bb      	lsls	r3, r7
    476c:	fa22 fe0c 	lsr.w	lr, r2, ip
    4770:	ea4e 0e03 	orr.w	lr, lr, r3
    4774:	fa01 f407 	lsl.w	r4, r1, r7
    4778:	fa20 f50c 	lsr.w	r5, r0, ip
    477c:	fa21 f30c 	lsr.w	r3, r1, ip
    4780:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4784:	4325      	orrs	r5, r4
    4786:	fbb3 f9f8 	udiv	r9, r3, r8
    478a:	0c2c      	lsrs	r4, r5, #16
    478c:	fb08 3319 	mls	r3, r8, r9, r3
    4790:	fa1f fa8e 	uxth.w	sl, lr
    4794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4798:	fb09 f40a 	mul.w	r4, r9, sl
    479c:	429c      	cmp	r4, r3
    479e:	fa02 f207 	lsl.w	r2, r2, r7
    47a2:	fa00 f107 	lsl.w	r1, r0, r7
    47a6:	d90b      	bls.n	47c0 <__udivmoddi4+0x1b0>
    47a8:	eb1e 0303 	adds.w	r3, lr, r3
    47ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    47b0:	f080 8087 	bcs.w	48c2 <__udivmoddi4+0x2b2>
    47b4:	429c      	cmp	r4, r3
    47b6:	f240 8084 	bls.w	48c2 <__udivmoddi4+0x2b2>
    47ba:	f1a9 0902 	sub.w	r9, r9, #2
    47be:	4473      	add	r3, lr
    47c0:	1b1b      	subs	r3, r3, r4
    47c2:	b2ad      	uxth	r5, r5
    47c4:	fbb3 f0f8 	udiv	r0, r3, r8
    47c8:	fb08 3310 	mls	r3, r8, r0, r3
    47cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    47d0:	fb00 fa0a 	mul.w	sl, r0, sl
    47d4:	45a2      	cmp	sl, r4
    47d6:	d908      	bls.n	47ea <__udivmoddi4+0x1da>
    47d8:	eb1e 0404 	adds.w	r4, lr, r4
    47dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    47e0:	d26b      	bcs.n	48ba <__udivmoddi4+0x2aa>
    47e2:	45a2      	cmp	sl, r4
    47e4:	d969      	bls.n	48ba <__udivmoddi4+0x2aa>
    47e6:	3802      	subs	r0, #2
    47e8:	4474      	add	r4, lr
    47ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    47ee:	fba0 8902 	umull	r8, r9, r0, r2
    47f2:	eba4 040a 	sub.w	r4, r4, sl
    47f6:	454c      	cmp	r4, r9
    47f8:	46c2      	mov	sl, r8
    47fa:	464b      	mov	r3, r9
    47fc:	d354      	bcc.n	48a8 <__udivmoddi4+0x298>
    47fe:	d051      	beq.n	48a4 <__udivmoddi4+0x294>
    4800:	2e00      	cmp	r6, #0
    4802:	d069      	beq.n	48d8 <__udivmoddi4+0x2c8>
    4804:	ebb1 050a 	subs.w	r5, r1, sl
    4808:	eb64 0403 	sbc.w	r4, r4, r3
    480c:	fa04 fc0c 	lsl.w	ip, r4, ip
    4810:	40fd      	lsrs	r5, r7
    4812:	40fc      	lsrs	r4, r7
    4814:	ea4c 0505 	orr.w	r5, ip, r5
    4818:	e9c6 5400 	strd	r5, r4, [r6]
    481c:	2700      	movs	r7, #0
    481e:	e747      	b.n	46b0 <__udivmoddi4+0xa0>
    4820:	f1c2 0320 	rsb	r3, r2, #32
    4824:	fa20 f703 	lsr.w	r7, r0, r3
    4828:	4095      	lsls	r5, r2
    482a:	fa01 f002 	lsl.w	r0, r1, r2
    482e:	fa21 f303 	lsr.w	r3, r1, r3
    4832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4836:	4338      	orrs	r0, r7
    4838:	0c01      	lsrs	r1, r0, #16
    483a:	fbb3 f7fe 	udiv	r7, r3, lr
    483e:	fa1f f885 	uxth.w	r8, r5
    4842:	fb0e 3317 	mls	r3, lr, r7, r3
    4846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    484a:	fb07 f308 	mul.w	r3, r7, r8
    484e:	428b      	cmp	r3, r1
    4850:	fa04 f402 	lsl.w	r4, r4, r2
    4854:	d907      	bls.n	4866 <__udivmoddi4+0x256>
    4856:	1869      	adds	r1, r5, r1
    4858:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    485c:	d22f      	bcs.n	48be <__udivmoddi4+0x2ae>
    485e:	428b      	cmp	r3, r1
    4860:	d92d      	bls.n	48be <__udivmoddi4+0x2ae>
    4862:	3f02      	subs	r7, #2
    4864:	4429      	add	r1, r5
    4866:	1acb      	subs	r3, r1, r3
    4868:	b281      	uxth	r1, r0
    486a:	fbb3 f0fe 	udiv	r0, r3, lr
    486e:	fb0e 3310 	mls	r3, lr, r0, r3
    4872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4876:	fb00 f308 	mul.w	r3, r0, r8
    487a:	428b      	cmp	r3, r1
    487c:	d907      	bls.n	488e <__udivmoddi4+0x27e>
    487e:	1869      	adds	r1, r5, r1
    4880:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    4884:	d217      	bcs.n	48b6 <__udivmoddi4+0x2a6>
    4886:	428b      	cmp	r3, r1
    4888:	d915      	bls.n	48b6 <__udivmoddi4+0x2a6>
    488a:	3802      	subs	r0, #2
    488c:	4429      	add	r1, r5
    488e:	1ac9      	subs	r1, r1, r3
    4890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    4894:	e73b      	b.n	470e <__udivmoddi4+0xfe>
    4896:	4637      	mov	r7, r6
    4898:	4630      	mov	r0, r6
    489a:	e709      	b.n	46b0 <__udivmoddi4+0xa0>
    489c:	4607      	mov	r7, r0
    489e:	e6e7      	b.n	4670 <__udivmoddi4+0x60>
    48a0:	4618      	mov	r0, r3
    48a2:	e6fb      	b.n	469c <__udivmoddi4+0x8c>
    48a4:	4541      	cmp	r1, r8
    48a6:	d2ab      	bcs.n	4800 <__udivmoddi4+0x1f0>
    48a8:	ebb8 0a02 	subs.w	sl, r8, r2
    48ac:	eb69 020e 	sbc.w	r2, r9, lr
    48b0:	3801      	subs	r0, #1
    48b2:	4613      	mov	r3, r2
    48b4:	e7a4      	b.n	4800 <__udivmoddi4+0x1f0>
    48b6:	4660      	mov	r0, ip
    48b8:	e7e9      	b.n	488e <__udivmoddi4+0x27e>
    48ba:	4618      	mov	r0, r3
    48bc:	e795      	b.n	47ea <__udivmoddi4+0x1da>
    48be:	4667      	mov	r7, ip
    48c0:	e7d1      	b.n	4866 <__udivmoddi4+0x256>
    48c2:	4681      	mov	r9, r0
    48c4:	e77c      	b.n	47c0 <__udivmoddi4+0x1b0>
    48c6:	3802      	subs	r0, #2
    48c8:	442c      	add	r4, r5
    48ca:	e747      	b.n	475c <__udivmoddi4+0x14c>
    48cc:	f1ac 0c02 	sub.w	ip, ip, #2
    48d0:	442b      	add	r3, r5
    48d2:	e72f      	b.n	4734 <__udivmoddi4+0x124>
    48d4:	4638      	mov	r0, r7
    48d6:	e708      	b.n	46ea <__udivmoddi4+0xda>
    48d8:	4637      	mov	r7, r6
    48da:	e6e9      	b.n	46b0 <__udivmoddi4+0xa0>

000048dc <selfrel_offset31>:
    48dc:	6803      	ldr	r3, [r0, #0]
    48de:	005a      	lsls	r2, r3, #1
    48e0:	bf4c      	ite	mi
    48e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    48e6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    48ea:	4418      	add	r0, r3
    48ec:	4770      	bx	lr
    48ee:	bf00      	nop

000048f0 <search_EIT_table>:
    48f0:	b361      	cbz	r1, 494c <search_EIT_table+0x5c>
    48f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48f6:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    48fa:	4690      	mov	r8, r2
    48fc:	4606      	mov	r6, r0
    48fe:	46d1      	mov	r9, sl
    4900:	2700      	movs	r7, #0
    4902:	eb07 0409 	add.w	r4, r7, r9
    4906:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    490a:	1064      	asrs	r4, r4, #1
    490c:	00e5      	lsls	r5, r4, #3
    490e:	1971      	adds	r1, r6, r5
    4910:	4608      	mov	r0, r1
    4912:	f7ff ffe3 	bl	48dc <selfrel_offset31>
    4916:	45a2      	cmp	sl, r4
    4918:	4683      	mov	fp, r0
    491a:	f105 0008 	add.w	r0, r5, #8
    491e:	4430      	add	r0, r6
    4920:	d009      	beq.n	4936 <search_EIT_table+0x46>
    4922:	f7ff ffdb 	bl	48dc <selfrel_offset31>
    4926:	45c3      	cmp	fp, r8
    4928:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    492c:	d805      	bhi.n	493a <search_EIT_table+0x4a>
    492e:	4540      	cmp	r0, r8
    4930:	d209      	bcs.n	4946 <search_EIT_table+0x56>
    4932:	1c67      	adds	r7, r4, #1
    4934:	e7e5      	b.n	4902 <search_EIT_table+0x12>
    4936:	45c3      	cmp	fp, r8
    4938:	d905      	bls.n	4946 <search_EIT_table+0x56>
    493a:	42a7      	cmp	r7, r4
    493c:	d002      	beq.n	4944 <search_EIT_table+0x54>
    493e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    4942:	e7de      	b.n	4902 <search_EIT_table+0x12>
    4944:	2100      	movs	r1, #0
    4946:	4608      	mov	r0, r1
    4948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    494c:	4608      	mov	r0, r1
    494e:	4770      	bx	lr

00004950 <__gnu_unwind_get_pr_addr>:
    4950:	2801      	cmp	r0, #1
    4952:	d007      	beq.n	4964 <__gnu_unwind_get_pr_addr+0x14>
    4954:	2802      	cmp	r0, #2
    4956:	d007      	beq.n	4968 <__gnu_unwind_get_pr_addr+0x18>
    4958:	4b04      	ldr	r3, [pc, #16]	; (496c <__gnu_unwind_get_pr_addr+0x1c>)
    495a:	2800      	cmp	r0, #0
    495c:	bf0c      	ite	eq
    495e:	4618      	moveq	r0, r3
    4960:	2000      	movne	r0, #0
    4962:	4770      	bx	lr
    4964:	4802      	ldr	r0, [pc, #8]	; (4970 <__gnu_unwind_get_pr_addr+0x20>)
    4966:	4770      	bx	lr
    4968:	4802      	ldr	r0, [pc, #8]	; (4974 <__gnu_unwind_get_pr_addr+0x24>)
    496a:	4770      	bx	lr
    496c:	0000503d 	.word	0x0000503d
    4970:	00005041 	.word	0x00005041
    4974:	00005045 	.word	0x00005045

00004978 <get_eit_entry>:
    4978:	b530      	push	{r4, r5, lr}
    497a:	4b25      	ldr	r3, [pc, #148]	; (4a10 <get_eit_entry+0x98>)
    497c:	b083      	sub	sp, #12
    497e:	4604      	mov	r4, r0
    4980:	1e8d      	subs	r5, r1, #2
    4982:	b34b      	cbz	r3, 49d8 <get_eit_entry+0x60>
    4984:	a901      	add	r1, sp, #4
    4986:	4628      	mov	r0, r5
    4988:	f3af 8000 	nop.w
    498c:	b1f0      	cbz	r0, 49cc <get_eit_entry+0x54>
    498e:	9901      	ldr	r1, [sp, #4]
    4990:	462a      	mov	r2, r5
    4992:	f7ff ffad 	bl	48f0 <search_EIT_table>
    4996:	4601      	mov	r1, r0
    4998:	b1c0      	cbz	r0, 49cc <get_eit_entry+0x54>
    499a:	f7ff ff9f 	bl	48dc <selfrel_offset31>
    499e:	684b      	ldr	r3, [r1, #4]
    49a0:	64a0      	str	r0, [r4, #72]	; 0x48
    49a2:	2b01      	cmp	r3, #1
    49a4:	d02e      	beq.n	4a04 <get_eit_entry+0x8c>
    49a6:	2b00      	cmp	r3, #0
    49a8:	f101 0004 	add.w	r0, r1, #4
    49ac:	db26      	blt.n	49fc <get_eit_entry+0x84>
    49ae:	f7ff ff95 	bl	48dc <selfrel_offset31>
    49b2:	2300      	movs	r3, #0
    49b4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    49b8:	6803      	ldr	r3, [r0, #0]
    49ba:	2b00      	cmp	r3, #0
    49bc:	db12      	blt.n	49e4 <get_eit_entry+0x6c>
    49be:	f7ff ff8d 	bl	48dc <selfrel_offset31>
    49c2:	2300      	movs	r3, #0
    49c4:	6120      	str	r0, [r4, #16]
    49c6:	4618      	mov	r0, r3
    49c8:	b003      	add	sp, #12
    49ca:	bd30      	pop	{r4, r5, pc}
    49cc:	2300      	movs	r3, #0
    49ce:	6123      	str	r3, [r4, #16]
    49d0:	2309      	movs	r3, #9
    49d2:	4618      	mov	r0, r3
    49d4:	b003      	add	sp, #12
    49d6:	bd30      	pop	{r4, r5, pc}
    49d8:	490e      	ldr	r1, [pc, #56]	; (4a14 <get_eit_entry+0x9c>)
    49da:	480f      	ldr	r0, [pc, #60]	; (4a18 <get_eit_entry+0xa0>)
    49dc:	1a09      	subs	r1, r1, r0
    49de:	10c9      	asrs	r1, r1, #3
    49e0:	9101      	str	r1, [sp, #4]
    49e2:	e7d5      	b.n	4990 <get_eit_entry+0x18>
    49e4:	f3c3 6003 	ubfx	r0, r3, #24, #4
    49e8:	f7ff ffb2 	bl	4950 <__gnu_unwind_get_pr_addr>
    49ec:	2800      	cmp	r0, #0
    49ee:	bf14      	ite	ne
    49f0:	2300      	movne	r3, #0
    49f2:	2309      	moveq	r3, #9
    49f4:	6120      	str	r0, [r4, #16]
    49f6:	4618      	mov	r0, r3
    49f8:	b003      	add	sp, #12
    49fa:	bd30      	pop	{r4, r5, pc}
    49fc:	2301      	movs	r3, #1
    49fe:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    4a02:	e7d9      	b.n	49b8 <get_eit_entry+0x40>
    4a04:	2300      	movs	r3, #0
    4a06:	6123      	str	r3, [r4, #16]
    4a08:	2305      	movs	r3, #5
    4a0a:	4618      	mov	r0, r3
    4a0c:	b003      	add	sp, #12
    4a0e:	bd30      	pop	{r4, r5, pc}
    4a10:	00000000 	.word	0x00000000
    4a14:	00006b90 	.word	0x00006b90
    4a18:	00006ad8 	.word	0x00006ad8

00004a1c <restore_non_core_regs>:
    4a1c:	6803      	ldr	r3, [r0, #0]
    4a1e:	07da      	lsls	r2, r3, #31
    4a20:	b510      	push	{r4, lr}
    4a22:	4604      	mov	r4, r0
    4a24:	d406      	bmi.n	4a34 <restore_non_core_regs+0x18>
    4a26:	079b      	lsls	r3, r3, #30
    4a28:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4a2c:	d509      	bpl.n	4a42 <restore_non_core_regs+0x26>
    4a2e:	f000 fc5f 	bl	52f0 <__gnu_Unwind_Restore_VFP_D>
    4a32:	6823      	ldr	r3, [r4, #0]
    4a34:	0759      	lsls	r1, r3, #29
    4a36:	d509      	bpl.n	4a4c <restore_non_core_regs+0x30>
    4a38:	071a      	lsls	r2, r3, #28
    4a3a:	d50e      	bpl.n	4a5a <restore_non_core_regs+0x3e>
    4a3c:	06db      	lsls	r3, r3, #27
    4a3e:	d513      	bpl.n	4a68 <restore_non_core_regs+0x4c>
    4a40:	bd10      	pop	{r4, pc}
    4a42:	f000 fc4d 	bl	52e0 <__gnu_Unwind_Restore_VFP>
    4a46:	6823      	ldr	r3, [r4, #0]
    4a48:	0759      	lsls	r1, r3, #29
    4a4a:	d4f5      	bmi.n	4a38 <restore_non_core_regs+0x1c>
    4a4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    4a50:	f000 fc56 	bl	5300 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    4a54:	6823      	ldr	r3, [r4, #0]
    4a56:	071a      	lsls	r2, r3, #28
    4a58:	d4f0      	bmi.n	4a3c <restore_non_core_regs+0x20>
    4a5a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    4a5e:	f000 fc57 	bl	5310 <__gnu_Unwind_Restore_WMMXD>
    4a62:	6823      	ldr	r3, [r4, #0]
    4a64:	06db      	lsls	r3, r3, #27
    4a66:	d4eb      	bmi.n	4a40 <restore_non_core_regs+0x24>
    4a68:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    4a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a70:	f000 bc92 	b.w	5398 <__gnu_Unwind_Restore_WMMXC>

00004a74 <_Unwind_decode_typeinfo_ptr.isra.0>:
    4a74:	6803      	ldr	r3, [r0, #0]
    4a76:	b103      	cbz	r3, 4a7a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    4a78:	4403      	add	r3, r0
    4a7a:	4618      	mov	r0, r3
    4a7c:	4770      	bx	lr
    4a7e:	bf00      	nop

00004a80 <__gnu_unwind_24bit.isra.1>:
    4a80:	2009      	movs	r0, #9
    4a82:	4770      	bx	lr

00004a84 <_Unwind_DebugHook>:
    4a84:	4770      	bx	lr
    4a86:	bf00      	nop

00004a88 <unwind_phase2>:
    4a88:	b570      	push	{r4, r5, r6, lr}
    4a8a:	4604      	mov	r4, r0
    4a8c:	460d      	mov	r5, r1
    4a8e:	e008      	b.n	4aa2 <unwind_phase2+0x1a>
    4a90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    4a92:	6163      	str	r3, [r4, #20]
    4a94:	462a      	mov	r2, r5
    4a96:	6923      	ldr	r3, [r4, #16]
    4a98:	4621      	mov	r1, r4
    4a9a:	2001      	movs	r0, #1
    4a9c:	4798      	blx	r3
    4a9e:	2808      	cmp	r0, #8
    4aa0:	d108      	bne.n	4ab4 <unwind_phase2+0x2c>
    4aa2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    4aa4:	4620      	mov	r0, r4
    4aa6:	f7ff ff67 	bl	4978 <get_eit_entry>
    4aaa:	4606      	mov	r6, r0
    4aac:	2800      	cmp	r0, #0
    4aae:	d0ef      	beq.n	4a90 <unwind_phase2+0x8>
    4ab0:	f000 fe9c 	bl	57ec <abort>
    4ab4:	2807      	cmp	r0, #7
    4ab6:	d1fb      	bne.n	4ab0 <unwind_phase2+0x28>
    4ab8:	4630      	mov	r0, r6
    4aba:	6c29      	ldr	r1, [r5, #64]	; 0x40
    4abc:	f7ff ffe2 	bl	4a84 <_Unwind_DebugHook>
    4ac0:	1d28      	adds	r0, r5, #4
    4ac2:	f000 fc01 	bl	52c8 <__restore_core_regs>
    4ac6:	bf00      	nop

00004ac8 <unwind_phase2_forced>:
    4ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4acc:	1d0c      	adds	r4, r1, #4
    4ace:	4605      	mov	r5, r0
    4ad0:	4617      	mov	r7, r2
    4ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4ad4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    4ad8:	ae03      	add	r6, sp, #12
    4ada:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4ade:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4ae2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4ae4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    4ae8:	ac02      	add	r4, sp, #8
    4aea:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4aee:	f8d5 9018 	ldr.w	r9, [r5, #24]
    4af2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    4af6:	2300      	movs	r3, #0
    4af8:	6023      	str	r3, [r4, #0]
    4afa:	e021      	b.n	4b40 <unwind_phase2_forced+0x78>
    4afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4afe:	616b      	str	r3, [r5, #20]
    4b00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    4b04:	4621      	mov	r1, r4
    4b06:	a87a      	add	r0, sp, #488	; 0x1e8
    4b08:	f000 fe9c 	bl	5844 <memcpy>
    4b0c:	692b      	ldr	r3, [r5, #16]
    4b0e:	aa7a      	add	r2, sp, #488	; 0x1e8
    4b10:	4629      	mov	r1, r5
    4b12:	4630      	mov	r0, r6
    4b14:	4798      	blx	r3
    4b16:	9b88      	ldr	r3, [sp, #544]	; 0x220
    4b18:	e9cd 4900 	strd	r4, r9, [sp]
    4b1c:	4682      	mov	sl, r0
    4b1e:	6463      	str	r3, [r4, #68]	; 0x44
    4b20:	4631      	mov	r1, r6
    4b22:	462b      	mov	r3, r5
    4b24:	462a      	mov	r2, r5
    4b26:	2001      	movs	r0, #1
    4b28:	47c0      	blx	r8
    4b2a:	4607      	mov	r7, r0
    4b2c:	b9f8      	cbnz	r0, 4b6e <unwind_phase2_forced+0xa6>
    4b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    4b32:	a97a      	add	r1, sp, #488	; 0x1e8
    4b34:	4620      	mov	r0, r4
    4b36:	f000 fe85 	bl	5844 <memcpy>
    4b3a:	f1ba 0f08 	cmp.w	sl, #8
    4b3e:	d11c      	bne.n	4b7a <unwind_phase2_forced+0xb2>
    4b40:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4b42:	4628      	mov	r0, r5
    4b44:	f7ff ff18 	bl	4978 <get_eit_entry>
    4b48:	2f00      	cmp	r7, #0
    4b4a:	bf08      	it	eq
    4b4c:	2609      	moveq	r6, #9
    4b4e:	4607      	mov	r7, r0
    4b50:	bf18      	it	ne
    4b52:	260a      	movne	r6, #10
    4b54:	2800      	cmp	r0, #0
    4b56:	d0d1      	beq.n	4afc <unwind_phase2_forced+0x34>
    4b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4b5a:	f046 0110 	orr.w	r1, r6, #16
    4b5e:	e9cd 4900 	strd	r4, r9, [sp]
    4b62:	462a      	mov	r2, r5
    4b64:	6463      	str	r3, [r4, #68]	; 0x44
    4b66:	2001      	movs	r0, #1
    4b68:	462b      	mov	r3, r5
    4b6a:	47c0      	blx	r8
    4b6c:	b100      	cbz	r0, 4b70 <unwind_phase2_forced+0xa8>
    4b6e:	2709      	movs	r7, #9
    4b70:	4638      	mov	r0, r7
    4b72:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    4b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b7a:	f1ba 0f07 	cmp.w	sl, #7
    4b7e:	d1f6      	bne.n	4b6e <unwind_phase2_forced+0xa6>
    4b80:	4638      	mov	r0, r7
    4b82:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4b84:	f7ff ff7e 	bl	4a84 <_Unwind_DebugHook>
    4b88:	a803      	add	r0, sp, #12
    4b8a:	f000 fb9d 	bl	52c8 <__restore_core_regs>
    4b8e:	bf00      	nop

00004b90 <_Unwind_GetCFA>:
    4b90:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4b92:	4770      	bx	lr

00004b94 <__gnu_Unwind_RaiseException>:
    4b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b96:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    4b98:	640b      	str	r3, [r1, #64]	; 0x40
    4b9a:	1d0d      	adds	r5, r1, #4
    4b9c:	460f      	mov	r7, r1
    4b9e:	4606      	mov	r6, r0
    4ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4ba2:	b0f9      	sub	sp, #484	; 0x1e4
    4ba4:	ac01      	add	r4, sp, #4
    4ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4bb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4bb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    4bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4bbc:	9500      	str	r5, [sp, #0]
    4bbe:	e006      	b.n	4bce <__gnu_Unwind_RaiseException+0x3a>
    4bc0:	6933      	ldr	r3, [r6, #16]
    4bc2:	466a      	mov	r2, sp
    4bc4:	4631      	mov	r1, r6
    4bc6:	4798      	blx	r3
    4bc8:	2808      	cmp	r0, #8
    4bca:	4604      	mov	r4, r0
    4bcc:	d108      	bne.n	4be0 <__gnu_Unwind_RaiseException+0x4c>
    4bce:	9910      	ldr	r1, [sp, #64]	; 0x40
    4bd0:	4630      	mov	r0, r6
    4bd2:	f7ff fed1 	bl	4978 <get_eit_entry>
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d0f2      	beq.n	4bc0 <__gnu_Unwind_RaiseException+0x2c>
    4bda:	2009      	movs	r0, #9
    4bdc:	b079      	add	sp, #484	; 0x1e4
    4bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4be0:	4668      	mov	r0, sp
    4be2:	f7ff ff1b 	bl	4a1c <restore_non_core_regs>
    4be6:	2c06      	cmp	r4, #6
    4be8:	d1f7      	bne.n	4bda <__gnu_Unwind_RaiseException+0x46>
    4bea:	4639      	mov	r1, r7
    4bec:	4630      	mov	r0, r6
    4bee:	f7ff ff4b 	bl	4a88 <unwind_phase2>
    4bf2:	bf00      	nop

00004bf4 <__gnu_Unwind_ForcedUnwind>:
    4bf4:	b430      	push	{r4, r5}
    4bf6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    4bf8:	60c1      	str	r1, [r0, #12]
    4bfa:	6182      	str	r2, [r0, #24]
    4bfc:	4619      	mov	r1, r3
    4bfe:	641d      	str	r5, [r3, #64]	; 0x40
    4c00:	2200      	movs	r2, #0
    4c02:	bc30      	pop	{r4, r5}
    4c04:	e760      	b.n	4ac8 <unwind_phase2_forced>
    4c06:	bf00      	nop

00004c08 <__gnu_Unwind_Resume>:
    4c08:	b570      	push	{r4, r5, r6, lr}
    4c0a:	68c6      	ldr	r6, [r0, #12]
    4c0c:	6943      	ldr	r3, [r0, #20]
    4c0e:	640b      	str	r3, [r1, #64]	; 0x40
    4c10:	b9be      	cbnz	r6, 4c42 <__gnu_Unwind_Resume+0x3a>
    4c12:	6903      	ldr	r3, [r0, #16]
    4c14:	460a      	mov	r2, r1
    4c16:	4604      	mov	r4, r0
    4c18:	460d      	mov	r5, r1
    4c1a:	4601      	mov	r1, r0
    4c1c:	2002      	movs	r0, #2
    4c1e:	4798      	blx	r3
    4c20:	2807      	cmp	r0, #7
    4c22:	d007      	beq.n	4c34 <__gnu_Unwind_Resume+0x2c>
    4c24:	2808      	cmp	r0, #8
    4c26:	d103      	bne.n	4c30 <__gnu_Unwind_Resume+0x28>
    4c28:	4629      	mov	r1, r5
    4c2a:	4620      	mov	r0, r4
    4c2c:	f7ff ff2c 	bl	4a88 <unwind_phase2>
    4c30:	f000 fddc 	bl	57ec <abort>
    4c34:	4630      	mov	r0, r6
    4c36:	6c29      	ldr	r1, [r5, #64]	; 0x40
    4c38:	f7ff ff24 	bl	4a84 <_Unwind_DebugHook>
    4c3c:	1d28      	adds	r0, r5, #4
    4c3e:	f000 fb43 	bl	52c8 <__restore_core_regs>
    4c42:	2201      	movs	r2, #1
    4c44:	f7ff ff40 	bl	4ac8 <unwind_phase2_forced>
    4c48:	f000 fdd0 	bl	57ec <abort>

00004c4c <__gnu_Unwind_Resume_or_Rethrow>:
    4c4c:	68c2      	ldr	r2, [r0, #12]
    4c4e:	b11a      	cbz	r2, 4c58 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    4c50:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    4c52:	640a      	str	r2, [r1, #64]	; 0x40
    4c54:	2200      	movs	r2, #0
    4c56:	e737      	b.n	4ac8 <unwind_phase2_forced>
    4c58:	e79c      	b.n	4b94 <__gnu_Unwind_RaiseException>
    4c5a:	bf00      	nop

00004c5c <_Unwind_Complete>:
    4c5c:	4770      	bx	lr
    4c5e:	bf00      	nop

00004c60 <_Unwind_DeleteException>:
    4c60:	6883      	ldr	r3, [r0, #8]
    4c62:	b113      	cbz	r3, 4c6a <_Unwind_DeleteException+0xa>
    4c64:	4601      	mov	r1, r0
    4c66:	2001      	movs	r0, #1
    4c68:	4718      	bx	r3
    4c6a:	4770      	bx	lr

00004c6c <_Unwind_VRS_Get>:
    4c6c:	2904      	cmp	r1, #4
    4c6e:	d807      	bhi.n	4c80 <_Unwind_VRS_Get+0x14>
    4c70:	e8df f001 	tbb	[pc, r1]
    4c74:	08060803 	.word	0x08060803
    4c78:	08          	.byte	0x08
    4c79:	00          	.byte	0x00
    4c7a:	b90b      	cbnz	r3, 4c80 <_Unwind_VRS_Get+0x14>
    4c7c:	2a0f      	cmp	r2, #15
    4c7e:	d903      	bls.n	4c88 <_Unwind_VRS_Get+0x1c>
    4c80:	2002      	movs	r0, #2
    4c82:	4770      	bx	lr
    4c84:	2001      	movs	r0, #1
    4c86:	4770      	bx	lr
    4c88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4c8c:	4618      	mov	r0, r3
    4c8e:	6853      	ldr	r3, [r2, #4]
    4c90:	9a00      	ldr	r2, [sp, #0]
    4c92:	6013      	str	r3, [r2, #0]
    4c94:	4770      	bx	lr
    4c96:	bf00      	nop

00004c98 <_Unwind_GetGR>:
    4c98:	b510      	push	{r4, lr}
    4c9a:	b084      	sub	sp, #16
    4c9c:	2300      	movs	r3, #0
    4c9e:	ac03      	add	r4, sp, #12
    4ca0:	460a      	mov	r2, r1
    4ca2:	9400      	str	r4, [sp, #0]
    4ca4:	4619      	mov	r1, r3
    4ca6:	f7ff ffe1 	bl	4c6c <_Unwind_VRS_Get>
    4caa:	9803      	ldr	r0, [sp, #12]
    4cac:	b004      	add	sp, #16
    4cae:	bd10      	pop	{r4, pc}

00004cb0 <_Unwind_VRS_Set>:
    4cb0:	2904      	cmp	r1, #4
    4cb2:	d807      	bhi.n	4cc4 <_Unwind_VRS_Set+0x14>
    4cb4:	e8df f001 	tbb	[pc, r1]
    4cb8:	08060803 	.word	0x08060803
    4cbc:	08          	.byte	0x08
    4cbd:	00          	.byte	0x00
    4cbe:	b90b      	cbnz	r3, 4cc4 <_Unwind_VRS_Set+0x14>
    4cc0:	2a0f      	cmp	r2, #15
    4cc2:	d903      	bls.n	4ccc <_Unwind_VRS_Set+0x1c>
    4cc4:	2002      	movs	r0, #2
    4cc6:	4770      	bx	lr
    4cc8:	2001      	movs	r0, #1
    4cca:	4770      	bx	lr
    4ccc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    4cd0:	9a00      	ldr	r2, [sp, #0]
    4cd2:	6812      	ldr	r2, [r2, #0]
    4cd4:	6042      	str	r2, [r0, #4]
    4cd6:	4618      	mov	r0, r3
    4cd8:	4770      	bx	lr
    4cda:	bf00      	nop

00004cdc <_Unwind_SetGR>:
    4cdc:	b510      	push	{r4, lr}
    4cde:	b084      	sub	sp, #16
    4ce0:	ac04      	add	r4, sp, #16
    4ce2:	2300      	movs	r3, #0
    4ce4:	f844 2d04 	str.w	r2, [r4, #-4]!
    4ce8:	460a      	mov	r2, r1
    4cea:	9400      	str	r4, [sp, #0]
    4cec:	4619      	mov	r1, r3
    4cee:	f7ff ffdf 	bl	4cb0 <_Unwind_VRS_Set>
    4cf2:	b004      	add	sp, #16
    4cf4:	bd10      	pop	{r4, pc}
    4cf6:	bf00      	nop

00004cf8 <__gnu_Unwind_Backtrace>:
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    4cfc:	6413      	str	r3, [r2, #64]	; 0x40
    4cfe:	1d15      	adds	r5, r2, #4
    4d00:	4607      	mov	r7, r0
    4d02:	460e      	mov	r6, r1
    4d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4d06:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    4d0a:	ac17      	add	r4, sp, #92	; 0x5c
    4d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4d16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4d1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    4d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4d22:	9516      	str	r5, [sp, #88]	; 0x58
    4d24:	e010      	b.n	4d48 <__gnu_Unwind_Backtrace+0x50>
    4d26:	a816      	add	r0, sp, #88	; 0x58
    4d28:	f7ff ffd8 	bl	4cdc <_Unwind_SetGR>
    4d2c:	4631      	mov	r1, r6
    4d2e:	a816      	add	r0, sp, #88	; 0x58
    4d30:	47b8      	blx	r7
    4d32:	aa16      	add	r2, sp, #88	; 0x58
    4d34:	4669      	mov	r1, sp
    4d36:	b978      	cbnz	r0, 4d58 <__gnu_Unwind_Backtrace+0x60>
    4d38:	9b04      	ldr	r3, [sp, #16]
    4d3a:	2008      	movs	r0, #8
    4d3c:	4798      	blx	r3
    4d3e:	2805      	cmp	r0, #5
    4d40:	4604      	mov	r4, r0
    4d42:	d00a      	beq.n	4d5a <__gnu_Unwind_Backtrace+0x62>
    4d44:	2809      	cmp	r0, #9
    4d46:	d007      	beq.n	4d58 <__gnu_Unwind_Backtrace+0x60>
    4d48:	9926      	ldr	r1, [sp, #152]	; 0x98
    4d4a:	4668      	mov	r0, sp
    4d4c:	f7ff fe14 	bl	4978 <get_eit_entry>
    4d50:	466a      	mov	r2, sp
    4d52:	210c      	movs	r1, #12
    4d54:	2800      	cmp	r0, #0
    4d56:	d0e6      	beq.n	4d26 <__gnu_Unwind_Backtrace+0x2e>
    4d58:	2409      	movs	r4, #9
    4d5a:	a816      	add	r0, sp, #88	; 0x58
    4d5c:	f7ff fe5e 	bl	4a1c <restore_non_core_regs>
    4d60:	4620      	mov	r0, r4
    4d62:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d68 <__gnu_unwind_pr_common>:
    4d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d6c:	460d      	mov	r5, r1
    4d6e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    4d70:	b089      	sub	sp, #36	; 0x24
    4d72:	1d0c      	adds	r4, r1, #4
    4d74:	4616      	mov	r6, r2
    4d76:	f000 0b03 	and.w	fp, r0, #3
    4d7a:	680a      	ldr	r2, [r1, #0]
    4d7c:	9406      	str	r4, [sp, #24]
    4d7e:	461f      	mov	r7, r3
    4d80:	2b00      	cmp	r3, #0
    4d82:	d068      	beq.n	4e56 <__gnu_unwind_pr_common+0xee>
    4d84:	0c13      	lsrs	r3, r2, #16
    4d86:	b2d9      	uxtb	r1, r3
    4d88:	0412      	lsls	r2, r2, #16
    4d8a:	f88d 301d 	strb.w	r3, [sp, #29]
    4d8e:	2302      	movs	r3, #2
    4d90:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    4d94:	9205      	str	r2, [sp, #20]
    4d96:	f88d 301c 	strb.w	r3, [sp, #28]
    4d9a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    4d9c:	f1bb 0f02 	cmp.w	fp, #2
    4da0:	bf08      	it	eq
    4da2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    4da4:	f013 0301 	ands.w	r3, r3, #1
    4da8:	d146      	bne.n	4e38 <__gnu_unwind_pr_common+0xd0>
    4daa:	9301      	str	r3, [sp, #4]
    4dac:	f000 0308 	and.w	r3, r0, #8
    4db0:	9300      	str	r3, [sp, #0]
    4db2:	f8d4 9000 	ldr.w	r9, [r4]
    4db6:	f1b9 0f00 	cmp.w	r9, #0
    4dba:	f000 80f3 	beq.w	4fa4 <__gnu_unwind_pr_common+0x23c>
    4dbe:	2f02      	cmp	r7, #2
    4dc0:	d045      	beq.n	4e4e <__gnu_unwind_pr_common+0xe6>
    4dc2:	f8b4 9000 	ldrh.w	r9, [r4]
    4dc6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    4dca:	3404      	adds	r4, #4
    4dcc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4dce:	f028 0a01 	bic.w	sl, r8, #1
    4dd2:	210f      	movs	r1, #15
    4dd4:	4630      	mov	r0, r6
    4dd6:	449a      	add	sl, r3
    4dd8:	f7ff ff5e 	bl	4c98 <_Unwind_GetGR>
    4ddc:	4582      	cmp	sl, r0
    4dde:	d834      	bhi.n	4e4a <__gnu_unwind_pr_common+0xe2>
    4de0:	f029 0301 	bic.w	r3, r9, #1
    4de4:	4453      	add	r3, sl
    4de6:	4283      	cmp	r3, r0
    4de8:	bf94      	ite	ls
    4dea:	2000      	movls	r0, #0
    4dec:	2001      	movhi	r0, #1
    4dee:	ea4f 0848 	mov.w	r8, r8, lsl #1
    4df2:	f008 0802 	and.w	r8, r8, #2
    4df6:	f009 0901 	and.w	r9, r9, #1
    4dfa:	ea48 0809 	orr.w	r8, r8, r9
    4dfe:	f1b8 0f01 	cmp.w	r8, #1
    4e02:	d03a      	beq.n	4e7a <__gnu_unwind_pr_common+0x112>
    4e04:	d331      	bcc.n	4e6a <__gnu_unwind_pr_common+0x102>
    4e06:	f1b8 0f02 	cmp.w	r8, #2
    4e0a:	d11a      	bne.n	4e42 <__gnu_unwind_pr_common+0xda>
    4e0c:	6823      	ldr	r3, [r4, #0]
    4e0e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    4e12:	f1bb 0f00 	cmp.w	fp, #0
    4e16:	d166      	bne.n	4ee6 <__gnu_unwind_pr_common+0x17e>
    4e18:	b130      	cbz	r0, 4e28 <__gnu_unwind_pr_common+0xc0>
    4e1a:	9a00      	ldr	r2, [sp, #0]
    4e1c:	2a00      	cmp	r2, #0
    4e1e:	d06c      	beq.n	4efa <__gnu_unwind_pr_common+0x192>
    4e20:	f1ba 0f00 	cmp.w	sl, #0
    4e24:	f000 8090 	beq.w	4f48 <__gnu_unwind_pr_common+0x1e0>
    4e28:	2b00      	cmp	r3, #0
    4e2a:	da00      	bge.n	4e2e <__gnu_unwind_pr_common+0xc6>
    4e2c:	3404      	adds	r4, #4
    4e2e:	f10a 0301 	add.w	r3, sl, #1
    4e32:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4e36:	e7bc      	b.n	4db2 <__gnu_unwind_pr_common+0x4a>
    4e38:	4630      	mov	r0, r6
    4e3a:	a905      	add	r1, sp, #20
    4e3c:	f000 fb46 	bl	54cc <__gnu_unwind_execute>
    4e40:	b178      	cbz	r0, 4e62 <__gnu_unwind_pr_common+0xfa>
    4e42:	2009      	movs	r0, #9
    4e44:	b009      	add	sp, #36	; 0x24
    4e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e4a:	2000      	movs	r0, #0
    4e4c:	e7cf      	b.n	4dee <__gnu_unwind_pr_common+0x86>
    4e4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    4e52:	3408      	adds	r4, #8
    4e54:	e7ba      	b.n	4dcc <__gnu_unwind_pr_common+0x64>
    4e56:	0212      	lsls	r2, r2, #8
    4e58:	2303      	movs	r3, #3
    4e5a:	9205      	str	r2, [sp, #20]
    4e5c:	f8ad 301c 	strh.w	r3, [sp, #28]
    4e60:	e79b      	b.n	4d9a <__gnu_unwind_pr_common+0x32>
    4e62:	2008      	movs	r0, #8
    4e64:	b009      	add	sp, #36	; 0x24
    4e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e6a:	f1bb 0f00 	cmp.w	fp, #0
    4e6e:	d002      	beq.n	4e76 <__gnu_unwind_pr_common+0x10e>
    4e70:	2800      	cmp	r0, #0
    4e72:	f040 80b4 	bne.w	4fde <__gnu_unwind_pr_common+0x276>
    4e76:	3404      	adds	r4, #4
    4e78:	e79b      	b.n	4db2 <__gnu_unwind_pr_common+0x4a>
    4e7a:	f1bb 0f00 	cmp.w	fp, #0
    4e7e:	d118      	bne.n	4eb2 <__gnu_unwind_pr_common+0x14a>
    4e80:	b1a8      	cbz	r0, 4eae <__gnu_unwind_pr_common+0x146>
    4e82:	e9d4 2300 	ldrd	r2, r3, [r4]
    4e86:	1c99      	adds	r1, r3, #2
    4e88:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    4e8c:	d0d9      	beq.n	4e42 <__gnu_unwind_pr_common+0xda>
    4e8e:	f105 0158 	add.w	r1, r5, #88	; 0x58
    4e92:	3301      	adds	r3, #1
    4e94:	9104      	str	r1, [sp, #16]
    4e96:	f000 80b5 	beq.w	5004 <__gnu_unwind_pr_common+0x29c>
    4e9a:	1d20      	adds	r0, r4, #4
    4e9c:	f7ff fdea 	bl	4a74 <_Unwind_decode_typeinfo_ptr.isra.0>
    4ea0:	ab04      	add	r3, sp, #16
    4ea2:	4601      	mov	r1, r0
    4ea4:	4628      	mov	r0, r5
    4ea6:	f3af 8000 	nop.w
    4eaa:	2800      	cmp	r0, #0
    4eac:	d167      	bne.n	4f7e <__gnu_unwind_pr_common+0x216>
    4eae:	3408      	adds	r4, #8
    4eb0:	e77f      	b.n	4db2 <__gnu_unwind_pr_common+0x4a>
    4eb2:	210d      	movs	r1, #13
    4eb4:	4630      	mov	r0, r6
    4eb6:	f8d5 8020 	ldr.w	r8, [r5, #32]
    4eba:	f7ff feed 	bl	4c98 <_Unwind_GetGR>
    4ebe:	4580      	cmp	r8, r0
    4ec0:	d1f5      	bne.n	4eae <__gnu_unwind_pr_common+0x146>
    4ec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ec4:	429c      	cmp	r4, r3
    4ec6:	d1f2      	bne.n	4eae <__gnu_unwind_pr_common+0x146>
    4ec8:	4620      	mov	r0, r4
    4eca:	f7ff fd07 	bl	48dc <selfrel_offset31>
    4ece:	210f      	movs	r1, #15
    4ed0:	4602      	mov	r2, r0
    4ed2:	4630      	mov	r0, r6
    4ed4:	f7ff ff02 	bl	4cdc <_Unwind_SetGR>
    4ed8:	4630      	mov	r0, r6
    4eda:	462a      	mov	r2, r5
    4edc:	2100      	movs	r1, #0
    4ede:	f7ff fefd 	bl	4cdc <_Unwind_SetGR>
    4ee2:	2007      	movs	r0, #7
    4ee4:	e7ae      	b.n	4e44 <__gnu_unwind_pr_common+0xdc>
    4ee6:	210d      	movs	r1, #13
    4ee8:	4630      	mov	r0, r6
    4eea:	f8d5 8020 	ldr.w	r8, [r5, #32]
    4eee:	f7ff fed3 	bl	4c98 <_Unwind_GetGR>
    4ef2:	4580      	cmp	r8, r0
    4ef4:	d032      	beq.n	4f5c <__gnu_unwind_pr_common+0x1f4>
    4ef6:	6823      	ldr	r3, [r4, #0]
    4ef8:	e796      	b.n	4e28 <__gnu_unwind_pr_common+0xc0>
    4efa:	f1ba 0f00 	cmp.w	sl, #0
    4efe:	d023      	beq.n	4f48 <__gnu_unwind_pr_common+0x1e0>
    4f00:	f105 0358 	add.w	r3, r5, #88	; 0x58
    4f04:	f104 0804 	add.w	r8, r4, #4
    4f08:	f8cd b008 	str.w	fp, [sp, #8]
    4f0c:	f8dd 9000 	ldr.w	r9, [sp]
    4f10:	9703      	str	r7, [sp, #12]
    4f12:	46a3      	mov	fp, r4
    4f14:	461c      	mov	r4, r3
    4f16:	e002      	b.n	4f1e <__gnu_unwind_pr_common+0x1b6>
    4f18:	4557      	cmp	r7, sl
    4f1a:	46b9      	mov	r9, r7
    4f1c:	d040      	beq.n	4fa0 <__gnu_unwind_pr_common+0x238>
    4f1e:	4640      	mov	r0, r8
    4f20:	9404      	str	r4, [sp, #16]
    4f22:	f7ff fda7 	bl	4a74 <_Unwind_decode_typeinfo_ptr.isra.0>
    4f26:	ab04      	add	r3, sp, #16
    4f28:	4601      	mov	r1, r0
    4f2a:	2200      	movs	r2, #0
    4f2c:	4628      	mov	r0, r5
    4f2e:	f3af 8000 	nop.w
    4f32:	f109 0701 	add.w	r7, r9, #1
    4f36:	f108 0804 	add.w	r8, r8, #4
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d0ec      	beq.n	4f18 <__gnu_unwind_pr_common+0x1b0>
    4f3e:	45d1      	cmp	r9, sl
    4f40:	465c      	mov	r4, fp
    4f42:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    4f46:	d1d6      	bne.n	4ef6 <__gnu_unwind_pr_common+0x18e>
    4f48:	4630      	mov	r0, r6
    4f4a:	210d      	movs	r1, #13
    4f4c:	f7ff fea4 	bl	4c98 <_Unwind_GetGR>
    4f50:	9b04      	ldr	r3, [sp, #16]
    4f52:	6228      	str	r0, [r5, #32]
    4f54:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    4f58:	2006      	movs	r0, #6
    4f5a:	e773      	b.n	4e44 <__gnu_unwind_pr_common+0xdc>
    4f5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4f5e:	429c      	cmp	r4, r3
    4f60:	d1c9      	bne.n	4ef6 <__gnu_unwind_pr_common+0x18e>
    4f62:	2204      	movs	r2, #4
    4f64:	f04f 0800 	mov.w	r8, #0
    4f68:	18a3      	adds	r3, r4, r2
    4f6a:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    4f6e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    4f72:	6823      	ldr	r3, [r4, #0]
    4f74:	4543      	cmp	r3, r8
    4f76:	db4d      	blt.n	5014 <__gnu_unwind_pr_common+0x2ac>
    4f78:	2301      	movs	r3, #1
    4f7a:	9301      	str	r3, [sp, #4]
    4f7c:	e757      	b.n	4e2e <__gnu_unwind_pr_common+0xc6>
    4f7e:	4680      	mov	r8, r0
    4f80:	210d      	movs	r1, #13
    4f82:	4630      	mov	r0, r6
    4f84:	f7ff fe88 	bl	4c98 <_Unwind_GetGR>
    4f88:	f1b8 0f02 	cmp.w	r8, #2
    4f8c:	6228      	str	r0, [r5, #32]
    4f8e:	d13e      	bne.n	500e <__gnu_unwind_pr_common+0x2a6>
    4f90:	462b      	mov	r3, r5
    4f92:	9a04      	ldr	r2, [sp, #16]
    4f94:	f843 2f2c 	str.w	r2, [r3, #44]!
    4f98:	626b      	str	r3, [r5, #36]	; 0x24
    4f9a:	62ac      	str	r4, [r5, #40]	; 0x28
    4f9c:	2006      	movs	r0, #6
    4f9e:	e751      	b.n	4e44 <__gnu_unwind_pr_common+0xdc>
    4fa0:	465c      	mov	r4, fp
    4fa2:	e7d1      	b.n	4f48 <__gnu_unwind_pr_common+0x1e0>
    4fa4:	a905      	add	r1, sp, #20
    4fa6:	4630      	mov	r0, r6
    4fa8:	f000 fa90 	bl	54cc <__gnu_unwind_execute>
    4fac:	2800      	cmp	r0, #0
    4fae:	f47f af48 	bne.w	4e42 <__gnu_unwind_pr_common+0xda>
    4fb2:	9b01      	ldr	r3, [sp, #4]
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	f43f af54 	beq.w	4e62 <__gnu_unwind_pr_common+0xfa>
    4fba:	210f      	movs	r1, #15
    4fbc:	4630      	mov	r0, r6
    4fbe:	f7ff fe6b 	bl	4c98 <_Unwind_GetGR>
    4fc2:	210e      	movs	r1, #14
    4fc4:	4602      	mov	r2, r0
    4fc6:	4630      	mov	r0, r6
    4fc8:	f7ff fe88 	bl	4cdc <_Unwind_SetGR>
    4fcc:	4630      	mov	r0, r6
    4fce:	4a1a      	ldr	r2, [pc, #104]	; (5038 <__gnu_unwind_pr_common+0x2d0>)
    4fd0:	210f      	movs	r1, #15
    4fd2:	f7ff fe83 	bl	4cdc <_Unwind_SetGR>
    4fd6:	2007      	movs	r0, #7
    4fd8:	b009      	add	sp, #36	; 0x24
    4fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fde:	4620      	mov	r0, r4
    4fe0:	f7ff fc7c 	bl	48dc <selfrel_offset31>
    4fe4:	3404      	adds	r4, #4
    4fe6:	4607      	mov	r7, r0
    4fe8:	63ac      	str	r4, [r5, #56]	; 0x38
    4fea:	4628      	mov	r0, r5
    4fec:	f3af 8000 	nop.w
    4ff0:	2800      	cmp	r0, #0
    4ff2:	f43f af26 	beq.w	4e42 <__gnu_unwind_pr_common+0xda>
    4ff6:	4630      	mov	r0, r6
    4ff8:	463a      	mov	r2, r7
    4ffa:	210f      	movs	r1, #15
    4ffc:	f7ff fe6e 	bl	4cdc <_Unwind_SetGR>
    5000:	2007      	movs	r0, #7
    5002:	e71f      	b.n	4e44 <__gnu_unwind_pr_common+0xdc>
    5004:	4630      	mov	r0, r6
    5006:	210d      	movs	r1, #13
    5008:	f7ff fe46 	bl	4c98 <_Unwind_GetGR>
    500c:	6228      	str	r0, [r5, #32]
    500e:	9b04      	ldr	r3, [sp, #16]
    5010:	626b      	str	r3, [r5, #36]	; 0x24
    5012:	e7c2      	b.n	4f9a <__gnu_unwind_pr_common+0x232>
    5014:	f10a 0001 	add.w	r0, sl, #1
    5018:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    501c:	f7ff fc5e 	bl	48dc <selfrel_offset31>
    5020:	210f      	movs	r1, #15
    5022:	4602      	mov	r2, r0
    5024:	4630      	mov	r0, r6
    5026:	f7ff fe59 	bl	4cdc <_Unwind_SetGR>
    502a:	4630      	mov	r0, r6
    502c:	462a      	mov	r2, r5
    502e:	4641      	mov	r1, r8
    5030:	f7ff fe54 	bl	4cdc <_Unwind_SetGR>
    5034:	2007      	movs	r0, #7
    5036:	e705      	b.n	4e44 <__gnu_unwind_pr_common+0xdc>
    5038:	00000000 	.word	0x00000000

0000503c <__aeabi_unwind_cpp_pr0>:
    503c:	2300      	movs	r3, #0
    503e:	e693      	b.n	4d68 <__gnu_unwind_pr_common>

00005040 <__aeabi_unwind_cpp_pr1>:
    5040:	2301      	movs	r3, #1
    5042:	e691      	b.n	4d68 <__gnu_unwind_pr_common>

00005044 <__aeabi_unwind_cpp_pr2>:
    5044:	2302      	movs	r3, #2
    5046:	e68f      	b.n	4d68 <__gnu_unwind_pr_common>

00005048 <_Unwind_VRS_Pop>:
    5048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    504c:	4605      	mov	r5, r0
    504e:	b0c4      	sub	sp, #272	; 0x110
    5050:	2904      	cmp	r1, #4
    5052:	d806      	bhi.n	5062 <_Unwind_VRS_Pop+0x1a>
    5054:	e8df f001 	tbb	[pc, r1]
    5058:	03052b4d 	.word	0x03052b4d
    505c:	09          	.byte	0x09
    505d:	00          	.byte	0x00
    505e:	2b03      	cmp	r3, #3
    5060:	d05f      	beq.n	5122 <_Unwind_VRS_Pop+0xda>
    5062:	2002      	movs	r0, #2
    5064:	b044      	add	sp, #272	; 0x110
    5066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    506a:	2b00      	cmp	r3, #0
    506c:	d1f9      	bne.n	5062 <_Unwind_VRS_Pop+0x1a>
    506e:	2a10      	cmp	r2, #16
    5070:	d8f7      	bhi.n	5062 <_Unwind_VRS_Pop+0x1a>
    5072:	682b      	ldr	r3, [r5, #0]
    5074:	06dc      	lsls	r4, r3, #27
    5076:	f100 80f4 	bmi.w	5262 <_Unwind_VRS_Pop+0x21a>
    507a:	ac22      	add	r4, sp, #136	; 0x88
    507c:	4620      	mov	r0, r4
    507e:	9201      	str	r2, [sp, #4]
    5080:	f000 f994 	bl	53ac <__gnu_Unwind_Save_WMMXC>
    5084:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5086:	9a01      	ldr	r2, [sp, #4]
    5088:	2300      	movs	r3, #0
    508a:	2601      	movs	r6, #1
    508c:	fa06 f103 	lsl.w	r1, r6, r3
    5090:	4211      	tst	r1, r2
    5092:	d003      	beq.n	509c <_Unwind_VRS_Pop+0x54>
    5094:	6801      	ldr	r1, [r0, #0]
    5096:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    509a:	3004      	adds	r0, #4
    509c:	3301      	adds	r3, #1
    509e:	2b04      	cmp	r3, #4
    50a0:	d1f4      	bne.n	508c <_Unwind_VRS_Pop+0x44>
    50a2:	63a8      	str	r0, [r5, #56]	; 0x38
    50a4:	4620      	mov	r0, r4
    50a6:	f000 f977 	bl	5398 <__gnu_Unwind_Restore_WMMXC>
    50aa:	2000      	movs	r0, #0
    50ac:	e7da      	b.n	5064 <_Unwind_VRS_Pop+0x1c>
    50ae:	2b01      	cmp	r3, #1
    50b0:	ea4f 4612 	mov.w	r6, r2, lsr #16
    50b4:	b297      	uxth	r7, r2
    50b6:	d052      	beq.n	515e <_Unwind_VRS_Pop+0x116>
    50b8:	2b05      	cmp	r3, #5
    50ba:	d1d2      	bne.n	5062 <_Unwind_VRS_Pop+0x1a>
    50bc:	eb06 0807 	add.w	r8, r6, r7
    50c0:	f1b8 0f20 	cmp.w	r8, #32
    50c4:	d8cd      	bhi.n	5062 <_Unwind_VRS_Pop+0x1a>
    50c6:	2e0f      	cmp	r6, #15
    50c8:	f240 8099 	bls.w	51fe <_Unwind_VRS_Pop+0x1b6>
    50cc:	46b8      	mov	r8, r7
    50ce:	2f00      	cmp	r7, #0
    50d0:	f040 80db 	bne.w	528a <_Unwind_VRS_Pop+0x242>
    50d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
    50d6:	63aa      	str	r2, [r5, #56]	; 0x38
    50d8:	2e0f      	cmp	r6, #15
    50da:	f240 80be 	bls.w	525a <_Unwind_VRS_Pop+0x212>
    50de:	f1b8 0f00 	cmp.w	r8, #0
    50e2:	d002      	beq.n	50ea <_Unwind_VRS_Pop+0xa2>
    50e4:	a802      	add	r0, sp, #8
    50e6:	f000 f90b 	bl	5300 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    50ea:	2000      	movs	r0, #0
    50ec:	b044      	add	sp, #272	; 0x110
    50ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50f2:	2b00      	cmp	r3, #0
    50f4:	d1b5      	bne.n	5062 <_Unwind_VRS_Pop+0x1a>
    50f6:	6bac      	ldr	r4, [r5, #56]	; 0x38
    50f8:	b297      	uxth	r7, r2
    50fa:	1d28      	adds	r0, r5, #4
    50fc:	2601      	movs	r6, #1
    50fe:	fa06 f103 	lsl.w	r1, r6, r3
    5102:	4239      	tst	r1, r7
    5104:	f103 0301 	add.w	r3, r3, #1
    5108:	d002      	beq.n	5110 <_Unwind_VRS_Pop+0xc8>
    510a:	6821      	ldr	r1, [r4, #0]
    510c:	6001      	str	r1, [r0, #0]
    510e:	3404      	adds	r4, #4
    5110:	2b10      	cmp	r3, #16
    5112:	f100 0004 	add.w	r0, r0, #4
    5116:	d1f2      	bne.n	50fe <_Unwind_VRS_Pop+0xb6>
    5118:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    511c:	d1e5      	bne.n	50ea <_Unwind_VRS_Pop+0xa2>
    511e:	63ac      	str	r4, [r5, #56]	; 0x38
    5120:	e7a0      	b.n	5064 <_Unwind_VRS_Pop+0x1c>
    5122:	0c16      	lsrs	r6, r2, #16
    5124:	b297      	uxth	r7, r2
    5126:	19f3      	adds	r3, r6, r7
    5128:	2b10      	cmp	r3, #16
    512a:	d89a      	bhi.n	5062 <_Unwind_VRS_Pop+0x1a>
    512c:	682b      	ldr	r3, [r5, #0]
    512e:	071a      	lsls	r2, r3, #28
    5130:	d45d      	bmi.n	51ee <_Unwind_VRS_Pop+0x1a6>
    5132:	ac22      	add	r4, sp, #136	; 0x88
    5134:	4620      	mov	r0, r4
    5136:	f000 f90d 	bl	5354 <__gnu_Unwind_Save_WMMXD>
    513a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    513e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5140:	b13f      	cbz	r7, 5152 <_Unwind_VRS_Pop+0x10a>
    5142:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    5146:	6818      	ldr	r0, [r3, #0]
    5148:	f841 0b04 	str.w	r0, [r1], #4
    514c:	3304      	adds	r3, #4
    514e:	4293      	cmp	r3, r2
    5150:	d1f9      	bne.n	5146 <_Unwind_VRS_Pop+0xfe>
    5152:	4620      	mov	r0, r4
    5154:	63ab      	str	r3, [r5, #56]	; 0x38
    5156:	f000 f8db 	bl	5310 <__gnu_Unwind_Restore_WMMXD>
    515a:	2000      	movs	r0, #0
    515c:	e782      	b.n	5064 <_Unwind_VRS_Pop+0x1c>
    515e:	19f2      	adds	r2, r6, r7
    5160:	2a10      	cmp	r2, #16
    5162:	f63f af7e 	bhi.w	5062 <_Unwind_VRS_Pop+0x1a>
    5166:	2e0f      	cmp	r6, #15
    5168:	f63f af7b 	bhi.w	5062 <_Unwind_VRS_Pop+0x1a>
    516c:	682a      	ldr	r2, [r5, #0]
    516e:	07d1      	lsls	r1, r2, #31
    5170:	d508      	bpl.n	5184 <_Unwind_VRS_Pop+0x13c>
    5172:	4628      	mov	r0, r5
    5174:	f022 0203 	bic.w	r2, r2, #3
    5178:	f840 2b48 	str.w	r2, [r0], #72
    517c:	9301      	str	r3, [sp, #4]
    517e:	f000 f8b3 	bl	52e8 <__gnu_Unwind_Save_VFP>
    5182:	9b01      	ldr	r3, [sp, #4]
    5184:	9301      	str	r3, [sp, #4]
    5186:	ac22      	add	r4, sp, #136	; 0x88
    5188:	4620      	mov	r0, r4
    518a:	f000 f8ad 	bl	52e8 <__gnu_Unwind_Save_VFP>
    518e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5190:	9b01      	ldr	r3, [sp, #4]
    5192:	2f00      	cmp	r7, #0
    5194:	f000 8095 	beq.w	52c2 <_Unwind_VRS_Pop+0x27a>
    5198:	007f      	lsls	r7, r7, #1
    519a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    519e:	f04f 0800 	mov.w	r8, #0
    51a2:	3c04      	subs	r4, #4
    51a4:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    51a8:	f851 0b04 	ldr.w	r0, [r1], #4
    51ac:	f844 0f04 	str.w	r0, [r4, #4]!
    51b0:	4291      	cmp	r1, r2
    51b2:	d1f9      	bne.n	51a8 <_Unwind_VRS_Pop+0x160>
    51b4:	f1b8 0f00 	cmp.w	r8, #0
    51b8:	d00f      	beq.n	51da <_Unwind_VRS_Pop+0x192>
    51ba:	ac02      	add	r4, sp, #8
    51bc:	2e10      	cmp	r6, #16
    51be:	4631      	mov	r1, r6
    51c0:	bf38      	it	cc
    51c2:	2110      	movcc	r1, #16
    51c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    51c8:	3984      	subs	r1, #132	; 0x84
    51ca:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    51ce:	f852 0b04 	ldr.w	r0, [r2], #4
    51d2:	f841 0f04 	str.w	r0, [r1, #4]!
    51d6:	4294      	cmp	r4, r2
    51d8:	d1f9      	bne.n	51ce <_Unwind_VRS_Pop+0x186>
    51da:	2b01      	cmp	r3, #1
    51dc:	f47f af7b 	bne.w	50d6 <_Unwind_VRS_Pop+0x8e>
    51e0:	ac22      	add	r4, sp, #136	; 0x88
    51e2:	3204      	adds	r2, #4
    51e4:	63aa      	str	r2, [r5, #56]	; 0x38
    51e6:	4620      	mov	r0, r4
    51e8:	f000 f87a 	bl	52e0 <__gnu_Unwind_Restore_VFP>
    51ec:	e77d      	b.n	50ea <_Unwind_VRS_Pop+0xa2>
    51ee:	f023 0308 	bic.w	r3, r3, #8
    51f2:	602b      	str	r3, [r5, #0]
    51f4:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    51f8:	f000 f8ac 	bl	5354 <__gnu_Unwind_Save_WMMXD>
    51fc:	e799      	b.n	5132 <_Unwind_VRS_Pop+0xea>
    51fe:	f1b8 0f10 	cmp.w	r8, #16
    5202:	682a      	ldr	r2, [r5, #0]
    5204:	d943      	bls.n	528e <_Unwind_VRS_Pop+0x246>
    5206:	07d0      	lsls	r0, r2, #31
    5208:	f1a8 0810 	sub.w	r8, r8, #16
    520c:	d50b      	bpl.n	5226 <_Unwind_VRS_Pop+0x1de>
    520e:	4628      	mov	r0, r5
    5210:	f022 0201 	bic.w	r2, r2, #1
    5214:	f042 0202 	orr.w	r2, r2, #2
    5218:	f840 2b48 	str.w	r2, [r0], #72
    521c:	9301      	str	r3, [sp, #4]
    521e:	f000 f86b 	bl	52f8 <__gnu_Unwind_Save_VFP_D>
    5222:	682a      	ldr	r2, [r5, #0]
    5224:	9b01      	ldr	r3, [sp, #4]
    5226:	0751      	lsls	r1, r2, #29
    5228:	d425      	bmi.n	5276 <_Unwind_VRS_Pop+0x22e>
    522a:	2e0f      	cmp	r6, #15
    522c:	d804      	bhi.n	5238 <_Unwind_VRS_Pop+0x1f0>
    522e:	a822      	add	r0, sp, #136	; 0x88
    5230:	9301      	str	r3, [sp, #4]
    5232:	f000 f861 	bl	52f8 <__gnu_Unwind_Save_VFP_D>
    5236:	9b01      	ldr	r3, [sp, #4]
    5238:	9301      	str	r3, [sp, #4]
    523a:	ac02      	add	r4, sp, #8
    523c:	4620      	mov	r0, r4
    523e:	f000 f863 	bl	5308 <__gnu_Unwind_Save_VFP_D_16_to_31>
    5242:	f1c6 0110 	rsb	r1, r6, #16
    5246:	2900      	cmp	r1, #0
    5248:	6baa      	ldr	r2, [r5, #56]	; 0x38
    524a:	9b01      	ldr	r3, [sp, #4]
    524c:	ddb6      	ble.n	51bc <_Unwind_VRS_Pop+0x174>
    524e:	ac22      	add	r4, sp, #136	; 0x88
    5250:	004f      	lsls	r7, r1, #1
    5252:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5256:	4611      	mov	r1, r2
    5258:	e7a3      	b.n	51a2 <_Unwind_VRS_Pop+0x15a>
    525a:	a822      	add	r0, sp, #136	; 0x88
    525c:	f000 f848 	bl	52f0 <__gnu_Unwind_Restore_VFP_D>
    5260:	e73d      	b.n	50de <_Unwind_VRS_Pop+0x96>
    5262:	f023 0310 	bic.w	r3, r3, #16
    5266:	602b      	str	r3, [r5, #0]
    5268:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    526c:	9201      	str	r2, [sp, #4]
    526e:	f000 f89d 	bl	53ac <__gnu_Unwind_Save_WMMXC>
    5272:	9a01      	ldr	r2, [sp, #4]
    5274:	e701      	b.n	507a <_Unwind_VRS_Pop+0x32>
    5276:	4628      	mov	r0, r5
    5278:	f022 0204 	bic.w	r2, r2, #4
    527c:	f840 2bd0 	str.w	r2, [r0], #208
    5280:	9301      	str	r3, [sp, #4]
    5282:	f000 f841 	bl	5308 <__gnu_Unwind_Save_VFP_D_16_to_31>
    5286:	9b01      	ldr	r3, [sp, #4]
    5288:	e7cf      	b.n	522a <_Unwind_VRS_Pop+0x1e2>
    528a:	682a      	ldr	r2, [r5, #0]
    528c:	e7cb      	b.n	5226 <_Unwind_VRS_Pop+0x1de>
    528e:	07d0      	lsls	r0, r2, #31
    5290:	d50a      	bpl.n	52a8 <_Unwind_VRS_Pop+0x260>
    5292:	4628      	mov	r0, r5
    5294:	f022 0201 	bic.w	r2, r2, #1
    5298:	f042 0202 	orr.w	r2, r2, #2
    529c:	f840 2b48 	str.w	r2, [r0], #72
    52a0:	9301      	str	r3, [sp, #4]
    52a2:	f000 f829 	bl	52f8 <__gnu_Unwind_Save_VFP_D>
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	9301      	str	r3, [sp, #4]
    52aa:	ac22      	add	r4, sp, #136	; 0x88
    52ac:	4620      	mov	r0, r4
    52ae:	f000 f823 	bl	52f8 <__gnu_Unwind_Save_VFP_D>
    52b2:	46b8      	mov	r8, r7
    52b4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    52b6:	9b01      	ldr	r3, [sp, #4]
    52b8:	2f00      	cmp	r7, #0
    52ba:	f47f af6d 	bne.w	5198 <_Unwind_VRS_Pop+0x150>
    52be:	460a      	mov	r2, r1
    52c0:	e709      	b.n	50d6 <_Unwind_VRS_Pop+0x8e>
    52c2:	460a      	mov	r2, r1
    52c4:	e78d      	b.n	51e2 <_Unwind_VRS_Pop+0x19a>
    52c6:	bf00      	nop

000052c8 <__restore_core_regs>:
    52c8:	f100 0134 	add.w	r1, r0, #52	; 0x34
    52cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    52d0:	469c      	mov	ip, r3
    52d2:	46a6      	mov	lr, r4
    52d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
    52d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    52dc:	46e5      	mov	sp, ip
    52de:	bd00      	pop	{pc}

000052e0 <__gnu_Unwind_Restore_VFP>:
    52e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    52e4:	4770      	bx	lr
    52e6:	bf00      	nop

000052e8 <__gnu_Unwind_Save_VFP>:
    52e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    52ec:	4770      	bx	lr
    52ee:	bf00      	nop

000052f0 <__gnu_Unwind_Restore_VFP_D>:
    52f0:	ec90 0b20 	vldmia	r0, {d0-d15}
    52f4:	4770      	bx	lr
    52f6:	bf00      	nop

000052f8 <__gnu_Unwind_Save_VFP_D>:
    52f8:	ec80 0b20 	vstmia	r0, {d0-d15}
    52fc:	4770      	bx	lr
    52fe:	bf00      	nop

00005300 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5300:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5304:	4770      	bx	lr
    5306:	bf00      	nop

00005308 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5308:	ecc0 0b20 	vstmia	r0, {d16-d31}
    530c:	4770      	bx	lr
    530e:	bf00      	nop

00005310 <__gnu_Unwind_Restore_WMMXD>:
    5310:	ecf0 0102 	ldfe	f0, [r0], #8
    5314:	ecf0 1102 	ldfe	f1, [r0], #8
    5318:	ecf0 2102 	ldfe	f2, [r0], #8
    531c:	ecf0 3102 	ldfe	f3, [r0], #8
    5320:	ecf0 4102 	ldfe	f4, [r0], #8
    5324:	ecf0 5102 	ldfe	f5, [r0], #8
    5328:	ecf0 6102 	ldfe	f6, [r0], #8
    532c:	ecf0 7102 	ldfe	f7, [r0], #8
    5330:	ecf0 8102 	ldfp	f0, [r0], #8
    5334:	ecf0 9102 	ldfp	f1, [r0], #8
    5338:	ecf0 a102 	ldfp	f2, [r0], #8
    533c:	ecf0 b102 	ldfp	f3, [r0], #8
    5340:	ecf0 c102 	ldfp	f4, [r0], #8
    5344:	ecf0 d102 	ldfp	f5, [r0], #8
    5348:	ecf0 e102 	ldfp	f6, [r0], #8
    534c:	ecf0 f102 	ldfp	f7, [r0], #8
    5350:	4770      	bx	lr
    5352:	bf00      	nop

00005354 <__gnu_Unwind_Save_WMMXD>:
    5354:	ece0 0102 	stfe	f0, [r0], #8
    5358:	ece0 1102 	stfe	f1, [r0], #8
    535c:	ece0 2102 	stfe	f2, [r0], #8
    5360:	ece0 3102 	stfe	f3, [r0], #8
    5364:	ece0 4102 	stfe	f4, [r0], #8
    5368:	ece0 5102 	stfe	f5, [r0], #8
    536c:	ece0 6102 	stfe	f6, [r0], #8
    5370:	ece0 7102 	stfe	f7, [r0], #8
    5374:	ece0 8102 	stfp	f0, [r0], #8
    5378:	ece0 9102 	stfp	f1, [r0], #8
    537c:	ece0 a102 	stfp	f2, [r0], #8
    5380:	ece0 b102 	stfp	f3, [r0], #8
    5384:	ece0 c102 	stfp	f4, [r0], #8
    5388:	ece0 d102 	stfp	f5, [r0], #8
    538c:	ece0 e102 	stfp	f6, [r0], #8
    5390:	ece0 f102 	stfp	f7, [r0], #8
    5394:	4770      	bx	lr
    5396:	bf00      	nop

00005398 <__gnu_Unwind_Restore_WMMXC>:
    5398:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    539c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    53a0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    53a4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    53a8:	4770      	bx	lr
    53aa:	bf00      	nop

000053ac <__gnu_Unwind_Save_WMMXC>:
    53ac:	fca0 8101 	stc2	1, cr8, [r0], #4
    53b0:	fca0 9101 	stc2	1, cr9, [r0], #4
    53b4:	fca0 a101 	stc2	1, cr10, [r0], #4
    53b8:	fca0 b101 	stc2	1, cr11, [r0], #4
    53bc:	4770      	bx	lr
    53be:	bf00      	nop

000053c0 <_Unwind_RaiseException>:
    53c0:	46ec      	mov	ip, sp
    53c2:	b500      	push	{lr}
    53c4:	e92d 5000 	stmdb	sp!, {ip, lr}
    53c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    53cc:	f04f 0300 	mov.w	r3, #0
    53d0:	e92d 000c 	stmdb	sp!, {r2, r3}
    53d4:	a901      	add	r1, sp, #4
    53d6:	f7ff fbdd 	bl	4b94 <__gnu_Unwind_RaiseException>
    53da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    53de:	b012      	add	sp, #72	; 0x48
    53e0:	4770      	bx	lr
    53e2:	bf00      	nop

000053e4 <_Unwind_Resume>:
    53e4:	46ec      	mov	ip, sp
    53e6:	b500      	push	{lr}
    53e8:	e92d 5000 	stmdb	sp!, {ip, lr}
    53ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    53f0:	f04f 0300 	mov.w	r3, #0
    53f4:	e92d 000c 	stmdb	sp!, {r2, r3}
    53f8:	a901      	add	r1, sp, #4
    53fa:	f7ff fc05 	bl	4c08 <__gnu_Unwind_Resume>
    53fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5402:	b012      	add	sp, #72	; 0x48
    5404:	4770      	bx	lr
    5406:	bf00      	nop

00005408 <_Unwind_Resume_or_Rethrow>:
    5408:	46ec      	mov	ip, sp
    540a:	b500      	push	{lr}
    540c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5410:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5414:	f04f 0300 	mov.w	r3, #0
    5418:	e92d 000c 	stmdb	sp!, {r2, r3}
    541c:	a901      	add	r1, sp, #4
    541e:	f7ff fc15 	bl	4c4c <__gnu_Unwind_Resume_or_Rethrow>
    5422:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5426:	b012      	add	sp, #72	; 0x48
    5428:	4770      	bx	lr
    542a:	bf00      	nop

0000542c <_Unwind_ForcedUnwind>:
    542c:	46ec      	mov	ip, sp
    542e:	b500      	push	{lr}
    5430:	e92d 5000 	stmdb	sp!, {ip, lr}
    5434:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5438:	f04f 0300 	mov.w	r3, #0
    543c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5440:	ab01      	add	r3, sp, #4
    5442:	f7ff fbd7 	bl	4bf4 <__gnu_Unwind_ForcedUnwind>
    5446:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    544a:	b012      	add	sp, #72	; 0x48
    544c:	4770      	bx	lr
    544e:	bf00      	nop

00005450 <_Unwind_Backtrace>:
    5450:	46ec      	mov	ip, sp
    5452:	b500      	push	{lr}
    5454:	e92d 5000 	stmdb	sp!, {ip, lr}
    5458:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    545c:	f04f 0300 	mov.w	r3, #0
    5460:	e92d 000c 	stmdb	sp!, {r2, r3}
    5464:	aa01      	add	r2, sp, #4
    5466:	f7ff fc47 	bl	4cf8 <__gnu_Unwind_Backtrace>
    546a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    546e:	b012      	add	sp, #72	; 0x48
    5470:	4770      	bx	lr
    5472:	bf00      	nop

00005474 <next_unwind_byte>:
    5474:	7a02      	ldrb	r2, [r0, #8]
    5476:	b982      	cbnz	r2, 549a <next_unwind_byte+0x26>
    5478:	7a43      	ldrb	r3, [r0, #9]
    547a:	b1ab      	cbz	r3, 54a8 <next_unwind_byte+0x34>
    547c:	6842      	ldr	r2, [r0, #4]
    547e:	3b01      	subs	r3, #1
    5480:	b410      	push	{r4}
    5482:	7243      	strb	r3, [r0, #9]
    5484:	6813      	ldr	r3, [r2, #0]
    5486:	2103      	movs	r1, #3
    5488:	1d14      	adds	r4, r2, #4
    548a:	7201      	strb	r1, [r0, #8]
    548c:	021a      	lsls	r2, r3, #8
    548e:	6044      	str	r4, [r0, #4]
    5490:	6002      	str	r2, [r0, #0]
    5492:	f85d 4b04 	ldr.w	r4, [sp], #4
    5496:	0e18      	lsrs	r0, r3, #24
    5498:	4770      	bx	lr
    549a:	6803      	ldr	r3, [r0, #0]
    549c:	3a01      	subs	r2, #1
    549e:	7202      	strb	r2, [r0, #8]
    54a0:	021a      	lsls	r2, r3, #8
    54a2:	6002      	str	r2, [r0, #0]
    54a4:	0e18      	lsrs	r0, r3, #24
    54a6:	4770      	bx	lr
    54a8:	20b0      	movs	r0, #176	; 0xb0
    54aa:	4770      	bx	lr

000054ac <_Unwind_GetGR.constprop.0>:
    54ac:	b500      	push	{lr}
    54ae:	b085      	sub	sp, #20
    54b0:	aa03      	add	r2, sp, #12
    54b2:	2300      	movs	r3, #0
    54b4:	9200      	str	r2, [sp, #0]
    54b6:	4619      	mov	r1, r3
    54b8:	220c      	movs	r2, #12
    54ba:	f7ff fbd7 	bl	4c6c <_Unwind_VRS_Get>
    54be:	9803      	ldr	r0, [sp, #12]
    54c0:	b005      	add	sp, #20
    54c2:	f85d fb04 	ldr.w	pc, [sp], #4
    54c6:	bf00      	nop

000054c8 <unwind_UCB_from_context>:
    54c8:	e7f0      	b.n	54ac <_Unwind_GetGR.constprop.0>
    54ca:	bf00      	nop

000054cc <__gnu_unwind_execute>:
    54cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54d0:	4605      	mov	r5, r0
    54d2:	b085      	sub	sp, #20
    54d4:	460e      	mov	r6, r1
    54d6:	f04f 0800 	mov.w	r8, #0
    54da:	4630      	mov	r0, r6
    54dc:	f7ff ffca 	bl	5474 <next_unwind_byte>
    54e0:	28b0      	cmp	r0, #176	; 0xb0
    54e2:	4604      	mov	r4, r0
    54e4:	f000 80b1 	beq.w	564a <__gnu_unwind_execute+0x17e>
    54e8:	0607      	lsls	r7, r0, #24
    54ea:	d520      	bpl.n	552e <__gnu_unwind_execute+0x62>
    54ec:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    54f0:	2b80      	cmp	r3, #128	; 0x80
    54f2:	d065      	beq.n	55c0 <__gnu_unwind_execute+0xf4>
    54f4:	2b90      	cmp	r3, #144	; 0x90
    54f6:	d036      	beq.n	5566 <__gnu_unwind_execute+0x9a>
    54f8:	2ba0      	cmp	r3, #160	; 0xa0
    54fa:	d078      	beq.n	55ee <__gnu_unwind_execute+0x122>
    54fc:	2bb0      	cmp	r3, #176	; 0xb0
    54fe:	d047      	beq.n	5590 <__gnu_unwind_execute+0xc4>
    5500:	2bc0      	cmp	r3, #192	; 0xc0
    5502:	f000 808a 	beq.w	561a <__gnu_unwind_execute+0x14e>
    5506:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    550a:	2bd0      	cmp	r3, #208	; 0xd0
    550c:	d10b      	bne.n	5526 <__gnu_unwind_execute+0x5a>
    550e:	f000 0207 	and.w	r2, r0, #7
    5512:	3201      	adds	r2, #1
    5514:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5518:	2305      	movs	r3, #5
    551a:	2101      	movs	r1, #1
    551c:	4628      	mov	r0, r5
    551e:	f7ff fd93 	bl	5048 <_Unwind_VRS_Pop>
    5522:	2800      	cmp	r0, #0
    5524:	d0d9      	beq.n	54da <__gnu_unwind_execute+0xe>
    5526:	2009      	movs	r0, #9
    5528:	b005      	add	sp, #20
    552a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    552e:	f10d 090c 	add.w	r9, sp, #12
    5532:	2300      	movs	r3, #0
    5534:	4619      	mov	r1, r3
    5536:	0087      	lsls	r7, r0, #2
    5538:	f8cd 9000 	str.w	r9, [sp]
    553c:	220d      	movs	r2, #13
    553e:	4628      	mov	r0, r5
    5540:	f7ff fb94 	bl	4c6c <_Unwind_VRS_Get>
    5544:	b2ff      	uxtb	r7, r7
    5546:	9b03      	ldr	r3, [sp, #12]
    5548:	f8cd 9000 	str.w	r9, [sp]
    554c:	3704      	adds	r7, #4
    554e:	0660      	lsls	r0, r4, #25
    5550:	bf4c      	ite	mi
    5552:	1bdf      	submi	r7, r3, r7
    5554:	18ff      	addpl	r7, r7, r3
    5556:	2300      	movs	r3, #0
    5558:	4619      	mov	r1, r3
    555a:	220d      	movs	r2, #13
    555c:	4628      	mov	r0, r5
    555e:	9703      	str	r7, [sp, #12]
    5560:	f7ff fba6 	bl	4cb0 <_Unwind_VRS_Set>
    5564:	e7b9      	b.n	54da <__gnu_unwind_execute+0xe>
    5566:	f000 030d 	and.w	r3, r0, #13
    556a:	2b0d      	cmp	r3, #13
    556c:	d0db      	beq.n	5526 <__gnu_unwind_execute+0x5a>
    556e:	af03      	add	r7, sp, #12
    5570:	2300      	movs	r3, #0
    5572:	f000 020f 	and.w	r2, r0, #15
    5576:	4619      	mov	r1, r3
    5578:	9700      	str	r7, [sp, #0]
    557a:	4628      	mov	r0, r5
    557c:	f7ff fb76 	bl	4c6c <_Unwind_VRS_Get>
    5580:	2300      	movs	r3, #0
    5582:	9700      	str	r7, [sp, #0]
    5584:	4619      	mov	r1, r3
    5586:	220d      	movs	r2, #13
    5588:	4628      	mov	r0, r5
    558a:	f7ff fb91 	bl	4cb0 <_Unwind_VRS_Set>
    558e:	e7a4      	b.n	54da <__gnu_unwind_execute+0xe>
    5590:	28b1      	cmp	r0, #177	; 0xb1
    5592:	d05f      	beq.n	5654 <__gnu_unwind_execute+0x188>
    5594:	28b2      	cmp	r0, #178	; 0xb2
    5596:	f000 80cc 	beq.w	5732 <__gnu_unwind_execute+0x266>
    559a:	28b3      	cmp	r0, #179	; 0xb3
    559c:	d07e      	beq.n	569c <__gnu_unwind_execute+0x1d0>
    559e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    55a2:	2bb4      	cmp	r3, #180	; 0xb4
    55a4:	d0bf      	beq.n	5526 <__gnu_unwind_execute+0x5a>
    55a6:	f000 0207 	and.w	r2, r0, #7
    55aa:	3201      	adds	r2, #1
    55ac:	2301      	movs	r3, #1
    55ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    55b2:	4619      	mov	r1, r3
    55b4:	4628      	mov	r0, r5
    55b6:	f7ff fd47 	bl	5048 <_Unwind_VRS_Pop>
    55ba:	2800      	cmp	r0, #0
    55bc:	d08d      	beq.n	54da <__gnu_unwind_execute+0xe>
    55be:	e7b2      	b.n	5526 <__gnu_unwind_execute+0x5a>
    55c0:	4630      	mov	r0, r6
    55c2:	f7ff ff57 	bl	5474 <next_unwind_byte>
    55c6:	0224      	lsls	r4, r4, #8
    55c8:	4304      	orrs	r4, r0
    55ca:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    55ce:	d0aa      	beq.n	5526 <__gnu_unwind_execute+0x5a>
    55d0:	0124      	lsls	r4, r4, #4
    55d2:	2300      	movs	r3, #0
    55d4:	b2a2      	uxth	r2, r4
    55d6:	4619      	mov	r1, r3
    55d8:	4628      	mov	r0, r5
    55da:	f7ff fd35 	bl	5048 <_Unwind_VRS_Pop>
    55de:	2800      	cmp	r0, #0
    55e0:	d1a1      	bne.n	5526 <__gnu_unwind_execute+0x5a>
    55e2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    55e6:	bf18      	it	ne
    55e8:	f04f 0801 	movne.w	r8, #1
    55ec:	e775      	b.n	54da <__gnu_unwind_execute+0xe>
    55ee:	43c2      	mvns	r2, r0
    55f0:	f002 0307 	and.w	r3, r2, #7
    55f4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    55f8:	411a      	asrs	r2, r3
    55fa:	0701      	lsls	r1, r0, #28
    55fc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5600:	f04f 0300 	mov.w	r3, #0
    5604:	bf48      	it	mi
    5606:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    560a:	4619      	mov	r1, r3
    560c:	4628      	mov	r0, r5
    560e:	f7ff fd1b 	bl	5048 <_Unwind_VRS_Pop>
    5612:	2800      	cmp	r0, #0
    5614:	f43f af61 	beq.w	54da <__gnu_unwind_execute+0xe>
    5618:	e785      	b.n	5526 <__gnu_unwind_execute+0x5a>
    561a:	28c6      	cmp	r0, #198	; 0xc6
    561c:	d051      	beq.n	56c2 <__gnu_unwind_execute+0x1f6>
    561e:	28c7      	cmp	r0, #199	; 0xc7
    5620:	d05a      	beq.n	56d8 <__gnu_unwind_execute+0x20c>
    5622:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5626:	2bc0      	cmp	r3, #192	; 0xc0
    5628:	d069      	beq.n	56fe <__gnu_unwind_execute+0x232>
    562a:	28c8      	cmp	r0, #200	; 0xc8
    562c:	d075      	beq.n	571a <__gnu_unwind_execute+0x24e>
    562e:	28c9      	cmp	r0, #201	; 0xc9
    5630:	f47f af79 	bne.w	5526 <__gnu_unwind_execute+0x5a>
    5634:	4630      	mov	r0, r6
    5636:	f7ff ff1d 	bl	5474 <next_unwind_byte>
    563a:	0302      	lsls	r2, r0, #12
    563c:	f000 000f 	and.w	r0, r0, #15
    5640:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5644:	3001      	adds	r0, #1
    5646:	4302      	orrs	r2, r0
    5648:	e766      	b.n	5518 <__gnu_unwind_execute+0x4c>
    564a:	f1b8 0f00 	cmp.w	r8, #0
    564e:	d014      	beq.n	567a <__gnu_unwind_execute+0x1ae>
    5650:	2000      	movs	r0, #0
    5652:	e769      	b.n	5528 <__gnu_unwind_execute+0x5c>
    5654:	4630      	mov	r0, r6
    5656:	f7ff ff0d 	bl	5474 <next_unwind_byte>
    565a:	2800      	cmp	r0, #0
    565c:	f43f af63 	beq.w	5526 <__gnu_unwind_execute+0x5a>
    5660:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5664:	f47f af5f 	bne.w	5526 <__gnu_unwind_execute+0x5a>
    5668:	4602      	mov	r2, r0
    566a:	4619      	mov	r1, r3
    566c:	4628      	mov	r0, r5
    566e:	f7ff fceb 	bl	5048 <_Unwind_VRS_Pop>
    5672:	2800      	cmp	r0, #0
    5674:	f43f af31 	beq.w	54da <__gnu_unwind_execute+0xe>
    5678:	e755      	b.n	5526 <__gnu_unwind_execute+0x5a>
    567a:	ac03      	add	r4, sp, #12
    567c:	4643      	mov	r3, r8
    567e:	220e      	movs	r2, #14
    5680:	4641      	mov	r1, r8
    5682:	9400      	str	r4, [sp, #0]
    5684:	4628      	mov	r0, r5
    5686:	f7ff faf1 	bl	4c6c <_Unwind_VRS_Get>
    568a:	9400      	str	r4, [sp, #0]
    568c:	4628      	mov	r0, r5
    568e:	4643      	mov	r3, r8
    5690:	220f      	movs	r2, #15
    5692:	4641      	mov	r1, r8
    5694:	f7ff fb0c 	bl	4cb0 <_Unwind_VRS_Set>
    5698:	4640      	mov	r0, r8
    569a:	e745      	b.n	5528 <__gnu_unwind_execute+0x5c>
    569c:	4630      	mov	r0, r6
    569e:	f7ff fee9 	bl	5474 <next_unwind_byte>
    56a2:	0301      	lsls	r1, r0, #12
    56a4:	f000 000f 	and.w	r0, r0, #15
    56a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    56ac:	1c42      	adds	r2, r0, #1
    56ae:	2301      	movs	r3, #1
    56b0:	430a      	orrs	r2, r1
    56b2:	4628      	mov	r0, r5
    56b4:	4619      	mov	r1, r3
    56b6:	f7ff fcc7 	bl	5048 <_Unwind_VRS_Pop>
    56ba:	2800      	cmp	r0, #0
    56bc:	f43f af0d 	beq.w	54da <__gnu_unwind_execute+0xe>
    56c0:	e731      	b.n	5526 <__gnu_unwind_execute+0x5a>
    56c2:	4630      	mov	r0, r6
    56c4:	f7ff fed6 	bl	5474 <next_unwind_byte>
    56c8:	0301      	lsls	r1, r0, #12
    56ca:	f000 000f 	and.w	r0, r0, #15
    56ce:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    56d2:	1c42      	adds	r2, r0, #1
    56d4:	2303      	movs	r3, #3
    56d6:	e7eb      	b.n	56b0 <__gnu_unwind_execute+0x1e4>
    56d8:	4630      	mov	r0, r6
    56da:	f7ff fecb 	bl	5474 <next_unwind_byte>
    56de:	4602      	mov	r2, r0
    56e0:	2800      	cmp	r0, #0
    56e2:	f43f af20 	beq.w	5526 <__gnu_unwind_execute+0x5a>
    56e6:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    56ea:	f47f af1c 	bne.w	5526 <__gnu_unwind_execute+0x5a>
    56ee:	2104      	movs	r1, #4
    56f0:	4628      	mov	r0, r5
    56f2:	f7ff fca9 	bl	5048 <_Unwind_VRS_Pop>
    56f6:	2800      	cmp	r0, #0
    56f8:	f43f aeef 	beq.w	54da <__gnu_unwind_execute+0xe>
    56fc:	e713      	b.n	5526 <__gnu_unwind_execute+0x5a>
    56fe:	f000 020f 	and.w	r2, r0, #15
    5702:	3201      	adds	r2, #1
    5704:	2303      	movs	r3, #3
    5706:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    570a:	4619      	mov	r1, r3
    570c:	4628      	mov	r0, r5
    570e:	f7ff fc9b 	bl	5048 <_Unwind_VRS_Pop>
    5712:	2800      	cmp	r0, #0
    5714:	f43f aee1 	beq.w	54da <__gnu_unwind_execute+0xe>
    5718:	e705      	b.n	5526 <__gnu_unwind_execute+0x5a>
    571a:	4630      	mov	r0, r6
    571c:	f7ff feaa 	bl	5474 <next_unwind_byte>
    5720:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    5724:	f000 030f 	and.w	r3, r0, #15
    5728:	3210      	adds	r2, #16
    572a:	3301      	adds	r3, #1
    572c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    5730:	e6f2      	b.n	5518 <__gnu_unwind_execute+0x4c>
    5732:	2300      	movs	r3, #0
    5734:	f10d 090c 	add.w	r9, sp, #12
    5738:	220d      	movs	r2, #13
    573a:	4619      	mov	r1, r3
    573c:	f8cd 9000 	str.w	r9, [sp]
    5740:	4628      	mov	r0, r5
    5742:	f7ff fa93 	bl	4c6c <_Unwind_VRS_Get>
    5746:	4630      	mov	r0, r6
    5748:	f7ff fe94 	bl	5474 <next_unwind_byte>
    574c:	0602      	lsls	r2, r0, #24
    574e:	f04f 0702 	mov.w	r7, #2
    5752:	d50c      	bpl.n	576e <__gnu_unwind_execute+0x2a2>
    5754:	9b03      	ldr	r3, [sp, #12]
    5756:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    575a:	40b8      	lsls	r0, r7
    575c:	4403      	add	r3, r0
    575e:	4630      	mov	r0, r6
    5760:	9303      	str	r3, [sp, #12]
    5762:	f7ff fe87 	bl	5474 <next_unwind_byte>
    5766:	0603      	lsls	r3, r0, #24
    5768:	f107 0707 	add.w	r7, r7, #7
    576c:	d4f2      	bmi.n	5754 <__gnu_unwind_execute+0x288>
    576e:	9b03      	ldr	r3, [sp, #12]
    5770:	f8cd 9000 	str.w	r9, [sp]
    5774:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    5778:	f503 7201 	add.w	r2, r3, #516	; 0x204
    577c:	40bc      	lsls	r4, r7
    577e:	2300      	movs	r3, #0
    5780:	4414      	add	r4, r2
    5782:	4619      	mov	r1, r3
    5784:	220d      	movs	r2, #13
    5786:	4628      	mov	r0, r5
    5788:	9403      	str	r4, [sp, #12]
    578a:	f7ff fa91 	bl	4cb0 <_Unwind_VRS_Set>
    578e:	e6a4      	b.n	54da <__gnu_unwind_execute+0xe>

00005790 <__gnu_unwind_frame>:
    5790:	b510      	push	{r4, lr}
    5792:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5794:	b084      	sub	sp, #16
    5796:	685a      	ldr	r2, [r3, #4]
    5798:	2003      	movs	r0, #3
    579a:	f88d 000c 	strb.w	r0, [sp, #12]
    579e:	79dc      	ldrb	r4, [r3, #7]
    57a0:	f88d 400d 	strb.w	r4, [sp, #13]
    57a4:	0212      	lsls	r2, r2, #8
    57a6:	3308      	adds	r3, #8
    57a8:	4608      	mov	r0, r1
    57aa:	a901      	add	r1, sp, #4
    57ac:	9201      	str	r2, [sp, #4]
    57ae:	9302      	str	r3, [sp, #8]
    57b0:	f7ff fe8c 	bl	54cc <__gnu_unwind_execute>
    57b4:	b004      	add	sp, #16
    57b6:	bd10      	pop	{r4, pc}

000057b8 <_Unwind_GetRegionStart>:
    57b8:	b508      	push	{r3, lr}
    57ba:	f7ff fe85 	bl	54c8 <unwind_UCB_from_context>
    57be:	6c80      	ldr	r0, [r0, #72]	; 0x48
    57c0:	bd08      	pop	{r3, pc}
    57c2:	bf00      	nop

000057c4 <_Unwind_GetLanguageSpecificData>:
    57c4:	b508      	push	{r3, lr}
    57c6:	f7ff fe7f 	bl	54c8 <unwind_UCB_from_context>
    57ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    57cc:	79c3      	ldrb	r3, [r0, #7]
    57ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    57d2:	3008      	adds	r0, #8
    57d4:	bd08      	pop	{r3, pc}
    57d6:	bf00      	nop

000057d8 <_Unwind_GetDataRelBase>:
    57d8:	b508      	push	{r3, lr}
    57da:	f000 f807 	bl	57ec <abort>
    57de:	bf00      	nop

000057e0 <_Unwind_GetTextRelBase>:
    57e0:	b508      	push	{r3, lr}
    57e2:	f7ff fff9 	bl	57d8 <_Unwind_GetDataRelBase>
    57e6:	bf00      	nop

000057e8 <__aeabi_idiv0>:
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop

000057ec <abort>:
    57ec:	b508      	push	{r3, lr}
    57ee:	2006      	movs	r0, #6
    57f0:	f000 f864 	bl	58bc <raise>
    57f4:	2001      	movs	r0, #1
    57f6:	f7fb fcb1 	bl	115c <_exit>
    57fa:	Address 0x00000000000057fa is out of bounds.


000057fc <__libc_init_array>:
    57fc:	b570      	push	{r4, r5, r6, lr}
    57fe:	4e0d      	ldr	r6, [pc, #52]	; (5834 <__libc_init_array+0x38>)
    5800:	4c0d      	ldr	r4, [pc, #52]	; (5838 <__libc_init_array+0x3c>)
    5802:	1ba4      	subs	r4, r4, r6
    5804:	10a4      	asrs	r4, r4, #2
    5806:	2500      	movs	r5, #0
    5808:	42a5      	cmp	r5, r4
    580a:	d109      	bne.n	5820 <__libc_init_array+0x24>
    580c:	4e0b      	ldr	r6, [pc, #44]	; (583c <__libc_init_array+0x40>)
    580e:	4c0c      	ldr	r4, [pc, #48]	; (5840 <__libc_init_array+0x44>)
    5810:	f7fa fd76 	bl	300 <_init>
    5814:	1ba4      	subs	r4, r4, r6
    5816:	10a4      	asrs	r4, r4, #2
    5818:	2500      	movs	r5, #0
    581a:	42a5      	cmp	r5, r4
    581c:	d105      	bne.n	582a <__libc_init_array+0x2e>
    581e:	bd70      	pop	{r4, r5, r6, pc}
    5820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5824:	4798      	blx	r3
    5826:	3501      	adds	r5, #1
    5828:	e7ee      	b.n	5808 <__libc_init_array+0xc>
    582a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    582e:	4798      	blx	r3
    5830:	3501      	adds	r5, #1
    5832:	e7f2      	b.n	581a <__libc_init_array+0x1e>
    5834:	0000030c 	.word	0x0000030c
    5838:	0000030c 	.word	0x0000030c
    583c:	0000030c 	.word	0x0000030c
    5840:	00000320 	.word	0x00000320

00005844 <memcpy>:
    5844:	b510      	push	{r4, lr}
    5846:	1e43      	subs	r3, r0, #1
    5848:	440a      	add	r2, r1
    584a:	4291      	cmp	r1, r2
    584c:	d100      	bne.n	5850 <memcpy+0xc>
    584e:	bd10      	pop	{r4, pc}
    5850:	f811 4b01 	ldrb.w	r4, [r1], #1
    5854:	f803 4f01 	strb.w	r4, [r3, #1]!
    5858:	e7f7      	b.n	584a <memcpy+0x6>

0000585a <memset>:
    585a:	4402      	add	r2, r0
    585c:	4603      	mov	r3, r0
    585e:	4293      	cmp	r3, r2
    5860:	d100      	bne.n	5864 <memset+0xa>
    5862:	4770      	bx	lr
    5864:	f803 1b01 	strb.w	r1, [r3], #1
    5868:	e7f9      	b.n	585e <memset+0x4>

0000586a <_raise_r>:
    586a:	291f      	cmp	r1, #31
    586c:	b538      	push	{r3, r4, r5, lr}
    586e:	4604      	mov	r4, r0
    5870:	460d      	mov	r5, r1
    5872:	d904      	bls.n	587e <_raise_r+0x14>
    5874:	2316      	movs	r3, #22
    5876:	6003      	str	r3, [r0, #0]
    5878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    587c:	bd38      	pop	{r3, r4, r5, pc}
    587e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5880:	b112      	cbz	r2, 5888 <_raise_r+0x1e>
    5882:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5886:	b94b      	cbnz	r3, 589c <_raise_r+0x32>
    5888:	4620      	mov	r0, r4
    588a:	f000 f831 	bl	58f0 <_getpid_r>
    588e:	462a      	mov	r2, r5
    5890:	4601      	mov	r1, r0
    5892:	4620      	mov	r0, r4
    5894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5898:	f000 b818 	b.w	58cc <_kill_r>
    589c:	2b01      	cmp	r3, #1
    589e:	d00a      	beq.n	58b6 <_raise_r+0x4c>
    58a0:	1c59      	adds	r1, r3, #1
    58a2:	d103      	bne.n	58ac <_raise_r+0x42>
    58a4:	2316      	movs	r3, #22
    58a6:	6003      	str	r3, [r0, #0]
    58a8:	2001      	movs	r0, #1
    58aa:	e7e7      	b.n	587c <_raise_r+0x12>
    58ac:	2400      	movs	r4, #0
    58ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    58b2:	4628      	mov	r0, r5
    58b4:	4798      	blx	r3
    58b6:	2000      	movs	r0, #0
    58b8:	e7e0      	b.n	587c <_raise_r+0x12>
    58ba:	Address 0x00000000000058ba is out of bounds.


000058bc <raise>:
    58bc:	4b02      	ldr	r3, [pc, #8]	; (58c8 <raise+0xc>)
    58be:	4601      	mov	r1, r0
    58c0:	6818      	ldr	r0, [r3, #0]
    58c2:	f7ff bfd2 	b.w	586a <_raise_r>
    58c6:	bf00      	nop
    58c8:	10000078 	.word	0x10000078

000058cc <_kill_r>:
    58cc:	b538      	push	{r3, r4, r5, lr}
    58ce:	4c07      	ldr	r4, [pc, #28]	; (58ec <_kill_r+0x20>)
    58d0:	2300      	movs	r3, #0
    58d2:	4605      	mov	r5, r0
    58d4:	4608      	mov	r0, r1
    58d6:	4611      	mov	r1, r2
    58d8:	6023      	str	r3, [r4, #0]
    58da:	f7fb fbf5 	bl	10c8 <_kill>
    58de:	1c43      	adds	r3, r0, #1
    58e0:	d102      	bne.n	58e8 <_kill_r+0x1c>
    58e2:	6823      	ldr	r3, [r4, #0]
    58e4:	b103      	cbz	r3, 58e8 <_kill_r+0x1c>
    58e6:	602b      	str	r3, [r5, #0]
    58e8:	bd38      	pop	{r3, r4, r5, pc}
    58ea:	bf00      	nop
    58ec:	100002c4 	.word	0x100002c4

000058f0 <_getpid_r>:
    58f0:	f7fb bbe2 	b.w	10b8 <_getpid>

000058f4 <strlen>:
    58f4:	4603      	mov	r3, r0
    58f6:	f813 2b01 	ldrb.w	r2, [r3], #1
    58fa:	2a00      	cmp	r2, #0
    58fc:	d1fb      	bne.n	58f6 <strlen+0x2>
    58fe:	1a18      	subs	r0, r3, r0
    5900:	3801      	subs	r0, #1
    5902:	4770      	bx	lr
    5904:	746f6f77 	.word	0x746f6f77
    5908:	ffffff00 	.word	0xffffff00

0000590c <vtable for sjsu::LabGPIO>:
	...
    5914:	000003c5 000004b9 000004e1 00000505     ................
    5924:	00000529 00000551 0000057d              )...Q...}...

00005930 <vtable for sjsu::Gpio>:
	...
    5938:	000042f9 000042f9 000042f9 000042f9     .B...B...B...B..
    5948:	000042f9 000042f9 000042f9              .B...B...B..

00005954 <main::file>:
    5954:	6e69616d 7070632e ffffff00              main.cpp....

00005960 <std::integral_constant<long long, 500ll>::value>:
    5960:	000001f4 00000000 32345b1b 2020206d     .........[42m   
    5970:	464e4920 305b1b4f 6d34393b 3a73253a      INFO.[0;94m:%s:
    5980:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    5990:	3e64256d 305b1b20 6d37333b 6c6c6548     m%d> .[0;37mHell
    59a0:	6f57206f 0a646c72 6d305b1b ffff000a     o World..[0m....

000059b0 <main::__PRETTY_FUNCTION__>:
    59b0:	20746e69 6e69616d ff002928 61766e69     int main()..inva
    59c0:	0064696c 6c707061 74616369 006e6f69     lid.application.
    59d0:	74736f68 73657420 00000074 64252020     host test...  %d
    59e0:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    59f0:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    5a00:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    5a10:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    5a20:	2072756f 6a6f7270 20746365 65726964     our project dire
    5a30:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    5a40:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    5a50:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    5a60:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    5a70:	73696854 6c697720 6572206c 74726f70     This will report
    5a80:	65687420 6c696620 6e612065 696c2064      the file and li
    5a90:	6e20656e 65626d75 68742072 6c207461     ne number that l
    5aa0:	74206465 6874206f 66207369 74636e75     ed to this funct
    5ab0:	206e6f69 6e696562 61632067 64656c6c     ion being called
    5ac0:	0000002e 35345b1b 2020206d 4f525245     .....[45m   ERRO
    5ad0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    5ae0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    5af0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    5b00:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    5b10:	6e6f6974 73655420 3a646574 546b2820     tion Tested: (kT
    5b20:	496b7361 7865646e 6b203c20 6b736154     askIndex < kTask
    5b30:	6e756f43 200a2974 20202020 20202020     Count).         
    5b40:	65685420 73617420 6e69206b 20786564      The task index 
    5b50:	756f6873 6e20646c 6520746f 65656378     should not excee
    5b60:	68742064 61742065 63206b73 746e756f     d the task count
    5b70:	305b1b2e 305b1b6d 00000a6d 6972500a     ..[0m.[0m....Pri
    5b80:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
    5b90:	000a3a65 35345b1b 2020206d 4f525245     e:...[45m   ERRO
    5ba0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    5bb0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    5bc0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    5bd0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    5be0:	6e6f6974 73655420 3a646574 61742820     tion Tested: (ta
    5bf0:	502e6b73 75526572 2929286e 2020200a     sk.PreRun()).   
    5c00:	20202020 50202020 75526572 2029286e            PreRun() 
    5c10:	6c696166 66206465 7420726f 3a6b7361     failed for task:
    5c20:	2c732520 72657420 616e696d 676e6974      %s, terminating
    5c30:	68637320 6c756465 1b217265 1b6d305b      scheduler!.[0m.
    5c40:	0a6d305b 00000000 33345b1b 4157206d     [0m......[43m WA
    5c50:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
    5c60:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    5c70:	3e64256d 305b1b20 6d37333b 65206e41     m%d> .[0;37mAn e
    5c80:	726f7272 63636f20 64657275 6874202c     rror occured, th
    5c90:	6f662065 776f6c6c 20676e69 6b736174     e following task
    5ca0:	6c697720 6562206c 73757320 646e6570      will be suspend
    5cb0:	203a6465 5b1b7325 5b1b6d30 000a6d30     ed: %s.[0m.[0m..
    5cc0:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    5cd0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    5ce0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    5cf0:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    5d00:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    5d10:	73655420 3a646574 61742820 3e2d6b73      Tested: (task->
    5d20:	48746547 6c646e61 20292865 6e203d21     GetHandle() != n
    5d30:	706c6c75 0a297274 20202020 20202020     ullptr).        
    5d40:	6e552020 656c6261 206f7420 61657263       Unable to crea
    5d50:	74206574 3a6b7361 1b732520 1b6d305b     te task: %s.[0m.
    5d60:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
    5d70:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    5d80:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    5d90:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    5da0:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    5db0:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    5dc0:	61742820 3e2d6b73 75746553 29292870      (task->Setup())
    5dd0:	2020200a 20202020 46202020 656c6961     .          Faile
    5de0:	6f742064 6d6f6320 74656c70 65532065     d to complete Se
    5df0:	28707574 6f662029 61742072 203a6b73     tup() for task: 
    5e00:	5b1b7325 5b1b6d30 000a6d30 35345b1b     %s.[0m.[0m...[45
    5e10:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    5e20:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    5e30:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    5e40:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    5e50:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    5e60:	3a646574 72702820 75725f65 76655f6e     ted: (pre_run_ev
    5e70:	5f746e65 756f7267 61685f70 656c646e     ent_group_handle
    5e80:	3d21205f 6c756e20 7274706c 20200a29     _ != nullptr).  
    5e90:	20202020 20202020 6c696146 74206465             Failed t
    5ea0:	7263206f 65746165 65725020 206e7552     o create PreRun 
    5eb0:	6e657645 72472074 2170756f 6d305b1b     Event Group!.[0m
    5ec0:	6d305b1b ffff000a 61766e69 0064696c     .[0m....invalid.
    5ed0:	6c707061 74616369 006e6f69 74736f68     application.host
    5ee0:	73657420 00000074 64252020 78302029      test...  %d) 0x
    5ef0:	58383025 0000000a 25783020 00583830     %08X.... 0x%08X.
    5f00:	64252020 78302029 000a7025 6e75520a       %d) 0x%p...Run
    5f10:	6874203a 6f662065 776f6c6c 20676e69     : the following 
    5f20:	6d6d6f63 20646e61 79206e69 2072756f     command in your 
    5f30:	6a6f7270 20746365 65726964 726f7463     project director
    5f40:	00000079 20200a0a 3b315b1b 006d3733     y.....  .[1;37m.
    5f50:	656b616d 61747320 72746b63 2d656361     make stacktrace-
    5f60:	54207325 45434152 00223d53 25783020     %s TRACES=". 0x%
    5f70:	00000070 1b0a0a22 006d305b 73696854     p..."...[0m.This
    5f80:	6c697720 6572206c 74726f70 65687420      will report the
    5f90:	6c696620 6e612065 696c2064 6e20656e      file and line n
    5fa0:	65626d75 68742072 6c207461 74206465     umber that led t
    5fb0:	6874206f 66207369 74636e75 206e6f69     o this function 
    5fc0:	6e696562 61632067 64656c6c 0000002e     being called....
    5fd0:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
    5fe0:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    5ff0:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    6000:	6d37333b 69206f4e 7265746e 74707572     ;37mNo interrupt
    6010:	72657320 65636976 756f7220 656e6974      service routine
    6020:	756f6620 6620646e 7420726f 76206568      found for the v
    6030:	6f746365 64252072 69442021 6c626173     ector %d! Disabl
    6040:	20676e69 1b525349 0a6d305b 00000000     ing ISR.[0m.....
    6050:	31345b1b 7261486d 61462064 20746c75     .[41mHard Fault 
    6060:	65637845 6f697470 634f206e 72727563     Exception Occurr
    6070:	0a216465 6d305b1b 00000000 203a3072     ed!..[0m....r0: 
    6080:	30257830 2c586c38 3a317220 25783020     0x%08lX, r1: 0x%
    6090:	586c3830 3272202c 7830203a 6c383025     08lX, r2: 0x%08l
    60a0:	72202c58 30203a33 38302578 000a586c     X, r3: 0x%08lX..
    60b0:	3a323172 25783020 586c3830 726c202c     r12: 0x%08lX, lr
    60c0:	7830203a 6c383025 70202c58 30203a63     : 0x%08lX, pc: 0
    60d0:	38302578 202c586c 3a727370 25783020     x%08lX, psr: 0x%
    60e0:	586c3830 0000000a 315b1b0a 6d37333b     08lX......[1;37m
    60f0:	32345b1b 6f72506d 6d617267 74655220     .[42mProgram Ret
    6100:	656e7275 78452064 43207469 3a65646f     urned Exit Code:
    6110:	646c2520 305b1b0a 0000006d 315b1b0a      %ld..[0m.....[1
    6120:	6d37333b 31345b1b 6f72506d 6d617267     ;37m.[41mProgram
    6130:	74655220 656e7275 78452064 43207469      Returned Exit C
    6140:	3a65646f 646c2520 305b1b0a ffff006d     ode: %ld..[0m...

00006150 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    6150:	65746e69 70757272 70682e74 ffff0070     interrupt.hpp...

00006160 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    6160:	74617473 76206369 2064696f 75736a73     static void sjsu
    6170:	6f633a3a 78657472 6e493a3a 72726574     ::cortex::Interr
    6180:	43747075 72746e6f 656c6c6f 553a3a72     uptController::U
    6190:	6765726e 65747369 49646572 7265746e     nregisteredInter
    61a0:	74707572 646e6148 2872656c ffff0029     ruptHandler()...
    61b0:	ffff000a                                ....

000061b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    61b4:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
    61c4:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
    61d4:	4cbebc20 4e6e6b28 0074743a 61766e69      ..L(knN:tt.inva
    61e4:	0064696c 6c707061 74616369 006e6f69     lid.application.
    61f4:	74736f68 73657420 00000074 64252020     host test...  %d
    6204:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    6214:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    6224:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    6234:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    6244:	2072756f 6a6f7270 20746365 65726964     our project dire
    6254:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    6264:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    6274:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    6284:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    6294:	73696854 6c697720 6572206c 74726f70     This will report
    62a4:	65687420 6c696620 6e612065 696c2064      the file and li
    62b4:	6e20656e 65626d75 68742072 6c207461     ne number that l
    62c4:	74206465 6874206f 66207369 74636e75     ed to this funct
    62d4:	206e6f69 6e696562 61632067 64656c6c     ion being called
    62e4:	0000002e 33345b1b 4157206d 4e494e52     .....[43m WARNIN
    62f4:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
    6304:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    6314:	305b1b20 6d37333b 69206f4e 7265746e      .[0;37mNo inter
    6324:	74707572 72657320 65636976 756f7220     rupt service rou
    6334:	656e6974 756f6620 6620646e 7420726f     tine found for t
    6344:	76206568 6f746365 64252072 69442021     he vector %d! Di
    6354:	6c626173 20676e69 1b525349 0a6d305b     sabling ISR.[0m.
    6364:	00000000 ffffffff 00002925 00000001     ........%)......
    6374:	ffffffff 35345b1b 2020206d 4f525245     .....[45m   ERRO
    6384:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    6394:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    63a4:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    63b4:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    63c4:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
    63d4:	68706972 6c617265 7669645f 72656469     ripheral_divider
    63e4:	203d3c20 200a2934 20202020 20202020      <= 4).         
    63f4:	76694420 72656469 73756d20 74276e74      Divider mustn't
    6404:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
    6414:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
    6424:	206b6361 63617254 000a3a65 35345b1b     ack Trace:...[45
    6434:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    6444:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    6454:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    6464:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    6474:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    6484:	3a646574 65642820 65726973 72665f64     ted: (desired_fr
    6494:	65757165 2079636e 3833203c 484d5f34     equency < 384_MH
    64a4:	2626207a 73656420 64657269 6572665f     z && desired_fre
    64b4:	6e657571 3e207963 5f323120 297a484d     quency > 12_MHz)
    64c4:	2020200a 20202020 46202020 75716572     .          Frequ
    64d4:	79636e65 73756d20 65622074 776f6c20     ency must be low
    64e4:	74207265 206e6168 20343833 617a484d     er than 384 MHza
    64f4:	6720646e 74616572 74207265 206e6168     nd greater than 
    6504:	6520726f 6c617571 206f7420 4d203231     or equal to 12 M
    6514:	5b1b7a48 5b1b6d30 000a6d30 35345b1b     Hz.[0m.[0m...[45
    6524:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    6534:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    6544:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    6554:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    6564:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    6574:	3a646574 69642820 65646976 61765f72     ted: (divider_va
    6584:	2065756c 2938203c 2020200a 20202020     lue < 8).       
    6594:	50202020 64204c4c 64697669 76207265        PLL divider v
    65a4:	65756c61 6e657720 756f2074 666f2074     alue went out of
    65b4:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
    65c4:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
    65d4:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    65e4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    65f4:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    6604:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    6614:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
    6624:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
    6634:	20202020 20202020 69442020 65646976               Divide
    6644:	756d2072 276e7473 78652074 64656563     r mustn't exceed
    6654:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
    6664:	fffffffb 000041f1 00000001 ffffffff     .....A..........
    6674:	fffffffe 00004221 00000001 ffffffff     ....!B..........
    6684:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    6694:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    66a4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    66b4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    66c4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    66d4:	73655420 3a646574 69742820 5f72656d      Tested: (timer_
    66e4:	72617473 74735f74 73757461 203d3d20     start_status == 
    66f4:	75736a73 74533a3a 73757461 536b3a3a     sjsu::Status::kS
    6704:	65636375 0a297373 20202020 20202020     uccess).        
    6714:	79532020 6d657473 6d695420 28207265       System Timer (
    6724:	64657375 20796220 65657246 534f5452     used by FreeRTOS
    6734:	61682029 41462073 44454c49 206f7420     ) has FAILED to 
    6744:	72617473 5b1b2174 5b1b6d30 000a6d30     start!.[0m.[0m..
    6754:	ffffffff                                ....

00006758 <std::integral_constant<long long, 1ll>::value>:
    6758:	00000001 00000000                       ........

00006760 <config::kSystemClockRateMhz>:
    6760:	42400000                                ..@B

00006764 <config::kRtosFrequency>:
    6764:	447a0000                                ..zD

00006768 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    6768:	000068f0                                .h..

0000676c <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    676c:	41400000                                ..@A

00006770 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    6770:	41400000                                ..@A

00006774 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    6774:	ffff0100                                ....

00006778 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    6778:	ffff0100                                ....

0000677c <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    677c:	ffff0500                                ....

00006780 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    6780:	ffff0108                                ....

00006784 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    6784:	ffff0208                                ....

00006788 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    6788:	ffff0208                                ....

0000678c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    678c:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    679c:	70682e72 ffff0070                       r.hpp...

000067a4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    67a4:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    67b4:	70682e72 ffff0070                       r.hpp...

000067bc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    67bc:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    67cc:	70682e72 ffff0070                       r.hpp...

000067d4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    67d4:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    67e4:	70682e72 ffff0070                       r.hpp...

000067ec <sjsu::lpc40xx::Pin::kFunction>:
    67ec:	ffff0300                                ....

000067f0 <sjsu::lpc40xx::Pin::kResistor>:
    67f0:	ffff0203                                ....

000067f4 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    67f4:	ffff0107                                ....

000067f8 <sjsu::lpc40xx::Pin::kOpenDrain>:
    67f8:	ffff010a                                ....

000067fc <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    67fc:	0000689c 00000200                       .h......

00006804 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    6804:	0000689c 00000300                       .h......

0000680c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    680c:	0000689c 00000802                       .h......

00006814 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    6814:	0000689c 00000902                       .h......

0000681c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    681c:	0000689c 00001c04                       .h......

00006824 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    6824:	0000689c 00001d04                       .h......

0000682c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    682c:	0000689c 00001d01                       .h......

00006834 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    6834:	0000689c 00000902                       .h......

0000683c <sjsu::lpc40xx::Uart::Port::kUart0>:
    683c:	4000c000 00000003 000067fc 00006804     ...@.....g...h..
    684c:	00000009                                ....

00006850 <sjsu::InitializePlatform()::file>:
    6850:	72617473 2e707574 00707063              startup.cpp.

0000685c <vtable for sjsu::lpc40xx::Uart>:
	...
    6864:	000039bd 00003a7d 00003b09 00003bad     .9..}:...;...;..
    6874:	00003c7d                                }<..

00006878 <vtable for sjsu::Uart>:
	...
    6880:	000042f9 000042f9 000042f9 000042f9     .B...B...B...B..
    6890:	000042f9                                .B..

00006894 <vtable for sjsu::lpc40xx::Pin>:
	...
    689c:	00003421 00003455 000034c5 00003489     !4..U4...4...4..

000068ac <vtable for sjsu::lpc40xx::SystemController>:
	...
    68b4:	00002c91 00002d2d 00002d85 00002da9     .,..--...-...-..
    68c4:	00002dc5 00002e01 00002e35              .-......5...

000068d0 <vtable for sjsu::cortex::SystemTimer>:
	...
    68d8:	00002991 000029a5 00002b81 000029c5     .)...)...+...)..

000068e8 <vtable for sjsu::cortex::InterruptController>:
	...
    68f0:	00002825 00002879                       %(..y(..

000068f8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    68f8:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    6908:	6c3a3a75 30346370 3a3a7878 74737953     u::lpc40xx::Syst
    6918:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    6928:	72655074 65687069 436c6172 6b636f6c     tPeripheralClock
    6938:	69766944 28726564 736e6f63 6a732074     Divider(const sj
    6948:	3a3a7573 74737953 6f436d65 6f72746e     su::SystemContro
    6958:	72656c6c 65503a3a 68706972 6c617265     ller::Peripheral
    6968:	2c264449 6e697520 745f3874 6f632029     ID&, uint8_t) co
    6978:	0074736e                                nst.

0000697c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    697c:	746e6975 745f3233 736a7320 6c3a3a75     uint32_t sjsu::l
    698c:	30346370 3a3a7878 74737953 6f436d65     pc40xx::SystemCo
    699c:	6f72746e 72656c6c 61433a3a 6c75636c     ntroller::Calcul
    69ac:	50657461 75286c6c 7374696e 72663a3a     atePll(units::fr
    69bc:	65757165 3a79636e 67656d3a 72656861     equency::megaher
    69cc:	745f7a74 6e75202c 3a737469 6572663a     tz_t, units::fre
    69dc:	6e657571 3a3a7963 6167656d 74726568     quency::megahert
    69ec:	29745f7a 6e6f6320 ff007473              z_t) const..

000069f8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    69f8:	64696f76 736a7320 6c3a3a75 30346370     void sjsu::lpc40
    6a08:	3a3a7878 74737953 6f436d65 6f72746e     xx::SystemContro
    6a18:	72656c6c 65533a3a 75704374 636f6c43     ller::SetCpuCloc
    6a28:	7669446b 72656469 6e697528 745f3874     kDivider(uint8_t
    6a38:	6f632029 0074736e                       ) const.

00006a40 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    6a40:	64696f76 736a7320 493a3a75 6974696e     void sjsu::Initi
    6a50:	7a696c61 616c5065 726f6674 0029286d     alizePlatform().

00006a60 <__sf_fake_stderr>:
	...

00006a80 <__sf_fake_stdin>:
	...

00006aa0 <__sf_fake_stdout>:
	...
