
build/application/lpc17xx/firmware.elf:     file format elf32-littlearm
build/application/lpc17xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001309

Program Header:
0x70000001 off    0x00017c18 vaddr 0x00007c18 paddr 0x00007c18 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007cd0 memsz 0x00007cd0 flags r-x
    LOAD off    0x0001c000 vaddr 0x2007c000 paddr 0x00007cd0 align 2**16
         filesz 0x00000120 memsz 0x00000328 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .text           00007c00  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data           00000120  2007c000  00007cd0  0001c000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .bss            00000208  2007c120  00007df0  0001c120  2**3  ALLOC
  3 .ARM.attributes 00000029  00000000  00000000  0001c120  2**0  CONTENTS, READONLY
  4 .comment        0000007e  00000000  00000000  0001c149  2**0  CONTENTS, READONLY
  5 .ARM.extab      00000018  00007c00  00007c00  00017c00  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.exidx      000000b8  00007c18  00007c18  00017c18  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info     00092724  00000000  00000000  0001c1c7  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev   000052c6  00000000  00000000  000ae8eb  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges  00000bc0  00000000  00000000  000b3bb1  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges   00000b10  00000000  00000000  000b4771  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line     00006888  00000000  00000000  000b5281  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_str      0002be2b  00000000  00000000  000bbb09  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame    00003d70  00000000  00000000  000e7934  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
2007c000 l    d  .data	00000000 .data
2007c120 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00007c00 l    d  .ARM.extab	00000000 .ARM.extab
00007c18 l    d  .ARM.exidx	00000000 .ARM.exidx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00006e18 l     O .text	00000004 config::kSystemClockRateMhz
00006e1c l     O .text	00000004 config::kRtosFrequency
00002a30 l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002a48 l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002eb6 l     F .text	00000018 float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002ed0 l     F .text	00000028 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007a0c l     O .text	0000006b sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007988 l     O .text	00000084 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00007a78 l     O .text	0000009b sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007b14 l     O .text	0000003d sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__
00003d34 l     F .text	000001b0 sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
2007c09c l     O .data	00000004 (anonymous namespace)::system_controller
2007c2f4 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
2007c0a0 l     O .data	0000000c (anonymous namespace)::uart0
2007c0ac l     O .data	0000000c (anonymous namespace)::system_timer
000041ec l     F .text	00000024 (anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)
00004210 l     F .text	00000034 (anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)
00000000 l     O .text	000000cc kInterruptVectorTable
000078f4 l     O .text	0000000c sjsu::InitializePlatform()::file
00007b54 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
0000459a l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000474a l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004768 l     F .text	000001e8 __static_initialization_and_destruction_0(int, int)
00004950 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 crtstuff.c
000000e0 l     F .text	00000000 __do_global_dtors_aux
2007c120 l       .bss	00000001 completed.8654
00000104 l     F .text	00000000 frame_dummy
2007c124 l       .bss	00000018 object.8659
00007be0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 LabGPIO.cpp
000004ac l     F .text	00000048 __static_initialization_and_destruction_0(int, int)
000004f4 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh
00000000 l    df *ABS*	00000000 main.cpp
00000504 l     F .text	0000002c NVIC_EnableIRQ
00000530 l     F .text	00000030 NVIC_DisableIRQ
00000560 l     F .text	00000050 NVIC_SetPriority
000065f8 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00000f48 l     F .text	00000068 __static_initialization_and_destruction_0(int, int)
00000fb0 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00000fc0 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 exceptions.cpp
000012fc l       .text	00000000 handler2_address_const
00001378 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000013bc l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
2007c258 l     O .bss	00000064 pxReadyTasksLists
2007c2bc l     O .bss	00000004 uxTopReadyPriority
2007c2c0 l     O .bss	00000004 xYieldPending
2007c2c4 l     O .bss	00000004 uxSchedulerSuspended
2007c2c8 l     O .bss	00000004 ulTaskSwitchedInTime
2007c2cc l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
000015ac l     F .text	0000001a _out_null(char, void*, unsigned int, unsigned int)
000015c6 l     F .text	0000002c _strlen(char const*)
000015f2 l     F .text	00000026 _is_digit(char)
00001618 l     F .text	00000048 _atoi(char const**)
00001660 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000018a2 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00001972 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006de0 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00001a54 l     F .text	0000041a _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00001e70 l     F .text	000008ca _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
000027a8 l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
2007c2d0 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00004980 l       .text	00000000 pxCurrentTCBConst2
000049d0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_fixsfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
0000543c l     F .text	00000012 selfrel_offset31
00005450 l     F .text	00000060 search_EIT_table
000054b0 l     F .text	00000028 __gnu_unwind_get_pr_addr
000054d8 l     F .text	000000a8 get_eit_entry
00005580 l     F .text	00000058 restore_non_core_regs
000055d8 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000055e4 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000055e8 l     F .text	00000002 _Unwind_DebugHook
000055ec l     F .text	0000003e unwind_phase2
0000562c l     F .text	000000ca unwind_phase2_forced
00005804 l     F .text	00000018 _Unwind_GetGR
00005848 l     F .text	0000001a _Unwind_SetGR
000058d8 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005fe8 l     F .text	00000036 next_unwind_byte
00006020 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000603c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crti.o
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crtn.o
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
2007c0c0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00001024  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005fa0 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000056fc g     F .text	00000060 .hidden __gnu_Unwind_RaiseException
00002b74  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00000268 g     F .text	000000f0 sjsu::LabGPIO::Set(sjsu::Gpio::State) const
000011ec  w    F .text	00000068 sjsu::InitializeBssSection()
00001490 g     F .text	0000000e _getpid
00000b40  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000078d4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Tx
00002bbc  w    F .text	00000020 sjsu::cortex::SystemTimer::GetCount()
0000291e  w    F .text	0000002a units::literals::operator"" _Hz(unsigned long long)
00000ab0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00002884  w    F .text	00000010 std::numeric_limits<float>::epsilon()
2007c00c  w    O .data	00000004 sjsu::newlib::in
2007c310  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00002af0  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006444 g     F .text	00000024 _kill_r
000000e0 g       .text	00000000 bss_section_table_end
0000273c g     F .text	00000044 printf
00003900  w    F .text	00000016 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
0000342c  w    F .text	00000220 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00003340  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00004438  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004e8c g     F .text	00000136 .hidden __divsf3
00002e7c  w    F .text	0000003a sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)
00004308  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00000874  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00003974  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
000010b0  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
2007c000 g       *ABS*	00000000 __base_RAM2
00005e5c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005f7c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00003374  w    F .text	00000048 sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const
00007cd0 g       .ARM.exidx	00000000 __exidx_end
000050b0 g     F .text	0000004c .hidden __fixsfsi
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00007884  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00004244 g     F .text	00000014 ThreadRuntimeCounter
00005bac g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
2007c018  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00000a58  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
2007c254 g     O .bss	00000004 pxCurrentTCB
00006330 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005f7c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
2007c324 g     O .bss	00000004 errno
00007818  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00007cd0 g       .ARM.exidx	00000000 _etext
00003abc  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00004376  w    F .text	00000030 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005fc4 g     F .text	00000022 .hidden _Unwind_Backtrace
0000779c  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
2007c13c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004b14 g     F .text	00000160 .hidden __aeabi_fadd
000077a8  w    O .text	00000002 sjsu::lpc17xx::SystemController::CpuClock::kDivider
2007c2d8  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004b10 g     F .text	00000164 .hidden __subsf3
000078a4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005e3c g     F .text	00000018 .hidden __restore_core_regs
00005e7c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000046f2  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000077a0  w    O .text	00000001 sjsu::lpc17xx::SystemController::Peripherals::kUart0
00007900  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00002a9c  w    F .text	0000001c sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00007888  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
000056f8 g     F .text	00000004 .hidden _Unwind_GetCFA
000063bc g     F .text	00000016 memcpy
00003664  w    F .text	0000005c sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const
000049ee g     F .text	00000016 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000581c g     F .text	0000002a .hidden _Unwind_VRS_Set
0000509c g     F .text	00000012 .hidden __aeabi_fcmpgt
000043ca  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)
0000513c g     F .text	00000000 .hidden __aeabi_uldivmod
000038b8  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
000014e8 g     F .text	00000048 puts
00000628  w    F .text	00000014 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
000039e8  w    F .text	0000002e sjsu::lpc17xx::Pin::PinRegisterLookup() const
00002cba  w    F .text	0000004e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003b6c  w    F .text	000000cc sjsu::lpc40xx::uart::FindClosestFractional(float)
000044a8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00002f2a  w    F .text	00000020 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
2007c318  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart0
2007c01c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000063e2 g     F .text	00000050 _raise_r
00004c7c g     F .text	0000001c .hidden __aeabi_i2f
10008000 g       *ABS*	00000000 __top_RAM
00002ef8  w    F .text	00000032 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004990 g     F .text	00000046 xPortPendSVHandler
00004fcc g     F .text	00000066 .hidden __lesf2
10000000 g       *ABS*	00000000 __base_RamLoc64
000078e4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Tx
00000bdc  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const
00003a80  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00006468 g     F .text	00000004 _getpid_r
00007c00 g       .text	00000000 __symbol_table_end
00000000 g       *ABS*	00000000 __base_MFlash512
00005864 g     F .text	00000072 .hidden __gnu_Unwind_Backtrace
000043f0  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
20083fe0 g       .bss	00000000 StackTop
0000516c g     F .text	000002ce .hidden __udivmoddi4
000000d8 g       .text	00000000 bss_section_table
0000788c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
2007c2f8  w    O .bss	00000004 guard variable for sjsu::lpc17xx::SystemController::system_controller
00002d66  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000063c  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005e6c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
20084000 g       *ABS*	00000000 __top_RAM2
00005bb8 g     F .text	00000282 .hidden _Unwind_VRS_Pop
00005bb4  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
00002c10  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
2007c308  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000ba4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)53>()
00005fc4 g     F .text	00000022 .hidden ___Unwind_Backtrace
000005e6  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
000040d4  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000106c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000078bc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
000064a0  w    O .text	00000024 vtable for sjsu::Gpio
00004fd4 g     F .text	0000005e .hidden __nesf2
2007c000 g       *ABS*	00000000 __user_heap_base
2007c2d4  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00007c18 g       .ARM.extab	00000000 __exidx_start
00006374 g     F .text	00000048 __libc_init_array
00003cb4  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005f34 g     F .text	00000022 .hidden ___Unwind_RaiseException
00002d96  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00006364 g     F .text	0000000e abort
00005f58 g     F .text	00000022 .hidden ___Unwind_Resume
00002d7e  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
2007c04c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000078ec  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Rx
2007c140  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00000ac8  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00007bd4 g     F .text	00000000 _init
000000e0 g       .text	00000000 section_table_end
00003ce0  w    F .text	00000054 sjsu::lpc40xx::uart::IsDecmial(float)
000049d8 g     F .text	00000016 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00007890  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00004662  w    F .text	0000003a unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
0000407e  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00004a5c g     F .text	0000000a std::terminate()
000028f4  w    F .text	0000002a units::detail::abs(float)
00004a68 g     F .text	0000009e .hidden __aeabi_d2f
00005e84 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00000b74  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004b10 g     F .text	00000164 .hidden __aeabi_fsub
00003fa4  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00004416  w    F .text	00000022 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
2007c314  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000012e4 g     F .text	00000024 ArmHardFaultHandler
000000cc g       .text	00000000 section_table_start
00002d08  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
2007c328 g       .bss	00000000 _ebss
000064d0  w    O .text	00000008 std::integral_constant<long long, 5ll>::value
000078cc  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Rx
00004030  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00002986  w    F .text	000000aa bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000358 g     F .text	00000088 sjsu::LabGPIO::Toggle() const
00005088 g     F .text	00000012 .hidden __aeabi_fcmpge
00002bdc  w    F .text	00000012 sjsu::cortex::SystemTimer::Initialize() const
00002966  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004ca8 g     F .text	0000007c .hidden __floatdisf
2007c074  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart2
00001268 g     F .text	0000007c GetRegistersFromStack
00004fc4 g     F .text	0000006e .hidden __gtsf2
2007c2fc  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
00005074 g     F .text	00000012 .hidden __aeabi_fcmple
0000787c  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
00005e54 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00004258  w    F .text	000000b0 sjsu::InitializePlatform()
00000dec  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00007b74 g     O .text	00000020 __sf_fake_stderr
000007e4  w    F .text	00000016 sjsu::cortex::InterruptController::IrqToIndex(int)
00004a4c g     F .text	00000010 std::get_terminate()
00007934  w    O .text	00000018 vtable for sjsu::lpc17xx::Pin
2007c328 g       .bss	00000000 end
000077b8  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005f58 g     F .text	00000022 .hidden _Unwind_Resume
00000712  w    F .text	0000000c sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000057cc g     F .text	0000000c .hidden _Unwind_DeleteException
000065e8  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000057c8 g     F .text	00000002 .hidden _Unwind_Complete
00000000 g       *ABS*	00000000 __base_Flash
0000153c g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00000bf4  w    F .text	00000080 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
00007970  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
0000278c g     F .text	0000001c trace_write
2007c320  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart3
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
0000046c g     F .text	00000014 sjsu::LabGPIO::GetPin() const
10008000 g       *ABS*	00000000 __top_RamLoc64
2007c30c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00000efa  w    F .text	0000004c bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000032c4  w    F .text	0000001c sjsu::lpc17xx::SystemController::GetSystemFrequency() const
2007c120 g       .bss	00000000 _bss
000077a4  w    O .text	00000002 sjsu::lpc17xx::SystemController::Oscillator::kSelect
00002780 g     F .text	0000000c trace_initialize
00003918  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
00004a3c g     F .text	00000006 __cxa_pure_virtual
00004c7c g     F .text	0000001c .hidden __floatsisf
00003244  w    F .text	0000007e sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00007894  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
2007c2f0  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00006040 g     F .text	000002c2 .hidden __gnu_unwind_execute
0000089c  w    F .text	00000020 sjsu::Gpio::Gpio(sjsu::Gpio const&)
0000364c  w    F .text	00000016 auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)
2007c250  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00005e64 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000038a2  w    F .text	00000016 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
0000460a  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00000a74  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000064c8  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
000050b0 g     F .text	0000004c .hidden __aeabi_f2iz
00004fd4 g     F .text	0000005e .hidden __eqsf2
2007c150  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000bc0  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
000013cc g     F .text	000000c4 vTaskSwitchContext
000036c0  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00002b40  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000064d8  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00002874  w    F .text	00000010 std::numeric_limits<float>::min()
0000330c  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00005770 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00002b58  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00002894  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00004e8c g     F .text	00000136 .hidden __aeabi_fdiv
0000789c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
2007c000 g       *ABS*	00000000 __base_RamPeriph32
00005e74 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00002db8  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007878  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
000039a0  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00003844  w    F .text	00000048 sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const
00004c98 g     F .text	0000008c .hidden __floatundisf
2007c2e4  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00005f34 g     F .text	00000022 .hidden _Unwind_RaiseException
00006360  w    F .text	00000002 .hidden __aeabi_ldiv0
0000450a  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000008bc  w    F .text	00000040 sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)
2007c024  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00001254  w    F .text	00000014 sjsu::SystemInitialize()
00004c74 g     F .text	00000024 .hidden __aeabi_ui2f
000000cc g       .text	00000000 data_section_table
2007c148  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00007848  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
2007c304  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00004a04 g     F .text	0000001c sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00007b94 g     O .text	00000020 __sf_fake_stdin
00004fd4 g     F .text	0000005e .hidden __cmpsf2
00000ca8 g     F .text	00000144 testRun(sjsu::LabGPIO, unsigned char)
000063d2 g     F .text	00000010 memset
000008fc g     F .text	00000130 main
000028d8  w    F .text	0000001c sjsu::cortex::DwtCounter::GetCount()
00000720  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00003744  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00004ca8 g     F .text	0000007c .hidden __aeabi_l2f
00000e20  w    F .text	00000012 std::chrono::duration_values<long long>::max()
000078c4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Tx
2007c000 g       *ABS*	00000000 heap
00004fcc g     F .text	00000066 .hidden __ltsf2
00002f4c  w    F .text	000001c4 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00000820  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00007800  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
0000791c  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004a68 g     F .text	0000009e .hidden __truncdfsf2
00007bf4 g       .text	00000000 __init_array_end
00004960 g     F .text	00000026 vPortSVCHandler
00000a2c g     F .text	00000014 GpioInterruptCallback()
2007c010  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004c98 g     F .text	0000008c .hidden __aeabi_ul2f
00002a64  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000503c g     F .text	00000010 .hidden __aeabi_cfcmple
0000575c g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00000a94  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004d24 g     F .text	00000168 .hidden __mulsf3
000033bc  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000057b4 g     F .text	00000012 .hidden __gnu_Unwind_Resume_or_Rethrow
2007c300  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
2007c008  w    O .data	00000004 sjsu::newlib::out
20084000 g       *ABS*	00000000 heap_end
00006e10  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
000077ac  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kMultiplier
0000456e  w    F .text	0000002c bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00007bf4 g     F .text	00000000 _fini
00005e3c g     F .text	00000018 .hidden restore_core_regs
00003810  w    F .text	00000034 sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const
00005f20 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
000078b4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000d8 g       .text	00000000 data_section_table_end
000005c6  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)
00002bf0  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00000e32  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00004fc4 g     F .text	0000006e .hidden __gesf2
2007c038  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00000178 g     F .text	000000f0 sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const
000041c8  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004b08 g     F .text	0000016c .hidden __aeabi_frsub
00006358 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
2007c0bc g     O .data	00000004 _impure_ptr
0000504c g     F .text	00000012 .hidden __aeabi_fcmpeq
00002ca4  w    F .text	00000016 units::linear_scale<float>::operator()() const
00004d24 g     F .text	00000168 .hidden __aeabi_fmul
0000794c  w    O .text	00000024 vtable for sjsu::lpc17xx::SystemController
00002ab8  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
000044cc  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007be0 g       .text	00000000 __preinit_array_end
000045b2  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)
00003110  w    F .text	00000134 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00000a40  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
00003af0  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00005034 g     F .text	00000018 .hidden __aeabi_cfrcmple
000078dc  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Rx
2007c088  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart3
2007c000 g       .data	00000000 _data
0000447c  w    F .text	0000002c bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00002d28  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
0000633c g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000003e0 g     F .text	0000008c sjsu::LabGPIO::Read() const
00001308 g     F .text	00000070 ArmResetHandler
00005060 g     F .text	00000012 .hidden __aeabi_fcmplt
000057d8 g     F .text	0000002a .hidden _Unwind_VRS_Get
000007fc  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
2007c0b8 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005f0c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000647c g     O .text	00000024 vtable for sjsu::LabGPIO
000077b4  w    O .text	00000004 sjsu::lpc17xx::SystemController::kDefaultIRCFrequency
0000064c  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000014b8 g     F .text	00000030 _write
00006304 g     F .text	0000002a .hidden __gnu_unwind_frame
00005fa0 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
2007c120 g       .data	00000000 _edata
2007c2ec  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
000041a4  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000037c8  w    F .text	00000048 sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const
00004346  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000c74  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
000050fc g     F .text	0000003e .hidden __aeabi_f2uiz
0000075c  w    F .text	00000014 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20084000 g       *ABS*	00000000 __top_RamPeriph32
000033f4  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000089c  w    F .text	00000020 sjsu::Gpio::Gpio(sjsu::Gpio const&)
10000000 g       *ABS*	00000000 __base_RAM
000032e0  w    F .text	0000002c sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00004c74 g     F .text	00000024 .hidden __floatunsisf
000077b0  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kPreDivider
00004a42 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005ec8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00007860  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
0000149e g     F .text	00000018 _kill
00001154  w    F .text	00000098 sjsu::InitializeDataSection()
0000503c g     F .text	00000010 .hidden __aeabi_cfcmpeq
00000608  w    F .text	00000020 sjsu::DefaultUptime()
00007bb4 g     O .text	00000020 __sf_fake_stdout
000005b0  w    F .text	00000016 std::numeric_limits<long long>::max()
00007be0 g       .text	00000000 __init_array_start
00006360  w    F .text	00000002 .hidden __aeabi_idiv0
000043a6  w    F .text	00000024 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000050fc g     F .text	0000003e .hidden __fixunssfsi
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
000008bc  w    F .text	00000040 sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)
000077d0  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000498 g     F .text	00000012 sjsu::LabGPIO::DetachInterrupt() const
00001530 g     F .text	0000000c _exit
000078ac  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
000077e8  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
2007c060  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart0
00002948  w    F .text	0000001e units::linear_scale<float>::linear_scale<>(float const&)
00003c38  w    F .text	0000003e sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000006f8  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
0000388c  w    F .text	00000016 sjsu::Pin::GetPort() const
0000646c g     F .text	00000010 strlen
00003a18  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
2007c000  w    O .data	00000004 sjsu::Uptime
00005bb0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00000ea4  w    F .text	00000056 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000b8c  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)53>()
00004a20 g     F .text	0000001c sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
2007c2e0  w    O .bss	00000004 sjsu::lpc17xx::SystemController::system_controller
00000fe8  w    F .text	0000003c sjsu::build::Stringify(sjsu::build::Target)
00006350 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00007c00 g       .text	00000000 __symbol_table_start
00003c76  w    F .text	0000003e sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
2007c004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
0000469c  w    F .text	00000056 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00003a4c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00007be0 g       .text	00000000 __preinit_array_start
00007830  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000e5a  w    F .text	0000004a bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000770  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
2007c020  w    O .data	00000004 sjsu::lpc17xx::SystemController::speed_in_hertz
00004b14 g     F .text	00000160 .hidden __addsf3
0000445a  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
2007c31c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart2
00004548  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
2007c2e8  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00000480 g     F .text	00000018 sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
00003ee4  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
2007c014  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00006434 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	e0 3f 08 20 09 13 00 00 b9 2a 00 00 e5 12 00 00     .?. .....*......
      10:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 00 00 00 00     .*...*...*......
	...
      2c:	b9 2a 00 00 b9 2a 00 00 00 00 00 00 b9 2a 00 00     .*...*.......*..
      3c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      4c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      5c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      6c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      7c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      8c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      9c:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      ac:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..
      bc:	b9 2a 00 00 b9 2a 00 00 b9 2a 00 00 b9 2a 00 00     .*...*...*...*..

000000cc <data_section_table>:
      cc:	00007cd0 	.word	0x00007cd0
      d0:	2007c000 	.word	0x2007c000
      d4:	00000120 	.word	0x00000120

000000d8 <bss_section_table>:
      d8:	2007c120 	.word	0x2007c120
      dc:	00000208 	.word	0x00000208

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
      e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
      ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	2007c120 	.word	0x2007c120
      fc:	00000000 	.word	0x00000000
     100:	00007c18 	.word	0x00007c18

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
     106:	4b03      	ldr	r3, [pc, #12]	; (114 <frame_dummy+0x10>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4903      	ldr	r1, [pc, #12]	; (118 <frame_dummy+0x14>)
     10c:	4803      	ldr	r0, [pc, #12]	; (11c <frame_dummy+0x18>)
     10e:	f3af 8000 	nop.w
     112:	bd08      	pop	{r3, pc}
     114:	00000000 	.word	0x00000000
     118:	2007c124 	.word	0x2007c124
     11c:	00007c18 	.word	0x00007c18

00000120 <sjsu::Gpio::Gpio()>:
#include "utility/status.hpp"

namespace sjsu
{
/// An abstract interface for General Purpose I/O
class Gpio
     120:	b480      	push	{r7}
     122:	b083      	sub	sp, #12
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
     128:	4a04      	ldr	r2, [pc, #16]	; (13c <sjsu::Gpio::Gpio()+0x1c>)
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	601a      	str	r2, [r3, #0]
     12e:	687b      	ldr	r3, [r7, #4]
     130:	4618      	mov	r0, r3
     132:	370c      	adds	r7, #12
     134:	46bd      	mov	sp, r7
     136:	bc80      	pop	{r7}
     138:	4770      	bx	lr
     13a:	bf00      	nop
     13c:	000064a8 	.word	0x000064a8

00000140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "L0_Platform/lpc17xx/LPC17xx.h"

#include <cstdint>
using namespace sjsu;

LabGPIO::LabGPIO(uint8_t port, uint8_t pin)
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
     148:	460b      	mov	r3, r1
     14a:	70fb      	strb	r3, [r7, #3]
     14c:	4613      	mov	r3, r2
     14e:	70bb      	strb	r3, [r7, #2]
     150:	687b      	ldr	r3, [r7, #4]
     152:	4618      	mov	r0, r3
     154:	f7ff ffe4 	bl	120 <sjsu::Gpio::Gpio()>
     158:	4a06      	ldr	r2, [pc, #24]	; (174 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)+0x34>)
     15a:	687b      	ldr	r3, [r7, #4]
     15c:	601a      	str	r2, [r3, #0]
{
    PIN = pin;
     15e:	687b      	ldr	r3, [r7, #4]
     160:	78ba      	ldrb	r2, [r7, #2]
     162:	711a      	strb	r2, [r3, #4]
    PORT = port;
     164:	687b      	ldr	r3, [r7, #4]
     166:	78fa      	ldrb	r2, [r7, #3]
     168:	715a      	strb	r2, [r3, #5]
}
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	4618      	mov	r0, r3
     16e:	3708      	adds	r7, #8
     170:	46bd      	mov	sp, r7
     172:	bd80      	pop	{r7, pc}
     174:	00006484 	.word	0x00006484

00000178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>:

void LabGPIO::SetDirection(Direction direction) const
{
     178:	b480      	push	{r7}
     17a:	b083      	sub	sp, #12
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	460b      	mov	r3, r1
     182:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     184:	687b      	ldr	r3, [r7, #4]
     186:	795b      	ldrb	r3, [r3, #5]
     188:	b2db      	uxtb	r3, r3
     18a:	2b01      	cmp	r3, #1
     18c:	d023      	beq.n	1d6 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x5e>
     18e:	2b02      	cmp	r3, #2
     190:	d040      	beq.n	214 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x9c>
     192:	2b00      	cmp	r3, #0
     194:	d000      	beq.n	198 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     196:	e05c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     198:	78fb      	ldrb	r3, [r7, #3]
     19a:	2b00      	cmp	r3, #0
     19c:	d10d      	bne.n	1ba <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x42>
                lpc17xx::LPC_GPIO0->FIODIR &= ~(1 << PIN);
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	791b      	ldrb	r3, [r3, #4]
     1a2:	b2db      	uxtb	r3, r3
     1a4:	461a      	mov	r2, r3
     1a6:	2301      	movs	r3, #1
     1a8:	4093      	lsls	r3, r2
     1aa:	43da      	mvns	r2, r3
     1ac:	4b2b      	ldr	r3, [pc, #172]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	4611      	mov	r1, r2
     1b2:	4a2a      	ldr	r2, [pc, #168]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1b4:	400b      	ands	r3, r1
     1b6:	6013      	str	r3, [r2, #0]
            break;
     1b8:	e04b      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO0->FIODIR |= (1 << PIN);
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	791b      	ldrb	r3, [r3, #4]
     1be:	b2db      	uxtb	r3, r3
     1c0:	461a      	mov	r2, r3
     1c2:	2301      	movs	r3, #1
     1c4:	fa03 f202 	lsl.w	r2, r3, r2
     1c8:	4b24      	ldr	r3, [pc, #144]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	4611      	mov	r1, r2
     1ce:	4a23      	ldr	r2, [pc, #140]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1d0:	430b      	orrs	r3, r1
     1d2:	6013      	str	r3, [r2, #0]
            break;
     1d4:	e03d      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     1d6:	78fb      	ldrb	r3, [r7, #3]
     1d8:	2b00      	cmp	r3, #0
     1da:	d10d      	bne.n	1f8 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x80>
                lpc17xx::LPC_GPIO1->FIODIR &= ~(1 << PIN);
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	791b      	ldrb	r3, [r3, #4]
     1e0:	b2db      	uxtb	r3, r3
     1e2:	461a      	mov	r2, r3
     1e4:	2301      	movs	r3, #1
     1e6:	4093      	lsls	r3, r2
     1e8:	43da      	mvns	r2, r3
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	4611      	mov	r1, r2
     1f0:	4a1b      	ldr	r2, [pc, #108]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1f2:	400b      	ands	r3, r1
     1f4:	6013      	str	r3, [r2, #0]
            break;
     1f6:	e02c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO1->FIODIR |= (1 << PIN);
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	791b      	ldrb	r3, [r3, #4]
     1fc:	b2db      	uxtb	r3, r3
     1fe:	461a      	mov	r2, r3
     200:	2301      	movs	r3, #1
     202:	fa03 f202 	lsl.w	r2, r3, r2
     206:	4b16      	ldr	r3, [pc, #88]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     208:	681b      	ldr	r3, [r3, #0]
     20a:	4611      	mov	r1, r2
     20c:	4a14      	ldr	r2, [pc, #80]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     20e:	430b      	orrs	r3, r1
     210:	6013      	str	r3, [r2, #0]
            break;
     212:	e01e      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     214:	78fb      	ldrb	r3, [r7, #3]
     216:	2b00      	cmp	r3, #0
     218:	d10d      	bne.n	236 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xbe>
                lpc17xx::LPC_GPIO2->FIODIR &= ~(1 << PIN);
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	791b      	ldrb	r3, [r3, #4]
     21e:	b2db      	uxtb	r3, r3
     220:	461a      	mov	r2, r3
     222:	2301      	movs	r3, #1
     224:	4093      	lsls	r3, r2
     226:	43da      	mvns	r2, r3
     228:	4b0e      	ldr	r3, [pc, #56]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	4611      	mov	r1, r2
     22e:	4a0d      	ldr	r2, [pc, #52]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     230:	400b      	ands	r3, r1
     232:	6013      	str	r3, [r2, #0]
            break;
     234:	e00c      	b.n	250 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xd8>
                lpc17xx::LPC_GPIO2->FIODIR |= (1 << PIN);
     236:	687b      	ldr	r3, [r7, #4]
     238:	791b      	ldrb	r3, [r3, #4]
     23a:	b2db      	uxtb	r3, r3
     23c:	461a      	mov	r2, r3
     23e:	2301      	movs	r3, #1
     240:	fa03 f202 	lsl.w	r2, r3, r2
     244:	4b07      	ldr	r3, [pc, #28]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     246:	681b      	ldr	r3, [r3, #0]
     248:	4611      	mov	r1, r2
     24a:	4a06      	ldr	r2, [pc, #24]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     24c:	430b      	orrs	r3, r1
     24e:	6013      	str	r3, [r2, #0]
            break;
     250:	bf00      	nop
        }


    }
}
     252:	bf00      	nop
     254:	370c      	adds	r7, #12
     256:	46bd      	mov	sp, r7
     258:	bc80      	pop	{r7}
     25a:	4770      	bx	lr
     25c:	2009c000 	.word	0x2009c000
     260:	2009c020 	.word	0x2009c020
     264:	2009c040 	.word	0x2009c040

00000268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>:

void LabGPIO::Set(State output) const
{
     268:	b480      	push	{r7}
     26a:	b083      	sub	sp, #12
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
     270:	460b      	mov	r3, r1
     272:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     274:	687b      	ldr	r3, [r7, #4]
     276:	795b      	ldrb	r3, [r3, #5]
     278:	b2db      	uxtb	r3, r3
     27a:	2b01      	cmp	r3, #1
     27c:	d023      	beq.n	2c6 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x5e>
     27e:	2b02      	cmp	r3, #2
     280:	d040      	beq.n	304 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x9c>
     282:	2b00      	cmp	r3, #0
     284:	d000      	beq.n	288 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     286:	e05c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     288:	78fb      	ldrb	r3, [r7, #3]
     28a:	2b00      	cmp	r3, #0
     28c:	d10d      	bne.n	2aa <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x42>
                lpc17xx::LPC_GPIO0->FIOPIN &= ~(1 << PIN);
     28e:	687b      	ldr	r3, [r7, #4]
     290:	791b      	ldrb	r3, [r3, #4]
     292:	b2db      	uxtb	r3, r3
     294:	461a      	mov	r2, r3
     296:	2301      	movs	r3, #1
     298:	4093      	lsls	r3, r2
     29a:	43da      	mvns	r2, r3
     29c:	4b2b      	ldr	r3, [pc, #172]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     29e:	695b      	ldr	r3, [r3, #20]
     2a0:	4611      	mov	r1, r2
     2a2:	4a2a      	ldr	r2, [pc, #168]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2a4:	400b      	ands	r3, r1
     2a6:	6153      	str	r3, [r2, #20]
            break;
     2a8:	e04b      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO0->FIOPIN |= (1 << PIN);
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	791b      	ldrb	r3, [r3, #4]
     2ae:	b2db      	uxtb	r3, r3
     2b0:	461a      	mov	r2, r3
     2b2:	2301      	movs	r3, #1
     2b4:	fa03 f202 	lsl.w	r2, r3, r2
     2b8:	4b24      	ldr	r3, [pc, #144]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2ba:	695b      	ldr	r3, [r3, #20]
     2bc:	4611      	mov	r1, r2
     2be:	4a23      	ldr	r2, [pc, #140]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2c0:	430b      	orrs	r3, r1
     2c2:	6153      	str	r3, [r2, #20]
            break;
     2c4:	e03d      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     2c6:	78fb      	ldrb	r3, [r7, #3]
     2c8:	2b00      	cmp	r3, #0
     2ca:	d10d      	bne.n	2e8 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x80>
                lpc17xx::LPC_GPIO1->FIOPIN &= ~(1 << PIN);
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	791b      	ldrb	r3, [r3, #4]
     2d0:	b2db      	uxtb	r3, r3
     2d2:	461a      	mov	r2, r3
     2d4:	2301      	movs	r3, #1
     2d6:	4093      	lsls	r3, r2
     2d8:	43da      	mvns	r2, r3
     2da:	4b1d      	ldr	r3, [pc, #116]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2dc:	695b      	ldr	r3, [r3, #20]
     2de:	4611      	mov	r1, r2
     2e0:	4a1b      	ldr	r2, [pc, #108]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2e2:	400b      	ands	r3, r1
     2e4:	6153      	str	r3, [r2, #20]
            break;
     2e6:	e02c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO1->FIOPIN |= (1 << PIN);;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	791b      	ldrb	r3, [r3, #4]
     2ec:	b2db      	uxtb	r3, r3
     2ee:	461a      	mov	r2, r3
     2f0:	2301      	movs	r3, #1
     2f2:	fa03 f202 	lsl.w	r2, r3, r2
     2f6:	4b16      	ldr	r3, [pc, #88]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2f8:	695b      	ldr	r3, [r3, #20]
     2fa:	4611      	mov	r1, r2
     2fc:	4a14      	ldr	r2, [pc, #80]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2fe:	430b      	orrs	r3, r1
     300:	6153      	str	r3, [r2, #20]
            break;
     302:	e01e      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     304:	78fb      	ldrb	r3, [r7, #3]
     306:	2b00      	cmp	r3, #0
     308:	d10d      	bne.n	326 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xbe>
                lpc17xx::LPC_GPIO2->FIOPIN &= ~(1 << PIN);
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	791b      	ldrb	r3, [r3, #4]
     30e:	b2db      	uxtb	r3, r3
     310:	461a      	mov	r2, r3
     312:	2301      	movs	r3, #1
     314:	4093      	lsls	r3, r2
     316:	43da      	mvns	r2, r3
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     31a:	695b      	ldr	r3, [r3, #20]
     31c:	4611      	mov	r1, r2
     31e:	4a0d      	ldr	r2, [pc, #52]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     320:	400b      	ands	r3, r1
     322:	6153      	str	r3, [r2, #20]
            break;
     324:	e00c      	b.n	340 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xd8>
                lpc17xx::LPC_GPIO2->FIOPIN |= (1 << PIN);
     326:	687b      	ldr	r3, [r7, #4]
     328:	791b      	ldrb	r3, [r3, #4]
     32a:	b2db      	uxtb	r3, r3
     32c:	461a      	mov	r2, r3
     32e:	2301      	movs	r3, #1
     330:	fa03 f202 	lsl.w	r2, r3, r2
     334:	4b07      	ldr	r3, [pc, #28]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     336:	695b      	ldr	r3, [r3, #20]
     338:	4611      	mov	r1, r2
     33a:	4a06      	ldr	r2, [pc, #24]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     33c:	430b      	orrs	r3, r1
     33e:	6153      	str	r3, [r2, #20]
            break;
     340:	bf00      	nop
        }
    }
}
     342:	bf00      	nop
     344:	370c      	adds	r7, #12
     346:	46bd      	mov	sp, r7
     348:	bc80      	pop	{r7}
     34a:	4770      	bx	lr
     34c:	2009c000 	.word	0x2009c000
     350:	2009c020 	.word	0x2009c020
     354:	2009c040 	.word	0x2009c040

00000358 <sjsu::LabGPIO::Toggle() const>:

void LabGPIO::Toggle() const
{
     358:	b480      	push	{r7}
     35a:	b083      	sub	sp, #12
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
    switch(PORT)
     360:	687b      	ldr	r3, [r7, #4]
     362:	795b      	ldrb	r3, [r3, #5]
     364:	b2db      	uxtb	r3, r3
     366:	2b01      	cmp	r3, #1
     368:	d012      	beq.n	390 <sjsu::LabGPIO::Toggle() const+0x38>
     36a:	2b02      	cmp	r3, #2
     36c:	d01e      	beq.n	3ac <sjsu::LabGPIO::Toggle() const+0x54>
     36e:	2b00      	cmp	r3, #0
     370:	d000      	beq.n	374 <sjsu::LabGPIO::Toggle() const+0x1c>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     372:	e029      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO0->FIOPIN ^= (1 << PIN);
     374:	687b      	ldr	r3, [r7, #4]
     376:	791b      	ldrb	r3, [r3, #4]
     378:	b2db      	uxtb	r3, r3
     37a:	461a      	mov	r2, r3
     37c:	2301      	movs	r3, #1
     37e:	fa03 f202 	lsl.w	r2, r3, r2
     382:	4b14      	ldr	r3, [pc, #80]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     384:	695b      	ldr	r3, [r3, #20]
     386:	4611      	mov	r1, r2
     388:	4a12      	ldr	r2, [pc, #72]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     38a:	404b      	eors	r3, r1
     38c:	6153      	str	r3, [r2, #20]
            break;
     38e:	e01b      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO1->FIOPIN ^= (1 << PIN);
     390:	687b      	ldr	r3, [r7, #4]
     392:	791b      	ldrb	r3, [r3, #4]
     394:	b2db      	uxtb	r3, r3
     396:	461a      	mov	r2, r3
     398:	2301      	movs	r3, #1
     39a:	fa03 f202 	lsl.w	r2, r3, r2
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a0:	695b      	ldr	r3, [r3, #20]
     3a2:	4611      	mov	r1, r2
     3a4:	4a0c      	ldr	r2, [pc, #48]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a6:	404b      	eors	r3, r1
     3a8:	6153      	str	r3, [r2, #20]
            break;
     3aa:	e00d      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO2->FIOPIN ^= (1 << PIN);
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	791b      	ldrb	r3, [r3, #4]
     3b0:	b2db      	uxtb	r3, r3
     3b2:	461a      	mov	r2, r3
     3b4:	2301      	movs	r3, #1
     3b6:	fa03 f202 	lsl.w	r2, r3, r2
     3ba:	4b08      	ldr	r3, [pc, #32]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3bc:	695b      	ldr	r3, [r3, #20]
     3be:	4611      	mov	r1, r2
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3c2:	404b      	eors	r3, r1
     3c4:	6153      	str	r3, [r2, #20]
            break;
     3c6:	bf00      	nop
        }
    }
}
     3c8:	bf00      	nop
     3ca:	370c      	adds	r7, #12
     3cc:	46bd      	mov	sp, r7
     3ce:	bc80      	pop	{r7}
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	2009c000 	.word	0x2009c000
     3d8:	2009c020 	.word	0x2009c020
     3dc:	2009c040 	.word	0x2009c040

000003e0 <sjsu::LabGPIO::Read() const>:

bool LabGPIO::Read() const
{
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    switch(PORT)
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	795b      	ldrb	r3, [r3, #5]
     3ec:	b2db      	uxtb	r3, r3
     3ee:	2b01      	cmp	r3, #1
     3f0:	d014      	beq.n	41c <sjsu::LabGPIO::Read() const+0x3c>
     3f2:	2b02      	cmp	r3, #2
     3f4:	d021      	beq.n	43a <sjsu::LabGPIO::Read() const+0x5a>
     3f6:	2b00      	cmp	r3, #0
     3f8:	d001      	beq.n	3fe <sjsu::LabGPIO::Read() const+0x1e>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     3fa:	bf00      	nop
        }
    }

}
     3fc:	e02b      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            return((bool)(lpc17xx::LPC_GPIO0->FIOPIN & (1 << PIN)));
     3fe:	4b18      	ldr	r3, [pc, #96]	; (460 <sjsu::LabGPIO::Read() const+0x80>)
     400:	695b      	ldr	r3, [r3, #20]
     402:	687a      	ldr	r2, [r7, #4]
     404:	7912      	ldrb	r2, [r2, #4]
     406:	b2d2      	uxtb	r2, r2
     408:	4611      	mov	r1, r2
     40a:	2201      	movs	r2, #1
     40c:	408a      	lsls	r2, r1
     40e:	4013      	ands	r3, r2
     410:	2b00      	cmp	r3, #0
     412:	bf14      	ite	ne
     414:	2301      	movne	r3, #1
     416:	2300      	moveq	r3, #0
     418:	b2db      	uxtb	r3, r3
     41a:	e01c      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            return((bool)(lpc17xx::LPC_GPIO1->FIOPIN & (1 << PIN)));
     41c:	4b11      	ldr	r3, [pc, #68]	; (464 <sjsu::LabGPIO::Read() const+0x84>)
     41e:	695b      	ldr	r3, [r3, #20]
     420:	687a      	ldr	r2, [r7, #4]
     422:	7912      	ldrb	r2, [r2, #4]
     424:	b2d2      	uxtb	r2, r2
     426:	4611      	mov	r1, r2
     428:	2201      	movs	r2, #1
     42a:	408a      	lsls	r2, r1
     42c:	4013      	ands	r3, r2
     42e:	2b00      	cmp	r3, #0
     430:	bf14      	ite	ne
     432:	2301      	movne	r3, #1
     434:	2300      	moveq	r3, #0
     436:	b2db      	uxtb	r3, r3
     438:	e00d      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            return((bool)(lpc17xx::LPC_GPIO2->FIOPIN & (1 << PIN)));
     43a:	4b0b      	ldr	r3, [pc, #44]	; (468 <sjsu::LabGPIO::Read() const+0x88>)
     43c:	695b      	ldr	r3, [r3, #20]
     43e:	687a      	ldr	r2, [r7, #4]
     440:	7912      	ldrb	r2, [r2, #4]
     442:	b2d2      	uxtb	r2, r2
     444:	4611      	mov	r1, r2
     446:	2201      	movs	r2, #1
     448:	408a      	lsls	r2, r1
     44a:	4013      	ands	r3, r2
     44c:	2b00      	cmp	r3, #0
     44e:	bf14      	ite	ne
     450:	2301      	movne	r3, #1
     452:	2300      	moveq	r3, #0
     454:	b2db      	uxtb	r3, r3
}
     456:	4618      	mov	r0, r3
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	bc80      	pop	{r7}
     45e:	4770      	bx	lr
     460:	2009c000 	.word	0x2009c000
     464:	2009c020 	.word	0x2009c020
     468:	2009c040 	.word	0x2009c040

0000046c <sjsu::LabGPIO::GetPin() const>:

const sjsu::Pin & LabGPIO::GetPin() const
{
     46c:	b480      	push	{r7}
     46e:	b083      	sub	sp, #12
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     474:	bf00      	nop
     476:	4618      	mov	r0, r3
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:

void LabGPIO::AttachInterrupt(IsrPointer function, Edge edge) const
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	60b9      	str	r1, [r7, #8]
     48a:	4613      	mov	r3, r2
     48c:	71fb      	strb	r3, [r7, #7]
    //Not implemented yet
}
     48e:	bf00      	nop
     490:	3714      	adds	r7, #20
     492:	46bd      	mov	sp, r7
     494:	bc80      	pop	{r7}
     496:	4770      	bx	lr

00000498 <sjsu::LabGPIO::DetachInterrupt() const>:

void LabGPIO::DetachInterrupt() const
{   
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     4a0:	bf00      	nop
     4a2:	370c      	adds	r7, #12
     4a4:	46bd      	mov	sp, r7
     4a6:	bc80      	pop	{r7}
     4a8:	4770      	bx	lr
     4aa:	Address 0x00000000000004aa is out of bounds.


000004ac <__static_initialization_and_destruction_0(int, int)>:
     4ac:	b480      	push	{r7}
     4ae:	b083      	sub	sp, #12
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
     4b4:	6039      	str	r1, [r7, #0]
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	2b01      	cmp	r3, #1
     4ba:	d110      	bne.n	4de <__static_initialization_and_destruction_0(int, int)+0x32>
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4c2:	4293      	cmp	r3, r2
     4c4:	d10b      	bne.n	4de <__static_initialization_and_destruction_0(int, int)+0x32>
  };
  /// A pointer holding the address to the LPC40xx PIN peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
     4c6:	4b08      	ldr	r3, [pc, #32]	; (4e8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	f003 0301 	and.w	r3, r3, #1
     4ce:	2b00      	cmp	r3, #0
     4d0:	d105      	bne.n	4de <__static_initialization_and_destruction_0(int, int)+0x32>
     4d2:	4b05      	ldr	r3, [pc, #20]	; (4e8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4d4:	2201      	movs	r2, #1
     4d6:	601a      	str	r2, [r3, #0]
     4d8:	4a04      	ldr	r2, [pc, #16]	; (4ec <__static_initialization_and_destruction_0(int, int)+0x40>)
     4da:	4b05      	ldr	r3, [pc, #20]	; (4f0 <__static_initialization_and_destruction_0(int, int)+0x44>)
     4dc:	601a      	str	r2, [r3, #0]
     4de:	bf00      	nop
     4e0:	370c      	adds	r7, #12
     4e2:	46bd      	mov	sp, r7
     4e4:	bc80      	pop	{r7}
     4e6:	4770      	bx	lr
     4e8:	2007c140 	.word	0x2007c140
     4ec:	4002c000 	.word	0x4002c000
     4f0:	2007c13c 	.word	0x2007c13c

000004f4 <_GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh>:
     4f4:	b580      	push	{r7, lr}
     4f6:	af00      	add	r7, sp, #0
     4f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     4fc:	2001      	movs	r0, #1
     4fe:	f7ff ffd5 	bl	4ac <__static_initialization_and_destruction_0(int, int)>
     502:	bd80      	pop	{r7, pc}

00000504 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     504:	b480      	push	{r7}
     506:	b083      	sub	sp, #12
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	f003 021f 	and.w	r2, r3, #31
     512:	4906      	ldr	r1, [pc, #24]	; (52c <NVIC_EnableIRQ+0x28>)
     514:	687b      	ldr	r3, [r7, #4]
     516:	095b      	lsrs	r3, r3, #5
     518:	2001      	movs	r0, #1
     51a:	fa00 f202 	lsl.w	r2, r0, r2
     51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     522:	bf00      	nop
     524:	370c      	adds	r7, #12
     526:	46bd      	mov	sp, r7
     528:	bc80      	pop	{r7}
     52a:	4770      	bx	lr
     52c:	e000e100 	.word	0xe000e100

00000530 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     530:	b480      	push	{r7}
     532:	b083      	sub	sp, #12
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     538:	687b      	ldr	r3, [r7, #4]
     53a:	f003 021f 	and.w	r2, r3, #31
     53e:	4907      	ldr	r1, [pc, #28]	; (55c <NVIC_DisableIRQ+0x2c>)
     540:	687b      	ldr	r3, [r7, #4]
     542:	095b      	lsrs	r3, r3, #5
     544:	2001      	movs	r0, #1
     546:	fa00 f202 	lsl.w	r2, r0, r2
     54a:	3320      	adds	r3, #32
     54c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     550:	bf00      	nop
     552:	370c      	adds	r7, #12
     554:	46bd      	mov	sp, r7
     556:	bc80      	pop	{r7}
     558:	4770      	bx	lr
     55a:	bf00      	nop
     55c:	e000e100 	.word	0xe000e100

00000560 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     560:	b480      	push	{r7}
     562:	b083      	sub	sp, #12
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	2b00      	cmp	r3, #0
     56e:	da0b      	bge.n	588 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     570:	683b      	ldr	r3, [r7, #0]
     572:	b2da      	uxtb	r2, r3
     574:	490c      	ldr	r1, [pc, #48]	; (5a8 <NVIC_SetPriority+0x48>)
     576:	687b      	ldr	r3, [r7, #4]
     578:	f003 030f 	and.w	r3, r3, #15
     57c:	3b04      	subs	r3, #4
     57e:	0152      	lsls	r2, r2, #5
     580:	b2d2      	uxtb	r2, r2
     582:	440b      	add	r3, r1
     584:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     586:	e00a      	b.n	59e <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     588:	683b      	ldr	r3, [r7, #0]
     58a:	b2db      	uxtb	r3, r3
     58c:	4a07      	ldr	r2, [pc, #28]	; (5ac <NVIC_SetPriority+0x4c>)
     58e:	6879      	ldr	r1, [r7, #4]
     590:	4608      	mov	r0, r1
     592:	015b      	lsls	r3, r3, #5
     594:	b2d9      	uxtb	r1, r3
     596:	1813      	adds	r3, r2, r0
     598:	460a      	mov	r2, r1
     59a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     59e:	bf00      	nop
     5a0:	370c      	adds	r7, #12
     5a2:	46bd      	mov	sp, r7
     5a4:	bc80      	pop	{r7}
     5a6:	4770      	bx	lr
     5a8:	e000ed00 	.word	0xe000ed00
     5ac:	e000e100 	.word	0xe000e100

000005b0 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     5b0:	b490      	push	{r4, r7}
     5b2:	af00      	add	r7, sp, #0
     5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     5b8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     5bc:	4618      	mov	r0, r3
     5be:	4621      	mov	r1, r4
     5c0:	46bd      	mov	sp, r7
     5c2:	bc90      	pop	{r4, r7}
     5c4:	4770      	bx	lr

000005c6 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     5c6:	b490      	push	{r4, r7}
     5c8:	b082      	sub	sp, #8
     5ca:	af00      	add	r7, sp, #0
     5cc:	6078      	str	r0, [r7, #4]
     5ce:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     5d0:	683b      	ldr	r3, [r7, #0]
     5d2:	cb18      	ldmia	r3, {r3, r4}
     5d4:	687a      	ldr	r2, [r7, #4]
     5d6:	e9c2 3400 	strd	r3, r4, [r2]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4618      	mov	r0, r3
     5de:	3708      	adds	r7, #8
     5e0:	46bd      	mov	sp, r7
     5e2:	bc90      	pop	{r4, r7}
     5e4:	4770      	bx	lr

000005e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     5e6:	b490      	push	{r4, r7}
     5e8:	b082      	sub	sp, #8
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
     5ee:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     5f0:	683b      	ldr	r3, [r7, #0]
     5f2:	cb18      	ldmia	r3, {r3, r4}
     5f4:	687a      	ldr	r2, [r7, #4]
     5f6:	e9c2 3400 	strd	r3, r4, [r2]
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	4618      	mov	r0, r3
     5fe:	3708      	adds	r7, #8
     600:	46bd      	mov	sp, r7
     602:	bc90      	pop	{r4, r7}
     604:	4770      	bx	lr
     606:	Address 0x0000000000000606 is out of bounds.


00000608 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     610:	687b      	ldr	r3, [r7, #4]
     612:	2200      	movs	r2, #0
     614:	4903      	ldr	r1, [pc, #12]	; (624 <sjsu::DefaultUptime()+0x1c>)
     616:	4618      	mov	r0, r3
     618:	f000 fbe8 	bl	dec <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     61c:	6878      	ldr	r0, [r7, #4]
     61e:	3708      	adds	r7, #8
     620:	46bd      	mov	sp, r7
     622:	bd80      	pop	{r7, pc}
     624:	2007c148 	.word	0x2007c148

00000628 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     628:	b480      	push	{r7}
     62a:	b083      	sub	sp, #12
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	2300      	movs	r3, #0
     632:	4618      	mov	r0, r3
     634:	370c      	adds	r7, #12
     636:	46bd      	mov	sp, r7
     638:	bc80      	pop	{r7}
     63a:	4770      	bx	lr

0000063c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     63c:	b580      	push	{r7, lr}
     63e:	af00      	add	r7, sp, #0
     640:	2000      	movs	r0, #0
     642:	f7ff fff1 	bl	628 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     646:	4603      	mov	r3, r0
     648:	4618      	mov	r0, r3
     64a:	bd80      	pop	{r7, pc}

0000064c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     64c:	b590      	push	{r4, r7, lr}
     64e:	b093      	sub	sp, #76	; 0x4c
     650:	af00      	add	r7, sp, #0
     652:	e9c7 0102 	strd	r0, r1, [r7, #8]
     656:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     65a:	e9c7 3406 	strd	r3, r4, [r7, #24]
     65e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     662:	f107 0338 	add.w	r3, r7, #56	; 0x38
     666:	4618      	mov	r0, r3
     668:	f000 fbe3 	bl	e32 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     66c:	f107 0238 	add.w	r2, r7, #56	; 0x38
     670:	f107 0318 	add.w	r3, r7, #24
     674:	4611      	mov	r1, r2
     676:	4618      	mov	r0, r3
     678:	f000 fbef 	bl	e5a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     67c:	4603      	mov	r3, r0
     67e:	2b00      	cmp	r3, #0
     680:	d004      	beq.n	68c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     682:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     686:	e9c7 3404 	strd	r3, r4, [r7, #16]
     68a:	e011      	b.n	6b0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     68c:	4b19      	ldr	r3, [pc, #100]	; (6f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	f107 0230 	add.w	r2, r7, #48	; 0x30
     694:	4610      	mov	r0, r2
     696:	4798      	blx	r3
     698:	463b      	mov	r3, r7
     69a:	f107 0218 	add.w	r2, r7, #24
     69e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     6a2:	4618      	mov	r0, r3
     6a4:	f000 fbfe 	bl	ea4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6a8:	e9d7 3400 	ldrd	r3, r4, [r7]
     6ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     6b0:	2301      	movs	r3, #1
     6b2:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     6b4:	4b0f      	ldr	r3, [pc, #60]	; (6f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6b6:	681b      	ldr	r3, [r3, #0]
     6b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
     6bc:	4610      	mov	r0, r2
     6be:	4798      	blx	r3
     6c0:	f107 0210 	add.w	r2, r7, #16
     6c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
     6c8:	4611      	mov	r1, r2
     6ca:	4618      	mov	r0, r3
     6cc:	f000 fc15 	bl	efa <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6d0:	4603      	mov	r3, r0
     6d2:	2b00      	cmp	r3, #0
     6d4:	d009      	beq.n	6ea <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
     6da:	4618      	mov	r0, r3
     6dc:	f7ff ffa4 	bl	628 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     6e0:	4603      	mov	r3, r0
     6e2:	2b00      	cmp	r3, #0
     6e4:	d0e6      	beq.n	6b4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     6e6:	2300      	movs	r3, #0
     6e8:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     6ec:	4618      	mov	r0, r3
     6ee:	374c      	adds	r7, #76	; 0x4c
     6f0:	46bd      	mov	sp, r7
     6f2:	bd90      	pop	{r4, r7, pc}
     6f4:	2007c000 	.word	0x2007c000

000006f8 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     702:	e9d7 0100 	ldrd	r0, r1, [r7]
     706:	f7ff ffa1 	bl	64c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     70a:	bf00      	nop
     70c:	3708      	adds	r7, #8
     70e:	46bd      	mov	sp, r7
     710:	bd80      	pop	{r7, pc}

00000712 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     712:	b480      	push	{r7}
     714:	af00      	add	r7, sp, #0
     716:	bf00      	nop
     718:	46bd      	mov	sp, r7
     71a:	bc80      	pop	{r7}
     71c:	4770      	bx	lr
     71e:	Address 0x000000000000071e is out of bounds.


00000720 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     720:	b580      	push	{r7, lr}
     722:	b082      	sub	sp, #8
     724:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     726:	4b09      	ldr	r3, [pc, #36]	; (74c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     728:	681b      	ldr	r3, [r3, #0]
     72a:	9300      	str	r3, [sp, #0]
     72c:	231d      	movs	r3, #29
     72e:	4a08      	ldr	r2, [pc, #32]	; (750 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     730:	4908      	ldr	r1, [pc, #32]	; (754 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     732:	4809      	ldr	r0, [pc, #36]	; (758 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     734:	f002 f802 	bl	273c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     738:	4b04      	ldr	r3, [pc, #16]	; (74c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	3b10      	subs	r3, #16
     73e:	4618      	mov	r0, r3
     740:	f7ff fef6 	bl	530 <NVIC_DisableIRQ>
  }
     744:	bf00      	nop
     746:	46bd      	mov	sp, r7
     748:	bd80      	pop	{r7, pc}
     74a:	bf00      	nop
     74c:	2007c004 	.word	0x2007c004
     750:	000065f8 	.word	0x000065f8
     754:	000064d8 	.word	0x000064d8
     758:	000064e8 	.word	0x000064e8

0000075c <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     75c:	b480      	push	{r7}
     75e:	b083      	sub	sp, #12
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     764:	2340      	movs	r3, #64	; 0x40
     766:	4618      	mov	r0, r3
     768:	370c      	adds	r7, #12
     76a:	46bd      	mov	sp, r7
     76c:	bc80      	pop	{r7}
     76e:	4770      	bx	lr

00000770 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     770:	b580      	push	{r7, lr}
     772:	b084      	sub	sp, #16
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     778:	687b      	ldr	r3, [r7, #4]
     77a:	4618      	mov	r0, r3
     77c:	f44f 7380 	mov.w	r3, #256	; 0x100
     780:	461a      	mov	r2, r3
     782:	2100      	movs	r1, #0
     784:	f005 fe25 	bl	63d2 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     788:	2300      	movs	r3, #0
     78a:	60fb      	str	r3, [r7, #12]
     78c:	68fb      	ldr	r3, [r7, #12]
     78e:	2b0f      	cmp	r3, #15
     790:	d808      	bhi.n	7a4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     792:	687b      	ldr	r3, [r7, #4]
     794:	68fa      	ldr	r2, [r7, #12]
     796:	4911      	ldr	r1, [pc, #68]	; (7dc <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     79c:	68fb      	ldr	r3, [r7, #12]
     79e:	3301      	adds	r3, #1
     7a0:	60fb      	str	r3, [r7, #12]
     7a2:	e7f3      	b.n	78c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     7a4:	2310      	movs	r3, #16
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	6878      	ldr	r0, [r7, #4]
     7aa:	f7ff ffd7 	bl	75c <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     7ae:	4602      	mov	r2, r0
     7b0:	68bb      	ldr	r3, [r7, #8]
     7b2:	4293      	cmp	r3, r2
     7b4:	bf34      	ite	cc
     7b6:	2301      	movcc	r3, #1
     7b8:	2300      	movcs	r3, #0
     7ba:	b2db      	uxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	d008      	beq.n	7d2 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	68ba      	ldr	r2, [r7, #8]
     7c4:	4906      	ldr	r1, [pc, #24]	; (7e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     7c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     7ca:	68bb      	ldr	r3, [r7, #8]
     7cc:	3301      	adds	r3, #1
     7ce:	60bb      	str	r3, [r7, #8]
     7d0:	e7ea      	b.n	7a8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     7d2:	bf00      	nop
    }
     7d4:	6878      	ldr	r0, [r7, #4]
     7d6:	3710      	adds	r7, #16
     7d8:	46bd      	mov	sp, r7
     7da:	bd80      	pop	{r7, pc}
     7dc:	00000713 	.word	0x00000713
     7e0:	00000721 	.word	0x00000721

000007e4 <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     7e4:	b480      	push	{r7}
     7e6:	b083      	sub	sp, #12
     7e8:	af00      	add	r7, sp, #0
     7ea:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	3310      	adds	r3, #16
  }
     7f0:	4618      	mov	r0, r3
     7f2:	370c      	adds	r7, #12
     7f4:	46bd      	mov	sp, r7
     7f6:	bc80      	pop	{r7}
     7f8:	4770      	bx	lr
     7fa:	Address 0x00000000000007fa is out of bounds.


000007fc <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     804:	6878      	ldr	r0, [r7, #4]
     806:	f7ff ffed 	bl	7e4 <sjsu::cortex::InterruptController::IrqToIndex(int)>
     80a:	4603      	mov	r3, r0
     80c:	009b      	lsls	r3, r3, #2
     80e:	4a03      	ldr	r2, [pc, #12]	; (81c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     810:	4413      	add	r3, r2
  }
     812:	4618      	mov	r0, r3
     814:	3708      	adds	r7, #8
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	bf00      	nop
     81c:	2007c150 	.word	0x2007c150

00000820 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     820:	b084      	sub	sp, #16
     822:	b590      	push	{r4, r7, lr}
     824:	b085      	sub	sp, #20
     826:	af00      	add	r7, sp, #0
     828:	6078      	str	r0, [r7, #4]
     82a:	f107 0024 	add.w	r0, r7, #36	; 0x24
     82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     834:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     836:	6abc      	ldr	r4, [r7, #40]	; 0x28
     838:	68f8      	ldr	r0, [r7, #12]
     83a:	f7ff ffdf 	bl	7fc <sjsu::cortex::InterruptController::GetVector(int)>
     83e:	4603      	mov	r3, r0
     840:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     842:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     846:	2b00      	cmp	r3, #0
     848:	d005      	beq.n	856 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	2b00      	cmp	r3, #0
     84e:	db02      	blt.n	856 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     850:	68f8      	ldr	r0, [r7, #12]
     852:	f7ff fe57 	bl	504 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     858:	2b00      	cmp	r3, #0
     85a:	db04      	blt.n	866 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     85e:	4619      	mov	r1, r3
     860:	68f8      	ldr	r0, [r7, #12]
     862:	f7ff fe7d 	bl	560 <NVIC_SetPriority>
    }
  }
     866:	bf00      	nop
     868:	3714      	adds	r7, #20
     86a:	46bd      	mov	sp, r7
     86c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     870:	b004      	add	sp, #16
     872:	4770      	bx	lr

00000874 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     87e:	6838      	ldr	r0, [r7, #0]
     880:	f7ff fe56 	bl	530 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     884:	6838      	ldr	r0, [r7, #0]
     886:	f7ff ffb9 	bl	7fc <sjsu::cortex::InterruptController::GetVector(int)>
     88a:	4602      	mov	r2, r0
     88c:	4b02      	ldr	r3, [pc, #8]	; (898 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     88e:	6013      	str	r3, [r2, #0]
  }
     890:	bf00      	nop
     892:	3708      	adds	r7, #8
     894:	46bd      	mov	sp, r7
     896:	bd80      	pop	{r7, pc}
     898:	00000721 	.word	0x00000721

0000089c <sjsu::Gpio::Gpio(sjsu::Gpio const&)>:
     89c:	b480      	push	{r7}
     89e:	b083      	sub	sp, #12
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
     8a4:	6039      	str	r1, [r7, #0]
     8a6:	4a04      	ldr	r2, [pc, #16]	; (8b8 <sjsu::Gpio::Gpio(sjsu::Gpio const&)+0x1c>)
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	601a      	str	r2, [r3, #0]
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	4618      	mov	r0, r3
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	bc80      	pop	{r7}
     8b6:	4770      	bx	lr
     8b8:	000064a8 	.word	0x000064a8

000008bc <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)>:
namespace sjsu
{


    ///Implementations for the virtual functions defined in Gpio.hpp
    class LabGPIO : public Gpio
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
     8c4:	6039      	str	r1, [r7, #0]
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	683a      	ldr	r2, [r7, #0]
     8ca:	4611      	mov	r1, r2
     8cc:	4618      	mov	r0, r3
     8ce:	f7ff ffe5 	bl	89c <sjsu::Gpio::Gpio(sjsu::Gpio const&)>
     8d2:	4a09      	ldr	r2, [pc, #36]	; (8f8 <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)+0x3c>)
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	601a      	str	r2, [r3, #0]
     8d8:	683b      	ldr	r3, [r7, #0]
     8da:	791b      	ldrb	r3, [r3, #4]
     8dc:	b2da      	uxtb	r2, r3
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	711a      	strb	r2, [r3, #4]
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	795b      	ldrb	r3, [r3, #5]
     8e6:	b2da      	uxtb	r2, r3
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	715a      	strb	r2, [r3, #5]
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	4618      	mov	r0, r3
     8f0:	3708      	adds	r7, #8
     8f2:	46bd      	mov	sp, r7
     8f4:	bd80      	pop	{r7, pc}
     8f6:	bf00      	nop
     8f8:	00006484 	.word	0x00006484

000008fc <main>:
void testRun(LabGPIO testObject, uint8_t testedPin);

void GpioInterruptCallback();

int main(void)
{
     8fc:	b590      	push	{r4, r7, lr}
     8fe:	b099      	sub	sp, #100	; 0x64
     900:	af02      	add	r7, sp, #8
  uint8_t testPin = 0;
     902:	2300      	movs	r3, #0
     904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t testPort = 1;
     908:	2301      	movs	r3, #1
     90a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  LabGPIO gpioTest0(testPort, testPin);
     90e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     912:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
     916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
     91a:	4618      	mov	r0, r3
     91c:	f7ff fc10 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  testPin = 1;
     920:	2301      	movs	r3, #1
     922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LabGPIO gpioTest1(testPort, testPin);
     926:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     92a:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
     92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
     932:	4618      	mov	r0, r3
     934:	f7ff fc04 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  testPin = 4;
     938:	2304      	movs	r3, #4
     93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LabGPIO gpioTest2(testPort, testPin);
     93e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     942:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
     946:	f107 031c 	add.w	r3, r7, #28
     94a:	4618      	mov	r0, r3
     94c:	f7ff fbf8 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  testPin = 8;
     950:	2308      	movs	r3, #8
     952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LabGPIO gpioTest3(testPort, testPin);
     956:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     95a:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
     95e:	f107 0314 	add.w	r3, r7, #20
     962:	4618      	mov	r0, r3
     964:	f7ff fbec 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>

  sjsu::cortex::InterruptController IntCont;
     968:	4b2b      	ldr	r3, [pc, #172]	; (a18 <main+0x11c>)
     96a:	613b      	str	r3, [r7, #16]
  InterruptController::RegistrationInfo_t test = {
     96c:	4b2b      	ldr	r3, [pc, #172]	; (a1c <main+0x120>)
     96e:	463c      	mov	r4, r7
     970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GpioInterruptCallback,
    true,
    0,
  };
  //Register Interrupt
  IntCont.Register(test);
     976:	f107 0010 	add.w	r0, r7, #16
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	9300      	str	r3, [sp, #0]
     97e:	463b      	mov	r3, r7
     980:	cb0e      	ldmia	r3, {r1, r2, r3}
     982:	f7ff ff4d 	bl	820 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>

  while(true)
  {
    printf("test %d\n", GpioInterruptCallback);
     986:	4926      	ldr	r1, [pc, #152]	; (a20 <main+0x124>)
     988:	4826      	ldr	r0, [pc, #152]	; (a24 <main+0x128>)
     98a:	f001 fed7 	bl	273c <printf>
    printf("test2 %d\n", &GpioInterruptCallback);
     98e:	4924      	ldr	r1, [pc, #144]	; (a20 <main+0x124>)
     990:	4825      	ldr	r0, [pc, #148]	; (a28 <main+0x12c>)
     992:	f001 fed3 	bl	273c <printf>
    testRun(gpioTest0, testPin);
     996:	f107 022c 	add.w	r2, r7, #44	; 0x2c
     99a:	f107 0334 	add.w	r3, r7, #52	; 0x34
     99e:	4611      	mov	r1, r2
     9a0:	4618      	mov	r0, r3
     9a2:	f7ff ff8b 	bl	8bc <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)>
     9a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     9aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
     9ae:	4611      	mov	r1, r2
     9b0:	4618      	mov	r0, r3
     9b2:	f000 f979 	bl	ca8 <testRun(sjsu::LabGPIO, unsigned char)>
    testRun(gpioTest1, testPin);
     9b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
     9ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
     9be:	4611      	mov	r1, r2
     9c0:	4618      	mov	r0, r3
     9c2:	f7ff ff7b 	bl	8bc <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)>
     9c6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     9ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
     9ce:	4611      	mov	r1, r2
     9d0:	4618      	mov	r0, r3
     9d2:	f000 f969 	bl	ca8 <testRun(sjsu::LabGPIO, unsigned char)>
    testRun(gpioTest2, testPin);
     9d6:	f107 021c 	add.w	r2, r7, #28
     9da:	f107 0344 	add.w	r3, r7, #68	; 0x44
     9de:	4611      	mov	r1, r2
     9e0:	4618      	mov	r0, r3
     9e2:	f7ff ff6b 	bl	8bc <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)>
     9e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     9ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
     9ee:	4611      	mov	r1, r2
     9f0:	4618      	mov	r0, r3
     9f2:	f000 f959 	bl	ca8 <testRun(sjsu::LabGPIO, unsigned char)>
    testRun(gpioTest3, testPin);
     9f6:	f107 0214 	add.w	r2, r7, #20
     9fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
     9fe:	4611      	mov	r1, r2
     a00:	4618      	mov	r0, r3
     a02:	f7ff ff5b 	bl	8bc <sjsu::LabGPIO::LabGPIO(sjsu::LabGPIO const&)>
     a06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
     a0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
     a0e:	4611      	mov	r1, r2
     a10:	4618      	mov	r0, r3
     a12:	f000 f949 	bl	ca8 <testRun(sjsu::LabGPIO, unsigned char)>
    printf("test %d\n", GpioInterruptCallback);
     a16:	e7b6      	b.n	986 <main+0x8a>
     a18:	000065f0 	.word	0x000065f0
     a1c:	00006580 	.word	0x00006580
     a20:	00000a2d 	.word	0x00000a2d
     a24:	00006568 	.word	0x00006568
     a28:	00006574 	.word	0x00006574

00000a2c <GpioInterruptCallback()>:
  
  return 0;
}

void GpioInterruptCallback()
{
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
  printf("hello world\n");
     a30:	4802      	ldr	r0, [pc, #8]	; (a3c <GpioInterruptCallback()+0x10>)
     a32:	f000 fd59 	bl	14e8 <puts>
}
     a36:	bf00      	nop
     a38:	bd80      	pop	{r7, pc}
     a3a:	bf00      	nop
     a3c:	00006590 	.word	0x00006590

00000a40 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	4618      	mov	r0, r3
     a4c:	f000 f804 	bl	a58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
     a50:	6878      	ldr	r0, [r7, #4]
     a52:	3708      	adds	r7, #8
     a54:	46bd      	mov	sp, r7
     a56:	bd80      	pop	{r7, pc}

00000a58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
     a58:	b580      	push	{r7, lr}
     a5a:	b082      	sub	sp, #8
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     a60:	4903      	ldr	r1, [pc, #12]	; (a70 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
     a62:	6878      	ldr	r0, [r7, #4]
     a64:	f000 f806 	bl	a74 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
     a68:	6878      	ldr	r0, [r7, #4]
     a6a:	3708      	adds	r7, #8
     a6c:	46bd      	mov	sp, r7
     a6e:	bd80      	pop	{r7, pc}
     a70:	000064c8 	.word	0x000064c8

00000a74 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     a74:	b490      	push	{r4, r7}
     a76:	b082      	sub	sp, #8
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     a7e:	683b      	ldr	r3, [r7, #0]
     a80:	cb18      	ldmia	r3, {r3, r4}
     a82:	687a      	ldr	r2, [r7, #4]
     a84:	e9c2 3400 	strd	r3, r4, [r2]
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	4618      	mov	r0, r3
     a8c:	3708      	adds	r7, #8
     a8e:	46bd      	mov	sp, r7
     a90:	bc90      	pop	{r4, r7}
     a92:	4770      	bx	lr

00000a94 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     a94:	b580      	push	{r7, lr}
     a96:	b082      	sub	sp, #8
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
     a9c:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	6839      	ldr	r1, [r7, #0]
     aa2:	4618      	mov	r0, r3
     aa4:	f000 f810 	bl	ac8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
     aa8:	6878      	ldr	r0, [r7, #4]
     aaa:	3708      	adds	r7, #8
     aac:	46bd      	mov	sp, r7
     aae:	bd80      	pop	{r7, pc}

00000ab0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
     ab0:	b490      	push	{r4, r7}
     ab2:	b082      	sub	sp, #8
     ab4:	af00      	add	r7, sp, #0
     ab6:	6078      	str	r0, [r7, #4]
	{ return __r; }
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	cb18      	ldmia	r3, {r3, r4}
     abc:	4618      	mov	r0, r3
     abe:	4621      	mov	r1, r4
     ac0:	3708      	adds	r7, #8
     ac2:	46bd      	mov	sp, r7
     ac4:	bc90      	pop	{r4, r7}
     ac6:	4770      	bx	lr

00000ac8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	b085      	sub	sp, #20
     acc:	af00      	add	r7, sp, #0
     ace:	6078      	str	r0, [r7, #4]
     ad0:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     ad2:	6838      	ldr	r0, [r7, #0]
     ad4:	f7ff ffec 	bl	ab0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
     ad8:	4605      	mov	r5, r0
     ada:	460e      	mov	r6, r1
     adc:	462b      	mov	r3, r5
     ade:	4634      	mov	r4, r6
     ae0:	f04f 0100 	mov.w	r1, #0
     ae4:	f04f 0200 	mov.w	r2, #0
     ae8:	0162      	lsls	r2, r4, #5
     aea:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     aee:	0159      	lsls	r1, r3, #5
     af0:	460b      	mov	r3, r1
     af2:	4614      	mov	r4, r2
     af4:	1b5b      	subs	r3, r3, r5
     af6:	eb64 0406 	sbc.w	r4, r4, r6
     afa:	f04f 0100 	mov.w	r1, #0
     afe:	f04f 0200 	mov.w	r2, #0
     b02:	00a2      	lsls	r2, r4, #2
     b04:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     b08:	0099      	lsls	r1, r3, #2
     b0a:	460b      	mov	r3, r1
     b0c:	4614      	mov	r4, r2
     b0e:	195b      	adds	r3, r3, r5
     b10:	eb44 0406 	adc.w	r4, r4, r6
     b14:	f04f 0100 	mov.w	r1, #0
     b18:	f04f 0200 	mov.w	r2, #0
     b1c:	00e2      	lsls	r2, r4, #3
     b1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
     b22:	00d9      	lsls	r1, r3, #3
     b24:	460b      	mov	r3, r1
     b26:	4614      	mov	r4, r2
     b28:	e9c7 3402 	strd	r3, r4, [r7, #8]
     b2c:	f107 0308 	add.w	r3, r7, #8
     b30:	4619      	mov	r1, r3
     b32:	6878      	ldr	r0, [r7, #4]
     b34:	f7ff fd57 	bl	5e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     b38:	6878      	ldr	r0, [r7, #4]
     b3a:	3714      	adds	r7, #20
     b3c:	46bd      	mov	sp, r7
     b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b40 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     b40:	b590      	push	{r4, r7, lr}
     b42:	b085      	sub	sp, #20
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
     b48:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     b4a:	f107 0308 	add.w	r3, r7, #8
     b4e:	6839      	ldr	r1, [r7, #0]
     b50:	4618      	mov	r0, r3
     b52:	f7ff ff9f 	bl	a94 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     b56:	f107 0308 	add.w	r3, r7, #8
     b5a:	4618      	mov	r0, r3
     b5c:	f000 f80a 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     b60:	4603      	mov	r3, r0
     b62:	460c      	mov	r4, r1
     b64:	687a      	ldr	r2, [r7, #4]
     b66:	e9c2 3400 	strd	r3, r4, [r2]
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	4618      	mov	r0, r3
     b6e:	3714      	adds	r7, #20
     b70:	46bd      	mov	sp, r7
     b72:	bd90      	pop	{r4, r7, pc}

00000b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
     b74:	b490      	push	{r4, r7}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	6078      	str	r0, [r7, #4]
	{ return __r; }
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	cb18      	ldmia	r3, {r3, r4}
     b80:	4618      	mov	r0, r3
     b82:	4621      	mov	r1, r4
     b84:	3708      	adds	r7, #8
     b86:	46bd      	mov	sp, r7
     b88:	bc90      	pop	{r4, r7}
     b8a:	4770      	bx	lr

00000b8c <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)53>()>:
      operator""s()
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::seconds, _Digits...>(); }
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	4618      	mov	r0, r3
     b98:	f000 f804 	bl	ba4 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)53>()>
     b9c:	6878      	ldr	r0, [r7, #4]
     b9e:	3708      	adds	r7, #8
     ba0:	46bd      	mov	sp, r7
     ba2:	bd80      	pop	{r7, pc}

00000ba4 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)53>()>:
      constexpr _Dur __check_overflow()
     ba4:	b580      	push	{r7, lr}
     ba6:	b082      	sub	sp, #8
     ba8:	af00      	add	r7, sp, #0
     baa:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     bac:	4903      	ldr	r1, [pc, #12]	; (bbc <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)53>()+0x18>)
     bae:	6878      	ldr	r0, [r7, #4]
     bb0:	f7ff fd09 	bl	5c6 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>
      }
     bb4:	6878      	ldr	r0, [r7, #4]
     bb6:	3708      	adds	r7, #8
     bb8:	46bd      	mov	sp, r7
     bba:	bd80      	pop	{r7, pc}
     bbc:	000064d0 	.word	0x000064d0

00000bc0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
     bc8:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	6839      	ldr	r1, [r7, #0]
     bce:	4618      	mov	r0, r3
     bd0:	f000 f810 	bl	bf4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
      }
     bd4:	6878      	ldr	r0, [r7, #4]
     bd6:	3708      	adds	r7, #8
     bd8:	46bd      	mov	sp, r7
     bda:	bd80      	pop	{r7, pc}

00000bdc <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>:
	count() const
     bdc:	b490      	push	{r4, r7}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	6078      	str	r0, [r7, #4]
	{ return __r; }
     be4:	687b      	ldr	r3, [r7, #4]
     be6:	cb18      	ldmia	r3, {r3, r4}
     be8:	4618      	mov	r0, r3
     bea:	4621      	mov	r1, r4
     bec:	3708      	adds	r7, #8
     bee:	46bd      	mov	sp, r7
     bf0:	bc90      	pop	{r4, r7}
     bf2:	4770      	bx	lr

00000bf4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	6078      	str	r0, [r7, #4]
     bfc:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     bfe:	6838      	ldr	r0, [r7, #0]
     c00:	f7ff ffec 	bl	bdc <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>
     c04:	4605      	mov	r5, r0
     c06:	460e      	mov	r6, r1
     c08:	462b      	mov	r3, r5
     c0a:	4634      	mov	r4, r6
     c0c:	f04f 0100 	mov.w	r1, #0
     c10:	f04f 0200 	mov.w	r2, #0
     c14:	0162      	lsls	r2, r4, #5
     c16:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     c1a:	0159      	lsls	r1, r3, #5
     c1c:	460b      	mov	r3, r1
     c1e:	4614      	mov	r4, r2
     c20:	1b5b      	subs	r3, r3, r5
     c22:	eb64 0406 	sbc.w	r4, r4, r6
     c26:	f04f 0100 	mov.w	r1, #0
     c2a:	f04f 0200 	mov.w	r2, #0
     c2e:	0262      	lsls	r2, r4, #9
     c30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
     c34:	0259      	lsls	r1, r3, #9
     c36:	460b      	mov	r3, r1
     c38:	4614      	mov	r4, r2
     c3a:	195b      	adds	r3, r3, r5
     c3c:	eb44 0406 	adc.w	r4, r4, r6
     c40:	f04f 0100 	mov.w	r1, #0
     c44:	f04f 0200 	mov.w	r2, #0
     c48:	01a2      	lsls	r2, r4, #6
     c4a:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
     c4e:	0199      	lsls	r1, r3, #6
     c50:	1ac9      	subs	r1, r1, r3
     c52:	eb62 0204 	sbc.w	r2, r2, r4
     c56:	194b      	adds	r3, r1, r5
     c58:	eb42 0406 	adc.w	r4, r2, r6
     c5c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     c60:	f107 0308 	add.w	r3, r7, #8
     c64:	4619      	mov	r1, r3
     c66:	6878      	ldr	r0, [r7, #4]
     c68:	f7ff fcbd 	bl	5e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     c6c:	6878      	ldr	r0, [r7, #4]
     c6e:	3714      	adds	r7, #20
     c70:	46bd      	mov	sp, r7
     c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     c74:	b590      	push	{r4, r7, lr}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     c7e:	f107 0308 	add.w	r3, r7, #8
     c82:	6839      	ldr	r1, [r7, #0]
     c84:	4618      	mov	r0, r3
     c86:	f7ff ff9b 	bl	bc0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
     c8a:	f107 0308 	add.w	r3, r7, #8
     c8e:	4618      	mov	r0, r3
     c90:	f7ff ff70 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     c94:	4603      	mov	r3, r0
     c96:	460c      	mov	r4, r1
     c98:	687a      	ldr	r2, [r7, #4]
     c9a:	e9c2 3400 	strd	r3, r4, [r2]
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	4618      	mov	r0, r3
     ca2:	3714      	adds	r7, #20
     ca4:	46bd      	mov	sp, r7
     ca6:	bd90      	pop	{r4, r7, pc}

00000ca8 <testRun(sjsu::LabGPIO, unsigned char)>:

void testRun(LabGPIO testObject, uint8_t testedPin)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b08c      	sub	sp, #48	; 0x30
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
     cb0:	460b      	mov	r3, r1
     cb2:	70fb      	strb	r3, [r7, #3]

  testObject.SetDirection(sjsu::Gpio::kOutput);
     cb4:	2101      	movs	r1, #1
     cb6:	6878      	ldr	r0, [r7, #4]
     cb8:	f7ff fa5e 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  bool pinState;
  
  testObject.Set(sjsu::Gpio::kLow);
     cbc:	2100      	movs	r1, #0
     cbe:	6878      	ldr	r0, [r7, #4]
     cc0:	f7ff fad2 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  if(testObject.Read())
     cc4:	6878      	ldr	r0, [r7, #4]
     cc6:	f7ff fb8b 	bl	3e0 <sjsu::LabGPIO::Read() const>
     cca:	4603      	mov	r3, r0
     ccc:	2b00      	cmp	r3, #0
     cce:	d00d      	beq.n	cec <testRun(sjsu::LabGPIO, unsigned char)+0x44>
  {
    printf("Pin not set low\n");
     cd0:	4841      	ldr	r0, [pc, #260]	; (dd8 <testRun(sjsu::LabGPIO, unsigned char)+0x130>)
     cd2:	f000 fc09 	bl	14e8 <puts>
    printf("pin state: 0x%08x\n", lpc17xx::LPC_GPIO1->FIOPIN & (1 << testedPin));
     cd6:	4b41      	ldr	r3, [pc, #260]	; (ddc <testRun(sjsu::LabGPIO, unsigned char)+0x134>)
     cd8:	695b      	ldr	r3, [r3, #20]
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	2101      	movs	r1, #1
     cde:	fa01 f202 	lsl.w	r2, r1, r2
     ce2:	4013      	ands	r3, r2
     ce4:	4619      	mov	r1, r3
     ce6:	483e      	ldr	r0, [pc, #248]	; (de0 <testRun(sjsu::LabGPIO, unsigned char)+0x138>)
     ce8:	f001 fd28 	bl	273c <printf>
    //sjsu::Delay(1ms);
  }

  sjsu::Delay(100ms);
     cec:	f107 0310 	add.w	r3, r7, #16
     cf0:	4618      	mov	r0, r3
     cf2:	f7ff fea5 	bl	a40 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     cf6:	f107 0210 	add.w	r2, r7, #16
     cfa:	f107 0308 	add.w	r3, r7, #8
     cfe:	4611      	mov	r1, r2
     d00:	4618      	mov	r0, r3
     d02:	f7ff ff1d 	bl	b40 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     d0a:	f7ff fcf5 	bl	6f8 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  testObject.Set(sjsu::Gpio::kHigh);
     d0e:	2101      	movs	r1, #1
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	f7ff faa9 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  if(!testObject.Read())
     d16:	6878      	ldr	r0, [r7, #4]
     d18:	f7ff fb62 	bl	3e0 <sjsu::LabGPIO::Read() const>
     d1c:	4603      	mov	r3, r0
     d1e:	f083 0301 	eor.w	r3, r3, #1
     d22:	b2db      	uxtb	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d01e      	beq.n	d66 <testRun(sjsu::LabGPIO, unsigned char)+0xbe>
  {
    printf("Pin not set high\n");
     d28:	482e      	ldr	r0, [pc, #184]	; (de4 <testRun(sjsu::LabGPIO, unsigned char)+0x13c>)
     d2a:	f000 fbdd 	bl	14e8 <puts>
    printf("pin state: 0x%08x\n", lpc17xx::LPC_GPIO1->FIOPIN & (1 << testedPin));
     d2e:	4b2b      	ldr	r3, [pc, #172]	; (ddc <testRun(sjsu::LabGPIO, unsigned char)+0x134>)
     d30:	695b      	ldr	r3, [r3, #20]
     d32:	78fa      	ldrb	r2, [r7, #3]
     d34:	2101      	movs	r1, #1
     d36:	fa01 f202 	lsl.w	r2, r1, r2
     d3a:	4013      	ands	r3, r2
     d3c:	4619      	mov	r1, r3
     d3e:	4828      	ldr	r0, [pc, #160]	; (de0 <testRun(sjsu::LabGPIO, unsigned char)+0x138>)
     d40:	f001 fcfc 	bl	273c <printf>
    sjsu::Delay(5s);
     d44:	f107 0320 	add.w	r3, r7, #32
     d48:	4618      	mov	r0, r3
     d4a:	f7ff ff1f 	bl	b8c <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)53>()>
     d4e:	f107 0220 	add.w	r2, r7, #32
     d52:	f107 0318 	add.w	r3, r7, #24
     d56:	4611      	mov	r1, r2
     d58:	4618      	mov	r0, r3
     d5a:	f7ff ff8b 	bl	c74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
     d5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     d62:	f7ff fcc9 	bl	6f8 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
  //sjsu::Delay(1ms);

  pinState = testObject.Read();
     d66:	6878      	ldr	r0, [r7, #4]
     d68:	f7ff fb3a 	bl	3e0 <sjsu::LabGPIO::Read() const>
     d6c:	4603      	mov	r3, r0
     d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  testObject.Toggle();
     d72:	6878      	ldr	r0, [r7, #4]
     d74:	f7ff faf0 	bl	358 <sjsu::LabGPIO::Toggle() const>
  if(testObject.Read() == pinState)
     d78:	6878      	ldr	r0, [r7, #4]
     d7a:	f7ff fb31 	bl	3e0 <sjsu::LabGPIO::Read() const>
     d7e:	4603      	mov	r3, r0
     d80:	461a      	mov	r2, r3
     d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d86:	4293      	cmp	r3, r2
     d88:	bf0c      	ite	eq
     d8a:	2301      	moveq	r3, #1
     d8c:	2300      	movne	r3, #0
     d8e:	b2db      	uxtb	r3, r3
     d90:	2b00      	cmp	r3, #0
     d92:	d002      	beq.n	d9a <testRun(sjsu::LabGPIO, unsigned char)+0xf2>
    printf("Pin was not toggled");
     d94:	4814      	ldr	r0, [pc, #80]	; (de8 <testRun(sjsu::LabGPIO, unsigned char)+0x140>)
     d96:	f001 fcd1 	bl	273c <printf>
  pinState = testObject.Read();
     d9a:	6878      	ldr	r0, [r7, #4]
     d9c:	f7ff fb20 	bl	3e0 <sjsu::LabGPIO::Read() const>
     da0:	4603      	mov	r3, r0
     da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  //sjsu::Delay(1ms);
  
  testObject.Toggle();
     da6:	6878      	ldr	r0, [r7, #4]
     da8:	f7ff fad6 	bl	358 <sjsu::LabGPIO::Toggle() const>
  if(testObject.Read() == pinState)
     dac:	6878      	ldr	r0, [r7, #4]
     dae:	f7ff fb17 	bl	3e0 <sjsu::LabGPIO::Read() const>
     db2:	4603      	mov	r3, r0
     db4:	461a      	mov	r2, r3
     db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     dba:	4293      	cmp	r3, r2
     dbc:	bf0c      	ite	eq
     dbe:	2301      	moveq	r3, #1
     dc0:	2300      	movne	r3, #0
     dc2:	b2db      	uxtb	r3, r3
     dc4:	2b00      	cmp	r3, #0
     dc6:	d002      	beq.n	dce <testRun(sjsu::LabGPIO, unsigned char)+0x126>
    printf("Pin was not toggled");
     dc8:	4807      	ldr	r0, [pc, #28]	; (de8 <testRun(sjsu::LabGPIO, unsigned char)+0x140>)
     dca:	f001 fcb7 	bl	273c <printf>
  //sjsu::Delay(1ms);
     dce:	bf00      	nop
     dd0:	3730      	adds	r7, #48	; 0x30
     dd2:	46bd      	mov	sp, r7
     dd4:	bd80      	pop	{r7, pc}
     dd6:	bf00      	nop
     dd8:	0000659c 	.word	0x0000659c
     ddc:	2009c020 	.word	0x2009c020
     de0:	000065ac 	.word	0x000065ac
     de4:	000065c0 	.word	0x000065c0
     de8:	000065d4 	.word	0x000065d4

00000dec <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
     dec:	b590      	push	{r4, r7, lr}
     dee:	b087      	sub	sp, #28
     df0:	af00      	add	r7, sp, #0
     df2:	60f8      	str	r0, [r7, #12]
     df4:	60b9      	str	r1, [r7, #8]
     df6:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
     df8:	68bb      	ldr	r3, [r7, #8]
     dfa:	cb18      	ldmia	r3, {r3, r4}
     dfc:	1c59      	adds	r1, r3, #1
     dfe:	f144 0200 	adc.w	r2, r4, #0
     e02:	68b8      	ldr	r0, [r7, #8]
     e04:	e9c0 1200 	strd	r1, r2, [r0]
     e08:	e9c7 3404 	strd	r3, r4, [r7, #16]
     e0c:	f107 0310 	add.w	r3, r7, #16
     e10:	4619      	mov	r1, r3
     e12:	68f8      	ldr	r0, [r7, #12]
     e14:	f7ff fbe7 	bl	5e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     e18:	68f8      	ldr	r0, [r7, #12]
     e1a:	371c      	adds	r7, #28
     e1c:	46bd      	mov	sp, r7
     e1e:	bd90      	pop	{r4, r7, pc}

00000e20 <std::chrono::duration_values<long long>::max()>:
	max()
     e20:	b598      	push	{r3, r4, r7, lr}
     e22:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
     e24:	f7ff fbc4 	bl	5b0 <std::numeric_limits<long long>::max()>
     e28:	4603      	mov	r3, r0
     e2a:	460c      	mov	r4, r1
     e2c:	4618      	mov	r0, r3
     e2e:	4621      	mov	r1, r4
     e30:	bd98      	pop	{r3, r4, r7, pc}

00000e32 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
     e32:	b590      	push	{r4, r7, lr}
     e34:	b085      	sub	sp, #20
     e36:	af00      	add	r7, sp, #0
     e38:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
     e3a:	f7ff fff1 	bl	e20 <std::chrono::duration_values<long long>::max()>
     e3e:	4603      	mov	r3, r0
     e40:	460c      	mov	r4, r1
     e42:	e9c7 3402 	strd	r3, r4, [r7, #8]
     e46:	f107 0308 	add.w	r3, r7, #8
     e4a:	4619      	mov	r1, r3
     e4c:	6878      	ldr	r0, [r7, #4]
     e4e:	f7ff fbca 	bl	5e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     e52:	6878      	ldr	r0, [r7, #4]
     e54:	3714      	adds	r7, #20
     e56:	46bd      	mov	sp, r7
     e58:	bd90      	pop	{r4, r7, pc}

00000e5a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
     e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
     e5c:	b087      	sub	sp, #28
     e5e:	af00      	add	r7, sp, #0
     e60:	6078      	str	r0, [r7, #4]
     e62:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	cb18      	ldmia	r3, {r3, r4}
     e68:	e9c7 3402 	strd	r3, r4, [r7, #8]
     e6c:	f107 0308 	add.w	r3, r7, #8
     e70:	4618      	mov	r0, r3
     e72:	f7ff fe7f 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     e76:	4605      	mov	r5, r0
     e78:	460e      	mov	r6, r1
     e7a:	683b      	ldr	r3, [r7, #0]
     e7c:	cb18      	ldmia	r3, {r3, r4}
     e7e:	e9c7 3404 	strd	r3, r4, [r7, #16]
     e82:	f107 0310 	add.w	r3, r7, #16
     e86:	4618      	mov	r0, r3
     e88:	f7ff fe74 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     e8c:	4603      	mov	r3, r0
     e8e:	460c      	mov	r4, r1
     e90:	42a6      	cmp	r6, r4
     e92:	bf06      	itte	eq
     e94:	429d      	cmpeq	r5, r3
     e96:	2301      	moveq	r3, #1
     e98:	2300      	movne	r3, #0
     e9a:	b2db      	uxtb	r3, r3
      }
     e9c:	4618      	mov	r0, r3
     e9e:	371c      	adds	r7, #28
     ea0:	46bd      	mov	sp, r7
     ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ea4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
     ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea6:	b08b      	sub	sp, #44	; 0x2c
     ea8:	af00      	add	r7, sp, #0
     eaa:	60f8      	str	r0, [r7, #12]
     eac:	60b9      	str	r1, [r7, #8]
     eae:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
     eb0:	68bb      	ldr	r3, [r7, #8]
     eb2:	cb18      	ldmia	r3, {r3, r4}
     eb4:	e9c7 3406 	strd	r3, r4, [r7, #24]
     eb8:	f107 0318 	add.w	r3, r7, #24
     ebc:	4618      	mov	r0, r3
     ebe:	f7ff fe59 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     ec2:	4605      	mov	r5, r0
     ec4:	460e      	mov	r6, r1
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	cb18      	ldmia	r3, {r3, r4}
     eca:	e9c7 3408 	strd	r3, r4, [r7, #32]
     ece:	f107 0320 	add.w	r3, r7, #32
     ed2:	4618      	mov	r0, r3
     ed4:	f7ff fe4e 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     ed8:	460a      	mov	r2, r1
     eda:	4601      	mov	r1, r0
     edc:	194b      	adds	r3, r1, r5
     ede:	eb42 0406 	adc.w	r4, r2, r6
     ee2:	e9c7 3404 	strd	r3, r4, [r7, #16]
     ee6:	f107 0310 	add.w	r3, r7, #16
     eea:	4619      	mov	r1, r3
     eec:	68f8      	ldr	r0, [r7, #12]
     eee:	f7ff fb7a 	bl	5e6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
     ef2:	68f8      	ldr	r0, [r7, #12]
     ef4:	372c      	adds	r7, #44	; 0x2c
     ef6:	46bd      	mov	sp, r7
     ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000efa <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
     efa:	b5f0      	push	{r4, r5, r6, r7, lr}
     efc:	b087      	sub	sp, #28
     efe:	af00      	add	r7, sp, #0
     f00:	6078      	str	r0, [r7, #4]
     f02:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	cb18      	ldmia	r3, {r3, r4}
     f08:	e9c7 3402 	strd	r3, r4, [r7, #8]
     f0c:	f107 0308 	add.w	r3, r7, #8
     f10:	4618      	mov	r0, r3
     f12:	f7ff fe2f 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     f16:	4605      	mov	r5, r0
     f18:	460e      	mov	r6, r1
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	cb18      	ldmia	r3, {r3, r4}
     f1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
     f22:	f107 0310 	add.w	r3, r7, #16
     f26:	4618      	mov	r0, r3
     f28:	f7ff fe24 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     f2c:	4603      	mov	r3, r0
     f2e:	460c      	mov	r4, r1
     f30:	429d      	cmp	r5, r3
     f32:	eb76 0304 	sbcs.w	r3, r6, r4
     f36:	bfb4      	ite	lt
     f38:	2301      	movlt	r3, #1
     f3a:	2300      	movge	r3, #0
     f3c:	b2db      	uxtb	r3, r3
      }
     f3e:	4618      	mov	r0, r3
     f40:	371c      	adds	r7, #28
     f42:	46bd      	mov	sp, r7
     f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f46:	Address 0x0000000000000f46 is out of bounds.


00000f48 <__static_initialization_and_destruction_0(int, int)>:
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
     f50:	6039      	str	r1, [r7, #0]
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	2b01      	cmp	r3, #1
     f56:	d11d      	bne.n	f94 <__static_initialization_and_destruction_0(int, int)+0x4c>
     f58:	683b      	ldr	r3, [r7, #0]
     f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f5e:	4293      	cmp	r3, r2
     f60:	d118      	bne.n	f94 <__static_initialization_and_destruction_0(int, int)+0x4c>
     f62:	4b0e      	ldr	r3, [pc, #56]	; (f9c <__static_initialization_and_destruction_0(int, int)+0x54>)
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	f003 0301 	and.w	r3, r3, #1
     f6a:	2b00      	cmp	r3, #0
     f6c:	d105      	bne.n	f7a <__static_initialization_and_destruction_0(int, int)+0x32>
     f6e:	4b0b      	ldr	r3, [pc, #44]	; (f9c <__static_initialization_and_destruction_0(int, int)+0x54>)
     f70:	2201      	movs	r2, #1
     f72:	601a      	str	r2, [r3, #0]
     f74:	4a0a      	ldr	r2, [pc, #40]	; (fa0 <__static_initialization_and_destruction_0(int, int)+0x58>)
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <__static_initialization_and_destruction_0(int, int)+0x5c>)
     f78:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
     f7a:	4b0b      	ldr	r3, [pc, #44]	; (fa8 <__static_initialization_and_destruction_0(int, int)+0x60>)
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	f003 0301 	and.w	r3, r3, #1
     f82:	2b00      	cmp	r3, #0
     f84:	d106      	bne.n	f94 <__static_initialization_and_destruction_0(int, int)+0x4c>
     f86:	4b08      	ldr	r3, [pc, #32]	; (fa8 <__static_initialization_and_destruction_0(int, int)+0x60>)
     f88:	2201      	movs	r2, #1
     f8a:	601a      	str	r2, [r3, #0]
     f8c:	4b07      	ldr	r3, [pc, #28]	; (fac <__static_initialization_and_destruction_0(int, int)+0x64>)
     f8e:	4618      	mov	r0, r3
     f90:	f7ff fbee 	bl	770 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
     f94:	bf00      	nop
     f96:	3708      	adds	r7, #8
     f98:	46bd      	mov	sp, r7
     f9a:	bd80      	pop	{r7, pc}
     f9c:	2007c140 	.word	0x2007c140
     fa0:	4002c000 	.word	0x4002c000
     fa4:	2007c13c 	.word	0x2007c13c
     fa8:	2007c250 	.word	0x2007c250
     fac:	2007c150 	.word	0x2007c150

00000fb0 <_GLOBAL__sub_I_main>:
     fb0:	b580      	push	{r7, lr}
     fb2:	af00      	add	r7, sp, #0
     fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     fb8:	2001      	movs	r0, #1
     fba:	f7ff ffc5 	bl	f48 <__static_initialization_and_destruction_0(int, int)>
     fbe:	bd80      	pop	{r7, pc}

00000fc0 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     fc0:	b580      	push	{r7, lr}
     fc2:	b086      	sub	sp, #24
     fc4:	af02      	add	r7, sp, #8
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     fca:	683a      	ldr	r2, [r7, #0]
     fcc:	f107 030c 	add.w	r3, r7, #12
     fd0:	9300      	str	r3, [sp, #0]
     fd2:	2300      	movs	r3, #0
     fd4:	2100      	movs	r1, #0
     fd6:	6878      	ldr	r0, [r7, #4]
     fd8:	f004 fbfe 	bl	57d8 <_Unwind_VRS_Get>
      return val;
     fdc:	68fb      	ldr	r3, [r7, #12]
    }
     fde:	4618      	mov	r0, r3
     fe0:	3710      	adds	r7, #16
     fe2:	46bd      	mov	sp, r7
     fe4:	bd80      	pop	{r7, pc}
     fe6:	Address 0x0000000000000fe6 is out of bounds.


00000fe8 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     fe8:	b480      	push	{r7}
     fea:	b085      	sub	sp, #20
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     ff0:	4b09      	ldr	r3, [pc, #36]	; (1018 <sjsu::build::Stringify(sjsu::build::Target)+0x30>)
     ff2:	60fb      	str	r3, [r7, #12]
  switch (target)
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d002      	beq.n	1000 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     ffa:	2b01      	cmp	r3, #1
     ffc:	d003      	beq.n	1006 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     ffe:	e005      	b.n	100c <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
    1000:	4b06      	ldr	r3, [pc, #24]	; (101c <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
    1002:	60fb      	str	r3, [r7, #12]
    1004:	e002      	b.n	100c <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
    1006:	4b06      	ldr	r3, [pc, #24]	; (1020 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
    1008:	60fb      	str	r3, [r7, #12]
    100a:	bf00      	nop
  }
  return result;
    100c:	68fb      	ldr	r3, [r7, #12]
}
    100e:	4618      	mov	r0, r3
    1010:	3714      	adds	r7, #20
    1012:	46bd      	mov	sp, r7
    1014:	bc80      	pop	{r7}
    1016:	4770      	bx	lr
    1018:	00006648 	.word	0x00006648
    101c:	00006650 	.word	0x00006650
    1020:	0000665c 	.word	0x0000665c

00001024 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    1024:	b580      	push	{r7, lr}
    1026:	b084      	sub	sp, #16
    1028:	af00      	add	r7, sp, #0
    102a:	6078      	str	r0, [r7, #4]
    102c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    1032:	210f      	movs	r1, #15
    1034:	6878      	ldr	r0, [r7, #4]
    1036:	f7ff ffc3 	bl	fc0 <_Unwind_GetGR>
    103a:	4603      	mov	r3, r0
    103c:	f023 0301 	bic.w	r3, r3, #1
    1040:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    1042:	68fb      	ldr	r3, [r7, #12]
    1044:	6819      	ldr	r1, [r3, #0]
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	3b04      	subs	r3, #4
    104a:	461a      	mov	r2, r3
    104c:	4806      	ldr	r0, [pc, #24]	; (1068 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    104e:	f001 fb75 	bl	273c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	1c5a      	adds	r2, r3, #1
    1058:	68fb      	ldr	r3, [r7, #12]
    105a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    105c:	2300      	movs	r3, #0
}
    105e:	4618      	mov	r0, r3
    1060:	3710      	adds	r7, #16
    1062:	46bd      	mov	sp, r7
    1064:	bd80      	pop	{r7, pc}
    1066:	bf00      	nop
    1068:	00006668 	.word	0x00006668

0000106c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    106c:	b580      	push	{r7, lr}
    106e:	b084      	sub	sp, #16
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
    1074:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    107a:	210f      	movs	r1, #15
    107c:	6878      	ldr	r0, [r7, #4]
    107e:	f7ff ff9f 	bl	fc0 <_Unwind_GetGR>
    1082:	4603      	mov	r3, r0
    1084:	f023 0301 	bic.w	r3, r3, #1
    1088:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    108a:	68bb      	ldr	r3, [r7, #8]
    108c:	3b04      	subs	r3, #4
    108e:	4619      	mov	r1, r3
    1090:	4806      	ldr	r0, [pc, #24]	; (10ac <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    1092:	f001 fb53 	bl	273c <printf>
  (*depth)++;
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	1c5a      	adds	r2, r3, #1
    109c:	68fb      	ldr	r3, [r7, #12]
    109e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    10a0:	2300      	movs	r3, #0
}
    10a2:	4618      	mov	r0, r3
    10a4:	3710      	adds	r7, #16
    10a6:	46bd      	mov	sp, r7
    10a8:	bd80      	pop	{r7, pc}
    10aa:	bf00      	nop
    10ac:	00006678 	.word	0x00006678

000010b0 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b084      	sub	sp, #16
    10b4:	af00      	add	r7, sp, #0
    10b6:	4603      	mov	r3, r0
    10b8:	6039      	str	r1, [r7, #0]
    10ba:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    10bc:	2300      	movs	r3, #0
    10be:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    10c0:	f107 030c 	add.w	r3, r7, #12
    10c4:	4619      	mov	r1, r3
    10c6:	481a      	ldr	r0, [pc, #104]	; (1130 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    10c8:	f004 ff7c 	bl	5fc4 <_Unwind_Backtrace>
    if (final_address)
    10cc:	683b      	ldr	r3, [r7, #0]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d005      	beq.n	10de <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    10d2:	68fb      	ldr	r3, [r7, #12]
    10d4:	683a      	ldr	r2, [r7, #0]
    10d6:	4619      	mov	r1, r3
    10d8:	4816      	ldr	r0, [pc, #88]	; (1134 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    10da:	f001 fb2f 	bl	273c <printf>
    }

    if (show_make_command)
    10de:	79fb      	ldrb	r3, [r7, #7]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d020      	beq.n	1126 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
    10e4:	4814      	ldr	r0, [pc, #80]	; (1138 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    10e6:	f001 fb29 	bl	273c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    10ea:	4814      	ldr	r0, [pc, #80]	; (113c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    10ec:	f001 fb26 	bl	273c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
    10f0:	2000      	movs	r0, #0
    10f2:	f7ff ff79 	bl	fe8 <sjsu::build::Stringify(sjsu::build::Target)>
    10f6:	4603      	mov	r3, r0
    10f8:	4619      	mov	r1, r3
    10fa:	4811      	ldr	r0, [pc, #68]	; (1140 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    10fc:	f001 fb1e 	bl	273c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    1100:	f107 030c 	add.w	r3, r7, #12
    1104:	4619      	mov	r1, r3
    1106:	480f      	ldr	r0, [pc, #60]	; (1144 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    1108:	f004 ff5c 	bl	5fc4 <_Unwind_Backtrace>
      if (final_address)
    110c:	683b      	ldr	r3, [r7, #0]
    110e:	2b00      	cmp	r3, #0
    1110:	d003      	beq.n	111a <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
    1112:	6839      	ldr	r1, [r7, #0]
    1114:	480c      	ldr	r0, [pc, #48]	; (1148 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
    1116:	f001 fb11 	bl	273c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    111a:	480c      	ldr	r0, [pc, #48]	; (114c <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
    111c:	f001 fb0e 	bl	273c <printf>
      printf(
    1120:	480b      	ldr	r0, [pc, #44]	; (1150 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
    1122:	f000 f9e1 	bl	14e8 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    1126:	bf00      	nop
    1128:	3710      	adds	r7, #16
    112a:	46bd      	mov	sp, r7
    112c:	bd80      	pop	{r7, pc}
    112e:	bf00      	nop
    1130:	00001025 	.word	0x00001025
    1134:	00006680 	.word	0x00006680
    1138:	0000668c 	.word	0x0000668c
    113c:	000066c4 	.word	0x000066c4
    1140:	000066d0 	.word	0x000066d0
    1144:	0000106d 	.word	0x0000106d
    1148:	000066ec 	.word	0x000066ec
    114c:	000066f4 	.word	0x000066f4
    1150:	000066fc 	.word	0x000066fc

00001154 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    1154:	b480      	push	{r7}
    1156:	b087      	sub	sp, #28
    1158:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    115a:	2300      	movs	r3, #0
    115c:	617b      	str	r3, [r7, #20]
    115e:	697a      	ldr	r2, [r7, #20]
    1160:	4613      	mov	r3, r2
    1162:	005b      	lsls	r3, r3, #1
    1164:	4413      	add	r3, r2
    1166:	009b      	lsls	r3, r3, #2
    1168:	4a1e      	ldr	r2, [pc, #120]	; (11e4 <sjsu::InitializeDataSection()+0x90>)
    116a:	4413      	add	r3, r2
    116c:	4a1e      	ldr	r2, [pc, #120]	; (11e8 <sjsu::InitializeDataSection()+0x94>)
    116e:	4293      	cmp	r3, r2
    1170:	d233      	bcs.n	11da <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    1172:	491c      	ldr	r1, [pc, #112]	; (11e4 <sjsu::InitializeDataSection()+0x90>)
    1174:	697a      	ldr	r2, [r7, #20]
    1176:	4613      	mov	r3, r2
    1178:	005b      	lsls	r3, r3, #1
    117a:	4413      	add	r3, r2
    117c:	009b      	lsls	r3, r3, #2
    117e:	440b      	add	r3, r1
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    1184:	4917      	ldr	r1, [pc, #92]	; (11e4 <sjsu::InitializeDataSection()+0x90>)
    1186:	697a      	ldr	r2, [r7, #20]
    1188:	4613      	mov	r3, r2
    118a:	005b      	lsls	r3, r3, #1
    118c:	4413      	add	r3, r2
    118e:	009b      	lsls	r3, r3, #2
    1190:	440b      	add	r3, r1
    1192:	685b      	ldr	r3, [r3, #4]
    1194:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    1196:	4913      	ldr	r1, [pc, #76]	; (11e4 <sjsu::InitializeDataSection()+0x90>)
    1198:	697a      	ldr	r2, [r7, #20]
    119a:	4613      	mov	r3, r2
    119c:	005b      	lsls	r3, r3, #1
    119e:	4413      	add	r3, r2
    11a0:	009b      	lsls	r3, r3, #2
    11a2:	440b      	add	r3, r1
    11a4:	3308      	adds	r3, #8
    11a6:	681b      	ldr	r3, [r3, #0]
    11a8:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    11aa:	2300      	movs	r3, #0
    11ac:	613b      	str	r3, [r7, #16]
    11ae:	693a      	ldr	r2, [r7, #16]
    11b0:	687b      	ldr	r3, [r7, #4]
    11b2:	429a      	cmp	r2, r3
    11b4:	d20d      	bcs.n	11d2 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    11b6:	693b      	ldr	r3, [r7, #16]
    11b8:	009b      	lsls	r3, r3, #2
    11ba:	68fa      	ldr	r2, [r7, #12]
    11bc:	441a      	add	r2, r3
    11be:	693b      	ldr	r3, [r7, #16]
    11c0:	009b      	lsls	r3, r3, #2
    11c2:	68b9      	ldr	r1, [r7, #8]
    11c4:	440b      	add	r3, r1
    11c6:	6812      	ldr	r2, [r2, #0]
    11c8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    11ca:	693b      	ldr	r3, [r7, #16]
    11cc:	3301      	adds	r3, #1
    11ce:	613b      	str	r3, [r7, #16]
    11d0:	e7ed      	b.n	11ae <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    11d2:	697b      	ldr	r3, [r7, #20]
    11d4:	3301      	adds	r3, #1
    11d6:	617b      	str	r3, [r7, #20]
    11d8:	e7c1      	b.n	115e <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    11da:	bf00      	nop
    11dc:	371c      	adds	r7, #28
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr
    11e4:	000000cc 	.word	0x000000cc
    11e8:	000000d8 	.word	0x000000d8

000011ec <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    11ec:	b480      	push	{r7}
    11ee:	b085      	sub	sp, #20
    11f0:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    11f2:	2300      	movs	r3, #0
    11f4:	60fb      	str	r3, [r7, #12]
    11f6:	68fb      	ldr	r3, [r7, #12]
    11f8:	00db      	lsls	r3, r3, #3
    11fa:	4a14      	ldr	r2, [pc, #80]	; (124c <sjsu::InitializeBssSection()+0x60>)
    11fc:	4413      	add	r3, r2
    11fe:	4a14      	ldr	r2, [pc, #80]	; (1250 <sjsu::InitializeBssSection()+0x64>)
    1200:	4293      	cmp	r3, r2
    1202:	d21e      	bcs.n	1242 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    1204:	4a11      	ldr	r2, [pc, #68]	; (124c <sjsu::InitializeBssSection()+0x60>)
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    120c:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    120e:	4a0f      	ldr	r2, [pc, #60]	; (124c <sjsu::InitializeBssSection()+0x60>)
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	00db      	lsls	r3, r3, #3
    1214:	4413      	add	r3, r2
    1216:	685b      	ldr	r3, [r3, #4]
    1218:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    121a:	2300      	movs	r3, #0
    121c:	60bb      	str	r3, [r7, #8]
    121e:	68ba      	ldr	r2, [r7, #8]
    1220:	683b      	ldr	r3, [r7, #0]
    1222:	429a      	cmp	r2, r3
    1224:	d209      	bcs.n	123a <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    1226:	68bb      	ldr	r3, [r7, #8]
    1228:	009b      	lsls	r3, r3, #2
    122a:	687a      	ldr	r2, [r7, #4]
    122c:	4413      	add	r3, r2
    122e:	2200      	movs	r2, #0
    1230:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1232:	68bb      	ldr	r3, [r7, #8]
    1234:	3301      	adds	r3, #1
    1236:	60bb      	str	r3, [r7, #8]
    1238:	e7f1      	b.n	121e <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	3301      	adds	r3, #1
    123e:	60fb      	str	r3, [r7, #12]
    1240:	e7d9      	b.n	11f6 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    1242:	bf00      	nop
    1244:	3714      	adds	r7, #20
    1246:	46bd      	mov	sp, r7
    1248:	bc80      	pop	{r7}
    124a:	4770      	bx	lr
    124c:	000000d8 	.word	0x000000d8
    1250:	000000e0 	.word	0x000000e0

00001254 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    1258:	f7ff ff7c 	bl	1154 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    125c:	f7ff ffc6 	bl	11ec <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    1260:	f005 f888 	bl	6374 <__libc_init_array>
}
    1264:	bf00      	nop
    1266:	bd80      	pop	{r7, pc}

00001268 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    1268:	b580      	push	{r7, lr}
    126a:	b08c      	sub	sp, #48	; 0x30
    126c:	af02      	add	r7, sp, #8
    126e:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	685b      	ldr	r3, [r3, #4]
    127a:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    127c:	687b      	ldr	r3, [r7, #4]
    127e:	689b      	ldr	r3, [r3, #8]
    1280:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    1282:	687b      	ldr	r3, [r7, #4]
    1284:	68db      	ldr	r3, [r3, #12]
    1286:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	691b      	ldr	r3, [r3, #16]
    128c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	695b      	ldr	r3, [r3, #20]
    1292:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	699b      	ldr	r3, [r3, #24]
    1298:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	69db      	ldr	r3, [r3, #28]
    129e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    12a0:	480d      	ldr	r0, [pc, #52]	; (12d8 <GetRegistersFromStack+0x70>)
    12a2:	f001 fa4b 	bl	273c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    12a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    12a8:	6a3a      	ldr	r2, [r7, #32]
    12aa:	69f8      	ldr	r0, [r7, #28]
    12ac:	69bb      	ldr	r3, [r7, #24]
    12ae:	9300      	str	r3, [sp, #0]
    12b0:	4603      	mov	r3, r0
    12b2:	480a      	ldr	r0, [pc, #40]	; (12dc <GetRegistersFromStack+0x74>)
    12b4:	f001 fa42 	bl	273c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    12b8:	6979      	ldr	r1, [r7, #20]
    12ba:	693a      	ldr	r2, [r7, #16]
    12bc:	68f8      	ldr	r0, [r7, #12]
    12be:	68bb      	ldr	r3, [r7, #8]
    12c0:	9300      	str	r3, [sp, #0]
    12c2:	4603      	mov	r3, r0
    12c4:	4806      	ldr	r0, [pc, #24]	; (12e0 <GetRegistersFromStack+0x78>)
    12c6:	f001 fa39 	bl	273c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	4619      	mov	r1, r3
    12ce:	2001      	movs	r0, #1
    12d0:	f7ff feee 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    12d4:	e7fe      	b.n	12d4 <GetRegistersFromStack+0x6c>
    12d6:	bf00      	nop
    12d8:	00006cdc 	.word	0x00006cdc
    12dc:	00006d08 	.word	0x00006d08
    12e0:	00006d3c 	.word	0x00006d3c

000012e4 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    12e4:	b480      	push	{r7}
    12e6:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    12e8:	f01e 0f04 	tst.w	lr, #4
    12ec:	bf0c      	ite	eq
    12ee:	f3ef 8008 	mrseq	r0, MSP
    12f2:	f3ef 8009 	mrsne	r0, PSP
    12f6:	6981      	ldr	r1, [r0, #24]
    12f8:	4a00      	ldr	r2, [pc, #0]	; (12fc <handler2_address_const>)
    12fa:	4710      	bx	r2

000012fc <handler2_address_const>:
    12fc:	00001269 	.word	0x00001269
    }
  }
    1300:	bf00      	nop
    1302:	46bd      	mov	sp, r7
    1304:	bc80      	pop	{r7}
    1306:	4770      	bx	lr

00001308 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    1308:	b580      	push	{r7, lr}
    130a:	b084      	sub	sp, #16
    130c:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    130e:	4b16      	ldr	r3, [pc, #88]	; (1368 <ArmResetHandler+0x60>)
    1310:	60fb      	str	r3, [r7, #12]
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    1316:	683b      	ldr	r3, [r7, #0]
    1318:	f383 8809 	msr	PSP, r3
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    1326:	f7ff ff95 	bl	1254 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    132a:	4b10      	ldr	r3, [pc, #64]	; (136c <ArmResetHandler+0x64>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	f003 0301 	and.w	r3, r3, #1
    1332:	2b00      	cmp	r3, #0
    1334:	bf14      	ite	ne
    1336:	2301      	movne	r3, #1
    1338:	2300      	moveq	r3, #0
    133a:	b2db      	uxtb	r3, r3
    133c:	2b00      	cmp	r3, #0
    133e:	d001      	beq.n	1344 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    1340:	f001 fa1e 	bl	2780 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    1344:	f002 ff88 	bl	4258 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    1348:	f7ff fad8 	bl	8fc <main>
    134c:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    134e:	68bb      	ldr	r3, [r7, #8]
    1350:	2b00      	cmp	r3, #0
    1352:	db04      	blt.n	135e <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    1354:	68b9      	ldr	r1, [r7, #8]
    1356:	4806      	ldr	r0, [pc, #24]	; (1370 <ArmResetHandler+0x68>)
    1358:	f001 f9f0 	bl	273c <printf>
    135c:	e003      	b.n	1366 <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    135e:	68b9      	ldr	r1, [r7, #8]
    1360:	4804      	ldr	r0, [pc, #16]	; (1374 <ArmResetHandler+0x6c>)
    1362:	f001 f9eb 	bl	273c <printf>
    1366:	e7fe      	b.n	1366 <ArmResetHandler+0x5e>
    1368:	20083fe0 	.word	0x20083fe0
    136c:	e000edf0 	.word	0xe000edf0
    1370:	00006d74 	.word	0x00006d74
    1374:	00006da8 	.word	0x00006da8

00001378 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    1378:	b580      	push	{r7, lr}
    137a:	b082      	sub	sp, #8
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
    1380:	6039      	str	r1, [r7, #0]
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	2b01      	cmp	r3, #1
    1386:	d111      	bne.n	13ac <__static_initialization_and_destruction_0(int, int)+0x34>
    1388:	683b      	ldr	r3, [r7, #0]
    138a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    138e:	4293      	cmp	r3, r2
    1390:	d10c      	bne.n	13ac <__static_initialization_and_destruction_0(int, int)+0x34>
    1392:	4b08      	ldr	r3, [pc, #32]	; (13b4 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	f003 0301 	and.w	r3, r3, #1
    139a:	2b00      	cmp	r3, #0
    139c:	d106      	bne.n	13ac <__static_initialization_and_destruction_0(int, int)+0x34>
    139e:	4b05      	ldr	r3, [pc, #20]	; (13b4 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    13a0:	2201      	movs	r2, #1
    13a2:	601a      	str	r2, [r3, #0]
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <__static_initialization_and_destruction_0(int, int)+0x40>)
    13a6:	4618      	mov	r0, r3
    13a8:	f7ff f9e2 	bl	770 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    13ac:	bf00      	nop
    13ae:	3708      	adds	r7, #8
    13b0:	46bd      	mov	sp, r7
    13b2:	bd80      	pop	{r7, pc}
    13b4:	2007c250 	.word	0x2007c250
    13b8:	2007c150 	.word	0x2007c150

000013bc <_GLOBAL__sub_I_GetRegistersFromStack>:
    13bc:	b580      	push	{r7, lr}
    13be:	af00      	add	r7, sp, #0
    13c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13c4:	2001      	movs	r0, #1
    13c6:	f7ff ffd7 	bl	1378 <__static_initialization_and_destruction_0(int, int)>
    13ca:	bd80      	pop	{r7, pc}

000013cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b084      	sub	sp, #16
    13d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    13d2:	4b28      	ldr	r3, [pc, #160]	; (1474 <vTaskSwitchContext+0xa8>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d003      	beq.n	13e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    13da:	4b27      	ldr	r3, [pc, #156]	; (1478 <vTaskSwitchContext+0xac>)
    13dc:	2201      	movs	r2, #1
    13de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    13e0:	e043      	b.n	146a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    13e2:	4b25      	ldr	r3, [pc, #148]	; (1478 <vTaskSwitchContext+0xac>)
    13e4:	2200      	movs	r2, #0
    13e6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    13e8:	f002 ff2c 	bl	4244 <ThreadRuntimeCounter>
    13ec:	4602      	mov	r2, r0
    13ee:	4b23      	ldr	r3, [pc, #140]	; (147c <vTaskSwitchContext+0xb0>)
    13f0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    13f2:	4b22      	ldr	r3, [pc, #136]	; (147c <vTaskSwitchContext+0xb0>)
    13f4:	681a      	ldr	r2, [r3, #0]
    13f6:	4b22      	ldr	r3, [pc, #136]	; (1480 <vTaskSwitchContext+0xb4>)
    13f8:	681b      	ldr	r3, [r3, #0]
    13fa:	429a      	cmp	r2, r3
    13fc:	d909      	bls.n	1412 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    13fe:	4b21      	ldr	r3, [pc, #132]	; (1484 <vTaskSwitchContext+0xb8>)
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	6d59      	ldr	r1, [r3, #84]	; 0x54
    1404:	4a1d      	ldr	r2, [pc, #116]	; (147c <vTaskSwitchContext+0xb0>)
    1406:	6810      	ldr	r0, [r2, #0]
    1408:	4a1d      	ldr	r2, [pc, #116]	; (1480 <vTaskSwitchContext+0xb4>)
    140a:	6812      	ldr	r2, [r2, #0]
    140c:	1a82      	subs	r2, r0, r2
    140e:	440a      	add	r2, r1
    1410:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    1412:	4b1a      	ldr	r3, [pc, #104]	; (147c <vTaskSwitchContext+0xb0>)
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	4a1a      	ldr	r2, [pc, #104]	; (1480 <vTaskSwitchContext+0xb4>)
    1418:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    141a:	4b1b      	ldr	r3, [pc, #108]	; (1488 <vTaskSwitchContext+0xbc>)
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	fab3 f383 	clz	r3, r3
    1426:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    1428:	78fb      	ldrb	r3, [r7, #3]
    142a:	f1c3 031f 	rsb	r3, r3, #31
    142e:	60fb      	str	r3, [r7, #12]
    1430:	68fa      	ldr	r2, [r7, #12]
    1432:	4613      	mov	r3, r2
    1434:	009b      	lsls	r3, r3, #2
    1436:	4413      	add	r3, r2
    1438:	009b      	lsls	r3, r3, #2
    143a:	4a14      	ldr	r2, [pc, #80]	; (148c <vTaskSwitchContext+0xc0>)
    143c:	4413      	add	r3, r2
    143e:	60bb      	str	r3, [r7, #8]
    1440:	68bb      	ldr	r3, [r7, #8]
    1442:	685b      	ldr	r3, [r3, #4]
    1444:	685a      	ldr	r2, [r3, #4]
    1446:	68bb      	ldr	r3, [r7, #8]
    1448:	605a      	str	r2, [r3, #4]
    144a:	68bb      	ldr	r3, [r7, #8]
    144c:	685a      	ldr	r2, [r3, #4]
    144e:	68bb      	ldr	r3, [r7, #8]
    1450:	3308      	adds	r3, #8
    1452:	429a      	cmp	r2, r3
    1454:	d104      	bne.n	1460 <vTaskSwitchContext+0x94>
    1456:	68bb      	ldr	r3, [r7, #8]
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	685a      	ldr	r2, [r3, #4]
    145c:	68bb      	ldr	r3, [r7, #8]
    145e:	605a      	str	r2, [r3, #4]
    1460:	68bb      	ldr	r3, [r7, #8]
    1462:	685b      	ldr	r3, [r3, #4]
    1464:	68db      	ldr	r3, [r3, #12]
    1466:	4a07      	ldr	r2, [pc, #28]	; (1484 <vTaskSwitchContext+0xb8>)
    1468:	6013      	str	r3, [r2, #0]
}
    146a:	bf00      	nop
    146c:	3710      	adds	r7, #16
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	2007c2c4 	.word	0x2007c2c4
    1478:	2007c2c0 	.word	0x2007c2c0
    147c:	2007c2cc 	.word	0x2007c2cc
    1480:	2007c2c8 	.word	0x2007c2c8
    1484:	2007c254 	.word	0x2007c254
    1488:	2007c2bc 	.word	0x2007c2bc
    148c:	2007c258 	.word	0x2007c258

00001490 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    1490:	b480      	push	{r7}
    1492:	af00      	add	r7, sp, #0
    return 1;
    1494:	2301      	movs	r3, #1
  }
    1496:	4618      	mov	r0, r3
    1498:	46bd      	mov	sp, r7
    149a:	bc80      	pop	{r7}
    149c:	4770      	bx	lr

0000149e <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    149e:	b480      	push	{r7}
    14a0:	b083      	sub	sp, #12
    14a2:	af00      	add	r7, sp, #0
    14a4:	6078      	str	r0, [r7, #4]
    14a6:	6039      	str	r1, [r7, #0]
    return -1;
    14a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    14ac:	4618      	mov	r0, r3
    14ae:	370c      	adds	r7, #12
    14b0:	46bd      	mov	sp, r7
    14b2:	bc80      	pop	{r7}
    14b4:	4770      	bx	lr
    14b6:	Address 0x00000000000014b6 is out of bounds.


000014b8 <_write>:
    heap_position += increment;
    return previous_heap_position;
  }
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    14b8:	b580      	push	{r7, lr}
    14ba:	b084      	sub	sp, #16
    14bc:	af00      	add	r7, sp, #0
    14be:	60f8      	str	r0, [r7, #12]
    14c0:	60b9      	str	r1, [r7, #8]
    14c2:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	4619      	mov	r1, r3
    14c8:	68b8      	ldr	r0, [r7, #8]
    14ca:	f001 f95f 	bl	278c <trace_write>
    return sjsu::newlib::out(ptr, length);
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <_write+0x2c>)
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	687a      	ldr	r2, [r7, #4]
    14d4:	4611      	mov	r1, r2
    14d6:	68b8      	ldr	r0, [r7, #8]
    14d8:	4798      	blx	r3
    14da:	4603      	mov	r3, r0
  }
    14dc:	4618      	mov	r0, r3
    14de:	3710      	adds	r7, #16
    14e0:	46bd      	mov	sp, r7
    14e2:	bd80      	pop	{r7, pc}
    14e4:	2007c008 	.word	0x2007c008

000014e8 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    14e8:	b580      	push	{r7, lr}
    14ea:	b084      	sub	sp, #16
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    14f0:	6878      	ldr	r0, [r7, #4]
    14f2:	f004 ffbb 	bl	646c <strlen>
    14f6:	4603      	mov	r3, r0
    14f8:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    14fa:	2300      	movs	r3, #0
    14fc:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	6879      	ldr	r1, [r7, #4]
    1502:	2000      	movs	r0, #0
    1504:	f7ff ffd8 	bl	14b8 <_write>
    1508:	4602      	mov	r2, r0
    150a:	68bb      	ldr	r3, [r7, #8]
    150c:	4413      	add	r3, r2
    150e:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    1510:	2201      	movs	r2, #1
    1512:	4906      	ldr	r1, [pc, #24]	; (152c <puts+0x44>)
    1514:	2000      	movs	r0, #0
    1516:	f7ff ffcf 	bl	14b8 <_write>
    151a:	4602      	mov	r2, r0
    151c:	68bb      	ldr	r3, [r7, #8]
    151e:	4413      	add	r3, r2
    1520:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    1522:	68bb      	ldr	r3, [r7, #8]
  }
    1524:	4618      	mov	r0, r3
    1526:	3710      	adds	r7, #16
    1528:	46bd      	mov	sp, r7
    152a:	bd80      	pop	{r7, pc}
    152c:	00006ddc 	.word	0x00006ddc

00001530 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    1530:	b480      	push	{r7}
    1532:	b083      	sub	sp, #12
    1534:	af00      	add	r7, sp, #0
    1536:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    1538:	bf00      	nop
    while (1)
    153a:	e7fd      	b.n	1538 <_exit+0x8>

0000153c <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    153c:	b580      	push	{r7, lr}
    153e:	b088      	sub	sp, #32
    1540:	af00      	add	r7, sp, #0
    1542:	60b9      	str	r1, [r7, #8]
    1544:	607a      	str	r2, [r7, #4]
    1546:	603b      	str	r3, [r7, #0]
    1548:	4603      	mov	r3, r0
    154a:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    154c:	23fe      	movs	r3, #254	; 0xfe
    154e:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    1550:	697a      	ldr	r2, [r7, #20]
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	fbb3 f1f2 	udiv	r1, r3, r2
    1558:	fb02 f201 	mul.w	r2, r2, r1
    155c:	1a9b      	subs	r3, r3, r2
    155e:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    1560:	68ba      	ldr	r2, [r7, #8]
    1562:	69fb      	ldr	r3, [r7, #28]
    1564:	4413      	add	r3, r2
    1566:	7bfa      	ldrb	r2, [r7, #15]
    1568:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    156a:	7bfb      	ldrb	r3, [r7, #15]
    156c:	2b00      	cmp	r3, #0
    156e:	d106      	bne.n	157e <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    1570:	69fb      	ldr	r3, [r7, #28]
    1572:	461a      	mov	r2, r3
    1574:	68b9      	ldr	r1, [r7, #8]
    1576:	2001      	movs	r0, #1
    1578:	f7ff ff9e 	bl	14b8 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    157c:	e012      	b.n	15a4 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    157e:	69fb      	ldr	r3, [r7, #28]
    1580:	1c5a      	adds	r2, r3, #1
    1582:	697b      	ldr	r3, [r7, #20]
    1584:	429a      	cmp	r2, r3
    1586:	d10d      	bne.n	15a4 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    1588:	697b      	ldr	r3, [r7, #20]
    158a:	3301      	adds	r3, #1
    158c:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    158e:	68ba      	ldr	r2, [r7, #8]
    1590:	69bb      	ldr	r3, [r7, #24]
    1592:	4413      	add	r3, r2
    1594:	2200      	movs	r2, #0
    1596:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    1598:	69bb      	ldr	r3, [r7, #24]
    159a:	461a      	mov	r2, r3
    159c:	68b9      	ldr	r1, [r7, #8]
    159e:	2001      	movs	r0, #1
    15a0:	f7ff ff8a 	bl	14b8 <_write>
}
    15a4:	bf00      	nop
    15a6:	3720      	adds	r7, #32
    15a8:	46bd      	mov	sp, r7
    15aa:	bd80      	pop	{r7, pc}

000015ac <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    15ac:	b480      	push	{r7}
    15ae:	b085      	sub	sp, #20
    15b0:	af00      	add	r7, sp, #0
    15b2:	60b9      	str	r1, [r7, #8]
    15b4:	607a      	str	r2, [r7, #4]
    15b6:	603b      	str	r3, [r7, #0]
    15b8:	4603      	mov	r3, r0
    15ba:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    15bc:	bf00      	nop
    15be:	3714      	adds	r7, #20
    15c0:	46bd      	mov	sp, r7
    15c2:	bc80      	pop	{r7}
    15c4:	4770      	bx	lr

000015c6 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    15c6:	b480      	push	{r7}
    15c8:	b085      	sub	sp, #20
    15ca:	af00      	add	r7, sp, #0
    15cc:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	60fb      	str	r3, [r7, #12]
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	781b      	ldrb	r3, [r3, #0]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d003      	beq.n	15e2 <_strlen(char const*)+0x1c>
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	3301      	adds	r3, #1
    15de:	60fb      	str	r3, [r7, #12]
    15e0:	e7f7      	b.n	15d2 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    15e2:	68fa      	ldr	r2, [r7, #12]
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	1ad3      	subs	r3, r2, r3
}
    15e8:	4618      	mov	r0, r3
    15ea:	3714      	adds	r7, #20
    15ec:	46bd      	mov	sp, r7
    15ee:	bc80      	pop	{r7}
    15f0:	4770      	bx	lr

000015f2 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    15f2:	b480      	push	{r7}
    15f4:	b083      	sub	sp, #12
    15f6:	af00      	add	r7, sp, #0
    15f8:	4603      	mov	r3, r0
    15fa:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    15fc:	79fb      	ldrb	r3, [r7, #7]
    15fe:	2b2f      	cmp	r3, #47	; 0x2f
    1600:	d904      	bls.n	160c <_is_digit(char)+0x1a>
    1602:	79fb      	ldrb	r3, [r7, #7]
    1604:	2b39      	cmp	r3, #57	; 0x39
    1606:	d801      	bhi.n	160c <_is_digit(char)+0x1a>
    1608:	2301      	movs	r3, #1
    160a:	e000      	b.n	160e <_is_digit(char)+0x1c>
    160c:	2300      	movs	r3, #0
}
    160e:	4618      	mov	r0, r3
    1610:	370c      	adds	r7, #12
    1612:	46bd      	mov	sp, r7
    1614:	bc80      	pop	{r7}
    1616:	4770      	bx	lr

00001618 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    1618:	b580      	push	{r7, lr}
    161a:	b084      	sub	sp, #16
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    1620:	2300      	movs	r3, #0
    1622:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	4618      	mov	r0, r3
    162c:	f7ff ffe1 	bl	15f2 <_is_digit(char)>
    1630:	4603      	mov	r3, r0
    1632:	2b00      	cmp	r3, #0
    1634:	d00f      	beq.n	1656 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1636:	68fa      	ldr	r2, [r7, #12]
    1638:	4613      	mov	r3, r2
    163a:	009b      	lsls	r3, r3, #2
    163c:	4413      	add	r3, r2
    163e:	005b      	lsls	r3, r3, #1
    1640:	4618      	mov	r0, r3
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	1c59      	adds	r1, r3, #1
    1648:	687a      	ldr	r2, [r7, #4]
    164a:	6011      	str	r1, [r2, #0]
    164c:	781b      	ldrb	r3, [r3, #0]
    164e:	4403      	add	r3, r0
    1650:	3b30      	subs	r3, #48	; 0x30
    1652:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1654:	e7e6      	b.n	1624 <_atoi(char const**)+0xc>
  }
  return i;
    1656:	68fb      	ldr	r3, [r7, #12]
}
    1658:	4618      	mov	r0, r3
    165a:	3710      	adds	r7, #16
    165c:	46bd      	mov	sp, r7
    165e:	bd80      	pop	{r7, pc}

00001660 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1660:	b590      	push	{r4, r7, lr}
    1662:	b089      	sub	sp, #36	; 0x24
    1664:	af00      	add	r7, sp, #0
    1666:	60f8      	str	r0, [r7, #12]
    1668:	60b9      	str	r1, [r7, #8]
    166a:	607a      	str	r2, [r7, #4]
    166c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1674:	f003 0302 	and.w	r3, r3, #2
    1678:	2b00      	cmp	r3, #0
    167a:	d10e      	bne.n	169a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    167c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    167e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1680:	429a      	cmp	r2, r3
    1682:	d20a      	bcs.n	169a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1686:	2b1f      	cmp	r3, #31
    1688:	d807      	bhi.n	169a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    168c:	1c5a      	adds	r2, r3, #1
    168e:	637a      	str	r2, [r7, #52]	; 0x34
    1690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1692:	4413      	add	r3, r2
    1694:	2230      	movs	r2, #48	; 0x30
    1696:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1698:	e7eb      	b.n	1672 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    169a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    169c:	f003 0302 	and.w	r3, r3, #2
    16a0:	2b00      	cmp	r3, #0
    16a2:	d113      	bne.n	16cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    16a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16a6:	f003 0301 	and.w	r3, r3, #1
    16aa:	2b00      	cmp	r3, #0
    16ac:	d00e      	beq.n	16cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    16ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    16b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    16b2:	429a      	cmp	r2, r3
    16b4:	d20a      	bcs.n	16cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    16b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16b8:	2b1f      	cmp	r3, #31
    16ba:	d807      	bhi.n	16cc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    16bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16be:	1c5a      	adds	r2, r3, #1
    16c0:	637a      	str	r2, [r7, #52]	; 0x34
    16c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    16c4:	4413      	add	r3, r2
    16c6:	2230      	movs	r2, #48	; 0x30
    16c8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    16ca:	e7e6      	b.n	169a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    16cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16ce:	f003 0310 	and.w	r3, r3, #16
    16d2:	2b00      	cmp	r3, #0
    16d4:	d058      	beq.n	1788 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    16d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    16dc:	2b00      	cmp	r3, #0
    16de:	d116      	bne.n	170e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    16e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16e2:	2b00      	cmp	r3, #0
    16e4:	d013      	beq.n	170e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    16e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    16e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    16ea:	429a      	cmp	r2, r3
    16ec:	d003      	beq.n	16f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    16ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    16f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    16f2:	429a      	cmp	r2, r3
    16f4:	d10b      	bne.n	170e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    16f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16f8:	3b01      	subs	r3, #1
    16fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    16fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16fe:	2b00      	cmp	r3, #0
    1700:	d005      	beq.n	170e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1704:	2b10      	cmp	r3, #16
    1706:	d102      	bne.n	170e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    1708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    170a:	3b01      	subs	r3, #1
    170c:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    170e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1710:	2b10      	cmp	r3, #16
    1712:	d10f      	bne.n	1734 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1716:	f003 0320 	and.w	r3, r3, #32
    171a:	2b00      	cmp	r3, #0
    171c:	d10a      	bne.n	1734 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1720:	2b1f      	cmp	r3, #31
    1722:	d807      	bhi.n	1734 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    1724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1726:	1c5a      	adds	r2, r3, #1
    1728:	637a      	str	r2, [r7, #52]	; 0x34
    172a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    172c:	4413      	add	r3, r2
    172e:	2278      	movs	r2, #120	; 0x78
    1730:	701a      	strb	r2, [r3, #0]
    1732:	e01f      	b.n	1774 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1736:	2b10      	cmp	r3, #16
    1738:	d10f      	bne.n	175a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    173a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    173c:	f003 0320 	and.w	r3, r3, #32
    1740:	2b00      	cmp	r3, #0
    1742:	d00a      	beq.n	175a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1746:	2b1f      	cmp	r3, #31
    1748:	d807      	bhi.n	175a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    174c:	1c5a      	adds	r2, r3, #1
    174e:	637a      	str	r2, [r7, #52]	; 0x34
    1750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1752:	4413      	add	r3, r2
    1754:	2258      	movs	r2, #88	; 0x58
    1756:	701a      	strb	r2, [r3, #0]
    1758:	e00c      	b.n	1774 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    175c:	2b02      	cmp	r3, #2
    175e:	d109      	bne.n	1774 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    1760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1762:	2b1f      	cmp	r3, #31
    1764:	d806      	bhi.n	1774 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    1766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1768:	1c5a      	adds	r2, r3, #1
    176a:	637a      	str	r2, [r7, #52]	; 0x34
    176c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    176e:	4413      	add	r3, r2
    1770:	2262      	movs	r2, #98	; 0x62
    1772:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1776:	2b1f      	cmp	r3, #31
    1778:	d806      	bhi.n	1788 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    177c:	1c5a      	adds	r2, r3, #1
    177e:	637a      	str	r2, [r7, #52]	; 0x34
    1780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1782:	4413      	add	r3, r2
    1784:	2230      	movs	r2, #48	; 0x30
    1786:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    178a:	2b00      	cmp	r3, #0
    178c:	d014      	beq.n	17b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    178e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1792:	429a      	cmp	r2, r3
    1794:	d110      	bne.n	17b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    1796:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    179a:	2b00      	cmp	r3, #0
    179c:	d109      	bne.n	17b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    179e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    17a0:	f003 0304 	and.w	r3, r3, #4
    17a4:	2b00      	cmp	r3, #0
    17a6:	d104      	bne.n	17b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    17a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    17aa:	f003 0308 	and.w	r3, r3, #8
    17ae:	2b00      	cmp	r3, #0
    17b0:	d002      	beq.n	17b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    17b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17b4:	3b01      	subs	r3, #1
    17b6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    17b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17ba:	2b1f      	cmp	r3, #31
    17bc:	d824      	bhi.n	1808 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    17be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    17c2:	2b00      	cmp	r3, #0
    17c4:	d007      	beq.n	17d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    17c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17c8:	1c5a      	adds	r2, r3, #1
    17ca:	637a      	str	r2, [r7, #52]	; 0x34
    17cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    17ce:	4413      	add	r3, r2
    17d0:	222d      	movs	r2, #45	; 0x2d
    17d2:	701a      	strb	r2, [r3, #0]
    17d4:	e018      	b.n	1808 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    17d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    17d8:	f003 0304 	and.w	r3, r3, #4
    17dc:	2b00      	cmp	r3, #0
    17de:	d007      	beq.n	17f0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    17e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17e2:	1c5a      	adds	r2, r3, #1
    17e4:	637a      	str	r2, [r7, #52]	; 0x34
    17e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    17e8:	4413      	add	r3, r2
    17ea:	222b      	movs	r2, #43	; 0x2b
    17ec:	701a      	strb	r2, [r3, #0]
    17ee:	e00b      	b.n	1808 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    17f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    17f2:	f003 0308 	and.w	r3, r3, #8
    17f6:	2b00      	cmp	r3, #0
    17f8:	d006      	beq.n	1808 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    17fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17fc:	1c5a      	adds	r2, r3, #1
    17fe:	637a      	str	r2, [r7, #52]	; 0x34
    1800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1802:	4413      	add	r3, r2
    1804:	2220      	movs	r2, #32
    1806:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    180a:	f003 0302 	and.w	r3, r3, #2
    180e:	2b00      	cmp	r3, #0
    1810:	d116      	bne.n	1840 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    1812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1814:	f003 0301 	and.w	r3, r3, #1
    1818:	2b00      	cmp	r3, #0
    181a:	d111      	bne.n	1840 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    181e:	61fb      	str	r3, [r7, #28]
    1820:	69fa      	ldr	r2, [r7, #28]
    1822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1824:	429a      	cmp	r2, r3
    1826:	d20b      	bcs.n	1840 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    1828:	687a      	ldr	r2, [r7, #4]
    182a:	1c53      	adds	r3, r2, #1
    182c:	607b      	str	r3, [r7, #4]
    182e:	68fc      	ldr	r4, [r7, #12]
    1830:	683b      	ldr	r3, [r7, #0]
    1832:	68b9      	ldr	r1, [r7, #8]
    1834:	2020      	movs	r0, #32
    1836:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1838:	69fb      	ldr	r3, [r7, #28]
    183a:	3301      	adds	r3, #1
    183c:	61fb      	str	r3, [r7, #28]
    183e:	e7ef      	b.n	1820 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1840:	2300      	movs	r3, #0
    1842:	61bb      	str	r3, [r7, #24]
    1844:	69ba      	ldr	r2, [r7, #24]
    1846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1848:	429a      	cmp	r2, r3
    184a:	d211      	bcs.n	1870 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    184c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    184e:	69bb      	ldr	r3, [r7, #24]
    1850:	1ad3      	subs	r3, r2, r3
    1852:	3b01      	subs	r3, #1
    1854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1856:	4413      	add	r3, r2
    1858:	7818      	ldrb	r0, [r3, #0]
    185a:	687a      	ldr	r2, [r7, #4]
    185c:	1c53      	adds	r3, r2, #1
    185e:	607b      	str	r3, [r7, #4]
    1860:	68fc      	ldr	r4, [r7, #12]
    1862:	683b      	ldr	r3, [r7, #0]
    1864:	68b9      	ldr	r1, [r7, #8]
    1866:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1868:	69bb      	ldr	r3, [r7, #24]
    186a:	3301      	adds	r3, #1
    186c:	61bb      	str	r3, [r7, #24]
    186e:	e7e9      	b.n	1844 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1872:	f003 0302 	and.w	r3, r3, #2
    1876:	2b00      	cmp	r3, #0
    1878:	d00e      	beq.n	1898 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    187a:	687a      	ldr	r2, [r7, #4]
    187c:	697b      	ldr	r3, [r7, #20]
    187e:	1ad3      	subs	r3, r2, r3
    1880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1882:	429a      	cmp	r2, r3
    1884:	d908      	bls.n	1898 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    1886:	687a      	ldr	r2, [r7, #4]
    1888:	1c53      	adds	r3, r2, #1
    188a:	607b      	str	r3, [r7, #4]
    188c:	68fc      	ldr	r4, [r7, #12]
    188e:	683b      	ldr	r3, [r7, #0]
    1890:	68b9      	ldr	r1, [r7, #8]
    1892:	2020      	movs	r0, #32
    1894:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1896:	e7f0      	b.n	187a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    1898:	687b      	ldr	r3, [r7, #4]
}
    189a:	4618      	mov	r0, r3
    189c:	3724      	adds	r7, #36	; 0x24
    189e:	46bd      	mov	sp, r7
    18a0:	bd90      	pop	{r4, r7, pc}

000018a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    18a2:	b580      	push	{r7, lr}
    18a4:	b096      	sub	sp, #88	; 0x58
    18a6:	af08      	add	r7, sp, #32
    18a8:	60f8      	str	r0, [r7, #12]
    18aa:	60b9      	str	r1, [r7, #8]
    18ac:	607a      	str	r2, [r7, #4]
    18ae:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    18b0:	2300      	movs	r3, #0
    18b2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    18b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18b6:	2b00      	cmp	r3, #0
    18b8:	d103      	bne.n	18c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    18ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    18bc:	f023 0310 	bic.w	r3, r3, #16
    18c0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    18c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    18c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    18c8:	2b00      	cmp	r3, #0
    18ca:	d002      	beq.n	18d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    18cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18ce:	2b00      	cmp	r3, #0
    18d0:	d034      	beq.n	193c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    18d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    18d6:	fbb3 f2f2 	udiv	r2, r3, r2
    18da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    18dc:	fb01 f202 	mul.w	r2, r1, r2
    18e0:	1a9b      	subs	r3, r3, r2
    18e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    18e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    18ea:	2b09      	cmp	r3, #9
    18ec:	d804      	bhi.n	18f8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    18ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    18f2:	3330      	adds	r3, #48	; 0x30
    18f4:	b2da      	uxtb	r2, r3
    18f6:	e00d      	b.n	1914 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    18f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    18fa:	f003 0320 	and.w	r3, r3, #32
    18fe:	2b00      	cmp	r3, #0
    1900:	d001      	beq.n	1906 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    1902:	2241      	movs	r2, #65	; 0x41
    1904:	e000      	b.n	1908 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    1906:	2261      	movs	r2, #97	; 0x61
    1908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    190c:	4413      	add	r3, r2
    190e:	b2db      	uxtb	r3, r3
    1910:	3b0a      	subs	r3, #10
    1912:	b2da      	uxtb	r2, r3
    1914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1916:	1c59      	adds	r1, r3, #1
    1918:	6379      	str	r1, [r7, #52]	; 0x34
    191a:	f107 0138 	add.w	r1, r7, #56	; 0x38
    191e:	440b      	add	r3, r1
    1920:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1928:	fbb2 f3f3 	udiv	r3, r2, r3
    192c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    192e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1930:	2b00      	cmp	r3, #0
    1932:	d003      	beq.n	193c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    1934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1936:	2b1f      	cmp	r3, #31
    1938:	d800      	bhi.n	193c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    193a:	e7ca      	b.n	18d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    193e:	9306      	str	r3, [sp, #24]
    1940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1942:	9305      	str	r3, [sp, #20]
    1944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1946:	9304      	str	r3, [sp, #16]
    1948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    194a:	9303      	str	r3, [sp, #12]
    194c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1950:	9302      	str	r3, [sp, #8]
    1952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1954:	9301      	str	r3, [sp, #4]
    1956:	f107 0310 	add.w	r3, r7, #16
    195a:	9300      	str	r3, [sp, #0]
    195c:	683b      	ldr	r3, [r7, #0]
    195e:	687a      	ldr	r2, [r7, #4]
    1960:	68b9      	ldr	r1, [r7, #8]
    1962:	68f8      	ldr	r0, [r7, #12]
    1964:	f7ff fe7c 	bl	1660 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1968:	4603      	mov	r3, r0
}
    196a:	4618      	mov	r0, r3
    196c:	3738      	adds	r7, #56	; 0x38
    196e:	46bd      	mov	sp, r7
    1970:	bd80      	pop	{r7, pc}

00001972 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1972:	b590      	push	{r4, r7, lr}
    1974:	b097      	sub	sp, #92	; 0x5c
    1976:	af08      	add	r7, sp, #32
    1978:	60f8      	str	r0, [r7, #12]
    197a:	60b9      	str	r1, [r7, #8]
    197c:	607a      	str	r2, [r7, #4]
    197e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1980:	2300      	movs	r3, #0
    1982:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    1984:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1988:	4323      	orrs	r3, r4
    198a:	d103      	bne.n	1994 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    198c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    198e:	f023 0310 	bic.w	r3, r3, #16
    1992:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    199a:	2b00      	cmp	r3, #0
    199c:	d003      	beq.n	19a6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    199e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    19a2:	4323      	orrs	r3, r4
    19a4:	d03a      	beq.n	1a1c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    19a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    19aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    19ae:	f003 fbc5 	bl	513c <__aeabi_uldivmod>
    19b2:	461c      	mov	r4, r3
    19b4:	4613      	mov	r3, r2
    19b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    19ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    19be:	2b09      	cmp	r3, #9
    19c0:	d804      	bhi.n	19cc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    19c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    19c6:	3330      	adds	r3, #48	; 0x30
    19c8:	b2da      	uxtb	r2, r3
    19ca:	e00d      	b.n	19e8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    19cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    19ce:	f003 0320 	and.w	r3, r3, #32
    19d2:	2b00      	cmp	r3, #0
    19d4:	d001      	beq.n	19da <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    19d6:	2241      	movs	r2, #65	; 0x41
    19d8:	e000      	b.n	19dc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    19da:	2261      	movs	r2, #97	; 0x61
    19dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    19e0:	4413      	add	r3, r2
    19e2:	b2db      	uxtb	r3, r3
    19e4:	3b0a      	subs	r3, #10
    19e6:	b2da      	uxtb	r2, r3
    19e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19ea:	1c59      	adds	r1, r3, #1
    19ec:	6379      	str	r1, [r7, #52]	; 0x34
    19ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
    19f2:	440b      	add	r3, r1
    19f4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    19f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    19fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    1a00:	f003 fb9c 	bl	513c <__aeabi_uldivmod>
    1a04:	4603      	mov	r3, r0
    1a06:	460c      	mov	r4, r1
    1a08:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1a0c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1a10:	4323      	orrs	r3, r4
    1a12:	d003      	beq.n	1a1c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    1a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a16:	2b1f      	cmp	r3, #31
    1a18:	d800      	bhi.n	1a1c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    1a1a:	e7c4      	b.n	19a6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1a20:	9206      	str	r2, [sp, #24]
    1a22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1a24:	9205      	str	r2, [sp, #20]
    1a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1a28:	9204      	str	r2, [sp, #16]
    1a2a:	9303      	str	r3, [sp, #12]
    1a2c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    1a30:	9302      	str	r3, [sp, #8]
    1a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a34:	9301      	str	r3, [sp, #4]
    1a36:	f107 0310 	add.w	r3, r7, #16
    1a3a:	9300      	str	r3, [sp, #0]
    1a3c:	683b      	ldr	r3, [r7, #0]
    1a3e:	687a      	ldr	r2, [r7, #4]
    1a40:	68b9      	ldr	r1, [r7, #8]
    1a42:	68f8      	ldr	r0, [r7, #12]
    1a44:	f7ff fe0c 	bl	1660 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1a48:	4603      	mov	r3, r0
}
    1a4a:	4618      	mov	r0, r3
    1a4c:	373c      	adds	r7, #60	; 0x3c
    1a4e:	46bd      	mov	sp, r7
    1a50:	bd90      	pop	{r4, r7, pc}
    1a52:	Address 0x0000000000001a52 is out of bounds.


00001a54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    1a54:	b590      	push	{r4, r7, lr}
    1a56:	b099      	sub	sp, #100	; 0x64
    1a58:	af00      	add	r7, sp, #0
    1a5a:	60f8      	str	r0, [r7, #12]
    1a5c:	60b9      	str	r1, [r7, #8]
    1a5e:	607a      	str	r2, [r7, #4]
    1a60:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	63fb      	str	r3, [r7, #60]	; 0x3c

  float value = static_cast<float>(value_param);
    1a66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
    1a6a:	f002 fffd 	bl	4a68 <__aeabi_d2f>
    1a6e:	4603      	mov	r3, r0
    1a70:	65fb      	str	r3, [r7, #92]	; 0x5c

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    1a72:	2300      	movs	r3, #0
    1a74:	65bb      	str	r3, [r7, #88]	; 0x58
  float diff = 0.0;
    1a76:	f04f 0300 	mov.w	r3, #0
    1a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    1a7c:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    1a80:	637b      	str	r3, [r7, #52]	; 0x34

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    1a82:	2300      	movs	r3, #0
    1a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (value < 0) {
    1a88:	f04f 0100 	mov.w	r1, #0
    1a8c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1a8e:	f003 fae7 	bl	5060 <__aeabi_fcmplt>
    1a92:	4603      	mov	r3, r0
    1a94:	2b00      	cmp	r3, #0
    1a96:	d009      	beq.n	1aac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x58>
    negative = true;
    1a98:	2301      	movs	r3, #1
    1a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    value = 0 - value;
    1a9e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    1aa0:	f04f 0000 	mov.w	r0, #0
    1aa4:	f003 f834 	bl	4b10 <__aeabi_fsub>
    1aa8:	4603      	mov	r3, r0
    1aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    1aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d101      	bne.n	1abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
    prec = 6U;
    1ab8:	2306      	movs	r3, #6
    1aba:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1abe:	2b1f      	cmp	r3, #31
    1ac0:	d80f      	bhi.n	1ae2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    1ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1ac4:	2b09      	cmp	r3, #9
    1ac6:	d90c      	bls.n	1ae2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    buf[len++] = '0';
    1ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1aca:	1c5a      	adds	r2, r3, #1
    1acc:	65ba      	str	r2, [r7, #88]	; 0x58
    1ace:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1ad2:	4413      	add	r3, r2
    1ad4:	2230      	movs	r2, #48	; 0x30
    1ad6:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    1ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1adc:	3b01      	subs	r3, #1
    1ade:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ae0:	e7ec      	b.n	1abc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
  }

  int whole = (int)value;
    1ae2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1ae4:	f003 fae4 	bl	50b0 <__aeabi_f2iz>
    1ae8:	4603      	mov	r3, r0
    1aea:	653b      	str	r3, [r7, #80]	; 0x50
  float tmp = (value - whole) * pow10[prec];
    1aec:	6d38      	ldr	r0, [r7, #80]	; 0x50
    1aee:	f003 f8c5 	bl	4c7c <__aeabi_i2f>
    1af2:	4603      	mov	r3, r0
    1af4:	4619      	mov	r1, r3
    1af6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1af8:	f003 f80a 	bl	4b10 <__aeabi_fsub>
    1afc:	4603      	mov	r3, r0
    1afe:	4618      	mov	r0, r3
    1b00:	4aa7      	ldr	r2, [pc, #668]	; (1da0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    1b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b08:	4619      	mov	r1, r3
    1b0a:	f003 f90b 	bl	4d24 <__aeabi_fmul>
    1b0e:	4603      	mov	r3, r0
    1b10:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
    1b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1b14:	f003 faf2 	bl	50fc <__aeabi_f2uiz>
    1b18:	4603      	mov	r3, r0
    1b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  diff = tmp - frac;
    1b1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1b1e:	f003 f8a9 	bl	4c74 <__aeabi_ui2f>
    1b22:	4603      	mov	r3, r0
    1b24:	4619      	mov	r1, r3
    1b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1b28:	f002 fff2 	bl	4b10 <__aeabi_fsub>
    1b2c:	4603      	mov	r3, r0
    1b2e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
    1b30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1b36:	f003 fab1 	bl	509c <__aeabi_fcmpgt>
    1b3a:	4603      	mov	r3, r0
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d015      	beq.n	1b6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x118>
    ++frac;
    1b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b42:	3301      	adds	r3, #1
    1b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1b46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1b48:	f003 f894 	bl	4c74 <__aeabi_ui2f>
    1b4c:	4a94      	ldr	r2, [pc, #592]	; (1da0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    1b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b54:	4619      	mov	r1, r3
    1b56:	f003 fa97 	bl	5088 <__aeabi_fcmpge>
    1b5a:	4603      	mov	r3, r0
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d018      	beq.n	1b92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
      frac = 0;
    1b60:	2300      	movs	r3, #0
    1b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      ++whole;
    1b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1b66:	3301      	adds	r3, #1
    1b68:	653b      	str	r3, [r7, #80]	; 0x50
    1b6a:	e012      	b.n	1b92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    1b6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1b70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1b72:	f003 fa6b 	bl	504c <__aeabi_fcmpeq>
    1b76:	4603      	mov	r3, r0
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d00a      	beq.n	1b92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    1b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d004      	beq.n	1b8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x138>
    1b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b84:	f003 0301 	and.w	r3, r3, #1
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d002      	beq.n	1b92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    1b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b8e:	3301      	adds	r3, #1
    1b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    1b92:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    1b96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1b98:	f003 fa80 	bl	509c <__aeabi_fcmpgt>
    1b9c:	4603      	mov	r3, r0
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d001      	beq.n	1ba6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x152>
    return 0U;
    1ba2:	2300      	movs	r3, #0
    1ba4:	e15f      	b.n	1e66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x412>
  }

  if (prec == 0U) {
    1ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d126      	bne.n	1bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a6>
    diff = value - (float)whole;
    1bac:	6d38      	ldr	r0, [r7, #80]	; 0x50
    1bae:	f003 f865 	bl	4c7c <__aeabi_i2f>
    1bb2:	4603      	mov	r3, r0
    1bb4:	4619      	mov	r1, r3
    1bb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1bb8:	f002 ffaa 	bl	4b10 <__aeabi_fsub>
    1bbc:	4603      	mov	r3, r0
    1bbe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (diff > 0.5) {
    1bc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1bc6:	f003 fa69 	bl	509c <__aeabi_fcmpgt>
    1bca:	4603      	mov	r3, r0
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d003      	beq.n	1bd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x184>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    1bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1bd2:	3301      	adds	r3, #1
    1bd4:	653b      	str	r3, [r7, #80]	; 0x50
    1bd6:	e061      	b.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    1bd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1bde:	f003 fa35 	bl	504c <__aeabi_fcmpeq>
    1be2:	4603      	mov	r3, r0
    1be4:	2b00      	cmp	r3, #0
    1be6:	d059      	beq.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    1be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1bea:	f003 0301 	and.w	r3, r3, #1
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d054      	beq.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    1bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1bf4:	3301      	adds	r3, #1
    1bf6:	653b      	str	r3, [r7, #80]	; 0x50
    1bf8:	e050      	b.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
  }
  else {
    unsigned int count = prec;
    1bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1bfc:	64bb      	str	r3, [r7, #72]	; 0x48
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c00:	2b1f      	cmp	r3, #31
    1c02:	d828      	bhi.n	1c56 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
      --count;
    1c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c06:	3b01      	subs	r3, #1
    1c08:	64bb      	str	r3, [r7, #72]	; 0x48
      buf[len++] = (char)(48U + (frac % 10U));
    1c0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1c0c:	4b65      	ldr	r3, [pc, #404]	; (1da4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1c0e:	fba3 2301 	umull	r2, r3, r3, r1
    1c12:	08da      	lsrs	r2, r3, #3
    1c14:	4613      	mov	r3, r2
    1c16:	009b      	lsls	r3, r3, #2
    1c18:	4413      	add	r3, r2
    1c1a:	005b      	lsls	r3, r3, #1
    1c1c:	1aca      	subs	r2, r1, r3
    1c1e:	b2d3      	uxtb	r3, r2
    1c20:	3330      	adds	r3, #48	; 0x30
    1c22:	b2d9      	uxtb	r1, r3
    1c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c26:	1c5a      	adds	r2, r3, #1
    1c28:	65ba      	str	r2, [r7, #88]	; 0x58
    1c2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c2e:	4413      	add	r3, r2
    1c30:	460a      	mov	r2, r1
    1c32:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    1c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1c38:	4a5a      	ldr	r2, [pc, #360]	; (1da4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1c3a:	fba2 2303 	umull	r2, r3, r2, r3
    1c3e:	08db      	lsrs	r3, r3, #3
    1c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    1c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1c44:	2b00      	cmp	r3, #0
    1c46:	bf0c      	ite	eq
    1c48:	2301      	moveq	r3, #1
    1c4a:	2300      	movne	r3, #0
    1c4c:	b2db      	uxtb	r3, r3
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d100      	bne.n	1c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x200>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c52:	e7d4      	b.n	1bfe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1aa>
        break;
    1c54:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c58:	2b1f      	cmp	r3, #31
    1c5a:	d806      	bhi.n	1c6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c5e:	1e5a      	subs	r2, r3, #1
    1c60:	64ba      	str	r2, [r7, #72]	; 0x48
    1c62:	2b00      	cmp	r3, #0
    1c64:	d001      	beq.n	1c6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1c66:	2301      	movs	r3, #1
    1c68:	e000      	b.n	1c6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x218>
    1c6a:	2300      	movs	r3, #0
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d009      	beq.n	1c84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x230>
      buf[len++] = '0';
    1c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c72:	1c5a      	adds	r2, r3, #1
    1c74:	65ba      	str	r2, [r7, #88]	; 0x58
    1c76:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c7a:	4413      	add	r3, r2
    1c7c:	2230      	movs	r2, #48	; 0x30
    1c7e:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1c82:	e7e8      	b.n	1c56 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c86:	2b1f      	cmp	r3, #31
    1c88:	d808      	bhi.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // add decimal
      buf[len++] = '.';
    1c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c8c:	1c5a      	adds	r2, r3, #1
    1c8e:	65ba      	str	r2, [r7, #88]	; 0x58
    1c90:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c94:	4413      	add	r3, r2
    1c96:	222e      	movs	r2, #46	; 0x2e
    1c98:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c9e:	2b1f      	cmp	r3, #31
    1ca0:	d829      	bhi.n	1cf6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
    buf[len++] = (char)(48 + (whole % 10));
    1ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1ca4:	4b40      	ldr	r3, [pc, #256]	; (1da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1ca6:	fb83 1302 	smull	r1, r3, r3, r2
    1caa:	1099      	asrs	r1, r3, #2
    1cac:	17d3      	asrs	r3, r2, #31
    1cae:	1ac9      	subs	r1, r1, r3
    1cb0:	460b      	mov	r3, r1
    1cb2:	009b      	lsls	r3, r3, #2
    1cb4:	440b      	add	r3, r1
    1cb6:	005b      	lsls	r3, r3, #1
    1cb8:	1ad1      	subs	r1, r2, r3
    1cba:	b2cb      	uxtb	r3, r1
    1cbc:	3330      	adds	r3, #48	; 0x30
    1cbe:	b2d9      	uxtb	r1, r3
    1cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1cc2:	1c5a      	adds	r2, r3, #1
    1cc4:	65ba      	str	r2, [r7, #88]	; 0x58
    1cc6:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1cca:	4413      	add	r3, r2
    1ccc:	460a      	mov	r2, r1
    1cce:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    1cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1cd4:	4a34      	ldr	r2, [pc, #208]	; (1da8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1cd6:	fb82 1203 	smull	r1, r2, r2, r3
    1cda:	1092      	asrs	r2, r2, #2
    1cdc:	17db      	asrs	r3, r3, #31
    1cde:	1ad3      	subs	r3, r2, r3
    1ce0:	653b      	str	r3, [r7, #80]	; 0x50
    1ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	bf0c      	ite	eq
    1ce8:	2301      	moveq	r3, #1
    1cea:	2300      	movne	r3, #0
    1cec:	b2db      	uxtb	r3, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d100      	bne.n	1cf4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1cf2:	e7d3      	b.n	1c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      break;
    1cf4:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1cfa:	f003 0302 	and.w	r3, r3, #2
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d116      	bne.n	1d30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1d06:	f003 0301 	and.w	r3, r3, #1
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d010      	beq.n	1d30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1d12:	429a      	cmp	r2, r3
    1d14:	d20c      	bcs.n	1d30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d18:	2b1f      	cmp	r3, #31
    1d1a:	d809      	bhi.n	1d30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    buf[len++] = '0';
    1d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d1e:	1c5a      	adds	r2, r3, #1
    1d20:	65ba      	str	r2, [r7, #88]	; 0x58
    1d22:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1d26:	4413      	add	r3, r2
    1d28:	2230      	movs	r2, #48	; 0x30
    1d2a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1d2e:	e7e2      	b.n	1cf6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1d34:	429a      	cmp	r2, r3
    1d36:	d112      	bne.n	1d5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    1d38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d10b      	bne.n	1d58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1d44:	f003 0304 	and.w	r3, r3, #4
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d105      	bne.n	1d58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1d50:	f003 0308 	and.w	r3, r3, #8
    1d54:	2b00      	cmp	r3, #0
    1d56:	d002      	beq.n	1d5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    len--;
    1d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d5a:	3b01      	subs	r3, #1
    1d5c:	65bb      	str	r3, [r7, #88]	; 0x58
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d60:	2b1f      	cmp	r3, #31
    1d62:	d832      	bhi.n	1dca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    if (negative) {
    1d64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d009      	beq.n	1d80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x32c>
      buf[len++] = '-';
    1d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d6e:	1c5a      	adds	r2, r3, #1
    1d70:	65ba      	str	r2, [r7, #88]	; 0x58
    1d72:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1d76:	4413      	add	r3, r2
    1d78:	222d      	movs	r2, #45	; 0x2d
    1d7a:	f803 2c50 	strb.w	r2, [r3, #-80]
    1d7e:	e024      	b.n	1dca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    }
    else if (flags & FLAGS_PLUS) {
    1d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1d84:	f003 0304 	and.w	r3, r3, #4
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d00f      	beq.n	1dac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x358>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d8e:	1c5a      	adds	r2, r3, #1
    1d90:	65ba      	str	r2, [r7, #88]	; 0x58
    1d92:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1d96:	4413      	add	r3, r2
    1d98:	222b      	movs	r2, #43	; 0x2b
    1d9a:	f803 2c50 	strb.w	r2, [r3, #-80]
    1d9e:	e014      	b.n	1dca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    1da0:	00006de0 	.word	0x00006de0
    1da4:	cccccccd 	.word	0xcccccccd
    1da8:	66666667 	.word	0x66666667
    }
    else if (flags & FLAGS_SPACE) {
    1dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1db0:	f003 0308 	and.w	r3, r3, #8
    1db4:	2b00      	cmp	r3, #0
    1db6:	d008      	beq.n	1dca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
      buf[len++] = ' ';
    1db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1dba:	1c5a      	adds	r2, r3, #1
    1dbc:	65ba      	str	r2, [r7, #88]	; 0x58
    1dbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1dc2:	4413      	add	r3, r2
    1dc4:	2220      	movs	r2, #32
    1dc6:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1dce:	f003 0302 	and.w	r3, r3, #2
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d117      	bne.n	1e06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    1dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1dda:	f003 0301 	and.w	r3, r3, #1
    1dde:	2b00      	cmp	r3, #0
    1de0:	d111      	bne.n	1e06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    for (size_t i = len; i < width; i++) {
    1de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1de4:	647b      	str	r3, [r7, #68]	; 0x44
    1de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1de8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1dea:	429a      	cmp	r2, r3
    1dec:	d20b      	bcs.n	1e06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
      out(' ', buffer, idx++, maxlen);
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	1c53      	adds	r3, r2, #1
    1df2:	607b      	str	r3, [r7, #4]
    1df4:	68fc      	ldr	r4, [r7, #12]
    1df6:	683b      	ldr	r3, [r7, #0]
    1df8:	68b9      	ldr	r1, [r7, #8]
    1dfa:	2020      	movs	r0, #32
    1dfc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e00:	3301      	adds	r3, #1
    1e02:	647b      	str	r3, [r7, #68]	; 0x44
    1e04:	e7ef      	b.n	1de6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x392>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1e06:	2300      	movs	r3, #0
    1e08:	643b      	str	r3, [r7, #64]	; 0x40
    1e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1e0e:	429a      	cmp	r2, r3
    1e10:	d213      	bcs.n	1e3a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3e6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1e16:	1ad3      	subs	r3, r2, r3
    1e18:	3b01      	subs	r3, #1
    1e1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1e1e:	4413      	add	r3, r2
    1e20:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    1e24:	687a      	ldr	r2, [r7, #4]
    1e26:	1c53      	adds	r3, r2, #1
    1e28:	607b      	str	r3, [r7, #4]
    1e2a:	68fc      	ldr	r4, [r7, #12]
    1e2c:	683b      	ldr	r3, [r7, #0]
    1e2e:	68b9      	ldr	r1, [r7, #8]
    1e30:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1e34:	3301      	adds	r3, #1
    1e36:	643b      	str	r3, [r7, #64]	; 0x40
    1e38:	e7e7      	b.n	1e0a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b6>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1e3e:	f003 0302 	and.w	r3, r3, #2
    1e42:	2b00      	cmp	r3, #0
    1e44:	d00e      	beq.n	1e64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
    while (idx - start_idx < width) {
    1e46:	687a      	ldr	r2, [r7, #4]
    1e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e4a:	1ad3      	subs	r3, r2, r3
    1e4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1e4e:	429a      	cmp	r2, r3
    1e50:	d908      	bls.n	1e64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
      out(' ', buffer, idx++, maxlen);
    1e52:	687a      	ldr	r2, [r7, #4]
    1e54:	1c53      	adds	r3, r2, #1
    1e56:	607b      	str	r3, [r7, #4]
    1e58:	68fc      	ldr	r4, [r7, #12]
    1e5a:	683b      	ldr	r3, [r7, #0]
    1e5c:	68b9      	ldr	r1, [r7, #8]
    1e5e:	2020      	movs	r0, #32
    1e60:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1e62:	e7f0      	b.n	1e46 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f2>
    }
  }

  return idx;
    1e64:	687b      	ldr	r3, [r7, #4]
}
    1e66:	4618      	mov	r0, r3
    1e68:	3764      	adds	r7, #100	; 0x64
    1e6a:	46bd      	mov	sp, r7
    1e6c:	bd90      	pop	{r4, r7, pc}
    1e6e:	bf00      	nop

00001e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1e70:	b5b0      	push	{r4, r5, r7, lr}
    1e72:	b0a0      	sub	sp, #128	; 0x80
    1e74:	af0a      	add	r7, sp, #40	; 0x28
    1e76:	60f8      	str	r0, [r7, #12]
    1e78:	60b9      	str	r1, [r7, #8]
    1e7a:	607a      	str	r2, [r7, #4]
    1e7c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    1e7e:	2300      	movs	r3, #0
    1e80:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    1e82:	68bb      	ldr	r3, [r7, #8]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d101      	bne.n	1e8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    1e88:	4ba2      	ldr	r3, [pc, #648]	; (2114 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    1e8a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    1e8c:	683b      	ldr	r3, [r7, #0]
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	2b00      	cmp	r3, #0
    1e92:	f000 8440 	beq.w	2716 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a6>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	2b25      	cmp	r3, #37	; 0x25
    1e9c:	d00d      	beq.n	1eba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    1e9e:	683b      	ldr	r3, [r7, #0]
    1ea0:	7818      	ldrb	r0, [r3, #0]
    1ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1ea4:	1c53      	adds	r3, r2, #1
    1ea6:	647b      	str	r3, [r7, #68]	; 0x44
    1ea8:	68fc      	ldr	r4, [r7, #12]
    1eaa:	687b      	ldr	r3, [r7, #4]
    1eac:	68b9      	ldr	r1, [r7, #8]
    1eae:	47a0      	blx	r4
      format++;
    1eb0:	683b      	ldr	r3, [r7, #0]
    1eb2:	3301      	adds	r3, #1
    1eb4:	603b      	str	r3, [r7, #0]
      continue;
    1eb6:	f000 bc2c 	b.w	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
    }
    else {
      // yes, evaluate it
      format++;
    1eba:	683b      	ldr	r3, [r7, #0]
    1ebc:	3301      	adds	r3, #1
    1ebe:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    1ec0:	2300      	movs	r3, #0
    1ec2:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	3b20      	subs	r3, #32
    1eca:	2b10      	cmp	r3, #16
    1ecc:	d856      	bhi.n	1f7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    1ece:	a201      	add	r2, pc, #4	; (adr r2, 1ed4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    1ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ed4:	00001f55 	.word	0x00001f55
    1ed8:	00001f7d 	.word	0x00001f7d
    1edc:	00001f7d 	.word	0x00001f7d
    1ee0:	00001f69 	.word	0x00001f69
    1ee4:	00001f7d 	.word	0x00001f7d
    1ee8:	00001f7d 	.word	0x00001f7d
    1eec:	00001f7d 	.word	0x00001f7d
    1ef0:	00001f7d 	.word	0x00001f7d
    1ef4:	00001f7d 	.word	0x00001f7d
    1ef8:	00001f7d 	.word	0x00001f7d
    1efc:	00001f7d 	.word	0x00001f7d
    1f00:	00001f41 	.word	0x00001f41
    1f04:	00001f7d 	.word	0x00001f7d
    1f08:	00001f2d 	.word	0x00001f2d
    1f0c:	00001f7d 	.word	0x00001f7d
    1f10:	00001f7d 	.word	0x00001f7d
    1f14:	00001f19 	.word	0x00001f19
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f1a:	f043 0301 	orr.w	r3, r3, #1
    1f1e:	657b      	str	r3, [r7, #84]	; 0x54
    1f20:	683b      	ldr	r3, [r7, #0]
    1f22:	3301      	adds	r3, #1
    1f24:	603b      	str	r3, [r7, #0]
    1f26:	2301      	movs	r3, #1
    1f28:	64bb      	str	r3, [r7, #72]	; 0x48
    1f2a:	e02a      	b.n	1f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f2e:	f043 0302 	orr.w	r3, r3, #2
    1f32:	657b      	str	r3, [r7, #84]	; 0x54
    1f34:	683b      	ldr	r3, [r7, #0]
    1f36:	3301      	adds	r3, #1
    1f38:	603b      	str	r3, [r7, #0]
    1f3a:	2301      	movs	r3, #1
    1f3c:	64bb      	str	r3, [r7, #72]	; 0x48
    1f3e:	e020      	b.n	1f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f42:	f043 0304 	orr.w	r3, r3, #4
    1f46:	657b      	str	r3, [r7, #84]	; 0x54
    1f48:	683b      	ldr	r3, [r7, #0]
    1f4a:	3301      	adds	r3, #1
    1f4c:	603b      	str	r3, [r7, #0]
    1f4e:	2301      	movs	r3, #1
    1f50:	64bb      	str	r3, [r7, #72]	; 0x48
    1f52:	e016      	b.n	1f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f56:	f043 0308 	orr.w	r3, r3, #8
    1f5a:	657b      	str	r3, [r7, #84]	; 0x54
    1f5c:	683b      	ldr	r3, [r7, #0]
    1f5e:	3301      	adds	r3, #1
    1f60:	603b      	str	r3, [r7, #0]
    1f62:	2301      	movs	r3, #1
    1f64:	64bb      	str	r3, [r7, #72]	; 0x48
    1f66:	e00c      	b.n	1f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f6a:	f043 0310 	orr.w	r3, r3, #16
    1f6e:	657b      	str	r3, [r7, #84]	; 0x54
    1f70:	683b      	ldr	r3, [r7, #0]
    1f72:	3301      	adds	r3, #1
    1f74:	603b      	str	r3, [r7, #0]
    1f76:	2301      	movs	r3, #1
    1f78:	64bb      	str	r3, [r7, #72]	; 0x48
    1f7a:	e002      	b.n	1f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    1f7c:	2300      	movs	r3, #0
    1f7e:	64bb      	str	r3, [r7, #72]	; 0x48
    1f80:	bf00      	nop
      }
    } while (n);
    1f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f84:	2b00      	cmp	r3, #0
    1f86:	d000      	beq.n	1f8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    1f88:	e79c      	b.n	1ec4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    1f8a:	2300      	movs	r3, #0
    1f8c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    1f8e:	683b      	ldr	r3, [r7, #0]
    1f90:	781b      	ldrb	r3, [r3, #0]
    1f92:	4618      	mov	r0, r3
    1f94:	f7ff fb2d 	bl	15f2 <_is_digit(char)>
    1f98:	4603      	mov	r3, r0
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d005      	beq.n	1faa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    1f9e:	463b      	mov	r3, r7
    1fa0:	4618      	mov	r0, r3
    1fa2:	f7ff fb39 	bl	1618 <_atoi(char const**)>
    1fa6:	6538      	str	r0, [r7, #80]	; 0x50
    1fa8:	e018      	b.n	1fdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    1faa:	683b      	ldr	r3, [r7, #0]
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	2b2a      	cmp	r3, #42	; 0x2a
    1fb0:	d114      	bne.n	1fdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    1fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1fb4:	1d1a      	adds	r2, r3, #4
    1fb6:	66ba      	str	r2, [r7, #104]	; 0x68
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    1fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	da07      	bge.n	1fd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    1fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fc4:	f043 0302 	orr.w	r3, r3, #2
    1fc8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    1fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1fcc:	425b      	negs	r3, r3
    1fce:	653b      	str	r3, [r7, #80]	; 0x50
    1fd0:	e001      	b.n	1fd6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    1fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1fd4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    1fd6:	683b      	ldr	r3, [r7, #0]
    1fd8:	3301      	adds	r3, #1
    1fda:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    1fdc:	2300      	movs	r3, #0
    1fde:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    1fe0:	683b      	ldr	r3, [r7, #0]
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	2b2e      	cmp	r3, #46	; 0x2e
    1fe6:	d124      	bne.n	2032 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    1fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1fee:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    1ff0:	683b      	ldr	r3, [r7, #0]
    1ff2:	3301      	adds	r3, #1
    1ff4:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    1ff6:	683b      	ldr	r3, [r7, #0]
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	4618      	mov	r0, r3
    1ffc:	f7ff faf9 	bl	15f2 <_is_digit(char)>
    2000:	4603      	mov	r3, r0
    2002:	2b00      	cmp	r3, #0
    2004:	d005      	beq.n	2012 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    2006:	463b      	mov	r3, r7
    2008:	4618      	mov	r0, r3
    200a:	f7ff fb05 	bl	1618 <_atoi(char const**)>
    200e:	64f8      	str	r0, [r7, #76]	; 0x4c
    2010:	e00f      	b.n	2032 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    2012:	683b      	ldr	r3, [r7, #0]
    2014:	781b      	ldrb	r3, [r3, #0]
    2016:	2b2a      	cmp	r3, #42	; 0x2a
    2018:	d10b      	bne.n	2032 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    201a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    201c:	1d1a      	adds	r2, r3, #4
    201e:	66ba      	str	r2, [r7, #104]	; 0x68
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    202a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    202c:	683b      	ldr	r3, [r7, #0]
    202e:	3301      	adds	r3, #1
    2030:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    2032:	683b      	ldr	r3, [r7, #0]
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	3b68      	subs	r3, #104	; 0x68
    2038:	2b12      	cmp	r3, #18
    203a:	d867      	bhi.n	210c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    203c:	a201      	add	r2, pc, #4	; (adr r2, 2044 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2042:	bf00      	nop
    2044:	000020b7 	.word	0x000020b7
    2048:	0000210d 	.word	0x0000210d
    204c:	000020ed 	.word	0x000020ed
    2050:	0000210d 	.word	0x0000210d
    2054:	00002091 	.word	0x00002091
    2058:	0000210d 	.word	0x0000210d
    205c:	0000210d 	.word	0x0000210d
    2060:	0000210d 	.word	0x0000210d
    2064:	0000210d 	.word	0x0000210d
    2068:	0000210d 	.word	0x0000210d
    206c:	0000210d 	.word	0x0000210d
    2070:	0000210d 	.word	0x0000210d
    2074:	000020dd 	.word	0x000020dd
    2078:	0000210d 	.word	0x0000210d
    207c:	0000210d 	.word	0x0000210d
    2080:	0000210d 	.word	0x0000210d
    2084:	0000210d 	.word	0x0000210d
    2088:	0000210d 	.word	0x0000210d
    208c:	000020fd 	.word	0x000020fd
      case 'l' :
        flags |= FLAGS_LONG;
    2090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2096:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2098:	683b      	ldr	r3, [r7, #0]
    209a:	3301      	adds	r3, #1
    209c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    209e:	683b      	ldr	r3, [r7, #0]
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	2b6c      	cmp	r3, #108	; 0x6c
    20a4:	d134      	bne.n	2110 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    20a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20ac:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    20ae:	683b      	ldr	r3, [r7, #0]
    20b0:	3301      	adds	r3, #1
    20b2:	603b      	str	r3, [r7, #0]
        }
        break;
    20b4:	e02c      	b.n	2110 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    20b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    20bc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    20be:	683b      	ldr	r3, [r7, #0]
    20c0:	3301      	adds	r3, #1
    20c2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    20c4:	683b      	ldr	r3, [r7, #0]
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	2b68      	cmp	r3, #104	; 0x68
    20ca:	d125      	bne.n	2118 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    20cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20d2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    20d4:	683b      	ldr	r3, [r7, #0]
    20d6:	3301      	adds	r3, #1
    20d8:	603b      	str	r3, [r7, #0]
        }
        break;
    20da:	e01d      	b.n	2118 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    20dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    20e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    20e4:	683b      	ldr	r3, [r7, #0]
    20e6:	3301      	adds	r3, #1
    20e8:	603b      	str	r3, [r7, #0]
        break;
    20ea:	e016      	b.n	211a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    20ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20f2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    20f4:	683b      	ldr	r3, [r7, #0]
    20f6:	3301      	adds	r3, #1
    20f8:	603b      	str	r3, [r7, #0]
        break;
    20fa:	e00e      	b.n	211a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    20fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2102:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2104:	683b      	ldr	r3, [r7, #0]
    2106:	3301      	adds	r3, #1
    2108:	603b      	str	r3, [r7, #0]
        break;
    210a:	e006      	b.n	211a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    210c:	bf00      	nop
    210e:	e004      	b.n	211a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    2110:	bf00      	nop
    2112:	e002      	b.n	211a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    2114:	000015ad 	.word	0x000015ad
        break;
    2118:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    211a:	683b      	ldr	r3, [r7, #0]
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	3b25      	subs	r3, #37	; 0x25
    2120:	2b53      	cmp	r3, #83	; 0x53
    2122:	f200 82e9 	bhi.w	26f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x888>
    2126:	a201      	add	r2, pc, #4	; (adr r2, 212c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    2128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    212c:	000026e1 	.word	0x000026e1
    2130:	000026f9 	.word	0x000026f9
    2134:	000026f9 	.word	0x000026f9
    2138:	000026f9 	.word	0x000026f9
    213c:	000026f9 	.word	0x000026f9
    2140:	000026f9 	.word	0x000026f9
    2144:	000026f9 	.word	0x000026f9
    2148:	000026f9 	.word	0x000026f9
    214c:	000026f9 	.word	0x000026f9
    2150:	000026f9 	.word	0x000026f9
    2154:	000026f9 	.word	0x000026f9
    2158:	000026f9 	.word	0x000026f9
    215c:	000026f9 	.word	0x000026f9
    2160:	000026f9 	.word	0x000026f9
    2164:	000026f9 	.word	0x000026f9
    2168:	000026f9 	.word	0x000026f9
    216c:	000026f9 	.word	0x000026f9
    2170:	000026f9 	.word	0x000026f9
    2174:	000026f9 	.word	0x000026f9
    2178:	000026f9 	.word	0x000026f9
    217c:	000026f9 	.word	0x000026f9
    2180:	000026f9 	.word	0x000026f9
    2184:	000026f9 	.word	0x000026f9
    2188:	000026f9 	.word	0x000026f9
    218c:	000026f9 	.word	0x000026f9
    2190:	000026f9 	.word	0x000026f9
    2194:	000026f9 	.word	0x000026f9
    2198:	000026f9 	.word	0x000026f9
    219c:	000026f9 	.word	0x000026f9
    21a0:	000026f9 	.word	0x000026f9
    21a4:	000026f9 	.word	0x000026f9
    21a8:	000026f9 	.word	0x000026f9
    21ac:	000026f9 	.word	0x000026f9
    21b0:	00002505 	.word	0x00002505
    21b4:	000026f9 	.word	0x000026f9
    21b8:	000026f9 	.word	0x000026f9
    21bc:	000026f9 	.word	0x000026f9
    21c0:	000026f9 	.word	0x000026f9
    21c4:	000026f9 	.word	0x000026f9
    21c8:	000026f9 	.word	0x000026f9
    21cc:	000026f9 	.word	0x000026f9
    21d0:	000026f9 	.word	0x000026f9
    21d4:	000026f9 	.word	0x000026f9
    21d8:	000026f9 	.word	0x000026f9
    21dc:	000026f9 	.word	0x000026f9
    21e0:	000026f9 	.word	0x000026f9
    21e4:	000026f9 	.word	0x000026f9
    21e8:	000026f9 	.word	0x000026f9
    21ec:	000026f9 	.word	0x000026f9
    21f0:	000026f9 	.word	0x000026f9
    21f4:	000026f9 	.word	0x000026f9
    21f8:	0000227d 	.word	0x0000227d
    21fc:	000026f9 	.word	0x000026f9
    2200:	000026f9 	.word	0x000026f9
    2204:	000026f9 	.word	0x000026f9
    2208:	000026f9 	.word	0x000026f9
    220c:	000026f9 	.word	0x000026f9
    2210:	000026f9 	.word	0x000026f9
    2214:	000026f9 	.word	0x000026f9
    2218:	000026f9 	.word	0x000026f9
    221c:	000026f9 	.word	0x000026f9
    2220:	0000227d 	.word	0x0000227d
    2224:	0000253b 	.word	0x0000253b
    2228:	0000227d 	.word	0x0000227d
    222c:	000026f9 	.word	0x000026f9
    2230:	00002505 	.word	0x00002505
    2234:	000026f9 	.word	0x000026f9
    2238:	000026f9 	.word	0x000026f9
    223c:	0000227d 	.word	0x0000227d
    2240:	000026f9 	.word	0x000026f9
    2244:	000026f9 	.word	0x000026f9
    2248:	000026f9 	.word	0x000026f9
    224c:	000026f9 	.word	0x000026f9
    2250:	000026f9 	.word	0x000026f9
    2254:	0000227d 	.word	0x0000227d
    2258:	00002699 	.word	0x00002699
    225c:	000026f9 	.word	0x000026f9
    2260:	000026f9 	.word	0x000026f9
    2264:	000025c3 	.word	0x000025c3
    2268:	000026f9 	.word	0x000026f9
    226c:	0000227d 	.word	0x0000227d
    2270:	000026f9 	.word	0x000026f9
    2274:	000026f9 	.word	0x000026f9
    2278:	0000227d 	.word	0x0000227d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    227c:	683b      	ldr	r3, [r7, #0]
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	2b78      	cmp	r3, #120	; 0x78
    2282:	d003      	beq.n	228c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    2284:	683b      	ldr	r3, [r7, #0]
    2286:	781b      	ldrb	r3, [r3, #0]
    2288:	2b58      	cmp	r3, #88	; 0x58
    228a:	d102      	bne.n	2292 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    228c:	2310      	movs	r3, #16
    228e:	643b      	str	r3, [r7, #64]	; 0x40
    2290:	e013      	b.n	22ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    2292:	683b      	ldr	r3, [r7, #0]
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	2b6f      	cmp	r3, #111	; 0x6f
    2298:	d102      	bne.n	22a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    229a:	2308      	movs	r3, #8
    229c:	643b      	str	r3, [r7, #64]	; 0x40
    229e:	e00c      	b.n	22ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    22a0:	683b      	ldr	r3, [r7, #0]
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	2b62      	cmp	r3, #98	; 0x62
    22a6:	d102      	bne.n	22ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    22a8:	2302      	movs	r3, #2
    22aa:	643b      	str	r3, [r7, #64]	; 0x40
    22ac:	e005      	b.n	22ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    22ae:	230a      	movs	r3, #10
    22b0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    22b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22b4:	f023 0310 	bic.w	r3, r3, #16
    22b8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    22ba:	683b      	ldr	r3, [r7, #0]
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	2b58      	cmp	r3, #88	; 0x58
    22c0:	d103      	bne.n	22ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    22c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22c4:	f043 0320 	orr.w	r3, r3, #32
    22c8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    22ca:	683b      	ldr	r3, [r7, #0]
    22cc:	781b      	ldrb	r3, [r3, #0]
    22ce:	2b69      	cmp	r3, #105	; 0x69
    22d0:	d007      	beq.n	22e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    22d2:	683b      	ldr	r3, [r7, #0]
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	2b64      	cmp	r3, #100	; 0x64
    22d8:	d003      	beq.n	22e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    22da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22dc:	f023 030c 	bic.w	r3, r3, #12
    22e0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    22e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    22e8:	2b00      	cmp	r3, #0
    22ea:	d003      	beq.n	22f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    22ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22ee:	f023 0301 	bic.w	r3, r3, #1
    22f2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    22f4:	683b      	ldr	r3, [r7, #0]
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	2b69      	cmp	r3, #105	; 0x69
    22fa:	d004      	beq.n	2306 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    22fc:	683b      	ldr	r3, [r7, #0]
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	2b64      	cmp	r3, #100	; 0x64
    2302:	f040 808c 	bne.w	241e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5ae>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2308:	f403 7300 	and.w	r3, r3, #512	; 0x200
    230c:	2b00      	cmp	r3, #0
    230e:	d02d      	beq.n	236c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2312:	3307      	adds	r3, #7
    2314:	f023 0307 	bic.w	r3, r3, #7
    2318:	f103 0208 	add.w	r2, r3, #8
    231c:	66ba      	str	r2, [r7, #104]	; 0x68
    231e:	cb18      	ldmia	r3, {r3, r4}
    2320:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2324:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    2328:	2b00      	cmp	r3, #0
    232a:	f174 0200 	sbcs.w	r2, r4, #0
    232e:	da02      	bge.n	2336 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c6>
    2330:	425b      	negs	r3, r3
    2332:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    2336:	4619      	mov	r1, r3
    2338:	4622      	mov	r2, r4
    233a:	697b      	ldr	r3, [r7, #20]
    233c:	0fdb      	lsrs	r3, r3, #31
    233e:	b2d8      	uxtb	r0, r3
    2340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2342:	f04f 0400 	mov.w	r4, #0
    2346:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    2348:	9508      	str	r5, [sp, #32]
    234a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    234c:	9507      	str	r5, [sp, #28]
    234e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    2350:	9506      	str	r5, [sp, #24]
    2352:	e9cd 3404 	strd	r3, r4, [sp, #16]
    2356:	9002      	str	r0, [sp, #8]
    2358:	e9cd 1200 	strd	r1, r2, [sp]
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2360:	68b9      	ldr	r1, [r7, #8]
    2362:	68f8      	ldr	r0, [r7, #12]
    2364:	f7ff fb05 	bl	1972 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2368:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    236a:	e0c7      	b.n	24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          else if (flags & FLAGS_LONG) {
    236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2372:	2b00      	cmp	r3, #0
    2374:	d01e      	beq.n	23b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x544>
            const long value = va_arg(va, long);
    2376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2378:	1d1a      	adds	r2, r3, #4
    237a:	66ba      	str	r2, [r7, #104]	; 0x68
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2380:	69fb      	ldr	r3, [r7, #28]
    2382:	2b00      	cmp	r3, #0
    2384:	bfb8      	it	lt
    2386:	425b      	neglt	r3, r3
    2388:	4619      	mov	r1, r3
    238a:	69fb      	ldr	r3, [r7, #28]
    238c:	0fdb      	lsrs	r3, r3, #31
    238e:	b2db      	uxtb	r3, r3
    2390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2392:	9205      	str	r2, [sp, #20]
    2394:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2396:	9204      	str	r2, [sp, #16]
    2398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    239a:	9203      	str	r2, [sp, #12]
    239c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    239e:	9202      	str	r2, [sp, #8]
    23a0:	9301      	str	r3, [sp, #4]
    23a2:	9100      	str	r1, [sp, #0]
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    23a8:	68b9      	ldr	r1, [r7, #8]
    23aa:	68f8      	ldr	r0, [r7, #12]
    23ac:	f7ff fa79 	bl	18a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    23b0:	6478      	str	r0, [r7, #68]	; 0x44
          }
    23b2:	e0a3      	b.n	24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    23b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    23ba:	2b00      	cmp	r3, #0
    23bc:	d005      	beq.n	23ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55a>
    23be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23c0:	1d1a      	adds	r2, r3, #4
    23c2:	66ba      	str	r2, [r7, #104]	; 0x68
    23c4:	681b      	ldr	r3, [r3, #0]
    23c6:	b2db      	uxtb	r3, r3
    23c8:	e00e      	b.n	23e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    23ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    23d0:	2b00      	cmp	r3, #0
    23d2:	d005      	beq.n	23e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x570>
    23d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23d6:	1d1a      	adds	r2, r3, #4
    23d8:	66ba      	str	r2, [r7, #104]	; 0x68
    23da:	681b      	ldr	r3, [r3, #0]
    23dc:	b21b      	sxth	r3, r3
    23de:	e003      	b.n	23e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    23e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23e2:	1d1a      	adds	r2, r3, #4
    23e4:	66ba      	str	r2, [r7, #104]	; 0x68
    23e6:	681b      	ldr	r3, [r3, #0]
    23e8:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    23ea:	6a3b      	ldr	r3, [r7, #32]
    23ec:	2b00      	cmp	r3, #0
    23ee:	bfb8      	it	lt
    23f0:	425b      	neglt	r3, r3
    23f2:	4619      	mov	r1, r3
    23f4:	6a3b      	ldr	r3, [r7, #32]
    23f6:	0fdb      	lsrs	r3, r3, #31
    23f8:	b2db      	uxtb	r3, r3
    23fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    23fc:	9205      	str	r2, [sp, #20]
    23fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2400:	9204      	str	r2, [sp, #16]
    2402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2404:	9203      	str	r2, [sp, #12]
    2406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2408:	9202      	str	r2, [sp, #8]
    240a:	9301      	str	r3, [sp, #4]
    240c:	9100      	str	r1, [sp, #0]
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2412:	68b9      	ldr	r1, [r7, #8]
    2414:	68f8      	ldr	r0, [r7, #12]
    2416:	f7ff fa44 	bl	18a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    241a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    241c:	e06e      	b.n	24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2420:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2424:	2b00      	cmp	r3, #0
    2426:	d01f      	beq.n	2468 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    242a:	3307      	adds	r3, #7
    242c:	f023 0307 	bic.w	r3, r3, #7
    2430:	f103 0208 	add.w	r2, r3, #8
    2434:	66ba      	str	r2, [r7, #104]	; 0x68
    2436:	cb18      	ldmia	r3, {r3, r4}
    2438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    243a:	4611      	mov	r1, r2
    243c:	f04f 0200 	mov.w	r2, #0
    2440:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2442:	9008      	str	r0, [sp, #32]
    2444:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2446:	9007      	str	r0, [sp, #28]
    2448:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    244a:	9006      	str	r0, [sp, #24]
    244c:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2450:	2200      	movs	r2, #0
    2452:	9202      	str	r2, [sp, #8]
    2454:	e9cd 3400 	strd	r3, r4, [sp]
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    245c:	68b9      	ldr	r1, [r7, #8]
    245e:	68f8      	ldr	r0, [r7, #12]
    2460:	f7ff fa87 	bl	1972 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2464:	6478      	str	r0, [r7, #68]	; 0x44
    2466:	e049      	b.n	24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    246e:	2b00      	cmp	r3, #0
    2470:	d016      	beq.n	24a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x630>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2474:	1d1a      	adds	r2, r3, #4
    2476:	66ba      	str	r2, [r7, #104]	; 0x68
    2478:	681b      	ldr	r3, [r3, #0]
    247a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    247c:	9205      	str	r2, [sp, #20]
    247e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2480:	9204      	str	r2, [sp, #16]
    2482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2484:	9203      	str	r2, [sp, #12]
    2486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2488:	9202      	str	r2, [sp, #8]
    248a:	2200      	movs	r2, #0
    248c:	9201      	str	r2, [sp, #4]
    248e:	9300      	str	r3, [sp, #0]
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2494:	68b9      	ldr	r1, [r7, #8]
    2496:	68f8      	ldr	r0, [r7, #12]
    2498:	f7ff fa03 	bl	18a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    249c:	6478      	str	r0, [r7, #68]	; 0x44
    249e:	e02d      	b.n	24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    24a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    24a6:	2b00      	cmp	r3, #0
    24a8:	d005      	beq.n	24b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x646>
    24aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    24ac:	1d1a      	adds	r2, r3, #4
    24ae:	66ba      	str	r2, [r7, #104]	; 0x68
    24b0:	681b      	ldr	r3, [r3, #0]
    24b2:	b2db      	uxtb	r3, r3
    24b4:	e00e      	b.n	24d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    24b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    24bc:	2b00      	cmp	r3, #0
    24be:	d005      	beq.n	24cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65c>
    24c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    24c2:	1d1a      	adds	r2, r3, #4
    24c4:	66ba      	str	r2, [r7, #104]	; 0x68
    24c6:	681b      	ldr	r3, [r3, #0]
    24c8:	b29b      	uxth	r3, r3
    24ca:	e003      	b.n	24d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    24cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    24ce:	1d1a      	adds	r2, r3, #4
    24d0:	66ba      	str	r2, [r7, #104]	; 0x68
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    24d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24d8:	9305      	str	r3, [sp, #20]
    24da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    24dc:	9304      	str	r3, [sp, #16]
    24de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    24e0:	9303      	str	r3, [sp, #12]
    24e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    24e4:	9302      	str	r3, [sp, #8]
    24e6:	2300      	movs	r3, #0
    24e8:	9301      	str	r3, [sp, #4]
    24ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24ec:	9300      	str	r3, [sp, #0]
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    24f2:	68b9      	ldr	r1, [r7, #8]
    24f4:	68f8      	ldr	r0, [r7, #12]
    24f6:	f7ff f9d4 	bl	18a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    24fa:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	3301      	adds	r3, #1
    2500:	603b      	str	r3, [r7, #0]
        break;
    2502:	e106      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2506:	3307      	adds	r3, #7
    2508:	f023 0307 	bic.w	r3, r3, #7
    250c:	f103 0208 	add.w	r2, r3, #8
    2510:	66ba      	str	r2, [r7, #104]	; 0x68
    2512:	cb18      	ldmia	r3, {r3, r4}
    2514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2516:	9204      	str	r2, [sp, #16]
    2518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    251a:	9203      	str	r2, [sp, #12]
    251c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    251e:	9202      	str	r2, [sp, #8]
    2520:	e9cd 3400 	strd	r3, r4, [sp]
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2528:	68b9      	ldr	r1, [r7, #8]
    252a:	68f8      	ldr	r0, [r7, #12]
    252c:	f7ff fa92 	bl	1a54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2530:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2532:	683b      	ldr	r3, [r7, #0]
    2534:	3301      	adds	r3, #1
    2536:	603b      	str	r3, [r7, #0]
        break;
    2538:	e0eb      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    253a:	2301      	movs	r3, #1
    253c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2540:	f003 0302 	and.w	r3, r3, #2
    2544:	2b00      	cmp	r3, #0
    2546:	d113      	bne.n	2570 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
          while (l++ < width) {
    2548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    254a:	1c5a      	adds	r2, r3, #1
    254c:	63fa      	str	r2, [r7, #60]	; 0x3c
    254e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2550:	429a      	cmp	r2, r3
    2552:	bf8c      	ite	hi
    2554:	2301      	movhi	r3, #1
    2556:	2300      	movls	r3, #0
    2558:	b2db      	uxtb	r3, r3
    255a:	2b00      	cmp	r3, #0
    255c:	d008      	beq.n	2570 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
            out(' ', buffer, idx++, maxlen);
    255e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2560:	1c53      	adds	r3, r2, #1
    2562:	647b      	str	r3, [r7, #68]	; 0x44
    2564:	68fc      	ldr	r4, [r7, #12]
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	68b9      	ldr	r1, [r7, #8]
    256a:	2020      	movs	r0, #32
    256c:	47a0      	blx	r4
          while (l++ < width) {
    256e:	e7eb      	b.n	2548 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6d8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2572:	1d1a      	adds	r2, r3, #4
    2574:	66ba      	str	r2, [r7, #104]	; 0x68
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	b2d8      	uxtb	r0, r3
    257a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    257c:	1c53      	adds	r3, r2, #1
    257e:	647b      	str	r3, [r7, #68]	; 0x44
    2580:	68fc      	ldr	r4, [r7, #12]
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	68b9      	ldr	r1, [r7, #8]
    2586:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    2588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    258a:	f003 0302 	and.w	r3, r3, #2
    258e:	2b00      	cmp	r3, #0
    2590:	d013      	beq.n	25ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
          while (l++ < width) {
    2592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2594:	1c5a      	adds	r2, r3, #1
    2596:	63fa      	str	r2, [r7, #60]	; 0x3c
    2598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    259a:	429a      	cmp	r2, r3
    259c:	bf8c      	ite	hi
    259e:	2301      	movhi	r3, #1
    25a0:	2300      	movls	r3, #0
    25a2:	b2db      	uxtb	r3, r3
    25a4:	2b00      	cmp	r3, #0
    25a6:	d008      	beq.n	25ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
            out(' ', buffer, idx++, maxlen);
    25a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    25aa:	1c53      	adds	r3, r2, #1
    25ac:	647b      	str	r3, [r7, #68]	; 0x44
    25ae:	68fc      	ldr	r4, [r7, #12]
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	68b9      	ldr	r1, [r7, #8]
    25b4:	2020      	movs	r0, #32
    25b6:	47a0      	blx	r4
          while (l++ < width) {
    25b8:	e7eb      	b.n	2592 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x722>
          }
        }
        format++;
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	3301      	adds	r3, #1
    25be:	603b      	str	r3, [r7, #0]
        break;
    25c0:	e0a7      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    25c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    25c4:	1d1a      	adds	r2, r3, #4
    25c6:	66ba      	str	r2, [r7, #104]	; 0x68
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    25cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    25ce:	f7fe fffa 	bl	15c6 <_strlen(char const*)>
    25d2:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    25d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    25d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    25da:	2b00      	cmp	r3, #0
    25dc:	d007      	beq.n	25ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77e>
          l = (l < precision ? l : precision);
    25de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    25e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    25e2:	429a      	cmp	r2, r3
    25e4:	d201      	bcs.n	25ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77a>
    25e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25e8:	e000      	b.n	25ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77c>
    25ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    25ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    25ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    25f0:	f003 0302 	and.w	r3, r3, #2
    25f4:	2b00      	cmp	r3, #0
    25f6:	d113      	bne.n	2620 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
          while (l++ < width) {
    25f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25fa:	1c5a      	adds	r2, r3, #1
    25fc:	637a      	str	r2, [r7, #52]	; 0x34
    25fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2600:	429a      	cmp	r2, r3
    2602:	bf8c      	ite	hi
    2604:	2301      	movhi	r3, #1
    2606:	2300      	movls	r3, #0
    2608:	b2db      	uxtb	r3, r3
    260a:	2b00      	cmp	r3, #0
    260c:	d008      	beq.n	2620 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
            out(' ', buffer, idx++, maxlen);
    260e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2610:	1c53      	adds	r3, r2, #1
    2612:	647b      	str	r3, [r7, #68]	; 0x44
    2614:	68fc      	ldr	r4, [r7, #12]
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	68b9      	ldr	r1, [r7, #8]
    261a:	2020      	movs	r0, #32
    261c:	47a0      	blx	r4
          while (l++ < width) {
    261e:	e7eb      	b.n	25f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	d00b      	beq.n	2640 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    2628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    262e:	2b00      	cmp	r3, #0
    2630:	d004      	beq.n	263c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7cc>
    2632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2634:	1e5a      	subs	r2, r3, #1
    2636:	64fa      	str	r2, [r7, #76]	; 0x4c
    2638:	2b00      	cmp	r3, #0
    263a:	d001      	beq.n	2640 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    263c:	2301      	movs	r3, #1
    263e:	e000      	b.n	2642 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d2>
    2640:	2300      	movs	r3, #0
    2642:	2b00      	cmp	r3, #0
    2644:	d00b      	beq.n	265e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ee>
          out(*(p++), buffer, idx++, maxlen);
    2646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2648:	1c5a      	adds	r2, r3, #1
    264a:	63ba      	str	r2, [r7, #56]	; 0x38
    264c:	7818      	ldrb	r0, [r3, #0]
    264e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2650:	1c53      	adds	r3, r2, #1
    2652:	647b      	str	r3, [r7, #68]	; 0x44
    2654:	68fc      	ldr	r4, [r7, #12]
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	68b9      	ldr	r1, [r7, #8]
    265a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    265c:	e7e0      	b.n	2620 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2660:	f003 0302 	and.w	r3, r3, #2
    2664:	2b00      	cmp	r3, #0
    2666:	d013      	beq.n	2690 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
          while (l++ < width) {
    2668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    266a:	1c5a      	adds	r2, r3, #1
    266c:	637a      	str	r2, [r7, #52]	; 0x34
    266e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2670:	429a      	cmp	r2, r3
    2672:	bf8c      	ite	hi
    2674:	2301      	movhi	r3, #1
    2676:	2300      	movls	r3, #0
    2678:	b2db      	uxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d008      	beq.n	2690 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
            out(' ', buffer, idx++, maxlen);
    267e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2680:	1c53      	adds	r3, r2, #1
    2682:	647b      	str	r3, [r7, #68]	; 0x44
    2684:	68fc      	ldr	r4, [r7, #12]
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	68b9      	ldr	r1, [r7, #8]
    268a:	2020      	movs	r0, #32
    268c:	47a0      	blx	r4
          while (l++ < width) {
    268e:	e7eb      	b.n	2668 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          }
        }
        format++;
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	3301      	adds	r3, #1
    2694:	603b      	str	r3, [r7, #0]
        break;
    2696:	e03c      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    2698:	2308      	movs	r3, #8
    269a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    269e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    26a2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    26a4:	2300      	movs	r3, #0
    26a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    26aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    26ac:	1d1a      	adds	r2, r3, #4
    26ae:	66ba      	str	r2, [r7, #104]	; 0x68
    26b0:	681b      	ldr	r3, [r3, #0]
    26b2:	461a      	mov	r2, r3
    26b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26b6:	9305      	str	r3, [sp, #20]
    26b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    26ba:	9304      	str	r3, [sp, #16]
    26bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    26be:	9303      	str	r3, [sp, #12]
    26c0:	2310      	movs	r3, #16
    26c2:	9302      	str	r3, [sp, #8]
    26c4:	2300      	movs	r3, #0
    26c6:	9301      	str	r3, [sp, #4]
    26c8:	9200      	str	r2, [sp, #0]
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    26ce:	68b9      	ldr	r1, [r7, #8]
    26d0:	68f8      	ldr	r0, [r7, #12]
    26d2:	f7ff f8e6 	bl	18a2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    26d6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	3301      	adds	r3, #1
    26dc:	603b      	str	r3, [r7, #0]
        break;
    26de:	e018      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    26e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    26e2:	1c53      	adds	r3, r2, #1
    26e4:	647b      	str	r3, [r7, #68]	; 0x44
    26e6:	68fc      	ldr	r4, [r7, #12]
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	68b9      	ldr	r1, [r7, #8]
    26ec:	2025      	movs	r0, #37	; 0x25
    26ee:	47a0      	blx	r4
        format++;
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	3301      	adds	r3, #1
    26f4:	603b      	str	r3, [r7, #0]
        break;
    26f6:	e00c      	b.n	2712 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>

      default :
        out(*format, buffer, idx++, maxlen);
    26f8:	683b      	ldr	r3, [r7, #0]
    26fa:	7818      	ldrb	r0, [r3, #0]
    26fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    26fe:	1c53      	adds	r3, r2, #1
    2700:	647b      	str	r3, [r7, #68]	; 0x44
    2702:	68fc      	ldr	r4, [r7, #12]
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	68b9      	ldr	r1, [r7, #8]
    2708:	47a0      	blx	r4
        format++;
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	3301      	adds	r3, #1
    270e:	603b      	str	r3, [r7, #0]
        break;
    2710:	bf00      	nop
  while (*format)
    2712:	f7ff bbbb 	b.w	1e8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	429a      	cmp	r2, r3
    271c:	d302      	bcc.n	2724 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b4>
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	1e5a      	subs	r2, r3, #1
    2722:	e000      	b.n	2726 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b6>
    2724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2726:	68fc      	ldr	r4, [r7, #12]
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	68b9      	ldr	r1, [r7, #8]
    272c:	2000      	movs	r0, #0
    272e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    2730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2732:	4618      	mov	r0, r3
    2734:	3758      	adds	r7, #88	; 0x58
    2736:	46bd      	mov	sp, r7
    2738:	bdb0      	pop	{r4, r5, r7, pc}
    273a:	bf00      	nop

0000273c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    273c:	b40f      	push	{r0, r1, r2, r3}
    273e:	b580      	push	{r7, lr}
    2740:	b0c4      	sub	sp, #272	; 0x110
    2742:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    2744:	f507 738a 	add.w	r3, r7, #276	; 0x114
    2748:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    274c:	4639      	mov	r1, r7
    274e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    2752:	9300      	str	r3, [sp, #0]
    2754:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    2758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    275c:	4807      	ldr	r0, [pc, #28]	; (277c <printf+0x40>)
    275e:	f7ff fb87 	bl	1e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    2762:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    2766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    276a:	4618      	mov	r0, r3
    276c:	f507 7784 	add.w	r7, r7, #264	; 0x108
    2770:	46bd      	mov	sp, r7
    2772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2776:	b004      	add	sp, #16
    2778:	4770      	bx	lr
    277a:	bf00      	nop
    277c:	0000153d 	.word	0x0000153d

00002780 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    2780:	b480      	push	{r7}
    2782:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    2784:	bf00      	nop
    2786:	46bd      	mov	sp, r7
    2788:	bc80      	pop	{r7}
    278a:	4770      	bx	lr

0000278c <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    278c:	b580      	push	{r7, lr}
    278e:	b082      	sub	sp, #8
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
    2794:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    2796:	6839      	ldr	r1, [r7, #0]
    2798:	6878      	ldr	r0, [r7, #4]
    279a:	f000 f805 	bl	27a8 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    279e:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    27a0:	4618      	mov	r0, r3
    27a2:	3708      	adds	r7, #8
    27a4:	46bd      	mov	sp, r7
    27a6:	bd80      	pop	{r7, pc}

000027a8 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    27a8:	b5b0      	push	{r4, r5, r7, lr}
    27aa:	b08c      	sub	sp, #48	; 0x30
    27ac:	af00      	add	r7, sp, #0
    27ae:	6078      	str	r0, [r7, #4]
    27b0:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    27b2:	4b2d      	ldr	r3, [pc, #180]	; (2868 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	f003 0301 	and.w	r3, r3, #1
    27ba:	2b00      	cmp	r3, #0
    27bc:	bf0c      	ite	eq
    27be:	2301      	moveq	r3, #1
    27c0:	2300      	movne	r3, #0
    27c2:	b2db      	uxtb	r3, r3
    27c4:	2b00      	cmp	r3, #0
    27c6:	d001      	beq.n	27cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    27c8:	683b      	ldr	r3, [r7, #0]
    27ca:	e049      	b.n	2860 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    27cc:	4b27      	ldr	r3, [pc, #156]	; (286c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    27ce:	681b      	ldr	r3, [r3, #0]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d11d      	bne.n	2810 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    27d4:	4b26      	ldr	r3, [pc, #152]	; (2870 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    27d6:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    27d8:	2304      	movs	r3, #4
    27da:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    27dc:	2303      	movs	r3, #3
    27de:	613b      	str	r3, [r7, #16]
    27e0:	2301      	movs	r3, #1
    27e2:	62bb      	str	r3, [r7, #40]	; 0x28
    27e4:	f107 0308 	add.w	r3, r7, #8
    27e8:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    27ea:	6abc      	ldr	r4, [r7, #40]	; 0x28
    27ec:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    27ee:	4620      	mov	r0, r4
    27f0:	4629      	mov	r1, r5
    27f2:	beab      	bkpt	0x00ab
    27f4:	4604      	mov	r4, r0
    27f6:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    27f8:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    27fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    27fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2802:	d102      	bne.n	280a <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    2804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2808:	e02a      	b.n	2860 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    280a:	4a18      	ldr	r2, [pc, #96]	; (286c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    280e:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    2810:	4b16      	ldr	r3, [pc, #88]	; (286c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2812:	681b      	ldr	r3, [r3, #0]
    2814:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    281a:	683b      	ldr	r3, [r7, #0]
    281c:	613b      	str	r3, [r7, #16]
    281e:	2305      	movs	r3, #5
    2820:	61fb      	str	r3, [r7, #28]
    2822:	f107 0308 	add.w	r3, r7, #8
    2826:	61bb      	str	r3, [r7, #24]
  );
    2828:	69fc      	ldr	r4, [r7, #28]
    282a:	69bd      	ldr	r5, [r7, #24]
    282c:	4620      	mov	r0, r4
    282e:	4629      	mov	r1, r5
    2830:	beab      	bkpt	0x00ab
    2832:	4604      	mov	r4, r0
    2834:	617c      	str	r4, [r7, #20]
  return value;
    2836:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    2838:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2840:	d102      	bne.n	2848 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    2842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2846:	e00b      	b.n	2860 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    2848:	683b      	ldr	r3, [r7, #0]
    284a:	461a      	mov	r2, r3
    284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    284e:	4293      	cmp	r3, r2
    2850:	d102      	bne.n	2858 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    2852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2856:	e003      	b.n	2860 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	461a      	mov	r2, r3
    285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    285e:	1ad3      	subs	r3, r2, r3
}
    2860:	4618      	mov	r0, r3
    2862:	3730      	adds	r7, #48	; 0x30
    2864:	46bd      	mov	sp, r7
    2866:	bdb0      	pop	{r4, r5, r7, pc}
    2868:	e000edf0 	.word	0xe000edf0
    286c:	2007c2d0 	.word	0x2007c2d0
    2870:	00006e08 	.word	0x00006e08

00002874 <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
    2874:	b480      	push	{r7}
    2876:	af00      	add	r7, sp, #0
    2878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    287c:	4618      	mov	r0, r3
    287e:	46bd      	mov	sp, r7
    2880:	bc80      	pop	{r7}
    2882:	4770      	bx	lr

00002884 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
    2884:	b480      	push	{r7}
    2886:	af00      	add	r7, sp, #0
    2888:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
    288c:	4618      	mov	r0, r3
    288e:	46bd      	mov	sp, r7
    2890:	bc80      	pop	{r7}
    2892:	4770      	bx	lr

00002894 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    2894:	b480      	push	{r7}
    2896:	b083      	sub	sp, #12
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    289c:	4b0c      	ldr	r3, [pc, #48]	; (28d0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	68da      	ldr	r2, [r3, #12]
    28a2:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    28a4:	681b      	ldr	r3, [r3, #0]
    28a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    28aa:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    28ac:	4b09      	ldr	r3, [pc, #36]	; (28d4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	2200      	movs	r2, #0
    28b2:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    28b4:	4b07      	ldr	r3, [pc, #28]	; (28d4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	681a      	ldr	r2, [r3, #0]
    28ba:	4b06      	ldr	r3, [pc, #24]	; (28d4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	f042 0201 	orr.w	r2, r2, #1
    28c2:	601a      	str	r2, [r3, #0]
  }
    28c4:	bf00      	nop
    28c6:	370c      	adds	r7, #12
    28c8:	46bd      	mov	sp, r7
    28ca:	bc80      	pop	{r7}
    28cc:	4770      	bx	lr
    28ce:	bf00      	nop
    28d0:	2007c014 	.word	0x2007c014
    28d4:	2007c010 	.word	0x2007c010

000028d8 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    28d8:	b480      	push	{r7}
    28da:	b083      	sub	sp, #12
    28dc:	af00      	add	r7, sp, #0
    28de:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    28e0:	4b03      	ldr	r3, [pc, #12]	; (28f0 <sjsu::cortex::DwtCounter::GetCount()+0x18>)
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	685b      	ldr	r3, [r3, #4]
  }
    28e6:	4618      	mov	r0, r3
    28e8:	370c      	adds	r7, #12
    28ea:	46bd      	mov	sp, r7
    28ec:	bc80      	pop	{r7}
    28ee:	4770      	bx	lr
    28f0:	2007c010 	.word	0x2007c010

000028f4 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
    28f4:	b580      	push	{r7, lr}
    28f6:	b082      	sub	sp, #8
    28f8:	af00      	add	r7, sp, #0
    28fa:	6078      	str	r0, [r7, #4]
			return x < 0 ? -x : x;
    28fc:	f04f 0100 	mov.w	r1, #0
    2900:	6878      	ldr	r0, [r7, #4]
    2902:	f002 fbad 	bl	5060 <__aeabi_fcmplt>
    2906:	4603      	mov	r3, r0
    2908:	2b00      	cmp	r3, #0
    290a:	d003      	beq.n	2914 <units::detail::abs(float)+0x20>
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    2912:	e000      	b.n	2916 <units::detail::abs(float)+0x22>
    2914:	687b      	ldr	r3, [r7, #4]
		}
    2916:	4618      	mov	r0, r3
    2918:	3708      	adds	r7, #8
    291a:	46bd      	mov	sp, r7
    291c:	bd80      	pop	{r7, pc}

0000291e <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    291e:	b580      	push	{r7, lr}
    2920:	b084      	sub	sp, #16
    2922:	af00      	add	r7, sp, #0
    2924:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    2928:	e9d7 0100 	ldrd	r0, r1, [r7]
    292c:	f002 f9b4 	bl	4c98 <__aeabi_ul2f>
    2930:	4602      	mov	r2, r0
    2932:	f107 030c 	add.w	r3, r7, #12
    2936:	4611      	mov	r1, r2
    2938:	4618      	mov	r0, r3
    293a:	f000 f814 	bl	2966 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	4618      	mov	r0, r3
    2942:	3710      	adds	r7, #16
    2944:	46bd      	mov	sp, r7
    2946:	bd80      	pop	{r7, pc}

00002948 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
    2950:	6039      	str	r1, [r7, #0]
    2952:	683b      	ldr	r3, [r7, #0]
    2954:	681a      	ldr	r2, [r3, #0]
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	601a      	str	r2, [r3, #0]
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	4618      	mov	r0, r3
    295e:	370c      	adds	r7, #12
    2960:	46bd      	mov	sp, r7
    2962:	bc80      	pop	{r7}
    2964:	4770      	bx	lr

00002966 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2966:	b580      	push	{r7, lr}
    2968:	b082      	sub	sp, #8
    296a:	af00      	add	r7, sp, #0
    296c:	6078      	str	r0, [r7, #4]
    296e:	6039      	str	r1, [r7, #0]
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	463a      	mov	r2, r7
    2974:	4611      	mov	r1, r2
    2976:	4618      	mov	r0, r3
    2978:	f7ff ffe6 	bl	2948 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	4618      	mov	r0, r3
    2980:	3708      	adds	r7, #8
    2982:	46bd      	mov	sp, r7
    2984:	bd80      	pop	{r7, pc}

00002986 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2986:	b5f0      	push	{r4, r5, r6, r7, lr}
    2988:	b083      	sub	sp, #12
    298a:	af00      	add	r7, sp, #0
    298c:	6078      	str	r0, [r7, #4]
    298e:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    2990:	687b      	ldr	r3, [r7, #4]
    2992:	681c      	ldr	r4, [r3, #0]
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	4618      	mov	r0, r3
    2998:	f000 f84a 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    299c:	4603      	mov	r3, r0
    299e:	4619      	mov	r1, r3
    29a0:	4620      	mov	r0, r4
    29a2:	f002 f8b5 	bl	4b10 <__aeabi_fsub>
    29a6:	4603      	mov	r3, r0
    29a8:	4618      	mov	r0, r3
    29aa:	f7ff ffa3 	bl	28f4 <units::detail::abs(float)>
    29ae:	4605      	mov	r5, r0
    29b0:	f7ff ff68 	bl	2884 <std::numeric_limits<float>::epsilon()>
    29b4:	4606      	mov	r6, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	681c      	ldr	r4, [r3, #0]
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	4618      	mov	r0, r3
    29be:	f000 f837 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    29c2:	4603      	mov	r3, r0
    29c4:	4619      	mov	r1, r3
    29c6:	4620      	mov	r0, r4
    29c8:	f002 f8a4 	bl	4b14 <__addsf3>
    29cc:	4603      	mov	r3, r0
    29ce:	4618      	mov	r0, r3
    29d0:	f7ff ff90 	bl	28f4 <units::detail::abs(float)>
    29d4:	4603      	mov	r3, r0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    29d6:	4619      	mov	r1, r3
    29d8:	4630      	mov	r0, r6
    29da:	f002 f9a3 	bl	4d24 <__aeabi_fmul>
    29de:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    29e0:	4619      	mov	r1, r3
    29e2:	4628      	mov	r0, r5
    29e4:	f002 fb3c 	bl	5060 <__aeabi_fcmplt>
    29e8:	4603      	mov	r3, r0
    29ea:	2b00      	cmp	r3, #0
    29ec:	d119      	bne.n	2a22 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	681c      	ldr	r4, [r3, #0]
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	4618      	mov	r0, r3
    29f6:	f000 f81b 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    29fa:	4603      	mov	r3, r0
    29fc:	4619      	mov	r1, r3
    29fe:	4620      	mov	r0, r4
    2a00:	f002 f886 	bl	4b10 <__aeabi_fsub>
    2a04:	4603      	mov	r3, r0
    2a06:	4618      	mov	r0, r3
    2a08:	f7ff ff74 	bl	28f4 <units::detail::abs(float)>
    2a0c:	4604      	mov	r4, r0
    2a0e:	f7ff ff31 	bl	2874 <std::numeric_limits<float>::min()>
    2a12:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    2a14:	4619      	mov	r1, r3
    2a16:	4620      	mov	r0, r4
    2a18:	f002 fb22 	bl	5060 <__aeabi_fcmplt>
    2a1c:	4603      	mov	r3, r0
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d001      	beq.n	2a26 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
    2a22:	2301      	movs	r3, #1
    2a24:	e000      	b.n	2a28 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
    2a26:	2300      	movs	r3, #0
		}
    2a28:	4618      	mov	r0, r3
    2a2a:	370c      	adds	r7, #12
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2a30:	b580      	push	{r7, lr}
    2a32:	b086      	sub	sp, #24
    2a34:	af00      	add	r7, sp, #0
    2a36:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2a38:	6878      	ldr	r0, [r7, #4]
    2a3a:	f000 f805 	bl	2a48 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2a3e:	4603      	mov	r3, r0
	}
    2a40:	4618      	mov	r0, r3
    2a42:	3718      	adds	r7, #24
    2a44:	46bd      	mov	sp, r7
    2a46:	bd80      	pop	{r7, pc}

00002a48 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2a48:	b480      	push	{r7}
    2a4a:	b085      	sub	sp, #20
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	7239      	strb	r1, [r7, #8]
    2a52:	713a      	strb	r2, [r7, #4]
    2a54:	703b      	strb	r3, [r7, #0]
			return value;
    2a56:	68fb      	ldr	r3, [r7, #12]
    2a58:	681b      	ldr	r3, [r3, #0]
		}
    2a5a:	4618      	mov	r0, r3
    2a5c:	3714      	adds	r7, #20
    2a5e:	46bd      	mov	sp, r7
    2a60:	bc80      	pop	{r7}
    2a62:	4770      	bx	lr

00002a64 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2a64:	b5b0      	push	{r4, r5, r7, lr}
    2a66:	b082      	sub	sp, #8
    2a68:	af00      	add	r7, sp, #0
    2a6a:	6078      	str	r0, [r7, #4]
    2a6c:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	681c      	ldr	r4, [r3, #0]
    2a72:	683b      	ldr	r3, [r7, #0]
    2a74:	4618      	mov	r0, r3
    2a76:	f7ff ffdb 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2a7a:	4602      	mov	r2, r0
    2a7c:	2301      	movs	r3, #1
    2a7e:	461d      	mov	r5, r3
    2a80:	4611      	mov	r1, r2
    2a82:	4620      	mov	r0, r4
    2a84:	f002 faf6 	bl	5074 <__aeabi_fcmple>
    2a88:	4603      	mov	r3, r0
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d101      	bne.n	2a92 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    2a8e:	2300      	movs	r3, #0
    2a90:	461d      	mov	r5, r3
    2a92:	b2eb      	uxtb	r3, r5
		}
    2a94:	4618      	mov	r0, r3
    2a96:	3708      	adds	r7, #8
    2a98:	46bd      	mov	sp, r7
    2a9a:	bdb0      	pop	{r4, r5, r7, pc}

00002a9c <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    2a9c:	b480      	push	{r7}
    2a9e:	b083      	sub	sp, #12
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    2aa4:	4a03      	ldr	r2, [pc, #12]	; (2ab4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x18>)
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	6013      	str	r3, [r2, #0]
}
    2aaa:	bf00      	nop
    2aac:	370c      	adds	r7, #12
    2aae:	46bd      	mov	sp, r7
    2ab0:	bc80      	pop	{r7}
    2ab2:	4770      	bx	lr
    2ab4:	2007c000 	.word	0x2007c000

00002ab8 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    2ab8:	b580      	push	{r7, lr}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    2abe:	4b09      	ldr	r3, [pc, #36]	; (2ae4 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	685b      	ldr	r3, [r3, #4]
    2ac4:	b2db      	uxtb	r3, r3
    2ac6:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    2ac8:	4a07      	ldr	r2, [pc, #28]	; (2ae8 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    2ace:	4a07      	ldr	r2, [pc, #28]	; (2aec <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ad6:	603b      	str	r3, [r7, #0]
    isr();
    2ad8:	683b      	ldr	r3, [r7, #0]
    2ada:	4798      	blx	r3
  }
    2adc:	bf00      	nop
    2ade:	3708      	adds	r7, #8
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	2007c018 	.word	0x2007c018
    2ae8:	2007c004 	.word	0x2007c004
    2aec:	2007c150 	.word	0x2007c150

00002af0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    2af0:	b580      	push	{r7, lr}
    2af2:	b086      	sub	sp, #24
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
    2af8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	681b      	ldr	r3, [r3, #0]
    2afe:	3308      	adds	r3, #8
    2b00:	681b      	ldr	r3, [r3, #0]
    2b02:	6839      	ldr	r1, [r7, #0]
    2b04:	6878      	ldr	r0, [r7, #4]
    2b06:	4798      	blx	r3
    2b08:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    2b0a:	f04f 0300 	mov.w	r3, #0
    2b0e:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    2b10:	697b      	ldr	r3, [r7, #20]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d00f      	beq.n	2b36 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	330c      	adds	r3, #12
    2b1c:	681b      	ldr	r3, [r3, #0]
    2b1e:	6878      	ldr	r0, [r7, #4]
    2b20:	4798      	blx	r3
    2b22:	4603      	mov	r3, r0
    2b24:	613b      	str	r3, [r7, #16]
    2b26:	f107 0310 	add.w	r3, r7, #16
    2b2a:	6979      	ldr	r1, [r7, #20]
    2b2c:	4618      	mov	r0, r3
    2b2e:	f001 fbeb 	bl	4308 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    2b32:	4603      	mov	r3, r0
    2b34:	60fb      	str	r3, [r7, #12]
    }
    return result;
    2b36:	68fb      	ldr	r3, [r7, #12]
  }
    2b38:	4618      	mov	r0, r3
    2b3a:	3718      	adds	r7, #24
    2b3c:	46bd      	mov	sp, r7
    2b3e:	bd80      	pop	{r7, pc}

00002b40 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	4618      	mov	r0, r3
    2b4c:	f000 f804 	bl	2b58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    2b50:	6878      	ldr	r0, [r7, #4]
    2b52:	3708      	adds	r7, #8
    2b54:	46bd      	mov	sp, r7
    2b56:	bd80      	pop	{r7, pc}

00002b58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    2b58:	b580      	push	{r7, lr}
    2b5a:	b082      	sub	sp, #8
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2b60:	4903      	ldr	r1, [pc, #12]	; (2b70 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    2b62:	6878      	ldr	r0, [r7, #4]
    2b64:	f7fd ff86 	bl	a74 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2b68:	6878      	ldr	r0, [r7, #4]
    2b6a:	3708      	adds	r7, #8
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd80      	pop	{r7, pc}
    2b70:	00006e10 	.word	0x00006e10

00002b74 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    2b74:	b580      	push	{r7, lr}
    2b76:	b084      	sub	sp, #16
    2b78:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    2b7a:	f107 0308 	add.w	r3, r7, #8
    2b7e:	4618      	mov	r0, r3
    2b80:	f7ff ffde 	bl	2b40 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    2b84:	f107 0208 	add.w	r2, r7, #8
    2b88:	463b      	mov	r3, r7
    2b8a:	4611      	mov	r1, r2
    2b8c:	4618      	mov	r0, r3
    2b8e:	f7fd ffd7 	bl	b40 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2b92:	463b      	mov	r3, r7
    2b94:	4619      	mov	r1, r3
    2b96:	4807      	ldr	r0, [pc, #28]	; (2bb4 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    2b98:	f001 fbd5 	bl	4346 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    2b9c:	4b06      	ldr	r3, [pc, #24]	; (2bb8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d002      	beq.n	2baa <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    2ba4:	4b04      	ldr	r3, [pc, #16]	; (2bb8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	4798      	blx	r3
    }
  }
    2baa:	bf00      	nop
    2bac:	3710      	adds	r7, #16
    2bae:	46bd      	mov	sp, r7
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	bf00      	nop
    2bb4:	2007c2d8 	.word	0x2007c2d8
    2bb8:	2007c2d4 	.word	0x2007c2d4

00002bbc <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    2bbc:	b490      	push	{r4, r7}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
  {
    return counter;
    2bc4:	687a      	ldr	r2, [r7, #4]
    2bc6:	4b04      	ldr	r3, [pc, #16]	; (2bd8 <sjsu::cortex::SystemTimer::GetCount()+0x1c>)
    2bc8:	cb18      	ldmia	r3, {r3, r4}
    2bca:	e9c2 3400 	strd	r3, r4, [r2]
  }
    2bce:	6878      	ldr	r0, [r7, #4]
    2bd0:	3708      	adds	r7, #8
    2bd2:	46bd      	mov	sp, r7
    2bd4:	bc90      	pop	{r4, r7}
    2bd6:	4770      	bx	lr
    2bd8:	2007c2d8 	.word	0x2007c2d8

00002bdc <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    2bdc:	b480      	push	{r7}
    2bde:	b083      	sub	sp, #12
    2be0:	af00      	add	r7, sp, #0
    2be2:	6078      	str	r0, [r7, #4]
    2be4:	bf00      	nop
    2be6:	370c      	adds	r7, #12
    2be8:	46bd      	mov	sp, r7
    2bea:	bc80      	pop	{r7}
    2bec:	4770      	bx	lr
    2bee:	Address 0x0000000000002bee is out of bounds.


00002bf0 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    2bf0:	b480      	push	{r7}
    2bf2:	b083      	sub	sp, #12
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
    2bf8:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    2bfa:	4a04      	ldr	r2, [pc, #16]	; (2c0c <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    2bfc:	683b      	ldr	r3, [r7, #0]
    2bfe:	6013      	str	r3, [r2, #0]
  }
    2c00:	bf00      	nop
    2c02:	370c      	adds	r7, #12
    2c04:	46bd      	mov	sp, r7
    2c06:	bc80      	pop	{r7}
    2c08:	4770      	bx	lr
    2c0a:	bf00      	nop
    2c0c:	2007c2d4 	.word	0x2007c2d4

00002c10 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	b08b      	sub	sp, #44	; 0x2c
    2c14:	af02      	add	r7, sp, #8
    2c16:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    2c18:	2304      	movs	r3, #4
    2c1a:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    2c1c:	4b1f      	ldr	r3, [pc, #124]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	685b      	ldr	r3, [r3, #4]
    2c22:	2b00      	cmp	r3, #0
    2c24:	bf14      	ite	ne
    2c26:	2301      	movne	r3, #1
    2c28:	2300      	moveq	r3, #0
    2c2a:	b2db      	uxtb	r3, r3
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d030      	beq.n	2c92 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    2c30:	4b1a      	ldr	r3, [pc, #104]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c32:	681b      	ldr	r3, [r3, #0]
    2c34:	2200      	movs	r2, #0
    2c36:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    2c38:	4b18      	ldr	r3, [pc, #96]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	681a      	ldr	r2, [r3, #0]
    2c3e:	4b17      	ldr	r3, [pc, #92]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	f042 0202 	orr.w	r2, r2, #2
    2c46:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    2c48:	4b14      	ldr	r3, [pc, #80]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	681a      	ldr	r2, [r3, #0]
    2c4e:	4b13      	ldr	r3, [pc, #76]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	f042 0201 	orr.w	r2, r2, #1
    2c56:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    2c58:	4b10      	ldr	r3, [pc, #64]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	681a      	ldr	r2, [r3, #0]
    2c5e:	4b0f      	ldr	r3, [pc, #60]	; (2c9c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	f042 0204 	orr.w	r2, r2, #4
    2c66:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	689e      	ldr	r6, [r3, #8]
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    2c74:	4b0a      	ldr	r3, [pc, #40]	; (2ca0 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    2c76:	f107 040c 	add.w	r4, r7, #12
    2c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	9300      	str	r3, [sp, #0]
    2c84:	f107 030c 	add.w	r3, r7, #12
    2c88:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c8a:	4630      	mov	r0, r6
    2c8c:	47a8      	blx	r5
      status = Status::kSuccess;
    2c8e:	2300      	movs	r3, #0
    2c90:	61fb      	str	r3, [r7, #28]
    }

    return status;
    2c92:	69fb      	ldr	r3, [r7, #28]
  }
    2c94:	4618      	mov	r0, r3
    2c96:	3724      	adds	r7, #36	; 0x24
    2c98:	46bd      	mov	sp, r7
    2c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c9c:	2007c01c 	.word	0x2007c01c
    2ca0:	00006fa8 	.word	0x00006fa8

00002ca4 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    2ca4:	b480      	push	{r7}
    2ca6:	b083      	sub	sp, #12
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	4618      	mov	r0, r3
    2cb2:	370c      	adds	r7, #12
    2cb4:	46bd      	mov	sp, r7
    2cb6:	bc80      	pop	{r7}
    2cb8:	4770      	bx	lr

00002cba <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2cba:	b590      	push	{r4, r7, lr}
    2cbc:	b085      	sub	sp, #20
    2cbe:	af00      	add	r7, sp, #0
    2cc0:	6078      	str	r0, [r7, #4]
    2cc2:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	4618      	mov	r0, r3
    2cc8:	f7ff ffec 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    2ccc:	4604      	mov	r4, r0
    2cce:	683b      	ldr	r3, [r7, #0]
    2cd0:	4618      	mov	r0, r3
    2cd2:	f7ff ffe7 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    2cd6:	4603      	mov	r3, r0
    2cd8:	60fb      	str	r3, [r7, #12]
    2cda:	f107 030c 	add.w	r3, r7, #12
    2cde:	4618      	mov	r0, r3
    2ce0:	f7ff fea6 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2ce4:	4603      	mov	r3, r0
    2ce6:	4619      	mov	r1, r3
    2ce8:	4620      	mov	r0, r4
    2cea:	f002 f8cf 	bl	4e8c <__aeabi_fdiv>
    2cee:	4603      	mov	r3, r0
    2cf0:	461a      	mov	r2, r3
    2cf2:	f107 0308 	add.w	r3, r7, #8
    2cf6:	4611      	mov	r1, r2
    2cf8:	4618      	mov	r0, r3
    2cfa:	f000 f805 	bl	2d08 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2cfe:	68bb      	ldr	r3, [r7, #8]
	}
    2d00:	4618      	mov	r0, r3
    2d02:	3714      	adds	r7, #20
    2d04:	46bd      	mov	sp, r7
    2d06:	bd90      	pop	{r4, r7, pc}

00002d08 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
    2d10:	6039      	str	r1, [r7, #0]
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	463a      	mov	r2, r7
    2d16:	4611      	mov	r1, r2
    2d18:	4618      	mov	r0, r3
    2d1a:	f7ff fe15 	bl	2948 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	4618      	mov	r0, r3
    2d22:	3708      	adds	r7, #8
    2d24:	46bd      	mov	sp, r7
    2d26:	bd80      	pop	{r7, pc}

00002d28 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    2d28:	b590      	push	{r4, r7, lr}
    2d2a:	b085      	sub	sp, #20
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	6078      	str	r0, [r7, #4]
    2d30:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	4618      	mov	r0, r3
    2d36:	f7ff ffb5 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    2d3a:	4604      	mov	r4, r0
    2d3c:	6838      	ldr	r0, [r7, #0]
    2d3e:	f001 ff9d 	bl	4c7c <__aeabi_i2f>
    2d42:	4603      	mov	r3, r0
    2d44:	4619      	mov	r1, r3
    2d46:	4620      	mov	r0, r4
    2d48:	f001 fee2 	bl	4b10 <__aeabi_fsub>
    2d4c:	4603      	mov	r3, r0
    2d4e:	461a      	mov	r2, r3
    2d50:	f107 030c 	add.w	r3, r7, #12
    2d54:	4611      	mov	r1, r2
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff ffd6 	bl	2d08 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2d5c:	68fb      	ldr	r3, [r7, #12]
	}
    2d5e:	4618      	mov	r0, r3
    2d60:	3714      	adds	r7, #20
    2d62:	46bd      	mov	sp, r7
    2d64:	bd90      	pop	{r4, r7, pc}

00002d66 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2d66:	b580      	push	{r7, lr}
    2d68:	b082      	sub	sp, #8
    2d6a:	af00      	add	r7, sp, #0
    2d6c:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2d6e:	6878      	ldr	r0, [r7, #4]
    2d70:	f001 fb01 	bl	4376 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2d74:	4603      	mov	r3, r0
	}
    2d76:	4618      	mov	r0, r3
    2d78:	3708      	adds	r7, #8
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bd80      	pop	{r7, pc}

00002d7e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2d7e:	b580      	push	{r7, lr}
    2d80:	b082      	sub	sp, #8
    2d82:	af00      	add	r7, sp, #0
    2d84:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2d86:	6878      	ldr	r0, [r7, #4]
    2d88:	f000 f805 	bl	2d96 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2d8c:	4603      	mov	r3, r0
	}
    2d8e:	4618      	mov	r0, r3
    2d90:	3708      	adds	r7, #8
    2d92:	46bd      	mov	sp, r7
    2d94:	bd80      	pop	{r7, pc}

00002d96 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2d96:	b580      	push	{r7, lr}
    2d98:	b082      	sub	sp, #8
    2d9a:	af00      	add	r7, sp, #0
    2d9c:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	4618      	mov	r0, r3
    2da2:	f7ff ff7f 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    2da6:	4603      	mov	r3, r0
    2da8:	4618      	mov	r0, r3
    2daa:	f002 f9a7 	bl	50fc <__aeabi_f2uiz>
    2dae:	4603      	mov	r3, r0
		}
    2db0:	4618      	mov	r0, r3
    2db2:	3708      	adds	r7, #8
    2db4:	46bd      	mov	sp, r7
    2db6:	bd80      	pop	{r7, pc}

00002db8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    2db8:	b590      	push	{r4, r7, lr}
    2dba:	b089      	sub	sp, #36	; 0x24
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    2dc2:	f04f 0001 	mov.w	r0, #1
    2dc6:	f04f 0100 	mov.w	r1, #0
    2dca:	f7ff fda8 	bl	291e <units::literals::operator"" _Hz(unsigned long long)>
    2dce:	4603      	mov	r3, r0
    2dd0:	60fb      	str	r3, [r7, #12]
    2dd2:	f107 020c 	add.w	r2, r7, #12
    2dd6:	463b      	mov	r3, r7
    2dd8:	4611      	mov	r1, r2
    2dda:	4618      	mov	r0, r3
    2ddc:	f7ff fe42 	bl	2a64 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2de0:	4603      	mov	r3, r0
    2de2:	2b00      	cmp	r3, #0
    2de4:	d002      	beq.n	2dec <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    2de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2dea:	e041      	b.n	2e70 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	685a      	ldr	r2, [r3, #4]
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	685b      	ldr	r3, [r3, #4]
    2df4:	681b      	ldr	r3, [r3, #0]
    2df6:	330c      	adds	r3, #12
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	4610      	mov	r0, r2
    2dfc:	4798      	blx	r3
    2dfe:	4603      	mov	r3, r0
    2e00:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    2e02:	463a      	mov	r2, r7
    2e04:	f107 0308 	add.w	r3, r7, #8
    2e08:	4611      	mov	r1, r2
    2e0a:	4618      	mov	r0, r3
    2e0c:	f7ff ff55 	bl	2cba <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2e10:	4603      	mov	r3, r0
    2e12:	617b      	str	r3, [r7, #20]
    2e14:	f107 0314 	add.w	r3, r7, #20
    2e18:	2101      	movs	r1, #1
    2e1a:	4618      	mov	r0, r3
    2e1c:	f7ff ff84 	bl	2d28 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    2e20:	4603      	mov	r3, r0
    2e22:	613b      	str	r3, [r7, #16]
    2e24:	f107 0310 	add.w	r3, r7, #16
    2e28:	4618      	mov	r0, r3
    2e2a:	f7ff ff9c 	bl	2d66 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2e2e:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2e30:	f107 0308 	add.w	r3, r7, #8
    2e34:	4618      	mov	r0, r3
    2e36:	f7ff ffa2 	bl	2d7e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2e3a:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    2e3c:	463b      	mov	r3, r7
    2e3e:	4618      	mov	r0, r3
    2e40:	f7ff ff9d 	bl	2d7e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2e44:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2e46:	fbb4 f2f3 	udiv	r2, r4, r3
    2e4a:	fb03 f302 	mul.w	r3, r3, r2
    2e4e:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    2e50:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    2e52:	69fb      	ldr	r3, [r7, #28]
    2e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2e58:	d305      	bcc.n	2e66 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    2e5a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2e5e:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    2e60:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2e64:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    2e66:	4b04      	ldr	r3, [pc, #16]	; (2e78 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2e68:	681b      	ldr	r3, [r3, #0]
    2e6a:	69fa      	ldr	r2, [r7, #28]
    2e6c:	605a      	str	r2, [r3, #4]
    return remainder;
    2e6e:	69bb      	ldr	r3, [r7, #24]
  }
    2e70:	4618      	mov	r0, r3
    2e72:	3724      	adds	r7, #36	; 0x24
    2e74:	46bd      	mov	sp, r7
    2e76:	bd90      	pop	{r4, r7, pc}
    2e78:	2007c01c 	.word	0x2007c01c

00002e7c <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>:
/// @return constexpr Mask from the low bit position to the high bit position.
///         If the low_bit_position > high_bit_position, the result is
///         undefined.
constexpr Mask CreateMaskFromRange(uint8_t low_bit_position,
                                   uint8_t high_bit_position)
{
    2e7c:	b480      	push	{r7}
    2e7e:	b085      	sub	sp, #20
    2e80:	af00      	add	r7, sp, #0
    2e82:	4603      	mov	r3, r0
    2e84:	460a      	mov	r2, r1
    2e86:	71fb      	strb	r3, [r7, #7]
    2e88:	4613      	mov	r3, r2
    2e8a:	71bb      	strb	r3, [r7, #6]
  return Mask({
      .position = low_bit_position,
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
  });
    2e8c:	79fb      	ldrb	r3, [r7, #7]
    2e8e:	733b      	strb	r3, [r7, #12]
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
    2e90:	79ba      	ldrb	r2, [r7, #6]
    2e92:	79fb      	ldrb	r3, [r7, #7]
    2e94:	1ad3      	subs	r3, r2, r3
    2e96:	b2db      	uxtb	r3, r3
    2e98:	3301      	adds	r3, #1
    2e9a:	b2db      	uxtb	r3, r3
  });
    2e9c:	737b      	strb	r3, [r7, #13]
    2e9e:	2300      	movs	r3, #0
    2ea0:	7b3a      	ldrb	r2, [r7, #12]
    2ea2:	f362 0307 	bfi	r3, r2, #0, #8
    2ea6:	7b7a      	ldrb	r2, [r7, #13]
    2ea8:	f362 230f 	bfi	r3, r2, #8, #8
}
    2eac:	4618      	mov	r0, r3
    2eae:	3714      	adds	r7, #20
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bc80      	pop	{r7}
    2eb4:	4770      	bx	lr

00002eb6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2eb6:	b580      	push	{r7, lr}
    2eb8:	b086      	sub	sp, #24
    2eba:	af00      	add	r7, sp, #0
    2ebc:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2ebe:	6878      	ldr	r0, [r7, #4]
    2ec0:	f000 f806 	bl	2ed0 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2ec4:	4603      	mov	r3, r0
	}
    2ec6:	4618      	mov	r0, r3
    2ec8:	3718      	adds	r7, #24
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	Address 0x0000000000002ece is out of bounds.


00002ed0 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	60f8      	str	r0, [r7, #12]
    2ed8:	7239      	strb	r1, [r7, #8]
    2eda:	713a      	strb	r2, [r7, #4]
    2edc:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    2ede:	68fb      	ldr	r3, [r7, #12]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	4904      	ldr	r1, [pc, #16]	; (2ef4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x24>)
    2ee4:	4618      	mov	r0, r3
    2ee6:	f001 ff1d 	bl	4d24 <__aeabi_fmul>
    2eea:	4603      	mov	r3, r0
		}
    2eec:	4618      	mov	r0, r3
    2eee:	3710      	adds	r7, #16
    2ef0:	46bd      	mov	sp, r7
    2ef2:	bd80      	pop	{r7, pc}
    2ef4:	49742400 	.word	0x49742400

00002ef8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
    2ef8:	b590      	push	{r4, r7, lr}
    2efa:	b085      	sub	sp, #20
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    2f00:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
    2f02:	687c      	ldr	r4, [r7, #4]
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	4618      	mov	r0, r3
    2f08:	f7ff ffd5 	bl	2eb6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2f0c:	4603      	mov	r3, r0
    2f0e:	60bb      	str	r3, [r7, #8]
    2f10:	f107 020c 	add.w	r2, r7, #12
    2f14:	f107 0308 	add.w	r3, r7, #8
    2f18:	4619      	mov	r1, r3
    2f1a:	4620      	mov	r0, r4
    2f1c:	f000 f805 	bl	2f2a <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	4618      	mov	r0, r3
    2f24:	3714      	adds	r7, #20
    2f26:	46bd      	mov	sp, r7
    2f28:	bd90      	pop	{r4, r7, pc}

00002f2a <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2f2a:	b480      	push	{r7}
    2f2c:	b085      	sub	sp, #20
    2f2e:	af00      	add	r7, sp, #0
    2f30:	60f8      	str	r0, [r7, #12]
    2f32:	60b9      	str	r1, [r7, #8]
    2f34:	607a      	str	r2, [r7, #4]
    2f36:	68bb      	ldr	r3, [r7, #8]
    2f38:	681a      	ldr	r2, [r3, #0]
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	601a      	str	r2, [r3, #0]
    2f3e:	68fb      	ldr	r3, [r7, #12]
    2f40:	4618      	mov	r0, r3
    2f42:	3714      	adds	r7, #20
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	Address 0x0000000000002f4a is out of bounds.


00002f4c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// @note The USB subsystem should be configured to obtain its input clock
  ///       from the USB PLL. The internal RC is used for PLL0 and will not
  ///       generate a precise enough clock to be used by the USB subsystem.
  ///
  /// @param frequency The desired CPU Clock frequency in megahertz.
  void SetSystemClockFrequency(
    2f4c:	b590      	push	{r4, r7, lr}
    2f4e:	b085      	sub	sp, #20
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
    2f54:	6039      	str	r1, [r7, #0]
    //       update the PLL0CFG and enable PLL0 simultaneously with the same
    //       feed sequence.

    // 1. Disconnect PLL0 with one feed sequence if PLL0 is already connected.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2f56:	4b63      	ldr	r3, [pc, #396]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2f5e:	4b61      	ldr	r3, [pc, #388]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f60:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2f62:	2101      	movs	r1, #1
    2f64:	4610      	mov	r0, r2
    2f66:	f001 fa1e 	bl	43a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2f6a:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2f6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2f70:	2100      	movs	r1, #0
    2f72:	6878      	ldr	r0, [r7, #4]
    2f74:	f000 fb76 	bl	3664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 2. Disable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2f78:	4b5a      	ldr	r3, [pc, #360]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f7a:	681b      	ldr	r3, [r3, #0]
    2f7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2f80:	4b58      	ldr	r3, [pc, #352]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f82:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2f84:	2100      	movs	r1, #0
    2f86:	4610      	mov	r0, r2
    2f88:	f001 fa0d 	bl	43a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2f8c:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2f8e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2f92:	2100      	movs	r1, #0
    2f94:	6878      	ldr	r0, [r7, #4]
    2f96:	f000 fb65 	bl	3664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 3. Change the CPU Clock Divider setting to speed up operation without
    //    PLL0, if desired.
    SetCpuClockDivider(0);
    2f9a:	2100      	movs	r1, #0
    2f9c:	6878      	ldr	r0, [r7, #4]
    2f9e:	f000 fc13 	bl	37c8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 4. Write to the Clock Source Selection Control register to change the
    //    clock source if needed.
    //    The 4 MHz internal RC will be used until PLL0 achieves a lock and is
    //    connected.
    SelectOscillatorSource(OscillatorSource::kIrc);
    2fa2:	2100      	movs	r1, #0
    2fa4:	6878      	ldr	r0, [r7, #4]
    2fa6:	f000 f9e5 	bl	3374 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>
    // 5. Write to the PLL0CFG and make it effective with one feed sequence.
    //    The PLL0CFG can only be updated when PLL0 is disabled.
    const Pll0Settings_t kPll0Settings =
        CalculatePll0(kDefaultIRCFrequency, frequency);
    2faa:	463a      	mov	r2, r7
    2fac:	f107 030c 	add.w	r3, r7, #12
    2fb0:	4611      	mov	r1, r2
    2fb2:	4618      	mov	r0, r3
    2fb4:	f7ff ffa0 	bl	2ef8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2fb8:	4b4b      	ldr	r3, [pc, #300]	; (30e8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19c>)
    2fba:	68fa      	ldr	r2, [r7, #12]
    2fbc:	6819      	ldr	r1, [r3, #0]
    2fbe:	6878      	ldr	r0, [r7, #4]
    2fc0:	f000 fa34 	bl	342c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    2fc4:	4603      	mov	r3, r0
    2fc6:	60bb      	str	r3, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2fc8:	4b46      	ldr	r3, [pc, #280]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.multiplier,
    2fd0:	8939      	ldrh	r1, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2fd2:	4b44      	ldr	r3, [pc, #272]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2fd4:	681c      	ldr	r4, [r3, #0]
    2fd6:	4b45      	ldr	r3, [pc, #276]	; (30ec <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a0>)
    2fd8:	781a      	ldrb	r2, [r3, #0]
    2fda:	785b      	ldrb	r3, [r3, #1]
    2fdc:	021b      	lsls	r3, r3, #8
    2fde:	431a      	orrs	r2, r3
    2fe0:	2300      	movs	r3, #0
    2fe2:	f362 030f 	bfi	r3, r2, #0, #16
    2fe6:	461a      	mov	r2, r3
    2fe8:	f001 f9ef 	bl	43ca <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>
    2fec:	4603      	mov	r3, r0
    2fee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kMultiplier);
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2ff2:	4b3c      	ldr	r3, [pc, #240]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2ff4:	681b      	ldr	r3, [r3, #0]
    2ff6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.pre_divider,
    2ffa:	7ab9      	ldrb	r1, [r7, #10]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2ffc:	4b39      	ldr	r3, [pc, #228]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2ffe:	681c      	ldr	r4, [r3, #0]
    3000:	4b3b      	ldr	r3, [pc, #236]	; (30f0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    3002:	781a      	ldrb	r2, [r3, #0]
    3004:	785b      	ldrb	r3, [r3, #1]
    3006:	021b      	lsls	r3, r3, #8
    3008:	431a      	orrs	r2, r3
    300a:	2300      	movs	r3, #0
    300c:	f362 030f 	bfi	r3, r2, #0, #16
    3010:	461a      	mov	r2, r3
    3012:	f001 f9ed 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3016:	4603      	mov	r3, r0
    3018:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kPreDivider);
    WritePllFeedSequence(PllSelect::kMainPll);
    301c:	2100      	movs	r1, #0
    301e:	6878      	ldr	r0, [r7, #4]
    3020:	f000 fb20 	bl	3664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 6. Enable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    3024:	4b2f      	ldr	r3, [pc, #188]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    3026:	681b      	ldr	r3, [r3, #0]
    3028:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    302c:	4b2d      	ldr	r3, [pc, #180]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    302e:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    3030:	2100      	movs	r1, #0
    3032:	4610      	mov	r0, r2
    3034:	f001 f9ef 	bl	4416 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3038:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    303a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    303e:	2100      	movs	r1, #0
    3040:	6878      	ldr	r0, [r7, #4]
    3042:	f000 fb0f 	bl	3664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 7. Change the CPU Clock Divider setting for the operation with PLL0.
    //    It is critical to do this before connecting PLL0.
    SetCpuClockDivider(kPll0Settings.cpu_divider);
    3046:	7afb      	ldrb	r3, [r7, #11]
    3048:	4619      	mov	r1, r3
    304a:	6878      	ldr	r0, [r7, #4]
    304c:	f000 fbbc 	bl	37c8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 8. Wait for PLL0 to achieve lock by monitoring the PLOCK0 bit in the
    //    PLL0STAT register, or using the PLOCK0 interrupt, or wait for a fixed
    //    time when the input clock to PLL0 is slow (i.e. 32 kHz).
    SJ2_ASSERT_FATAL(WaitForPllLockStatus(PllSelect::kMainPll),
    3050:	2100      	movs	r1, #0
    3052:	6878      	ldr	r0, [r7, #4]
    3054:	f000 fb34 	bl	36c0 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    3058:	4603      	mov	r3, r0
    305a:	f083 0301 	eor.w	r3, r3, #1
    305e:	b2db      	uxtb	r3, r3
    3060:	2b00      	cmp	r3, #0
    3062:	d00d      	beq.n	3080 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x134>
    3064:	23c5      	movs	r3, #197	; 0xc5
    3066:	4a23      	ldr	r2, [pc, #140]	; (30f4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    3068:	4923      	ldr	r1, [pc, #140]	; (30f8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    306a:	4824      	ldr	r0, [pc, #144]	; (30fc <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    306c:	f7ff fb66 	bl	273c <printf>
    3070:	4823      	ldr	r0, [pc, #140]	; (3100 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    3072:	f7fe fa39 	bl	14e8 <puts>
    3076:	2100      	movs	r1, #0
    3078:	2001      	movs	r0, #1
    307a:	f7fe f819 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    307e:	e7fe      	b.n	307e <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x132>
                     "PLL0 lock could not be established before timeout");
    // 9. Connect PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    3080:	4b18      	ldr	r3, [pc, #96]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    3088:	4b16      	ldr	r3, [pc, #88]	; (30e4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    308a:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    308c:	2101      	movs	r1, #1
    308e:	4610      	mov	r0, r2
    3090:	f001 f9c1 	bl	4416 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3094:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    3096:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    309a:	2100      	movs	r1, #0
    309c:	6878      	ldr	r0, [r7, #4]
    309e:	f000 fae1 	bl	3664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>

    SJ2_ASSERT_FATAL(WaitForPllConnectionStatus(PllSelect::kMainPll),
    30a2:	2100      	movs	r1, #0
    30a4:	6878      	ldr	r0, [r7, #4]
    30a6:	f000 fb4d 	bl	3744 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    30aa:	4603      	mov	r3, r0
    30ac:	f083 0301 	eor.w	r3, r3, #1
    30b0:	b2db      	uxtb	r3, r3
    30b2:	2b00      	cmp	r3, #0
    30b4:	d00d      	beq.n	30d2 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x186>
    30b6:	23cc      	movs	r3, #204	; 0xcc
    30b8:	4a0e      	ldr	r2, [pc, #56]	; (30f4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    30ba:	4912      	ldr	r1, [pc, #72]	; (3104 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    30bc:	4812      	ldr	r0, [pc, #72]	; (3108 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    30be:	f7ff fb3d 	bl	273c <printf>
    30c2:	480f      	ldr	r0, [pc, #60]	; (3100 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    30c4:	f7fe fa10 	bl	14e8 <puts>
    30c8:	2100      	movs	r1, #0
    30ca:	2001      	movs	r0, #1
    30cc:	f7fd fff0 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    30d0:	e7fe      	b.n	30d0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>
                     "Failed to connect PLL0.");

    speed_in_hertz = frequency;
    30d2:	463b      	mov	r3, r7
    30d4:	4619      	mov	r1, r3
    30d6:	480d      	ldr	r0, [pc, #52]	; (310c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1c0>)
    30d8:	f001 f9ae 	bl	4438 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
  }
    30dc:	bf00      	nop
    30de:	3714      	adds	r7, #20
    30e0:	46bd      	mov	sp, r7
    30e2:	bd90      	pop	{r4, r7, pc}
    30e4:	2007c2e0 	.word	0x2007c2e0
    30e8:	000077b4 	.word	0x000077b4
    30ec:	000077ac 	.word	0x000077ac
    30f0:	000077b0 	.word	0x000077b0
    30f4:	00007a0c 	.word	0x00007a0c
    30f8:	000077b8 	.word	0x000077b8
    30fc:	00006fb8 	.word	0x00006fb8
    3100:	00007084 	.word	0x00007084
    3104:	000077d0 	.word	0x000077d0
    3108:	0000709c 	.word	0x0000709c
    310c:	2007c020 	.word	0x2007c020

00003110 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:
  /// The following dividers are supported for non-CAN peripherals: 1, 2, 4, 8.
  /// For CAN the following dividers are supported: 1, 2, 4, 6.
  ///
  /// @param peripheral_select  Peripheral to configure.
  /// @param peripheral_divider Peripheral clock divider value.
  void SetPeripheralClockDivider(const PeripheralID & peripheral_select,
    3110:	b580      	push	{r7, lr}
    3112:	b088      	sub	sp, #32
    3114:	af00      	add	r7, sp, #0
    3116:	60f8      	str	r0, [r7, #12]
    3118:	60b9      	str	r1, [r7, #8]
    311a:	4613      	mov	r3, r2
    311c:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    const bool kIsCanPeripheral =
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    311e:	68bb      	ldr	r3, [r7, #8]
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	220d      	movs	r2, #13
    3124:	4293      	cmp	r3, r2
    3126:	d004      	beq.n	3132 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x22>
        peripheral_select.device_id == Peripherals::kCan2.device_id;
    3128:	68bb      	ldr	r3, [r7, #8]
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	220e      	movs	r2, #14
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    312e:	4293      	cmp	r3, r2
    3130:	d101      	bne.n	3136 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x26>
    3132:	2301      	movs	r3, #1
    3134:	e000      	b.n	3138 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x28>
    3136:	2300      	movs	r3, #0
    const bool kIsCanPeripheral =
    3138:	75fb      	strb	r3, [r7, #23]
    // Convert the divider value to corresponding 2-bit select value
    // The list of divider select values can be found in the LPC176x/5x User
    // Manual Table 42.
    uint8_t divider_select;
    switch (peripheral_divider)
    313a:	79fb      	ldrb	r3, [r7, #7]
    313c:	3b01      	subs	r3, #1
    313e:	2b07      	cmp	r3, #7
    3140:	d848      	bhi.n	31d4 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xc4>
    3142:	a201      	add	r2, pc, #4	; (adr r2, 3148 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x38>)
    3144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3148:	00003169 	.word	0x00003169
    314c:	0000316f 	.word	0x0000316f
    3150:	000031d5 	.word	0x000031d5
    3154:	00003175 	.word	0x00003175
    3158:	000031d5 	.word	0x000031d5
    315c:	0000317b 	.word	0x0000317b
    3160:	000031d5 	.word	0x000031d5
    3164:	000031ab 	.word	0x000031ab
    {
      case 1: divider_select = 0b01; break;
    3168:	2301      	movs	r3, #1
    316a:	77fb      	strb	r3, [r7, #31]
    316c:	e041      	b.n	31f2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 2: divider_select = 0b10; break;
    316e:	2302      	movs	r3, #2
    3170:	77fb      	strb	r3, [r7, #31]
    3172:	e03e      	b.n	31f2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 4: divider_select = 0b00; break;
    3174:	2300      	movs	r3, #0
    3176:	77fb      	strb	r3, [r7, #31]
    3178:	e03b      	b.n	31f2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 6:
      {
        SJ2_ASSERT_FATAL(
    317a:	7dfb      	ldrb	r3, [r7, #23]
    317c:	f083 0301 	eor.w	r3, r3, #1
    3180:	b2db      	uxtb	r3, r3
    3182:	2b00      	cmp	r3, #0
    3184:	d00e      	beq.n	31a4 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x94>
    3186:	f44f 738e 	mov.w	r3, #284	; 0x11c
    318a:	4a26      	ldr	r2, [pc, #152]	; (3224 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    318c:	4926      	ldr	r1, [pc, #152]	; (3228 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x118>)
    318e:	4827      	ldr	r0, [pc, #156]	; (322c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x11c>)
    3190:	f7ff fad4 	bl	273c <printf>
    3194:	4826      	ldr	r0, [pc, #152]	; (3230 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    3196:	f7fe f9a7 	bl	14e8 <puts>
    319a:	2100      	movs	r1, #0
    319c:	2001      	movs	r0, #1
    319e:	f7fd ff87 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    31a2:	e7fe      	b.n	31a2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x92>
            kIsCanPeripheral,
            "The divider value of 6 is only supported for CAN peripherals.");
        divider_select = 0b11;
    31a4:	2303      	movs	r3, #3
    31a6:	77fb      	strb	r3, [r7, #31]
      }
      break;
    31a8:	e023      	b.n	31f2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 8:
      {
        SJ2_ASSERT_FATAL(
    31aa:	7dfb      	ldrb	r3, [r7, #23]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d00e      	beq.n	31ce <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbe>
    31b0:	f44f 7392 	mov.w	r3, #292	; 0x124
    31b4:	4a1b      	ldr	r2, [pc, #108]	; (3224 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    31b6:	491f      	ldr	r1, [pc, #124]	; (3234 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x124>)
    31b8:	481f      	ldr	r0, [pc, #124]	; (3238 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x128>)
    31ba:	f7ff fabf 	bl	273c <printf>
    31be:	481c      	ldr	r0, [pc, #112]	; (3230 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    31c0:	f7fe f992 	bl	14e8 <puts>
    31c4:	2100      	movs	r1, #0
    31c6:	2001      	movs	r0, #1
    31c8:	f7fd ff72 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    31cc:	e7fe      	b.n	31cc <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbc>
            !kIsCanPeripheral,
            "The divider value of 8 is not supported for CAN peripherals.");
        divider_select = 0b11;
    31ce:	2303      	movs	r3, #3
    31d0:	77fb      	strb	r3, [r7, #31]
      }
      break;
    31d2:	e00e      	b.n	31f2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      default:
        SJ2_ASSERT_FATAL(
    31d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
    31d8:	4a12      	ldr	r2, [pc, #72]	; (3224 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    31da:	4918      	ldr	r1, [pc, #96]	; (323c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x12c>)
    31dc:	4818      	ldr	r0, [pc, #96]	; (3240 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x130>)
    31de:	f7ff faad 	bl	273c <printf>
    31e2:	4813      	ldr	r0, [pc, #76]	; (3230 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    31e4:	f7fe f980 	bl	14e8 <puts>
    31e8:	2100      	movs	r1, #0
    31ea:	2001      	movs	r0, #1
    31ec:	f7fd ff60 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    31f0:	e7fe      	b.n	31f0 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe0>
            "Only the following peripheral divider values are supported: 1, 2, "
            "4, 8. The divider value of 6 is supported for CAN peripherals.");
        divider_select = -1;
    }
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    31f2:	68b9      	ldr	r1, [r7, #8]
    31f4:	68f8      	ldr	r0, [r7, #12]
    31f6:	f000 fb0b 	bl	3810 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    31fa:	61b8      	str	r0, [r7, #24]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    31fc:	68b9      	ldr	r1, [r7, #8]
    31fe:	68f8      	ldr	r0, [r7, #12]
    3200:	f000 fb20 	bl	3844 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    3204:	4603      	mov	r3, r0
    3206:	82bb      	strh	r3, [r7, #20]
    *pclk_sel = bit::Insert(*pclk_sel, divider_select, kDividerMask);
    3208:	69bb      	ldr	r3, [r7, #24]
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	7ff9      	ldrb	r1, [r7, #31]
    320e:	697a      	ldr	r2, [r7, #20]
    3210:	4618      	mov	r0, r3
    3212:	f001 f8ed 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3216:	4602      	mov	r2, r0
    3218:	69bb      	ldr	r3, [r7, #24]
    321a:	601a      	str	r2, [r3, #0]
  }
    321c:	bf00      	nop
    321e:	3720      	adds	r7, #32
    3220:	46bd      	mov	sp, r7
    3222:	bd80      	pop	{r7, pc}
    3224:	00007988 	.word	0x00007988
    3228:	000077e8 	.word	0x000077e8
    322c:	00007154 	.word	0x00007154
    3230:	00007084 	.word	0x00007084
    3234:	00007800 	.word	0x00007800
    3238:	00007214 	.word	0x00007214
    323c:	00007818 	.word	0x00007818
    3240:	000072d4 	.word	0x000072d4

00003244 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns The clock divider for the specified peripheral.
  uint32_t GetPeripheralClockDivider(
    3244:	b580      	push	{r7, lr}
    3246:	b086      	sub	sp, #24
    3248:	af00      	add	r7, sp, #0
    324a:	6078      	str	r0, [r7, #4]
    324c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    324e:	6839      	ldr	r1, [r7, #0]
    3250:	6878      	ldr	r0, [r7, #4]
    3252:	f000 fadd 	bl	3810 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    3256:	6138      	str	r0, [r7, #16]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    3258:	6839      	ldr	r1, [r7, #0]
    325a:	6878      	ldr	r0, [r7, #4]
    325c:	f000 faf2 	bl	3844 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    3260:	4603      	mov	r3, r0
    3262:	81bb      	strh	r3, [r7, #12]
    const uint8_t kDividerSelect =
        static_cast<uint8_t>(bit::Extract(*pclk_sel, kDividerMask));
    3264:	693b      	ldr	r3, [r7, #16]
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	68f9      	ldr	r1, [r7, #12]
    326a:	4618      	mov	r0, r3
    326c:	f001 f8f5 	bl	445a <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    3270:	4603      	mov	r3, r0
    3272:	73fb      	strb	r3, [r7, #15]

    uint8_t peripheral_clock_divider;
    // convert and return the actual peripheral divider value based on the 2-bit
    // divider select value
    switch (kDividerSelect)
    3274:	7bfb      	ldrb	r3, [r7, #15]
    3276:	2b03      	cmp	r3, #3
    3278:	d81e      	bhi.n	32b8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
    327a:	a201      	add	r2, pc, #4	; (adr r2, 3280 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x3c>)
    327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3280:	00003291 	.word	0x00003291
    3284:	00003297 	.word	0x00003297
    3288:	0000329d 	.word	0x0000329d
    328c:	000032a3 	.word	0x000032a3
    {
      case 0b00: peripheral_clock_divider = 4; break;
    3290:	2304      	movs	r3, #4
    3292:	75fb      	strb	r3, [r7, #23]
    3294:	e010      	b.n	32b8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b01: peripheral_clock_divider = 1; break;
    3296:	2301      	movs	r3, #1
    3298:	75fb      	strb	r3, [r7, #23]
    329a:	e00d      	b.n	32b8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b10: peripheral_clock_divider = 2; break;
    329c:	2302      	movs	r3, #2
    329e:	75fb      	strb	r3, [r7, #23]
    32a0:	e00a      	b.n	32b8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b11:
      {
        // 0b11 for CAN peripiherals use a divider of 6 while all others use a
        // divider of 8
        switch (peripheral_select.device_id)
    32a2:	683b      	ldr	r3, [r7, #0]
    32a4:	781b      	ldrb	r3, [r3, #0]
    32a6:	3b0d      	subs	r3, #13
    32a8:	2b01      	cmp	r3, #1
    32aa:	d802      	bhi.n	32b2 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x6e>
        {
          case Peripherals::kCan1.device_id: [[fallthrough]];
          case Peripherals::kCan2.device_id:
            peripheral_clock_divider = 6;
    32ac:	2306      	movs	r3, #6
    32ae:	75fb      	strb	r3, [r7, #23]
            break;
    32b0:	e002      	b.n	32b8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
          default: peripheral_clock_divider = 8; break;
    32b2:	2308      	movs	r3, #8
    32b4:	75fb      	strb	r3, [r7, #23]
    32b6:	bf00      	nop
        }
      }
    }
    return peripheral_clock_divider;
    32b8:	7dfb      	ldrb	r3, [r7, #23]
  }
    32ba:	4618      	mov	r0, r3
    32bc:	3718      	adds	r7, #24
    32be:	46bd      	mov	sp, r7
    32c0:	bd80      	pop	{r7, pc}
    32c2:	bf00      	nop

000032c4 <sjsu::lpc17xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    32c4:	b480      	push	{r7}
    32c6:	b083      	sub	sp, #12
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    32cc:	4b03      	ldr	r3, [pc, #12]	; (32dc <sjsu::lpc17xx::SystemController::GetSystemFrequency() const+0x18>)
    32ce:	681b      	ldr	r3, [r3, #0]
  }
    32d0:	4618      	mov	r0, r3
    32d2:	370c      	adds	r7, #12
    32d4:	46bd      	mov	sp, r7
    32d6:	bc80      	pop	{r7}
    32d8:	4770      	bx	lr
    32da:	bf00      	nop
    32dc:	2007c020 	.word	0x2007c020

000032e0 <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:
  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
    32e8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    return bit::Read(system_controller->PCONP, peripheral_select.device_id);
    32ea:	4b07      	ldr	r3, [pc, #28]	; (3308 <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x28>)
    32ec:	681b      	ldr	r3, [r3, #0]
    32ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    32f2:	683b      	ldr	r3, [r7, #0]
    32f4:	781b      	ldrb	r3, [r3, #0]
    32f6:	4619      	mov	r1, r3
    32f8:	4610      	mov	r0, r2
    32fa:	f001 f8bf 	bl	447c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    32fe:	4603      	mov	r3, r0
  }
    3300:	4618      	mov	r0, r3
    3302:	3708      	adds	r7, #8
    3304:	46bd      	mov	sp, r7
    3306:	bd80      	pop	{r7, pc}
    3308:	2007c2e0 	.word	0x2007c2e0

0000330c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    330c:	b590      	push	{r4, r7, lr}
    330e:	b083      	sub	sp, #12
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3316:	4b09      	ldr	r3, [pc, #36]	; (333c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	781b      	ldrb	r3, [r3, #0]
    3322:	4619      	mov	r1, r3
    system_controller->PCONP =
    3324:	4b05      	ldr	r3, [pc, #20]	; (333c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3326:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3328:	4610      	mov	r0, r2
    332a:	f001 f874 	bl	4416 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    332e:	4603      	mov	r3, r0
    system_controller->PCONP =
    3330:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3334:	bf00      	nop
    3336:	370c      	adds	r7, #12
    3338:	46bd      	mov	sp, r7
    333a:	bd90      	pop	{r4, r7, pc}
    333c:	2007c2e0 	.word	0x2007c2e0

00003340 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:

  void PowerDownPeripheral(
    3340:	b590      	push	{r4, r7, lr}
    3342:	b083      	sub	sp, #12
    3344:	af00      	add	r7, sp, #0
    3346:	6078      	str	r0, [r7, #4]
    3348:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    334a:	4b09      	ldr	r3, [pc, #36]	; (3370 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3352:	683b      	ldr	r3, [r7, #0]
    3354:	781b      	ldrb	r3, [r3, #0]
    3356:	4619      	mov	r1, r3
    system_controller->PCONP =
    3358:	4b05      	ldr	r3, [pc, #20]	; (3370 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    335a:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    335c:	4610      	mov	r0, r2
    335e:	f001 f822 	bl	43a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3362:	4603      	mov	r3, r0
    system_controller->PCONP =
    3364:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3368:	bf00      	nop
    336a:	370c      	adds	r7, #12
    336c:	46bd      	mov	sp, r7
    336e:	bd90      	pop	{r4, r7, pc}
    3370:	2007c2e0 	.word	0x2007c2e0

00003374 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>:

 private:
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;

  void SelectOscillatorSource(OscillatorSource source) const
    3374:	b590      	push	{r4, r7, lr}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    3380:	4b0c      	ldr	r3, [pc, #48]	; (33b4 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    3388:	78f9      	ldrb	r1, [r7, #3]
    338a:	4b0a      	ldr	r3, [pc, #40]	; (33b4 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    338c:	681c      	ldr	r4, [r3, #0]
    338e:	4b0a      	ldr	r3, [pc, #40]	; (33b8 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x44>)
    3390:	781a      	ldrb	r2, [r3, #0]
    3392:	785b      	ldrb	r3, [r3, #1]
    3394:	021b      	lsls	r3, r3, #8
    3396:	431a      	orrs	r2, r3
    3398:	2300      	movs	r3, #0
    339a:	f362 030f 	bfi	r3, r2, #0, #16
    339e:	461a      	mov	r2, r3
    33a0:	f001 f882 	bl	44a8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    33a4:	4603      	mov	r3, r0
    33a6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    33aa:	bf00      	nop
    33ac:	370c      	adds	r7, #12
    33ae:	46bd      	mov	sp, r7
    33b0:	bd90      	pop	{r4, r7, pc}
    33b2:	bf00      	nop
    33b4:	2007c2e0 	.word	0x2007c2e0
    33b8:	000077a4 	.word	0x000077a4

000033bc <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    33bc:	b5b0      	push	{r4, r5, r7, lr}
    33be:	b082      	sub	sp, #8
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
    33c4:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	681c      	ldr	r4, [r3, #0]
    33ca:	683b      	ldr	r3, [r7, #0]
    33cc:	4618      	mov	r0, r3
    33ce:	f7ff fb2f 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    33d2:	4602      	mov	r2, r0
    33d4:	2301      	movs	r3, #1
    33d6:	461d      	mov	r5, r3
    33d8:	4611      	mov	r1, r2
    33da:	4620      	mov	r0, r4
    33dc:	f001 fe5e 	bl	509c <__aeabi_fcmpgt>
    33e0:	4603      	mov	r3, r0
    33e2:	2b00      	cmp	r3, #0
    33e4:	d101      	bne.n	33ea <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    33e6:	2300      	movs	r3, #0
    33e8:	461d      	mov	r5, r3
    33ea:	b2eb      	uxtb	r3, r5
		}
    33ec:	4618      	mov	r0, r3
    33ee:	3708      	adds	r7, #8
    33f0:	46bd      	mov	sp, r7
    33f2:	bdb0      	pop	{r4, r5, r7, pc}

000033f4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    33f4:	b5b0      	push	{r4, r5, r7, lr}
    33f6:	b082      	sub	sp, #8
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
    33fc:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	681c      	ldr	r4, [r3, #0]
    3402:	683b      	ldr	r3, [r7, #0]
    3404:	4618      	mov	r0, r3
    3406:	f7ff fb13 	bl	2a30 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    340a:	4602      	mov	r2, r0
    340c:	2301      	movs	r3, #1
    340e:	461d      	mov	r5, r3
    3410:	4611      	mov	r1, r2
    3412:	4620      	mov	r0, r4
    3414:	f001 fe24 	bl	5060 <__aeabi_fcmplt>
    3418:	4603      	mov	r3, r0
    341a:	2b00      	cmp	r3, #0
    341c:	d101      	bne.n	3422 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    341e:	2300      	movs	r3, #0
    3420:	461d      	mov	r5, r3
    3422:	b2eb      	uxtb	r3, r5
		}
    3424:	4618      	mov	r0, r3
    3426:	3708      	adds	r7, #8
    3428:	46bd      	mov	sp, r7
    342a:	bdb0      	pop	{r4, r5, r7, pc}

0000342c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// frequency.
  ///
  /// @param input_frequency Input of PLL0 should be 32 kHz to 50 MHz.
  /// @param desired_speed   Desired CPU clock to achieve. Should not
  ///                        exceed the maximum allowed CPU clock.
  Pll0Settings_t CalculatePll0(units::frequency::hertz_t input_frequency,
    342c:	b580      	push	{r7, lr}
    342e:	b090      	sub	sp, #64	; 0x40
    3430:	af00      	add	r7, sp, #0
    3432:	60f8      	str	r0, [r7, #12]
    3434:	60b9      	str	r1, [r7, #8]
    3436:	607a      	str	r2, [r7, #4]
                               units::frequency::hertz_t desired_speed) const
  {
    // minimum/maximum input and output frequencies of PLL0 in kHz
    constexpr units::frequency::hertz_t kMinimumPll0InputFrequency = 32_kHz;
    3438:	f04f 0300 	mov.w	r3, #0
    343c:	62fb      	str	r3, [r7, #44]	; 0x2c
    343e:	4b76      	ldr	r3, [pc, #472]	; (3618 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ec>)
    3440:	62fb      	str	r3, [r7, #44]	; 0x2c
    constexpr units::frequency::hertz_t kMaximumPll0InputFrequency = 50_MHz;
    3442:	f04f 0300 	mov.w	r3, #0
    3446:	62bb      	str	r3, [r7, #40]	; 0x28
    3448:	4b74      	ldr	r3, [pc, #464]	; (361c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f0>)
    344a:	62bb      	str	r3, [r7, #40]	; 0x28
    constexpr units::frequency::hertz_t kMinimumPll0OuputFrequency = 275_MHz;
    344c:	f04f 0300 	mov.w	r3, #0
    3450:	627b      	str	r3, [r7, #36]	; 0x24
    3452:	4b73      	ldr	r3, [pc, #460]	; (3620 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f4>)
    3454:	627b      	str	r3, [r7, #36]	; 0x24
    constexpr units::frequency::hertz_t kMaximumPll0OuputFrequency = 550_MHz;
    3456:	f04f 0300 	mov.w	r3, #0
    345a:	623b      	str	r3, [r7, #32]
    345c:	4b71      	ldr	r3, [pc, #452]	; (3624 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f8>)
    345e:	623b      	str	r3, [r7, #32]

    // Maximum allowed CPU speed in kHz.
    // This value will be 100 MHz or 120 MHz depending on the MCU in use
    // For the SJOne, the max CPU speed for LPC1758 is 100 MHz.
    constexpr units::frequency::hertz_t kMaxCPUSpeed = 100_MHz;
    3460:	f04f 0300 	mov.w	r3, #0
    3464:	61fb      	str	r3, [r7, #28]
    3466:	4b70      	ldr	r3, [pc, #448]	; (3628 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1fc>)
    3468:	61fb      	str	r3, [r7, #28]

    SJ2_ASSERT_FATAL(
    346a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    346e:	f107 0308 	add.w	r3, r7, #8
    3472:	4611      	mov	r1, r2
    3474:	4618      	mov	r0, r3
    3476:	f7ff ffa1 	bl	33bc <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    347a:	4603      	mov	r3, r0
    347c:	f083 0301 	eor.w	r3, r3, #1
    3480:	b2db      	uxtb	r3, r3
    3482:	2b00      	cmp	r3, #0
    3484:	d10d      	bne.n	34a2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x76>
    3486:	f107 0228 	add.w	r2, r7, #40	; 0x28
    348a:	f107 0308 	add.w	r3, r7, #8
    348e:	4611      	mov	r1, r2
    3490:	4618      	mov	r0, r3
    3492:	f7ff ffaf 	bl	33f4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3496:	4603      	mov	r3, r0
    3498:	f083 0301 	eor.w	r3, r3, #1
    349c:	b2db      	uxtb	r3, r3
    349e:	2b00      	cmp	r3, #0
    34a0:	d001      	beq.n	34a6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7a>
    34a2:	2301      	movs	r3, #1
    34a4:	e000      	b.n	34a8 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7c>
    34a6:	2300      	movs	r3, #0
    34a8:	2b00      	cmp	r3, #0
    34aa:	d00e      	beq.n	34ca <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9e>
    34ac:	f240 1393 	movw	r3, #403	; 0x193
    34b0:	4a5e      	ldr	r2, [pc, #376]	; (362c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    34b2:	495f      	ldr	r1, [pc, #380]	; (3630 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x204>)
    34b4:	485f      	ldr	r0, [pc, #380]	; (3634 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x208>)
    34b6:	f7ff f941 	bl	273c <printf>
    34ba:	485f      	ldr	r0, [pc, #380]	; (3638 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    34bc:	f7fe f814 	bl	14e8 <puts>
    34c0:	2100      	movs	r1, #0
    34c2:	2001      	movs	r0, #1
    34c4:	f7fd fdf4 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    34c8:	e7fe      	b.n	34c8 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9c>
        input_frequency > kMinimumPll0InputFrequency &&
            input_frequency < kMaximumPll0InputFrequency,
        "The input PLL0 frequency must be between 32kHz and 50MHz");
    SJ2_ASSERT_FATAL(
    34ca:	f107 021c 	add.w	r2, r7, #28
    34ce:	1d3b      	adds	r3, r7, #4
    34d0:	4611      	mov	r1, r2
    34d2:	4618      	mov	r0, r3
    34d4:	f7ff ff8e 	bl	33f4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    34d8:	4603      	mov	r3, r0
    34da:	f083 0301 	eor.w	r3, r3, #1
    34de:	b2db      	uxtb	r3, r3
    34e0:	2b00      	cmp	r3, #0
    34e2:	d00e      	beq.n	3502 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd6>
    34e4:	f44f 73cb 	mov.w	r3, #406	; 0x196
    34e8:	4a50      	ldr	r2, [pc, #320]	; (362c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    34ea:	4954      	ldr	r1, [pc, #336]	; (363c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x210>)
    34ec:	4854      	ldr	r0, [pc, #336]	; (3640 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x214>)
    34ee:	f7ff f925 	bl	273c <printf>
    34f2:	4851      	ldr	r0, [pc, #324]	; (3638 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    34f4:	f7fd fff8 	bl	14e8 <puts>
    34f8:	2100      	movs	r1, #0
    34fa:	2001      	movs	r0, #1
    34fc:	f7fd fdd8 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    3500:	e7fe      	b.n	3500 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd4>
    // Since a small value for the pre-divider, n, is desired, we will iterate
    // through n starting from the lowest possible value of 1 in order to find a
    // suitable multiplier, m. The values of m and n are inversely proportional;
    // therefore, we start looking for the multiplier from its largest possible
    // value of 512.
    for (uint8_t n = 0; n < 32; n++)
    3502:	2300      	movs	r3, #0
    3504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    3508:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    350c:	2b1f      	cmp	r3, #31
    350e:	d868      	bhi.n	35e2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b6>
    {
      for (uint16_t m = 511; m >= 6; m--)
    3510:	f240 13ff 	movw	r3, #511	; 0x1ff
    3514:	87bb      	strh	r3, [r7, #60]	; 0x3c
    3516:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    3518:	2b05      	cmp	r3, #5
    351a:	d95c      	bls.n	35d6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1aa>
        // Current calculated controlled oscillator frequency, fcco, output of
        // PLL0 in kilohertz
        // Dividing by 1000 to scale down kFcco, as the multiplier for is
        // internally scaled by 1000.
        const units::frequency::hertz_t kFcco =
            (2 * (m + 1) * input_frequency) / (n + 1);
    351c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    351e:	3301      	adds	r3, #1
    3520:	005b      	lsls	r3, r3, #1
    3522:	f107 0208 	add.w	r2, r7, #8
    3526:	4611      	mov	r1, r2
    3528:	4618      	mov	r0, r3
    352a:	f000 ffcf 	bl	44cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    352e:	4603      	mov	r3, r0
    3530:	633b      	str	r3, [r7, #48]	; 0x30
    3532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    3536:	1c5a      	adds	r2, r3, #1
    3538:	f107 0330 	add.w	r3, r7, #48	; 0x30
    353c:	4611      	mov	r1, r2
    353e:	4618      	mov	r0, r3
    3540:	f000 ffe3 	bl	450a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3544:	4603      	mov	r3, r0
    3546:	61bb      	str	r3, [r7, #24]
        if (kMinimumPll0OuputFrequency < kFcco &&
    3548:	f107 0218 	add.w	r2, r7, #24
    354c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3550:	4611      	mov	r1, r2
    3552:	4618      	mov	r0, r3
    3554:	f7ff ff4e 	bl	33f4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3558:	4603      	mov	r3, r0
    355a:	2b00      	cmp	r3, #0
    355c:	d00c      	beq.n	3578 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
            kFcco < kMaximumPll0OuputFrequency)
    355e:	f107 0220 	add.w	r2, r7, #32
    3562:	f107 0318 	add.w	r3, r7, #24
    3566:	4611      	mov	r1, r2
    3568:	4618      	mov	r0, r3
    356a:	f7ff ff43 	bl	33f4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    356e:	4603      	mov	r3, r0
        if (kMinimumPll0OuputFrequency < kFcco &&
    3570:	2b00      	cmp	r3, #0
    3572:	d001      	beq.n	3578 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
    3574:	2301      	movs	r3, #1
    3576:	e000      	b.n	357a <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14e>
    3578:	2300      	movs	r3, #0
    357a:	2b00      	cmp	r3, #0
    357c:	d027      	beq.n	35ce <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
        {
          // since PLL0 is in use, the cpu_divider values of 0 and 1 are not
          // allowed as the resulting CPU clock will always be above the maximum
          // allowed CPU speed
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    357e:	2302      	movs	r3, #2
    3580:	877b      	strh	r3, [r7, #58]	; 0x3a
    3582:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    3584:	2bff      	cmp	r3, #255	; 0xff
    3586:	d822      	bhi.n	35ce <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
          {
            // Get resulting CPU clock
            // Requires that we scale kFcco back to a proper frequency.
            const units::frequency::hertz_t kCpuClock =
                kFcco / (cpu_divider + 1);
    3588:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    358a:	1c5a      	adds	r2, r3, #1
    358c:	f107 0318 	add.w	r3, r7, #24
    3590:	4611      	mov	r1, r2
    3592:	4618      	mov	r0, r3
    3594:	f000 ffb9 	bl	450a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3598:	4603      	mov	r3, r0
    359a:	617b      	str	r3, [r7, #20]
            if (kCpuClock == desired_speed)
    359c:	1d3a      	adds	r2, r7, #4
    359e:	f107 0314 	add.w	r3, r7, #20
    35a2:	4611      	mov	r1, r2
    35a4:	4618      	mov	r0, r3
    35a6:	f7ff f9ee 	bl	2986 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    35aa:	4603      	mov	r3, r0
    35ac:	2b00      	cmp	r3, #0
    35ae:	d00a      	beq.n	35c6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19a>
            {
              return Pll0Settings_t{ .multiplier  = m,
                                     .pre_divider = n,
                                     .cpu_divider =
                                         static_cast<uint8_t>(cpu_divider) };
    35b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    35b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    35b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    35b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    35bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    35be:	b2db      	uxtb	r3, r3
    35c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    35c4:	e01c      	b.n	3600 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d4>
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    35c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    35c8:	3301      	adds	r3, #1
    35ca:	877b      	strh	r3, [r7, #58]	; 0x3a
    35cc:	e7d9      	b.n	3582 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x156>
      for (uint16_t m = 511; m >= 6; m--)
    35ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    35d0:	3b01      	subs	r3, #1
    35d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    35d4:	e79f      	b.n	3516 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    for (uint8_t n = 0; n < 32; n++)
    35d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    35da:	3301      	adds	r3, #1
    35dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    35e0:	e792      	b.n	3508 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xdc>
            }
          }  // cpu_divider loop
        }
      }  // m for loop
    }    // n for loop
    SJ2_ASSERT_FATAL(
    35e2:	f240 13c1 	movw	r3, #449	; 0x1c1
    35e6:	4a11      	ldr	r2, [pc, #68]	; (362c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    35e8:	4916      	ldr	r1, [pc, #88]	; (3644 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x218>)
    35ea:	4817      	ldr	r0, [pc, #92]	; (3648 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x21c>)
    35ec:	f7ff f8a6 	bl	273c <printf>
    35f0:	4811      	ldr	r0, [pc, #68]	; (3638 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    35f2:	f7fd ff79 	bl	14e8 <puts>
    35f6:	2100      	movs	r1, #0
    35f8:	2001      	movs	r0, #1
    35fa:	f7fd fd59 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    35fe:	e7fe      	b.n	35fe <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d2>
    3600:	2300      	movs	r3, #0
    3602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
    3604:	f362 030f 	bfi	r3, r2, #0, #16
    3608:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    360a:	f362 431f 	bfi	r3, r2, #16, #16
        false,
        "Failed to calculate the PLL0 settings for the desired frequency.");
    return Pll0Settings_t{
      .multiplier = 0, .pre_divider = 0, .cpu_divider = 0
    };
  }
    360e:	4618      	mov	r0, r3
    3610:	3740      	adds	r7, #64	; 0x40
    3612:	46bd      	mov	sp, r7
    3614:	bd80      	pop	{r7, pc}
    3616:	bf00      	nop
    3618:	46fa0000 	.word	0x46fa0000
    361c:	4c3ebc20 	.word	0x4c3ebc20
    3620:	4d832156 	.word	0x4d832156
    3624:	4e032156 	.word	0x4e032156
    3628:	4cbebc20 	.word	0x4cbebc20
    362c:	00007a78 	.word	0x00007a78
    3630:	00007830 	.word	0x00007830
    3634:	000073cc 	.word	0x000073cc
    3638:	00007084 	.word	0x00007084
    363c:	00007848 	.word	0x00007848
    3640:	000074d0 	.word	0x000074d0
    3644:	00007860 	.word	0x00007860
    3648:	0000759c 	.word	0x0000759c

0000364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
    364c:	b480      	push	{r7}
    364e:	b083      	sub	sp, #12
    3650:	af00      	add	r7, sp, #0
    3652:	4603      	mov	r3, r0
    3654:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
    3656:	79fb      	ldrb	r3, [r7, #7]
}
    3658:	4618      	mov	r0, r3
    365a:	370c      	adds	r7, #12
    365c:	46bd      	mov	sp, r7
    365e:	bc80      	pop	{r7}
    3660:	4770      	bx	lr
    3662:	Address 0x0000000000003662 is out of bounds.


00003664 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>:
  /// Writes the feed sequence that is necessary to lock in any changes to the
  /// PLLCON and PLLCGG registers.
  void WritePllFeedSequence(PllSelect pll) const
    3664:	b580      	push	{r7, lr}
    3666:	b084      	sub	sp, #16
    3668:	af00      	add	r7, sp, #0
    366a:	6078      	str	r0, [r7, #4]
    366c:	460b      	mov	r3, r1
    366e:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pll_feed_registers[] = {
      &(system_controller->PLL0FEED),
    3670:	4b12      	ldr	r3, [pc, #72]	; (36bc <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	338c      	adds	r3, #140	; 0x8c
      &(system_controller->PLL1FEED),
    };
    3676:	60bb      	str	r3, [r7, #8]
      &(system_controller->PLL1FEED),
    3678:	4b10      	ldr	r3, [pc, #64]	; (36bc <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	33ac      	adds	r3, #172	; 0xac
    };
    367e:	60fb      	str	r3, [r7, #12]
    *(pll_feed_registers[Value(pll)]) = 0xAA;
    3680:	78fb      	ldrb	r3, [r7, #3]
    3682:	4618      	mov	r0, r3
    3684:	f7ff ffe2 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3688:	4603      	mov	r3, r0
    368a:	009b      	lsls	r3, r3, #2
    368c:	f107 0210 	add.w	r2, r7, #16
    3690:	4413      	add	r3, r2
    3692:	f853 3c08 	ldr.w	r3, [r3, #-8]
    3696:	22aa      	movs	r2, #170	; 0xaa
    3698:	601a      	str	r2, [r3, #0]
    *(pll_feed_registers[Value(pll)]) = 0x55;
    369a:	78fb      	ldrb	r3, [r7, #3]
    369c:	4618      	mov	r0, r3
    369e:	f7ff ffd5 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    36a2:	4603      	mov	r3, r0
    36a4:	009b      	lsls	r3, r3, #2
    36a6:	f107 0210 	add.w	r2, r7, #16
    36aa:	4413      	add	r3, r2
    36ac:	f853 3c08 	ldr.w	r3, [r3, #-8]
    36b0:	2255      	movs	r2, #85	; 0x55
    36b2:	601a      	str	r2, [r3, #0]
  }
    36b4:	bf00      	nop
    36b6:	3710      	adds	r7, #16
    36b8:	46bd      	mov	sp, r7
    36ba:	bd80      	pop	{r7, pc}
    36bc:	2007c2e0 	.word	0x2007c2e0

000036c0 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  bool WaitForPllLockStatus(PllSelect pll) const
    36c0:	b580      	push	{r7, lr}
    36c2:	b088      	sub	sp, #32
    36c4:	af00      	add	r7, sp, #0
    36c6:	6078      	str	r0, [r7, #4]
    36c8:	460b      	mov	r3, r1
    36ca:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    36cc:	4b1b      	ldr	r3, [pc, #108]	; (373c <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    36ce:	681b      	ldr	r3, [r3, #0]
    36d0:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    36d2:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    36d4:	4b19      	ldr	r3, [pc, #100]	; (373c <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	33a8      	adds	r3, #168	; 0xa8
    };
    36da:	61bb      	str	r3, [r7, #24]
    const bit::Mask kLockStatusMasks[] = { MainPll::kLockStatus,
    36dc:	4b18      	ldr	r3, [pc, #96]	; (3740 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	613b      	str	r3, [r7, #16]
                                           UsbPll::kLockStatus };
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    36e2:	78fb      	ldrb	r3, [r7, #3]
    36e4:	4618      	mov	r0, r3
    36e6:	f7ff ffb1 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    36ea:	4603      	mov	r3, r0
    36ec:	009b      	lsls	r3, r3, #2
    36ee:	f107 0220 	add.w	r2, r7, #32
    36f2:	4413      	add	r3, r2
    36f4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    36f8:	61fb      	str	r3, [r7, #28]
    const bit::Mask kLockStatusMask = kLockStatusMasks[Value(pll)];
    36fa:	78fb      	ldrb	r3, [r7, #3]
    36fc:	4618      	mov	r0, r3
    36fe:	f7ff ffa5 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3702:	4603      	mov	r3, r0
    3704:	005b      	lsls	r3, r3, #1
    3706:	f107 0220 	add.w	r2, r7, #32
    370a:	4413      	add	r3, r2
    370c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    3710:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kLockStatusMask.position))
    3712:	69fb      	ldr	r3, [r7, #28]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	7b3a      	ldrb	r2, [r7, #12]
    3718:	4611      	mov	r1, r2
    371a:	4618      	mov	r0, r3
    371c:	f000 feae 	bl	447c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3720:	4603      	mov	r3, r0
    3722:	f083 0301 	eor.w	r3, r3, #1
    3726:	b2db      	uxtb	r3, r3
    3728:	2b00      	cmp	r3, #0
    372a:	d001      	beq.n	3730 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    372c:	bf00      	nop
    while (!bit::Read(*status_register, kLockStatusMask.position))
    372e:	e7f0      	b.n	3712 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    3730:	2301      	movs	r3, #1
  }
    3732:	4618      	mov	r0, r3
    3734:	3720      	adds	r7, #32
    3736:	46bd      	mov	sp, r7
    3738:	bd80      	pop	{r7, pc}
    373a:	bf00      	nop
    373c:	2007c2e0 	.word	0x2007c2e0
    3740:	00007654 	.word	0x00007654

00003744 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  /// @returns  Returns true if the PLL's enable and connect status bits in the
  ///           PLL status register are both 1.
  bool WaitForPllConnectionStatus(PllSelect pll) const
    3744:	b580      	push	{r7, lr}
    3746:	b088      	sub	sp, #32
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    374c:	460b      	mov	r3, r1
    374e:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    3750:	4b1b      	ldr	r3, [pc, #108]	; (37c0 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    3756:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    3758:	4b19      	ldr	r3, [pc, #100]	; (37c0 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	33a8      	adds	r3, #168	; 0xa8
    };
    375e:	61bb      	str	r3, [r7, #24]
    const bit::Mask kMasks[] = { MainPll::kMode, UsbPll::kMode };
    3760:	4b18      	ldr	r3, [pc, #96]	; (37c4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	613b      	str	r3, [r7, #16]
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    3766:	78fb      	ldrb	r3, [r7, #3]
    3768:	4618      	mov	r0, r3
    376a:	f7ff ff6f 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    376e:	4603      	mov	r3, r0
    3770:	009b      	lsls	r3, r3, #2
    3772:	f107 0220 	add.w	r2, r7, #32
    3776:	4413      	add	r3, r2
    3778:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    377c:	61fb      	str	r3, [r7, #28]
    const bit::Mask kPllModeMask = kMasks[Value(pll)];
    377e:	78fb      	ldrb	r3, [r7, #3]
    3780:	4618      	mov	r0, r3
    3782:	f7ff ff63 	bl	364c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3786:	4603      	mov	r3, r0
    3788:	005b      	lsls	r3, r3, #1
    378a:	f107 0220 	add.w	r2, r7, #32
    378e:	4413      	add	r3, r2
    3790:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    3794:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kPllModeMask.position))
    3796:	69fb      	ldr	r3, [r7, #28]
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	7b3a      	ldrb	r2, [r7, #12]
    379c:	4611      	mov	r1, r2
    379e:	4618      	mov	r0, r3
    37a0:	f000 fe6c 	bl	447c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    37a4:	4603      	mov	r3, r0
    37a6:	f083 0301 	eor.w	r3, r3, #1
    37aa:	b2db      	uxtb	r3, r3
    37ac:	2b00      	cmp	r3, #0
    37ae:	d001      	beq.n	37b4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    37b0:	bf00      	nop
    while (!bit::Read(*status_register, kPllModeMask.position))
    37b2:	e7f0      	b.n	3796 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    37b4:	2301      	movs	r3, #1
  }
    37b6:	4618      	mov	r0, r3
    37b8:	3720      	adds	r7, #32
    37ba:	46bd      	mov	sp, r7
    37bc:	bd80      	pop	{r7, pc}
    37be:	bf00      	nop
    37c0:	2007c2e0 	.word	0x2007c2e0
    37c4:	00007658 	.word	0x00007658

000037c8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>:
  /// @note If PLL0 is connected, divider values 0 and 1 are not allowed
  ///       since the the produced clock rate must not exceed the maximum
  ///       allowed CPU clock.
  ///
  /// @param cpu_divider 8-bit divider ranging from 0 - 255.
  void SetCpuClockDivider(uint8_t cpu_divider) const
    37c8:	b590      	push	{r4, r7, lr}
    37ca:	b083      	sub	sp, #12
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
    37d0:	460b      	mov	r3, r1
    37d2:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CCLKCFG = bit::Insert(
    37d4:	4b0c      	ldr	r3, [pc, #48]	; (3808 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    37d6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKCFG, cpu_divider, CpuClock::kDivider);
    37d8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKCFG = bit::Insert(
    37dc:	4b0a      	ldr	r3, [pc, #40]	; (3808 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    37de:	681c      	ldr	r4, [r3, #0]
    37e0:	4b0a      	ldr	r3, [pc, #40]	; (380c <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x44>)
    37e2:	78f9      	ldrb	r1, [r7, #3]
    37e4:	781a      	ldrb	r2, [r3, #0]
    37e6:	785b      	ldrb	r3, [r3, #1]
    37e8:	021b      	lsls	r3, r3, #8
    37ea:	431a      	orrs	r2, r3
    37ec:	2300      	movs	r3, #0
    37ee:	f362 030f 	bfi	r3, r2, #0, #16
    37f2:	461a      	mov	r2, r3
    37f4:	f000 fdfc 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    37f8:	4603      	mov	r3, r0
    37fa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    37fe:	bf00      	nop
    3800:	370c      	adds	r7, #12
    3802:	46bd      	mov	sp, r7
    3804:	bd90      	pop	{r4, r7, pc}
    3806:	bf00      	nop
    3808:	2007c2e0 	.word	0x2007c2e0
    380c:	000077a8 	.word	0x000077a8

00003810 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  Pointer to the PCLKSEL0 or PCLKSEL1 register based on the
  ///           peripheral's device_id.
  volatile uint32_t * GetPeripheralClockSelectRegister(
    3810:	b480      	push	{r7}
    3812:	b083      	sub	sp, #12
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
    3818:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    if (peripheral_select.device_id > 15)
    381a:	683b      	ldr	r3, [r7, #0]
    381c:	781b      	ldrb	r3, [r3, #0]
    381e:	2b0f      	cmp	r3, #15
    3820:	d904      	bls.n	382c <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x1c>
    {
      return &(system_controller->PCLKSEL1);
    3822:	4b07      	ldr	r3, [pc, #28]	; (3840 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3824:	681b      	ldr	r3, [r3, #0]
    3826:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    382a:	e003      	b.n	3834 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x24>
    }
    return &(system_controller->PCLKSEL0);
    382c:	4b04      	ldr	r3, [pc, #16]	; (3840 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    382e:	681b      	ldr	r3, [r3, #0]
    3830:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
  }
    3834:	4618      	mov	r0, r3
    3836:	370c      	adds	r7, #12
    3838:	46bd      	mov	sp, r7
    383a:	bc80      	pop	{r7}
    383c:	4770      	bx	lr
    383e:	bf00      	nop
    3840:	2007c2e0 	.word	0x2007c2e0

00003844 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  The bit mask for the 2-bit position of the specified
  ///           peripheral's divider select in the PCLKSEL0 or PCLKSEL1
  ///           register.
  bit::Mask CalculatePeripheralClockDividerMask(
    3844:	b580      	push	{r7, lr}
    3846:	b084      	sub	sp, #16
    3848:	af00      	add	r7, sp, #0
    384a:	6078      	str	r0, [r7, #4]
    384c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    constexpr uint8_t kMaxBitWidth = 32;
    384e:	2320      	movs	r3, #32
    3850:	73fb      	strb	r3, [r7, #15]
    const uint8_t kLowBit  = (peripheral_select.device_id * 2) % kMaxBitWidth;
    3852:	683b      	ldr	r3, [r7, #0]
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	005b      	lsls	r3, r3, #1
    3858:	b2db      	uxtb	r3, r3
    385a:	f003 031e 	and.w	r3, r3, #30
    385e:	73bb      	strb	r3, [r7, #14]
    const uint8_t kHighBit = static_cast<uint8_t>(kLowBit + 1);
    3860:	7bbb      	ldrb	r3, [r7, #14]
    3862:	3301      	adds	r3, #1
    3864:	737b      	strb	r3, [r7, #13]
    return bit::CreateMaskFromRange(kLowBit, kHighBit);
    3866:	7b7a      	ldrb	r2, [r7, #13]
    3868:	7bbb      	ldrb	r3, [r7, #14]
    386a:	4611      	mov	r1, r2
    386c:	4618      	mov	r0, r3
    386e:	f7ff fb05 	bl	2e7c <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>
    3872:	4603      	mov	r3, r0
    3874:	813b      	strh	r3, [r7, #8]
    3876:	2300      	movs	r3, #0
    3878:	7a3a      	ldrb	r2, [r7, #8]
    387a:	f362 0307 	bfi	r3, r2, #0, #8
    387e:	7a7a      	ldrb	r2, [r7, #9]
    3880:	f362 230f 	bfi	r3, r2, #8, #8
  }
    3884:	4618      	mov	r0, r3
    3886:	3710      	adds	r7, #16
    3888:	46bd      	mov	sp, r7
    388a:	bd80      	pop	{r7, pc}

0000388c <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
    388c:	b480      	push	{r7}
    388e:	b083      	sub	sp, #12
    3890:	af00      	add	r7, sp, #0
    3892:	6078      	str	r0, [r7, #4]
  {
    return port_;
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	791b      	ldrb	r3, [r3, #4]
  }
    3898:	4618      	mov	r0, r3
    389a:	370c      	adds	r7, #12
    389c:	46bd      	mov	sp, r7
    389e:	bc80      	pop	{r7}
    38a0:	4770      	bx	lr

000038a2 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
    38a2:	b480      	push	{r7}
    38a4:	b083      	sub	sp, #12
    38a6:	af00      	add	r7, sp, #0
    38a8:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	795b      	ldrb	r3, [r3, #5]
  }
    38ae:	4618      	mov	r0, r3
    38b0:	370c      	adds	r7, #12
    38b2:	46bd      	mov	sp, r7
    38b4:	bc80      	pop	{r7}
    38b6:	4770      	bx	lr

000038b8 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:
  constexpr Pin(uint8_t port, uint8_t pin)
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
  {
  }

  void SetPinFunction(uint8_t function) const override
    38b8:	b590      	push	{r4, r7, lr}
    38ba:	b085      	sub	sp, #20
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
    38c0:	460b      	mov	r3, r1
    38c2:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
    38c4:	6878      	ldr	r0, [r7, #4]
    38c6:	f000 f88f 	bl	39e8 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    38ca:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    38cc:	4b0b      	ldr	r3, [pc, #44]	; (38fc <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    38ce:	681b      	ldr	r3, [r3, #0]
    38d0:	68fa      	ldr	r2, [r7, #12]
    38d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
    38d6:	4b09      	ldr	r3, [pc, #36]	; (38fc <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    38d8:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	78f9      	ldrb	r1, [r7, #3]
    38de:	88da      	ldrh	r2, [r3, #6]
    38e0:	2300      	movs	r3, #0
    38e2:	f362 030f 	bfi	r3, r2, #0, #16
    38e6:	461a      	mov	r2, r3
    38e8:	f000 fd82 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    38ec:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
    38ee:	68fb      	ldr	r3, [r7, #12]
    38f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
    38f4:	bf00      	nop
    38f6:	3714      	adds	r7, #20
    38f8:	46bd      	mov	sp, r7
    38fa:	bd90      	pop	{r4, r7, pc}
    38fc:	2007c2e4 	.word	0x2007c2e4

00003900 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
constexpr auto Value(Enum enum_type_value)
    3900:	b480      	push	{r7}
    3902:	b083      	sub	sp, #12
    3904:	af00      	add	r7, sp, #0
    3906:	4603      	mov	r3, r0
    3908:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    390a:	79fb      	ldrb	r3, [r7, #7]
}
    390c:	4618      	mov	r0, r3
    390e:	370c      	adds	r7, #12
    3910:	46bd      	mov	sp, r7
    3912:	bc80      	pop	{r7}
    3914:	4770      	bx	lr
    3916:	Address 0x0000000000003916 is out of bounds.


00003918 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    3918:	b5b0      	push	{r4, r5, r7, lr}
    391a:	b084      	sub	sp, #16
    391c:	af00      	add	r7, sp, #0
    391e:	6078      	str	r0, [r7, #4]
    3920:	460b      	mov	r3, r1
    3922:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
    3924:	6878      	ldr	r0, [r7, #4]
    3926:	f000 f85f 	bl	39e8 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    392a:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
    392c:	4b0f      	ldr	r3, [pc, #60]	; (396c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    392e:	681b      	ldr	r3, [r3, #0]
    3930:	68fa      	ldr	r2, [r7, #12]
    3932:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
    3936:	78fb      	ldrb	r3, [r7, #3]
    3938:	4618      	mov	r0, r3
    393a:	f7ff ffe1 	bl	3900 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
    393e:	4603      	mov	r3, r0
    3940:	461a      	mov	r2, r3
    3942:	4b0b      	ldr	r3, [pc, #44]	; (3970 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
    3944:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
    3946:	4b09      	ldr	r3, [pc, #36]	; (396c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    3948:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	88da      	ldrh	r2, [r3, #6]
    394e:	2300      	movs	r3, #0
    3950:	f362 030f 	bfi	r3, r2, #0, #16
    3954:	461a      	mov	r2, r3
    3956:	4628      	mov	r0, r5
    3958:	f000 fd4a 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    395c:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
    3964:	bf00      	nop
    3966:	3710      	adds	r7, #16
    3968:	46bd      	mov	sp, r7
    396a:	bdb0      	pop	{r4, r5, r7, pc}
    396c:	2007c2e8 	.word	0x2007c2e8
    3970:	00007878 	.word	0x00007878

00003974 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
    3974:	b580      	push	{r7, lr}
    3976:	b082      	sub	sp, #8
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
    397c:	460b      	mov	r3, r1
    397e:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
    3980:	2354      	movs	r3, #84	; 0x54
    3982:	4a04      	ldr	r2, [pc, #16]	; (3994 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
    3984:	4904      	ldr	r1, [pc, #16]	; (3998 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
    3986:	4805      	ldr	r0, [pc, #20]	; (399c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
    3988:	f7fe fed8 	bl	273c <printf>
  }
    398c:	bf00      	nop
    398e:	3708      	adds	r7, #8
    3990:	46bd      	mov	sp, r7
    3992:	bd80      	pop	{r7, pc}
    3994:	00007b14 	.word	0x00007b14
    3998:	0000787c 	.word	0x0000787c
    399c:	0000765c 	.word	0x0000765c

000039a0 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    39a0:	b5b0      	push	{r4, r5, r7, lr}
    39a2:	b084      	sub	sp, #16
    39a4:	af00      	add	r7, sp, #0
    39a6:	6078      	str	r0, [r7, #4]
    39a8:	460b      	mov	r3, r1
    39aa:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    39ac:	4b0d      	ldr	r3, [pc, #52]	; (39e4 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    39ae:	681b      	ldr	r3, [r3, #0]
    39b0:	687a      	ldr	r2, [r7, #4]
    39b2:	7912      	ldrb	r2, [r2, #4]
    39b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    39bc:	733b      	strb	r3, [r7, #12]
    39be:	2301      	movs	r3, #1
    39c0:	737b      	strb	r3, [r7, #13]
    39c2:	4b08      	ldr	r3, [pc, #32]	; (39e4 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    39c4:	681c      	ldr	r4, [r3, #0]
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	791b      	ldrb	r3, [r3, #4]
    39ca:	461d      	mov	r5, r3
    39cc:	78fb      	ldrb	r3, [r7, #3]
    39ce:	68fa      	ldr	r2, [r7, #12]
    39d0:	4619      	mov	r1, r3
    39d2:	f000 fdb9 	bl	4548 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    39d6:	4603      	mov	r3, r0
    39d8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
    39dc:	bf00      	nop
    39de:	3710      	adds	r7, #16
    39e0:	46bd      	mov	sp, r7
    39e2:	bdb0      	pop	{r4, r5, r7, pc}
    39e4:	2007c2ec 	.word	0x2007c2ec

000039e8 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  }
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
    39e8:	b480      	push	{r7}
    39ea:	b085      	sub	sp, #20
    39ec:	af00      	add	r7, sp, #0
    39ee:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	795b      	ldrb	r3, [r3, #5]
    39f4:	2b0f      	cmp	r3, #15
    39f6:	d901      	bls.n	39fc <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
    39f8:	2301      	movs	r3, #1
    39fa:	e000      	b.n	39fe <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
    39fc:	2300      	movs	r3, #0
    39fe:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	791b      	ldrb	r3, [r3, #4]
    3a04:	005b      	lsls	r3, r3, #1
    3a06:	461a      	mov	r2, r3
    3a08:	68fb      	ldr	r3, [r7, #12]
    3a0a:	4413      	add	r3, r2
  }
    3a0c:	4618      	mov	r0, r3
    3a0e:	3714      	adds	r7, #20
    3a10:	46bd      	mov	sp, r7
    3a12:	bc80      	pop	{r7}
    3a14:	4770      	bx	lr
    3a16:	Address 0x0000000000003a16 is out of bounds.


00003a18 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
    3a18:	b580      	push	{r7, lr}
    3a1a:	b082      	sub	sp, #8
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	6078      	str	r0, [r7, #4]
    3a20:	460b      	mov	r3, r1
    3a22:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
    3a24:	4b08      	ldr	r3, [pc, #32]	; (3a48 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
    3a26:	78f9      	ldrb	r1, [r7, #3]
    3a28:	781a      	ldrb	r2, [r3, #0]
    3a2a:	785b      	ldrb	r3, [r3, #1]
    3a2c:	021b      	lsls	r3, r3, #8
    3a2e:	431a      	orrs	r2, r3
    3a30:	2300      	movs	r3, #0
    3a32:	f362 030f 	bfi	r3, r2, #0, #16
    3a36:	461a      	mov	r2, r3
    3a38:	6878      	ldr	r0, [r7, #4]
    3a3a:	f000 f859 	bl	3af0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3a3e:	bf00      	nop
    3a40:	3708      	adds	r7, #8
    3a42:	46bd      	mov	sp, r7
    3a44:	bd80      	pop	{r7, pc}
    3a46:	bf00      	nop
    3a48:	00007884 	.word	0x00007884

00003a4c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b082      	sub	sp, #8
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
    3a58:	4b08      	ldr	r3, [pc, #32]	; (3a7c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
    3a5a:	78f9      	ldrb	r1, [r7, #3]
    3a5c:	781a      	ldrb	r2, [r3, #0]
    3a5e:	785b      	ldrb	r3, [r3, #1]
    3a60:	021b      	lsls	r3, r3, #8
    3a62:	431a      	orrs	r2, r3
    3a64:	2300      	movs	r3, #0
    3a66:	f362 030f 	bfi	r3, r2, #0, #16
    3a6a:	461a      	mov	r2, r3
    3a6c:	6878      	ldr	r0, [r7, #4]
    3a6e:	f000 f83f 	bl	3af0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3a72:	bf00      	nop
    3a74:	3708      	adds	r7, #8
    3a76:	46bd      	mov	sp, r7
    3a78:	bd80      	pop	{r7, pc}
    3a7a:	bf00      	nop
    3a7c:	00007888 	.word	0x00007888

00003a80 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
    3a80:	b580      	push	{r7, lr}
    3a82:	b082      	sub	sp, #8
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
    3a88:	460b      	mov	r3, r1
    3a8a:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
    3a8c:	78fb      	ldrb	r3, [r7, #3]
    3a8e:	f083 0301 	eor.w	r3, r3, #1
    3a92:	b2db      	uxtb	r3, r3
    3a94:	4619      	mov	r1, r3
    3a96:	4b08      	ldr	r3, [pc, #32]	; (3ab8 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
    3a98:	781a      	ldrb	r2, [r3, #0]
    3a9a:	785b      	ldrb	r3, [r3, #1]
    3a9c:	021b      	lsls	r3, r3, #8
    3a9e:	431a      	orrs	r2, r3
    3aa0:	2300      	movs	r3, #0
    3aa2:	f362 030f 	bfi	r3, r2, #0, #16
    3aa6:	461a      	mov	r2, r3
    3aa8:	6878      	ldr	r0, [r7, #4]
    3aaa:	f000 f821 	bl	3af0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3aae:	bf00      	nop
    3ab0:	3708      	adds	r7, #8
    3ab2:	46bd      	mov	sp, r7
    3ab4:	bd80      	pop	{r7, pc}
    3ab6:	bf00      	nop
    3ab8:	0000788c 	.word	0x0000788c

00003abc <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    3abc:	b580      	push	{r7, lr}
    3abe:	b082      	sub	sp, #8
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	6078      	str	r0, [r7, #4]
    3ac4:	460b      	mov	r3, r1
    3ac6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
    3ac8:	78f9      	ldrb	r1, [r7, #3]
    3aca:	4b08      	ldr	r3, [pc, #32]	; (3aec <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
    3acc:	781a      	ldrb	r2, [r3, #0]
    3ace:	785b      	ldrb	r3, [r3, #1]
    3ad0:	021b      	lsls	r3, r3, #8
    3ad2:	431a      	orrs	r2, r3
    3ad4:	2300      	movs	r3, #0
    3ad6:	f362 030f 	bfi	r3, r2, #0, #16
    3ada:	461a      	mov	r2, r3
    3adc:	6878      	ldr	r0, [r7, #4]
    3ade:	f000 f807 	bl	3af0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3ae2:	bf00      	nop
    3ae4:	3708      	adds	r7, #8
    3ae6:	46bd      	mov	sp, r7
    3ae8:	bd80      	pop	{r7, pc}
    3aea:	bf00      	nop
    3aec:	00007890 	.word	0x00007890

00003af0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
    3af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3af2:	b087      	sub	sp, #28
    3af4:	af00      	add	r7, sp, #0
    3af6:	60f8      	str	r0, [r7, #12]
    3af8:	460b      	mov	r3, r1
    3afa:	80ba      	strh	r2, [r7, #4]
    3afc:	72fb      	strb	r3, [r7, #11]
    3afe:	68fb      	ldr	r3, [r7, #12]
    3b00:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
    3b02:	4b19      	ldr	r3, [pc, #100]	; (3b68 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    3b04:	681c      	ldr	r4, [r3, #0]
    3b06:	693b      	ldr	r3, [r7, #16]
    3b08:	4618      	mov	r0, r3
    3b0a:	f7ff febf 	bl	388c <sjsu::Pin::GetPort() const>
    3b0e:	4603      	mov	r3, r0
    3b10:	461d      	mov	r5, r3
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	4618      	mov	r0, r3
    3b16:	f7ff fec4 	bl	38a2 <sjsu::Pin::GetPin() const>
    3b1a:	4603      	mov	r3, r0
    3b1c:	461a      	mov	r2, r3
    3b1e:	016b      	lsls	r3, r5, #5
    3b20:	4413      	add	r3, r2
    3b22:	009b      	lsls	r3, r3, #2
    3b24:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	7af9      	ldrb	r1, [r7, #11]
    3b2a:	687a      	ldr	r2, [r7, #4]
    3b2c:	4618      	mov	r0, r3
    3b2e:	f000 fc5f 	bl	43f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3b32:	4605      	mov	r5, r0
    3b34:	68fb      	ldr	r3, [r7, #12]
    3b36:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
    3b38:	4b0b      	ldr	r3, [pc, #44]	; (3b68 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    3b3a:	681c      	ldr	r4, [r3, #0]
    3b3c:	697b      	ldr	r3, [r7, #20]
    3b3e:	4618      	mov	r0, r3
    3b40:	f7ff fea4 	bl	388c <sjsu::Pin::GetPort() const>
    3b44:	4603      	mov	r3, r0
    3b46:	461e      	mov	r6, r3
    3b48:	697b      	ldr	r3, [r7, #20]
    3b4a:	4618      	mov	r0, r3
    3b4c:	f7ff fea9 	bl	38a2 <sjsu::Pin::GetPin() const>
    3b50:	4603      	mov	r3, r0
    3b52:	461a      	mov	r2, r3
    3b54:	0173      	lsls	r3, r6, #5
    3b56:	4413      	add	r3, r2
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3b5c:	601d      	str	r5, [r3, #0]
  }
    3b5e:	bf00      	nop
    3b60:	371c      	adds	r7, #28
    3b62:	46bd      	mov	sp, r7
    3b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b66:	bf00      	nop
    3b68:	2007c13c 	.word	0x2007c13c

00003b6c <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b088      	sub	sp, #32
    3b70:	af00      	add	r7, sp, #0
    3b72:	6078      	str	r0, [r7, #4]
    3b74:	6039      	str	r1, [r7, #0]
  UartCalibration_t result;
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	2200      	movs	r2, #0
    3b7a:	601a      	str	r2, [r3, #0]
    3b7c:	687b      	ldr	r3, [r7, #4]
    3b7e:	2200      	movs	r2, #0
    3b80:	605a      	str	r2, [r3, #4]
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	2201      	movs	r2, #1
    3b86:	609a      	str	r2, [r3, #8]
  bool finished = false;
    3b88:	2300      	movs	r3, #0
    3b8a:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3b8c:	2300      	movs	r3, #0
    3b8e:	61bb      	str	r3, [r7, #24]
    3b90:	69bb      	ldr	r3, [r7, #24]
    3b92:	2b0e      	cmp	r3, #14
    3b94:	dc49      	bgt.n	3c2a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
    3b96:	7ffb      	ldrb	r3, [r7, #31]
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d146      	bne.n	3c2a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3b9c:	69bb      	ldr	r3, [r7, #24]
    3b9e:	3301      	adds	r3, #1
    3ba0:	617b      	str	r3, [r7, #20]
    3ba2:	697b      	ldr	r3, [r7, #20]
    3ba4:	2b0e      	cmp	r3, #14
    3ba6:	dc3c      	bgt.n	3c22 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    3ba8:	7ffb      	ldrb	r3, [r7, #31]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d139      	bne.n	3c22 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    {
      float divf         = static_cast<float>(div);
    3bae:	69b8      	ldr	r0, [r7, #24]
    3bb0:	f001 f864 	bl	4c7c <__aeabi_i2f>
    3bb4:	4603      	mov	r3, r0
    3bb6:	613b      	str	r3, [r7, #16]
      float mulf         = static_cast<float>(mul);
    3bb8:	6978      	ldr	r0, [r7, #20]
    3bba:	f001 f85f 	bl	4c7c <__aeabi_i2f>
    3bbe:	4603      	mov	r3, r0
    3bc0:	60fb      	str	r3, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    3bc2:	68f9      	ldr	r1, [r7, #12]
    3bc4:	6938      	ldr	r0, [r7, #16]
    3bc6:	f001 f961 	bl	4e8c <__aeabi_fdiv>
    3bca:	4603      	mov	r3, r0
    3bcc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3bd0:	4618      	mov	r0, r3
    3bd2:	f000 ff9f 	bl	4b14 <__addsf3>
    3bd6:	4603      	mov	r3, r0
    3bd8:	60bb      	str	r3, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    3bda:	4916      	ldr	r1, [pc, #88]	; (3c34 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    3bdc:	68b8      	ldr	r0, [r7, #8]
    3bde:	f000 ff99 	bl	4b14 <__addsf3>
    3be2:	4603      	mov	r3, r0
    3be4:	4619      	mov	r1, r3
    3be6:	6838      	ldr	r0, [r7, #0]
    3be8:	f001 fa44 	bl	5074 <__aeabi_fcmple>
    3bec:	4603      	mov	r3, r0
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d013      	beq.n	3c1a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
          decimal >= test_decimal - kThreshold)
    3bf2:	4910      	ldr	r1, [pc, #64]	; (3c34 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    3bf4:	68b8      	ldr	r0, [r7, #8]
    3bf6:	f000 ff8b 	bl	4b10 <__aeabi_fsub>
    3bfa:	4603      	mov	r3, r0
      if (decimal <= test_decimal + kThreshold &&
    3bfc:	4619      	mov	r1, r3
    3bfe:	6838      	ldr	r0, [r7, #0]
    3c00:	f001 fa42 	bl	5088 <__aeabi_fcmpge>
    3c04:	4603      	mov	r3, r0
    3c06:	2b00      	cmp	r3, #0
    3c08:	d007      	beq.n	3c1a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
      {
        result.divide_add = div;
    3c0a:	69ba      	ldr	r2, [r7, #24]
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3c10:	697a      	ldr	r2, [r7, #20]
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	609a      	str	r2, [r3, #8]
        finished          = true;
    3c16:	2301      	movs	r3, #1
    3c18:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3c1a:	697b      	ldr	r3, [r7, #20]
    3c1c:	3301      	adds	r3, #1
    3c1e:	617b      	str	r3, [r7, #20]
    3c20:	e7bf      	b.n	3ba2 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x36>
  for (int div = 0; div < 15 && !finished; div++)
    3c22:	69bb      	ldr	r3, [r7, #24]
    3c24:	3301      	adds	r3, #1
    3c26:	61bb      	str	r3, [r7, #24]
    3c28:	e7b2      	b.n	3b90 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x24>
      }
    }
  }
  return result;
    3c2a:	bf00      	nop
}
    3c2c:	6878      	ldr	r0, [r7, #4]
    3c2e:	3720      	adds	r7, #32
    3c30:	46bd      	mov	sp, r7
    3c32:	bd80      	pop	{r7, pc}
    3c34:	3d4ccccd 	.word	0x3d4ccccd

00003c38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b086      	sub	sp, #24
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	60f8      	str	r0, [r7, #12]
    3c40:	60b9      	str	r1, [r7, #8]
    3c42:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3c44:	6878      	ldr	r0, [r7, #4]
    3c46:	f001 f815 	bl	4c74 <__aeabi_ui2f>
    3c4a:	4603      	mov	r3, r0
    3c4c:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3c4e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3c52:	68f8      	ldr	r0, [r7, #12]
    3c54:	f001 f866 	bl	4d24 <__aeabi_fmul>
    3c58:	4603      	mov	r3, r0
    3c5a:	68b9      	ldr	r1, [r7, #8]
    3c5c:	4618      	mov	r0, r3
    3c5e:	f001 f861 	bl	4d24 <__aeabi_fmul>
    3c62:	4603      	mov	r3, r0
    3c64:	4619      	mov	r1, r3
    3c66:	6978      	ldr	r0, [r7, #20]
    3c68:	f001 f910 	bl	4e8c <__aeabi_fdiv>
    3c6c:	4603      	mov	r3, r0
}
    3c6e:	4618      	mov	r0, r3
    3c70:	3718      	adds	r7, #24
    3c72:	46bd      	mov	sp, r7
    3c74:	bd80      	pop	{r7, pc}

00003c76 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    3c76:	b580      	push	{r7, lr}
    3c78:	b086      	sub	sp, #24
    3c7a:	af00      	add	r7, sp, #0
    3c7c:	60f8      	str	r0, [r7, #12]
    3c7e:	60b9      	str	r1, [r7, #8]
    3c80:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3c82:	6878      	ldr	r0, [r7, #4]
    3c84:	f000 fff6 	bl	4c74 <__aeabi_ui2f>
    3c88:	4603      	mov	r3, r0
    3c8a:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    3c8c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3c90:	68f8      	ldr	r0, [r7, #12]
    3c92:	f001 f847 	bl	4d24 <__aeabi_fmul>
    3c96:	4603      	mov	r3, r0
    3c98:	68b9      	ldr	r1, [r7, #8]
    3c9a:	4618      	mov	r0, r3
    3c9c:	f001 f842 	bl	4d24 <__aeabi_fmul>
    3ca0:	4603      	mov	r3, r0
    3ca2:	4619      	mov	r1, r3
    3ca4:	6978      	ldr	r0, [r7, #20]
    3ca6:	f001 f8f1 	bl	4e8c <__aeabi_fdiv>
    3caa:	4603      	mov	r3, r0
}
    3cac:	4618      	mov	r0, r3
    3cae:	3718      	adds	r7, #24
    3cb0:	46bd      	mov	sp, r7
    3cb2:	bd80      	pop	{r7, pc}

00003cb4 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b082      	sub	sp, #8
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    3cbc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3cc0:	6878      	ldr	r0, [r7, #4]
    3cc2:	f000 ff27 	bl	4b14 <__addsf3>
    3cc6:	4603      	mov	r3, r0
    3cc8:	4618      	mov	r0, r3
    3cca:	f001 f9f1 	bl	50b0 <__aeabi_f2iz>
    3cce:	4603      	mov	r3, r0
    3cd0:	4618      	mov	r0, r3
    3cd2:	f000 ffd3 	bl	4c7c <__aeabi_i2f>
    3cd6:	4603      	mov	r3, r0
}
    3cd8:	4618      	mov	r0, r3
    3cda:	3708      	adds	r7, #8
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}

00003ce0 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b086      	sub	sp, #24
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	6078      	str	r0, [r7, #4]
  bool result         = false;
    3ce8:	2300      	movs	r3, #0
    3cea:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    3cec:	6878      	ldr	r0, [r7, #4]
    3cee:	f7ff ffe1 	bl	3cb4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3cf2:	6138      	str	r0, [r7, #16]
  float error         = value - rounded_value;
    3cf4:	6939      	ldr	r1, [r7, #16]
    3cf6:	6878      	ldr	r0, [r7, #4]
    3cf8:	f000 ff0a 	bl	4b10 <__aeabi_fsub>
    3cfc:	4603      	mov	r3, r0
    3cfe:	60fb      	str	r3, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    3d00:	490a      	ldr	r1, [pc, #40]	; (3d2c <sjsu::lpc40xx::uart::IsDecmial(float)+0x4c>)
    3d02:	68f8      	ldr	r0, [r7, #12]
    3d04:	f001 f9c0 	bl	5088 <__aeabi_fcmpge>
    3d08:	4603      	mov	r3, r0
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d008      	beq.n	3d20 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
    3d0e:	4908      	ldr	r1, [pc, #32]	; (3d30 <sjsu::lpc40xx::uart::IsDecmial(float)+0x50>)
    3d10:	68f8      	ldr	r0, [r7, #12]
    3d12:	f001 f9af 	bl	5074 <__aeabi_fcmple>
    3d16:	4603      	mov	r3, r0
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d001      	beq.n	3d20 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
  {
    result = true;
    3d1c:	2301      	movs	r3, #1
    3d1e:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    3d20:	7dfb      	ldrb	r3, [r7, #23]
}
    3d22:	4618      	mov	r0, r3
    3d24:	3718      	adds	r7, #24
    3d26:	46bd      	mov	sp, r7
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	bf00      	nop
    3d2c:	bd4ccccd 	.word	0xbd4ccccd
    3d30:	3d4ccccd 	.word	0x3d4ccccd

00003d34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    3d34:	b590      	push	{r4, r7, lr}
    3d36:	b091      	sub	sp, #68	; 0x44
    3d38:	af00      	add	r7, sp, #0
    3d3a:	61f8      	str	r0, [r7, #28]
    3d3c:	61b9      	str	r1, [r7, #24]
    3d3e:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    3d40:	f107 0314 	add.w	r3, r7, #20
    3d44:	4618      	mov	r0, r3
    3d46:	f7ff f81a 	bl	2d7e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3d4a:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    3d4c:	2300      	movs	r3, #0
    3d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    3d50:	69fb      	ldr	r3, [r7, #28]
    3d52:	2200      	movs	r2, #0
    3d54:	601a      	str	r2, [r3, #0]
    3d56:	69fb      	ldr	r3, [r7, #28]
    3d58:	2200      	movs	r2, #0
    3d5a:	605a      	str	r2, [r3, #4]
    3d5c:	69fb      	ldr	r3, [r7, #28]
    3d5e:	2201      	movs	r2, #1
    3d60:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    3d62:	69b8      	ldr	r0, [r7, #24]
    3d64:	f000 ff86 	bl	4c74 <__aeabi_ui2f>
    3d68:	4603      	mov	r3, r0
    3d6a:	627b      	str	r3, [r7, #36]	; 0x24
  float divide_estimate = 0;
    3d6c:	f04f 0300 	mov.w	r3, #0
    3d70:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    3d72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    3d76:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    3d78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3d7c:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    3d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    3d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d86:	2b04      	cmp	r3, #4
    3d88:	f000 80a0 	beq.w	3ecc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x198>
  {
    switch (state)
    3d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d8e:	2b03      	cmp	r3, #3
    3d90:	f200 809a 	bhi.w	3ec8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x194>
    3d94:	a201      	add	r2, pc, #4	; (adr r2, 3d9c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x68>)
    3d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d9a:	bf00      	nop
    3d9c:	00003dad 	.word	0x00003dad
    3da0:	00003dfb 	.word	0x00003dfb
    3da4:	00003e43 	.word	0x00003e43
    3da8:	00003ea1 	.word	0x00003ea1
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    3dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3db4:	f7ff ff40 	bl	3c38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3db8:	63b8      	str	r0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    3dba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3dbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3dc0:	f001 f94e 	bl	5060 <__aeabi_fcmplt>
    3dc4:	4603      	mov	r3, r0
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d005      	beq.n	3dd6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xa2>
        {
          uart_calibration.divide_latch = 0;
    3dca:	69fb      	ldr	r3, [r7, #28]
    3dcc:	2200      	movs	r2, #0
    3dce:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    3dd0:	2304      	movs	r3, #4
    3dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    3dd4:	e079      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        else if (IsDecmial(divide_estimate))
    3dd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3dd8:	f7ff ff82 	bl	3ce0 <sjsu::lpc40xx::uart::IsDecmial(float)>
    3ddc:	4603      	mov	r3, r0
    3dde:	2b00      	cmp	r3, #0
    3de0:	d008      	beq.n	3df4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xc0>
              static_cast<uint32_t>(divide_estimate);
    3de2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3de4:	f001 f98a 	bl	50fc <__aeabi_f2uiz>
    3de8:	4602      	mov	r2, r0
          uart_calibration.divide_latch =
    3dea:	69fb      	ldr	r3, [r7, #28]
    3dec:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    3dee:	2304      	movs	r3, #4
    3df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3df2:	e06a      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kCalculateDivideLatchWithDecimal;
    3df4:	2301      	movs	r3, #1
    3df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3df8:	e067      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    3dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3e00:	f7ff ff1a 	bl	3c38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3e04:	4603      	mov	r3, r0
    3e06:	4618      	mov	r0, r3
    3e08:	f7ff ff54 	bl	3cb4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3e0c:	63b8      	str	r0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    3e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3e14:	f7ff ff2f 	bl	3c76 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    3e18:	6378      	str	r0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    3e1a:	492f      	ldr	r1, [pc, #188]	; (3ed8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a4>)
    3e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3e1e:	f001 f933 	bl	5088 <__aeabi_fcmpge>
    3e22:	4603      	mov	r3, r0
    3e24:	2b00      	cmp	r3, #0
    3e26:	d009      	beq.n	3e3c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
    3e28:	492c      	ldr	r1, [pc, #176]	; (3edc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a8>)
    3e2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3e2c:	f001 f922 	bl	5074 <__aeabi_fcmple>
    3e30:	4603      	mov	r3, r0
    3e32:	2b00      	cmp	r3, #0
    3e34:	d002      	beq.n	3e3c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
        {
          state = States::kGenerateFractionFromDecimal;
    3e36:	2303      	movs	r3, #3
    3e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    3e3a:	e046      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kDecimalFailedGenerateNewDecimal;
    3e3c:	2302      	movs	r3, #2
    3e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3e40:	e043      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    3e42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3e48:	f000 fe64 	bl	4b14 <__addsf3>
    3e4c:	4603      	mov	r3, r0
    3e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (div > 15)
    3e50:	4923      	ldr	r1, [pc, #140]	; (3ee0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3e54:	f001 f922 	bl	509c <__aeabi_fcmpgt>
    3e58:	4603      	mov	r3, r0
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d002      	beq.n	3e64 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kDone;
    3e5e:	2304      	movs	r3, #4
    3e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    3e62:	e032      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        }
        else if (mul > 15)
    3e64:	491e      	ldr	r1, [pc, #120]	; (3ee0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3e68:	f001 f918 	bl	509c <__aeabi_fcmpgt>
    3e6c:	4603      	mov	r3, r0
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d00d      	beq.n	3e8e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15a>
        {
          div += 1;
    3e72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3e78:	f000 fe4c 	bl	4b14 <__addsf3>
    3e7c:	4603      	mov	r3, r0
    3e7e:	633b      	str	r3, [r7, #48]	; 0x30
          mul = div + 1;
    3e80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3e86:	f000 fe45 	bl	4b14 <__addsf3>
    3e8a:	4603      	mov	r3, r0
    3e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    3e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3e92:	f000 fffb 	bl	4e8c <__aeabi_fdiv>
    3e96:	4603      	mov	r3, r0
    3e98:	637b      	str	r3, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    3e9a:	2301      	movs	r3, #1
    3e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3e9e:	e014      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    3ea0:	69fc      	ldr	r4, [r7, #28]
    3ea2:	463b      	mov	r3, r7
    3ea4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3ea6:	4618      	mov	r0, r3
    3ea8:	f7ff fe60 	bl	3b6c <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    3eac:	463b      	mov	r3, r7
    3eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    3eb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3eb8:	f001 f920 	bl	50fc <__aeabi_f2uiz>
    3ebc:	4602      	mov	r2, r0
    3ebe:	69fb      	ldr	r3, [r7, #28]
    3ec0:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    3ec2:	2304      	movs	r3, #4
    3ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3ec6:	e000      	b.n	3eca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDone:
      default: break;
    3ec8:	bf00      	nop
  while (state != States::kDone)
    3eca:	e75b      	b.n	3d84 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x50>
    }
  }
  return uart_calibration;
    3ecc:	bf00      	nop
}
    3ece:	69f8      	ldr	r0, [r7, #28]
    3ed0:	3744      	adds	r7, #68	; 0x44
    3ed2:	46bd      	mov	sp, r7
    3ed4:	bd90      	pop	{r4, r7, pc}
    3ed6:	bf00      	nop
    3ed8:	3f8ccccd 	.word	0x3f8ccccd
    3edc:	3ff33333 	.word	0x3ff33333
    3ee0:	41700000 	.word	0x41700000

00003ee4 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
  {
  }

  Status Initialize(uint32_t baud_rate) const override
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b084      	sub	sp, #16
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    3eec:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    3eee:	2307      	movs	r3, #7
    3ef0:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	6898      	ldr	r0, [r3, #8]
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	689b      	ldr	r3, [r3, #8]
    3efa:	681b      	ldr	r3, [r3, #0]
    3efc:	3314      	adds	r3, #20
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	687a      	ldr	r2, [r7, #4]
    3f02:	6852      	ldr	r2, [r2, #4]
    3f04:	3204      	adds	r2, #4
    3f06:	4611      	mov	r1, r2
    3f08:	4798      	blx	r3

    SetBaudRate(baud_rate);
    3f0a:	6839      	ldr	r1, [r7, #0]
    3f0c:	6878      	ldr	r0, [r7, #4]
    3f0e:	f000 f849 	bl	3fa4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	68d8      	ldr	r0, [r3, #12]
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	685b      	ldr	r3, [r3, #4]
    3f1c:	68db      	ldr	r3, [r3, #12]
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	687a      	ldr	r2, [r7, #4]
    3f24:	6852      	ldr	r2, [r2, #4]
    3f26:	7c12      	ldrb	r2, [r2, #16]
    3f28:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    3f2c:	b2d2      	uxtb	r2, r2
    3f2e:	4611      	mov	r1, r2
    3f30:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	685b      	ldr	r3, [r3, #4]
    3f36:	6898      	ldr	r0, [r3, #8]
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	685b      	ldr	r3, [r3, #4]
    3f3c:	689b      	ldr	r3, [r3, #8]
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	687a      	ldr	r2, [r7, #4]
    3f44:	6852      	ldr	r2, [r2, #4]
    3f46:	7c12      	ldrb	r2, [r2, #16]
    3f48:	f3c2 0202 	ubfx	r2, r2, #0, #3
    3f4c:	b2d2      	uxtb	r2, r2
    3f4e:	4611      	mov	r1, r2
    3f50:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	685b      	ldr	r3, [r3, #4]
    3f56:	68da      	ldr	r2, [r3, #12]
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	685b      	ldr	r3, [r3, #4]
    3f5c:	68db      	ldr	r3, [r3, #12]
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	3304      	adds	r3, #4
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	2102      	movs	r1, #2
    3f66:	4610      	mov	r0, r2
    3f68:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	685b      	ldr	r3, [r3, #4]
    3f6e:	689a      	ldr	r2, [r3, #8]
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	685b      	ldr	r3, [r3, #4]
    3f74:	689b      	ldr	r3, [r3, #8]
    3f76:	681b      	ldr	r3, [r3, #0]
    3f78:	3304      	adds	r3, #4
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	2102      	movs	r1, #2
    3f7e:	4610      	mov	r0, r2
    3f80:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	685b      	ldr	r3, [r3, #4]
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	7a1b      	ldrb	r3, [r3, #8]
    3f8a:	b2da      	uxtb	r2, r3
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	685b      	ldr	r3, [r3, #4]
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	f042 0207 	orr.w	r2, r2, #7
    3f96:	b2d2      	uxtb	r2, r2
    3f98:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    3f9a:	2300      	movs	r3, #0
  }
    3f9c:	4618      	mov	r0, r3
    3f9e:	3710      	adds	r7, #16
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bd80      	pop	{r7, pc}

00003fa4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    3fa4:	b580      	push	{r7, lr}
    3fa6:	b086      	sub	sp, #24
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
    3fac:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	689a      	ldr	r2, [r3, #8]
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	685b      	ldr	r3, [r3, #4]
    3fb6:	3304      	adds	r3, #4
    3fb8:	4619      	mov	r1, r3
    3fba:	4610      	mov	r0, r2
    3fbc:	f7fe fd98 	bl	2af0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    3fc0:	4602      	mov	r2, r0
    3fc2:	f107 0308 	add.w	r3, r7, #8
    3fc6:	6839      	ldr	r1, [r7, #0]
    3fc8:	4618      	mov	r0, r3
    3fca:	f7ff feb3 	bl	3d34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    3fce:	2380      	movs	r3, #128	; 0x80
    3fd0:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    3fd2:	68bb      	ldr	r3, [r7, #8]
    3fd4:	0a1b      	lsrs	r3, r3, #8
    3fd6:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    3fd8:	68bb      	ldr	r3, [r7, #8]
    3fda:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3fdc:	693b      	ldr	r3, [r7, #16]
    3fde:	b2db      	uxtb	r3, r3
    3fe0:	011b      	lsls	r3, r3, #4
    3fe2:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    3fe4:	68fb      	ldr	r3, [r7, #12]
    3fe6:	b2db      	uxtb	r3, r3
    3fe8:	f003 030f 	and.w	r3, r3, #15
    3fec:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3fee:	4313      	orrs	r3, r2
    3ff0:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	685b      	ldr	r3, [r3, #4]
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	2280      	movs	r2, #128	; 0x80
    3ffa:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	685b      	ldr	r3, [r3, #4]
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	7dba      	ldrb	r2, [r7, #22]
    4004:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	685b      	ldr	r3, [r3, #4]
    400a:	681b      	ldr	r3, [r3, #0]
    400c:	7d7a      	ldrb	r2, [r7, #21]
    400e:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	685b      	ldr	r3, [r3, #4]
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	7d3a      	ldrb	r2, [r7, #20]
    4018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	685b      	ldr	r3, [r3, #4]
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	2203      	movs	r2, #3
    4024:	731a      	strb	r2, [r3, #12]
    return true;
    4026:	2301      	movs	r3, #1
  }
    4028:	4618      	mov	r0, r3
    402a:	3718      	adds	r7, #24
    402c:	46bd      	mov	sp, r7
    402e:	bd80      	pop	{r7, pc}

00004030 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    4030:	b580      	push	{r7, lr}
    4032:	b086      	sub	sp, #24
    4034:	af00      	add	r7, sp, #0
    4036:	60f8      	str	r0, [r7, #12]
    4038:	60b9      	str	r1, [r7, #8]
    403a:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    403c:	2300      	movs	r3, #0
    403e:	617b      	str	r3, [r7, #20]
    4040:	697a      	ldr	r2, [r7, #20]
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	429a      	cmp	r2, r3
    4046:	d216      	bcs.n	4076 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    4048:	68ba      	ldr	r2, [r7, #8]
    404a:	697b      	ldr	r3, [r7, #20]
    404c:	441a      	add	r2, r3
    404e:	68fb      	ldr	r3, [r7, #12]
    4050:	685b      	ldr	r3, [r3, #4]
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	7812      	ldrb	r2, [r2, #0]
    4056:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    4058:	68f8      	ldr	r0, [r7, #12]
    405a:	f000 f8b5 	bl	41c8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    405e:	4603      	mov	r3, r0
    4060:	f083 0301 	eor.w	r3, r3, #1
    4064:	b2db      	uxtb	r3, r3
    4066:	2b00      	cmp	r3, #0
    4068:	d001      	beq.n	406e <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    406a:	bf00      	nop
      while (!TransmissionComplete())
    406c:	e7f4      	b.n	4058 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    406e:	697b      	ldr	r3, [r7, #20]
    4070:	3301      	adds	r3, #1
    4072:	617b      	str	r3, [r7, #20]
    4074:	e7e4      	b.n	4040 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    4076:	bf00      	nop
    4078:	3718      	adds	r7, #24
    407a:	46bd      	mov	sp, r7
    407c:	bd80      	pop	{r7, pc}

0000407e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    407e:	b590      	push	{r4, r7, lr}
    4080:	b083      	sub	sp, #12
    4082:	af00      	add	r7, sp, #0
    4084:	6078      	str	r0, [r7, #4]
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    408a:	4618      	mov	r0, r3
    408c:	f000 f88a 	bl	41a4 <sjsu::lpc40xx::Uart::HasData() const>
    4090:	4603      	mov	r3, r0
    4092:	2b00      	cmp	r3, #0
    4094:	d010      	beq.n	40b8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    409a:	685b      	ldr	r3, [r3, #4]
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    40a6:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    40ac:	6813      	ldr	r3, [r2, #0]
    40ae:	1c58      	adds	r0, r3, #1
    40b0:	6010      	str	r0, [r2, #0]
    40b2:	440b      	add	r3, r1
    40b4:	4622      	mov	r2, r4
    40b6:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    40bc:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    40c2:	429a      	cmp	r2, r3
    40c4:	d301      	bcc.n	40ca <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    40c6:	2301      	movs	r3, #1
    40c8:	e000      	b.n	40cc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    40ca:	2300      	movs	r3, #0
    });
    40cc:	4618      	mov	r0, r3
    40ce:	370c      	adds	r7, #12
    40d0:	46bd      	mov	sp, r7
    40d2:	bd90      	pop	{r4, r7, pc}

000040d4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    40d4:	b590      	push	{r4, r7, lr}
    40d6:	b09d      	sub	sp, #116	; 0x74
    40d8:	af00      	add	r7, sp, #0
    40da:	6178      	str	r0, [r7, #20]
    40dc:	6139      	str	r1, [r7, #16]
    40de:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    40e0:	2300      	movs	r3, #0
    40e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40e4:	697b      	ldr	r3, [r7, #20]
    40e6:	643b      	str	r3, [r7, #64]	; 0x40
    40e8:	f107 0310 	add.w	r3, r7, #16
    40ec:	647b      	str	r3, [r7, #68]	; 0x44
    40ee:	68fb      	ldr	r3, [r7, #12]
    40f0:	64bb      	str	r3, [r7, #72]	; 0x48
    40f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    40f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    40f8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    40fc:	e9c7 3408 	strd	r3, r4, [r7, #32]
    4100:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    4104:	f107 0340 	add.w	r3, r7, #64	; 0x40
    4108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    410a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    410e:	f107 0360 	add.w	r3, r7, #96	; 0x60
    4112:	4618      	mov	r0, r3
    4114:	f7fc fe8d 	bl	e32 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4118:	f107 0260 	add.w	r2, r7, #96	; 0x60
    411c:	f107 0320 	add.w	r3, r7, #32
    4120:	4611      	mov	r1, r2
    4122:	4618      	mov	r0, r3
    4124:	f7fc fe99 	bl	e5a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4128:	4603      	mov	r3, r0
    412a:	2b00      	cmp	r3, #0
    412c:	d004      	beq.n	4138 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    412e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    4132:	e9c7 3406 	strd	r3, r4, [r7, #24]
    4136:	e011      	b.n	415c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    4138:	4b19      	ldr	r3, [pc, #100]	; (41a0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    4140:	4610      	mov	r0, r2
    4142:	4798      	blx	r3
    4144:	463b      	mov	r3, r7
    4146:	f107 0220 	add.w	r2, r7, #32
    414a:	f107 0158 	add.w	r1, r7, #88	; 0x58
    414e:	4618      	mov	r0, r3
    4150:	f7fc fea8 	bl	ea4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4154:	e9d7 3400 	ldrd	r3, r4, [r7]
    4158:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    415c:	2301      	movs	r3, #1
    415e:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    4160:	4b0f      	ldr	r3, [pc, #60]	; (41a0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    4162:	681b      	ldr	r3, [r3, #0]
    4164:	f107 0250 	add.w	r2, r7, #80	; 0x50
    4168:	4610      	mov	r0, r2
    416a:	4798      	blx	r3
    416c:	f107 0218 	add.w	r2, r7, #24
    4170:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4174:	4611      	mov	r1, r2
    4176:	4618      	mov	r0, r3
    4178:	f7fc febf 	bl	efa <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    417c:	4603      	mov	r3, r0
    417e:	2b00      	cmp	r3, #0
    4180:	d009      	beq.n	4196 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    4182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    4186:	4618      	mov	r0, r3
    4188:	f7ff ff79 	bl	407e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    418c:	4603      	mov	r3, r0
    418e:	2b00      	cmp	r3, #0
    4190:	d0e6      	beq.n	4160 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    4192:	2300      	movs	r3, #0
    4194:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    4196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    4198:	4618      	mov	r0, r3
    419a:	3774      	adds	r7, #116	; 0x74
    419c:	46bd      	mov	sp, r7
    419e:	bd90      	pop	{r4, r7, pc}
    41a0:	2007c000 	.word	0x2007c000

000041a4 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	685b      	ldr	r3, [r3, #4]
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	7d1b      	ldrb	r3, [r3, #20]
    41b4:	b2db      	uxtb	r3, r3
    41b6:	2100      	movs	r1, #0
    41b8:	4618      	mov	r0, r3
    41ba:	f000 f9d8 	bl	456e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    41be:	4603      	mov	r3, r0
  }
    41c0:	4618      	mov	r0, r3
    41c2:	3708      	adds	r7, #8
    41c4:	46bd      	mov	sp, r7
    41c6:	bd80      	pop	{r7, pc}

000041c8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	685b      	ldr	r3, [r3, #4]
    41d4:	681b      	ldr	r3, [r3, #0]
    41d6:	7d1b      	ldrb	r3, [r3, #20]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2105      	movs	r1, #5
    41dc:	4618      	mov	r0, r3
    41de:	f000 f9c6 	bl	456e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    41e2:	4603      	mov	r3, r0
  }
    41e4:	4618      	mov	r0, r3
    41e6:	3708      	adds	r7, #8
    41e8:	46bd      	mov	sp, r7
    41ea:	bd80      	pop	{r7, pc}

000041ec <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc17xxStdOut(const char * data, size_t length)
{
    41ec:	b580      	push	{r7, lr}
    41ee:	b082      	sub	sp, #8
    41f0:	af00      	add	r7, sp, #0
    41f2:	6078      	str	r0, [r7, #4]
    41f4:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    41f6:	683a      	ldr	r2, [r7, #0]
    41f8:	6879      	ldr	r1, [r7, #4]
    41fa:	4804      	ldr	r0, [pc, #16]	; (420c <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)+0x20>)
    41fc:	f7ff ff18 	bl	4030 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4200:	683b      	ldr	r3, [r7, #0]
}
    4202:	4618      	mov	r0, r3
    4204:	3708      	adds	r7, #8
    4206:	46bd      	mov	sp, r7
    4208:	bd80      	pop	{r7, pc}
    420a:	bf00      	nop
    420c:	2007c0a0 	.word	0x2007c0a0

00004210 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)>:

int Lpc17xxStdIn(char * data, size_t length)
{
    4210:	b590      	push	{r4, r7, lr}
    4212:	b087      	sub	sp, #28
    4214:	af02      	add	r7, sp, #8
    4216:	6078      	str	r0, [r7, #4]
    4218:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    421a:	f107 0308 	add.w	r3, r7, #8
    421e:	4618      	mov	r0, r3
    4220:	f7fc fe07 	bl	e32 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4224:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4228:	e9cd 3400 	strd	r3, r4, [sp]
    422c:	683a      	ldr	r2, [r7, #0]
    422e:	6879      	ldr	r1, [r7, #4]
    4230:	4803      	ldr	r0, [pc, #12]	; (4240 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)+0x30>)
    4232:	f7ff ff4f 	bl	40d4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    4236:	683b      	ldr	r3, [r7, #0]
}
    4238:	4618      	mov	r0, r3
    423a:	3714      	adds	r7, #20
    423c:	46bd      	mov	sp, r7
    423e:	bd90      	pop	{r4, r7, pc}
    4240:	2007c0a0 	.word	0x2007c0a0

00004244 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    4244:	b580      	push	{r7, lr}
    4246:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    4248:	4802      	ldr	r0, [pc, #8]	; (4254 <ThreadRuntimeCounter+0x10>)
    424a:	f7fe fb45 	bl	28d8 <sjsu::cortex::DwtCounter::GetCount()>
    424e:	4603      	mov	r3, r0
}
    4250:	4618      	mov	r0, r3
    4252:	bd80      	pop	{r7, pc}
    4254:	2007c2f4 	.word	0x2007c2f4

00004258 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    4258:	b580      	push	{r7, lr}
    425a:	b082      	sub	sp, #8
    425c:	af00      	add	r7, sp, #0
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    425e:	4b1c      	ldr	r3, [pc, #112]	; (42d0 <sjsu::InitializePlatform()+0x78>)
    4260:	6819      	ldr	r1, [r3, #0]
    4262:	481c      	ldr	r0, [pc, #112]	; (42d4 <sjsu::InitializePlatform()+0x7c>)
    4264:	f7fe fe72 	bl	2f4c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  system_controller.SetPeripheralClockDivider(
    4268:	2201      	movs	r2, #1
    426a:	491b      	ldr	r1, [pc, #108]	; (42d8 <sjsu::InitializePlatform()+0x80>)
    426c:	4819      	ldr	r0, [pc, #100]	; (42d4 <sjsu::InitializePlatform()+0x7c>)
    426e:	f7fe ff4f 	bl	3110 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
      sjsu::lpc17xx::SystemController::Peripherals::kUart0, 1);
  uart0.Initialize(config::kBaudRate);
    4272:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    4276:	4819      	ldr	r0, [pc, #100]	; (42dc <sjsu::InitializePlatform()+0x84>)
    4278:	f7ff fe34 	bl	3ee4 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>

  sjsu::newlib::SetStdout(Lpc17xxStdOut);
    427c:	4818      	ldr	r0, [pc, #96]	; (42e0 <sjsu::InitializePlatform()+0x88>)
    427e:	f000 fbc1 	bl	4a04 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc17xxStdIn);
    4282:	4818      	ldr	r0, [pc, #96]	; (42e4 <sjsu::InitializePlatform()+0x8c>)
    4284:	f000 fbcc 	bl	4a20 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    4288:	4b17      	ldr	r3, [pc, #92]	; (42e8 <sjsu::InitializePlatform()+0x90>)
    428a:	6819      	ldr	r1, [r3, #0]
    428c:	4817      	ldr	r0, [pc, #92]	; (42ec <sjsu::InitializePlatform()+0x94>)
    428e:	f7fe fd93 	bl	2db8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    4292:	4816      	ldr	r0, [pc, #88]	; (42ec <sjsu::InitializePlatform()+0x94>)
    4294:	f7fe fcbc 	bl	2c10 <sjsu::cortex::SystemTimer::StartTimer() const>
    4298:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	2b00      	cmp	r3, #0
    429e:	d00d      	beq.n	42bc <sjsu::InitializePlatform()+0x64>
    42a0:	23c6      	movs	r3, #198	; 0xc6
    42a2:	4a13      	ldr	r2, [pc, #76]	; (42f0 <sjsu::InitializePlatform()+0x98>)
    42a4:	4913      	ldr	r1, [pc, #76]	; (42f4 <sjsu::InitializePlatform()+0x9c>)
    42a6:	4814      	ldr	r0, [pc, #80]	; (42f8 <sjsu::InitializePlatform()+0xa0>)
    42a8:	f7fe fa48 	bl	273c <printf>
    42ac:	4813      	ldr	r0, [pc, #76]	; (42fc <sjsu::InitializePlatform()+0xa4>)
    42ae:	f7fd f91b 	bl	14e8 <puts>
    42b2:	2100      	movs	r1, #0
    42b4:	2001      	movs	r0, #1
    42b6:	f7fc fefb 	bl	10b0 <sjsu::debug::PrintBacktrace(bool, void*)>
    42ba:	e7fe      	b.n	42ba <sjsu::InitializePlatform()+0x62>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    42bc:	4810      	ldr	r0, [pc, #64]	; (4300 <sjsu::InitializePlatform()+0xa8>)
    42be:	f7fe fae9 	bl	2894 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    42c2:	4810      	ldr	r0, [pc, #64]	; (4304 <sjsu::InitializePlatform()+0xac>)
    42c4:	f7fe fbea 	bl	2a9c <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    42c8:	bf00      	nop
    42ca:	3708      	adds	r7, #8
    42cc:	46bd      	mov	sp, r7
    42ce:	bd80      	pop	{r7, pc}
    42d0:	00006e18 	.word	0x00006e18
    42d4:	2007c09c 	.word	0x2007c09c
    42d8:	000077a0 	.word	0x000077a0
    42dc:	2007c0a0 	.word	0x2007c0a0
    42e0:	000041ed 	.word	0x000041ed
    42e4:	00004211 	.word	0x00004211
    42e8:	00006e1c 	.word	0x00006e1c
    42ec:	2007c0ac 	.word	0x2007c0ac
    42f0:	00007b54 	.word	0x00007b54
    42f4:	000078f4 	.word	0x000078f4
    42f8:	000076cc 	.word	0x000076cc
    42fc:	00007084 	.word	0x00007084
    4300:	2007c2f4 	.word	0x2007c2f4
    4304:	00002bbd 	.word	0x00002bbd

00004308 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    4308:	b590      	push	{r4, r7, lr}
    430a:	b085      	sub	sp, #20
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
    4310:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4312:	687b      	ldr	r3, [r7, #4]
    4314:	4618      	mov	r0, r3
    4316:	f7fe fcc5 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    431a:	4604      	mov	r4, r0
    431c:	6838      	ldr	r0, [r7, #0]
    431e:	f000 fca9 	bl	4c74 <__aeabi_ui2f>
    4322:	4603      	mov	r3, r0
    4324:	4619      	mov	r1, r3
    4326:	4620      	mov	r0, r4
    4328:	f000 fdb0 	bl	4e8c <__aeabi_fdiv>
    432c:	4603      	mov	r3, r0
    432e:	461a      	mov	r2, r3
    4330:	f107 030c 	add.w	r3, r7, #12
    4334:	4611      	mov	r1, r2
    4336:	4618      	mov	r0, r3
    4338:	f7fe fb15 	bl	2966 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    433c:	68fb      	ldr	r3, [r7, #12]
	}
    433e:	4618      	mov	r0, r3
    4340:	3714      	adds	r7, #20
    4342:	46bd      	mov	sp, r7
    4344:	bd90      	pop	{r4, r7, pc}

00004346 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4346:	b5f0      	push	{r4, r5, r6, r7, lr}
    4348:	b083      	sub	sp, #12
    434a:	af00      	add	r7, sp, #0
    434c:	6078      	str	r0, [r7, #4]
    434e:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4350:	6838      	ldr	r0, [r7, #0]
    4352:	f7fc fc0f 	bl	b74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4356:	460a      	mov	r2, r1
    4358:	4601      	mov	r1, r0
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	e9d3 5600 	ldrd	r5, r6, [r3]
    4360:	186b      	adds	r3, r5, r1
    4362:	eb46 0402 	adc.w	r4, r6, r2
    4366:	687a      	ldr	r2, [r7, #4]
    4368:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    436c:	687b      	ldr	r3, [r7, #4]
	}
    436e:	4618      	mov	r0, r3
    4370:	370c      	adds	r7, #12
    4372:	46bd      	mov	sp, r7
    4374:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004376 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    4376:	b580      	push	{r7, lr}
    4378:	b084      	sub	sp, #16
    437a:	af00      	add	r7, sp, #0
    437c:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	4618      	mov	r0, r3
    4382:	f7fe fc8f 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    4386:	4603      	mov	r3, r0
    4388:	60fb      	str	r3, [r7, #12]
    438a:	f107 030c 	add.w	r3, r7, #12
    438e:	4618      	mov	r0, r3
    4390:	f000 f903 	bl	459a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4394:	4603      	mov	r3, r0
    4396:	4618      	mov	r0, r3
    4398:	f000 feb0 	bl	50fc <__aeabi_f2uiz>
    439c:	4603      	mov	r3, r0
		}
    439e:	4618      	mov	r0, r3
    43a0:	3710      	adds	r7, #16
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}

000043a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    43a6:	b480      	push	{r7}
    43a8:	b083      	sub	sp, #12
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
    43ae:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    43b0:	2201      	movs	r2, #1
    43b2:	683b      	ldr	r3, [r7, #0]
    43b4:	fa02 f303 	lsl.w	r3, r2, r3
    43b8:	43db      	mvns	r3, r3
    43ba:	461a      	mov	r2, r3
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	4013      	ands	r3, r2
}
    43c0:	4618      	mov	r0, r3
    43c2:	370c      	adds	r7, #12
    43c4:	46bd      	mov	sp, r7
    43c6:	bc80      	pop	{r7}
    43c8:	4770      	bx	lr

000043ca <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    43ca:	b580      	push	{r7, lr}
    43cc:	b084      	sub	sp, #16
    43ce:	af00      	add	r7, sp, #0
    43d0:	60f8      	str	r0, [r7, #12]
    43d2:	460b      	mov	r3, r1
    43d4:	80ba      	strh	r2, [r7, #4]
    43d6:	817b      	strh	r3, [r7, #10]
  return Insert(target, value, bitmask.position, bitmask.width);
    43d8:	793b      	ldrb	r3, [r7, #4]
    43da:	461a      	mov	r2, r3
    43dc:	797b      	ldrb	r3, [r7, #5]
    43de:	8979      	ldrh	r1, [r7, #10]
    43e0:	68f8      	ldr	r0, [r7, #12]
    43e2:	f000 f8e6 	bl	45b2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>
    43e6:	4603      	mov	r3, r0
}
    43e8:	4618      	mov	r0, r3
    43ea:	3710      	adds	r7, #16
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}

000043f0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    43f0:	b580      	push	{r7, lr}
    43f2:	b084      	sub	sp, #16
    43f4:	af00      	add	r7, sp, #0
    43f6:	60f8      	str	r0, [r7, #12]
    43f8:	460b      	mov	r3, r1
    43fa:	80ba      	strh	r2, [r7, #4]
    43fc:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    43fe:	793b      	ldrb	r3, [r7, #4]
    4400:	461a      	mov	r2, r3
    4402:	797b      	ldrb	r3, [r7, #5]
    4404:	7af9      	ldrb	r1, [r7, #11]
    4406:	68f8      	ldr	r0, [r7, #12]
    4408:	f000 f8ff 	bl	460a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    440c:	4603      	mov	r3, r0
}
    440e:	4618      	mov	r0, r3
    4410:	3710      	adds	r7, #16
    4412:	46bd      	mov	sp, r7
    4414:	bd80      	pop	{r7, pc}

00004416 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    4416:	b480      	push	{r7}
    4418:	b083      	sub	sp, #12
    441a:	af00      	add	r7, sp, #0
    441c:	6078      	str	r0, [r7, #4]
    441e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    4420:	2201      	movs	r2, #1
    4422:	683b      	ldr	r3, [r7, #0]
    4424:	fa02 f303 	lsl.w	r3, r2, r3
    4428:	461a      	mov	r2, r3
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	4313      	orrs	r3, r2
}
    442e:	4618      	mov	r0, r3
    4430:	370c      	adds	r7, #12
    4432:	46bd      	mov	sp, r7
    4434:	bc80      	pop	{r7}
    4436:	4770      	bx	lr

00004438 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    4438:	b580      	push	{r7, lr}
    443a:	b082      	sub	sp, #8
    443c:	af00      	add	r7, sp, #0
    443e:	6078      	str	r0, [r7, #4]
    4440:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    4442:	683b      	ldr	r3, [r7, #0]
    4444:	4618      	mov	r0, r3
    4446:	f7fe fd36 	bl	2eb6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    444a:	4602      	mov	r2, r0
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	601a      	str	r2, [r3, #0]
			return *this;
    4450:	687b      	ldr	r3, [r7, #4]
		}
    4452:	4618      	mov	r0, r3
    4454:	3708      	adds	r7, #8
    4456:	46bd      	mov	sp, r7
    4458:	bd80      	pop	{r7, pc}

0000445a <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    445a:	b580      	push	{r7, lr}
    445c:	b082      	sub	sp, #8
    445e:	af00      	add	r7, sp, #0
    4460:	6078      	str	r0, [r7, #4]
    4462:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    4464:	783b      	ldrb	r3, [r7, #0]
    4466:	4619      	mov	r1, r3
    4468:	787b      	ldrb	r3, [r7, #1]
    446a:	461a      	mov	r2, r3
    446c:	6878      	ldr	r0, [r7, #4]
    446e:	f000 f8f8 	bl	4662 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    4472:	4603      	mov	r3, r0
}
    4474:	4618      	mov	r0, r3
    4476:	3708      	adds	r7, #8
    4478:	46bd      	mov	sp, r7
    447a:	bd80      	pop	{r7, pc}

0000447c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    447c:	b480      	push	{r7}
    447e:	b083      	sub	sp, #12
    4480:	af00      	add	r7, sp, #0
    4482:	6078      	str	r0, [r7, #4]
    4484:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    4486:	2201      	movs	r2, #1
    4488:	683b      	ldr	r3, [r7, #0]
    448a:	fa02 f303 	lsl.w	r3, r2, r3
    448e:	461a      	mov	r2, r3
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	4013      	ands	r3, r2
    4494:	2b00      	cmp	r3, #0
    4496:	bf14      	ite	ne
    4498:	2301      	movne	r3, #1
    449a:	2300      	moveq	r3, #0
    449c:	b2db      	uxtb	r3, r3
}
    449e:	4618      	mov	r0, r3
    44a0:	370c      	adds	r7, #12
    44a2:	46bd      	mov	sp, r7
    44a4:	bc80      	pop	{r7}
    44a6:	4770      	bx	lr

000044a8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    44a8:	b580      	push	{r7, lr}
    44aa:	b084      	sub	sp, #16
    44ac:	af00      	add	r7, sp, #0
    44ae:	60f8      	str	r0, [r7, #12]
    44b0:	60b9      	str	r1, [r7, #8]
    44b2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    44b4:	793b      	ldrb	r3, [r7, #4]
    44b6:	461a      	mov	r2, r3
    44b8:	797b      	ldrb	r3, [r7, #5]
    44ba:	68b9      	ldr	r1, [r7, #8]
    44bc:	68f8      	ldr	r0, [r7, #12]
    44be:	f000 f8ed 	bl	469c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    44c2:	4603      	mov	r3, r0
}
    44c4:	4618      	mov	r0, r3
    44c6:	3710      	adds	r7, #16
    44c8:	46bd      	mov	sp, r7
    44ca:	bd80      	pop	{r7, pc}

000044cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr UnitTypeRhs operator*(T lhs, const UnitTypeRhs& rhs) noexcept
    44cc:	b590      	push	{r4, r7, lr}
    44ce:	b085      	sub	sp, #20
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
    44d4:	6039      	str	r1, [r7, #0]
		return UnitTypeRhs(lhs * rhs());
    44d6:	6878      	ldr	r0, [r7, #4]
    44d8:	f000 fbd0 	bl	4c7c <__aeabi_i2f>
    44dc:	4604      	mov	r4, r0
    44de:	683b      	ldr	r3, [r7, #0]
    44e0:	4618      	mov	r0, r3
    44e2:	f7fe fbdf 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    44e6:	4603      	mov	r3, r0
    44e8:	4619      	mov	r1, r3
    44ea:	4620      	mov	r0, r4
    44ec:	f000 fc1a 	bl	4d24 <__aeabi_fmul>
    44f0:	4603      	mov	r3, r0
    44f2:	461a      	mov	r2, r3
    44f4:	f107 030c 	add.w	r3, r7, #12
    44f8:	4611      	mov	r1, r2
    44fa:	4618      	mov	r0, r3
    44fc:	f7fe fa33 	bl	2966 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4500:	68fb      	ldr	r3, [r7, #12]
	}
    4502:	4618      	mov	r0, r3
    4504:	3714      	adds	r7, #20
    4506:	46bd      	mov	sp, r7
    4508:	bd90      	pop	{r4, r7, pc}

0000450a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    450a:	b590      	push	{r4, r7, lr}
    450c:	b085      	sub	sp, #20
    450e:	af00      	add	r7, sp, #0
    4510:	6078      	str	r0, [r7, #4]
    4512:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	4618      	mov	r0, r3
    4518:	f7fe fbc4 	bl	2ca4 <units::linear_scale<float>::operator()() const>
    451c:	4604      	mov	r4, r0
    451e:	6838      	ldr	r0, [r7, #0]
    4520:	f000 fbac 	bl	4c7c <__aeabi_i2f>
    4524:	4603      	mov	r3, r0
    4526:	4619      	mov	r1, r3
    4528:	4620      	mov	r0, r4
    452a:	f000 fcaf 	bl	4e8c <__aeabi_fdiv>
    452e:	4603      	mov	r3, r0
    4530:	461a      	mov	r2, r3
    4532:	f107 030c 	add.w	r3, r7, #12
    4536:	4611      	mov	r1, r2
    4538:	4618      	mov	r0, r3
    453a:	f7fe fa14 	bl	2966 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    453e:	68fb      	ldr	r3, [r7, #12]
	}
    4540:	4618      	mov	r0, r3
    4542:	3714      	adds	r7, #20
    4544:	46bd      	mov	sp, r7
    4546:	bd90      	pop	{r4, r7, pc}

00004548 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    4548:	b580      	push	{r7, lr}
    454a:	b084      	sub	sp, #16
    454c:	af00      	add	r7, sp, #0
    454e:	60f8      	str	r0, [r7, #12]
    4550:	460b      	mov	r3, r1
    4552:	80ba      	strh	r2, [r7, #4]
    4554:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    4556:	793b      	ldrb	r3, [r7, #4]
    4558:	461a      	mov	r2, r3
    455a:	797b      	ldrb	r3, [r7, #5]
    455c:	7af9      	ldrb	r1, [r7, #11]
    455e:	68f8      	ldr	r0, [r7, #12]
    4560:	f000 f8c7 	bl	46f2 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    4564:	4603      	mov	r3, r0
}
    4566:	4618      	mov	r0, r3
    4568:	3710      	adds	r7, #16
    456a:	46bd      	mov	sp, r7
    456c:	bd80      	pop	{r7, pc}

0000456e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    456e:	b480      	push	{r7}
    4570:	b083      	sub	sp, #12
    4572:	af00      	add	r7, sp, #0
    4574:	4603      	mov	r3, r0
    4576:	6039      	str	r1, [r7, #0]
    4578:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    457a:	79fa      	ldrb	r2, [r7, #7]
    457c:	683b      	ldr	r3, [r7, #0]
    457e:	fa42 f303 	asr.w	r3, r2, r3
    4582:	f003 0301 	and.w	r3, r3, #1
    4586:	2b00      	cmp	r3, #0
    4588:	bf14      	ite	ne
    458a:	2301      	movne	r3, #1
    458c:	2300      	moveq	r3, #0
    458e:	b2db      	uxtb	r3, r3
}
    4590:	4618      	mov	r0, r3
    4592:	370c      	adds	r7, #12
    4594:	46bd      	mov	sp, r7
    4596:	bc80      	pop	{r7}
    4598:	4770      	bx	lr

0000459a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    459a:	b580      	push	{r7, lr}
    459c:	b086      	sub	sp, #24
    459e:	af00      	add	r7, sp, #0
    45a0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    45a2:	6878      	ldr	r0, [r7, #4]
    45a4:	f000 f8d1 	bl	474a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    45a8:	4603      	mov	r3, r0
	}
    45aa:	4618      	mov	r0, r3
    45ac:	3718      	adds	r7, #24
    45ae:	46bd      	mov	sp, r7
    45b0:	bd80      	pop	{r7, pc}

000045b2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    45b2:	b480      	push	{r7}
    45b4:	b089      	sub	sp, #36	; 0x24
    45b6:	af00      	add	r7, sp, #0
    45b8:	60f8      	str	r0, [r7, #12]
    45ba:	607a      	str	r2, [r7, #4]
    45bc:	603b      	str	r3, [r7, #0]
    45be:	460b      	mov	r3, r1
    45c0:	817b      	strh	r3, [r7, #10]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    45c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45c6:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    45c8:	2320      	movs	r3, #32
    45ca:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    45cc:	683b      	ldr	r3, [r7, #0]
    45ce:	f1c3 0320 	rsb	r3, r3, #32
    45d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45d6:	fa22 f303 	lsr.w	r3, r2, r3
    45da:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    45dc:	697a      	ldr	r2, [r7, #20]
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	fa02 f303 	lsl.w	r3, r2, r3
    45e4:	43db      	mvns	r3, r3
    45e6:	68fa      	ldr	r2, [r7, #12]
    45e8:	4013      	ands	r3, r2
    45ea:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    45ec:	897a      	ldrh	r2, [r7, #10]
    45ee:	697b      	ldr	r3, [r7, #20]
    45f0:	401a      	ands	r2, r3
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	fa02 f303 	lsl.w	r3, r2, r3
    45f8:	68fa      	ldr	r2, [r7, #12]
    45fa:	4313      	orrs	r3, r2
    45fc:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    45fe:	68fb      	ldr	r3, [r7, #12]
}
    4600:	4618      	mov	r0, r3
    4602:	3724      	adds	r7, #36	; 0x24
    4604:	46bd      	mov	sp, r7
    4606:	bc80      	pop	{r7}
    4608:	4770      	bx	lr

0000460a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    460a:	b480      	push	{r7}
    460c:	b089      	sub	sp, #36	; 0x24
    460e:	af00      	add	r7, sp, #0
    4610:	60f8      	str	r0, [r7, #12]
    4612:	607a      	str	r2, [r7, #4]
    4614:	603b      	str	r3, [r7, #0]
    4616:	460b      	mov	r3, r1
    4618:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    461a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    461e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4620:	2320      	movs	r3, #32
    4622:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4624:	683b      	ldr	r3, [r7, #0]
    4626:	f1c3 0320 	rsb	r3, r3, #32
    462a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    462e:	fa22 f303 	lsr.w	r3, r2, r3
    4632:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4634:	697a      	ldr	r2, [r7, #20]
    4636:	687b      	ldr	r3, [r7, #4]
    4638:	fa02 f303 	lsl.w	r3, r2, r3
    463c:	43db      	mvns	r3, r3
    463e:	68fa      	ldr	r2, [r7, #12]
    4640:	4013      	ands	r3, r2
    4642:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4644:	7afa      	ldrb	r2, [r7, #11]
    4646:	697b      	ldr	r3, [r7, #20]
    4648:	401a      	ands	r2, r3
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	fa02 f303 	lsl.w	r3, r2, r3
    4650:	68fa      	ldr	r2, [r7, #12]
    4652:	4313      	orrs	r3, r2
    4654:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4656:	68fb      	ldr	r3, [r7, #12]
}
    4658:	4618      	mov	r0, r3
    465a:	3724      	adds	r7, #36	; 0x24
    465c:	46bd      	mov	sp, r7
    465e:	bc80      	pop	{r7}
    4660:	4770      	bx	lr

00004662 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    4662:	b480      	push	{r7}
    4664:	b089      	sub	sp, #36	; 0x24
    4666:	af00      	add	r7, sp, #0
    4668:	60f8      	str	r0, [r7, #12]
    466a:	60b9      	str	r1, [r7, #8]
    466c:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    466e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4672:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4674:	2320      	movs	r3, #32
    4676:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	f1c3 0320 	rsb	r3, r3, #32
    467e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4682:	fa22 f303 	lsr.w	r3, r2, r3
    4686:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    4688:	68fa      	ldr	r2, [r7, #12]
    468a:	68bb      	ldr	r3, [r7, #8]
    468c:	40da      	lsrs	r2, r3
    468e:	697b      	ldr	r3, [r7, #20]
    4690:	4013      	ands	r3, r2
}
    4692:	4618      	mov	r0, r3
    4694:	3724      	adds	r7, #36	; 0x24
    4696:	46bd      	mov	sp, r7
    4698:	bc80      	pop	{r7}
    469a:	4770      	bx	lr

0000469c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    469c:	b480      	push	{r7}
    469e:	b089      	sub	sp, #36	; 0x24
    46a0:	af00      	add	r7, sp, #0
    46a2:	60f8      	str	r0, [r7, #12]
    46a4:	60b9      	str	r1, [r7, #8]
    46a6:	607a      	str	r2, [r7, #4]
    46a8:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    46aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46ae:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    46b0:	2320      	movs	r3, #32
    46b2:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    46b4:	683b      	ldr	r3, [r7, #0]
    46b6:	f1c3 0320 	rsb	r3, r3, #32
    46ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46be:	fa22 f303 	lsr.w	r3, r2, r3
    46c2:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    46c4:	697a      	ldr	r2, [r7, #20]
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	fa02 f303 	lsl.w	r3, r2, r3
    46cc:	43db      	mvns	r3, r3
    46ce:	68fa      	ldr	r2, [r7, #12]
    46d0:	4013      	ands	r3, r2
    46d2:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    46d4:	68ba      	ldr	r2, [r7, #8]
    46d6:	697b      	ldr	r3, [r7, #20]
    46d8:	401a      	ands	r2, r3
    46da:	687b      	ldr	r3, [r7, #4]
    46dc:	fa02 f303 	lsl.w	r3, r2, r3
    46e0:	68fa      	ldr	r2, [r7, #12]
    46e2:	4313      	orrs	r3, r2
    46e4:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    46e6:	68fb      	ldr	r3, [r7, #12]
}
    46e8:	4618      	mov	r0, r3
    46ea:	3724      	adds	r7, #36	; 0x24
    46ec:	46bd      	mov	sp, r7
    46ee:	bc80      	pop	{r7}
    46f0:	4770      	bx	lr

000046f2 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    46f2:	b480      	push	{r7}
    46f4:	b089      	sub	sp, #36	; 0x24
    46f6:	af00      	add	r7, sp, #0
    46f8:	60f8      	str	r0, [r7, #12]
    46fa:	607a      	str	r2, [r7, #4]
    46fc:	603b      	str	r3, [r7, #0]
    46fe:	460b      	mov	r3, r1
    4700:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    4702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4706:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4708:	2320      	movs	r3, #32
    470a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    470c:	683b      	ldr	r3, [r7, #0]
    470e:	f1c3 0320 	rsb	r3, r3, #32
    4712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4716:	fa22 f303 	lsr.w	r3, r2, r3
    471a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    471c:	697a      	ldr	r2, [r7, #20]
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	fa02 f303 	lsl.w	r3, r2, r3
    4724:	43db      	mvns	r3, r3
    4726:	68fa      	ldr	r2, [r7, #12]
    4728:	4013      	ands	r3, r2
    472a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    472c:	7afa      	ldrb	r2, [r7, #11]
    472e:	697b      	ldr	r3, [r7, #20]
    4730:	401a      	ands	r2, r3
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	fa02 f303 	lsl.w	r3, r2, r3
    4738:	68fa      	ldr	r2, [r7, #12]
    473a:	4313      	orrs	r3, r2
    473c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    473e:	68fb      	ldr	r3, [r7, #12]
}
    4740:	4618      	mov	r0, r3
    4742:	3724      	adds	r7, #36	; 0x24
    4744:	46bd      	mov	sp, r7
    4746:	bc80      	pop	{r7}
    4748:	4770      	bx	lr

0000474a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    474a:	b480      	push	{r7}
    474c:	b085      	sub	sp, #20
    474e:	af00      	add	r7, sp, #0
    4750:	60f8      	str	r0, [r7, #12]
    4752:	7239      	strb	r1, [r7, #8]
    4754:	713a      	strb	r2, [r7, #4]
    4756:	703b      	strb	r3, [r7, #0]
			return value;
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	681b      	ldr	r3, [r3, #0]
		}
    475c:	4618      	mov	r0, r3
    475e:	3714      	adds	r7, #20
    4760:	46bd      	mov	sp, r7
    4762:	bc80      	pop	{r7}
    4764:	4770      	bx	lr
    4766:	Address 0x0000000000004766 is out of bounds.


00004768 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4768:	b580      	push	{r7, lr}
    476a:	b082      	sub	sp, #8
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
    4770:	6039      	str	r1, [r7, #0]
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	2b01      	cmp	r3, #1
    4776:	f040 80a6 	bne.w	48c6 <__static_initialization_and_destruction_0(int, int)+0x15e>
    477a:	683b      	ldr	r3, [r7, #0]
    477c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4780:	4293      	cmp	r3, r2
    4782:	f040 80a0 	bne.w	48c6 <__static_initialization_and_destruction_0(int, int)+0x15e>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    4786:	4b52      	ldr	r3, [pc, #328]	; (48d0 <__static_initialization_and_destruction_0(int, int)+0x168>)
    4788:	681b      	ldr	r3, [r3, #0]
    478a:	f003 0301 	and.w	r3, r3, #1
    478e:	2b00      	cmp	r3, #0
    4790:	d106      	bne.n	47a0 <__static_initialization_and_destruction_0(int, int)+0x38>
    4792:	4b4f      	ldr	r3, [pc, #316]	; (48d0 <__static_initialization_and_destruction_0(int, int)+0x168>)
    4794:	2201      	movs	r2, #1
    4796:	601a      	str	r2, [r3, #0]
    4798:	4b4e      	ldr	r3, [pc, #312]	; (48d4 <__static_initialization_and_destruction_0(int, int)+0x16c>)
    479a:	4618      	mov	r0, r3
    479c:	f7fb ffe8 	bl	770 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    47a0:	4b4d      	ldr	r3, [pc, #308]	; (48d8 <__static_initialization_and_destruction_0(int, int)+0x170>)
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	f003 0301 	and.w	r3, r3, #1
    47a8:	2b00      	cmp	r3, #0
    47aa:	d105      	bne.n	47b8 <__static_initialization_and_destruction_0(int, int)+0x50>
    47ac:	4b4a      	ldr	r3, [pc, #296]	; (48d8 <__static_initialization_and_destruction_0(int, int)+0x170>)
    47ae:	2201      	movs	r2, #1
    47b0:	601a      	str	r2, [r3, #0]
    47b2:	4a4a      	ldr	r2, [pc, #296]	; (48dc <__static_initialization_and_destruction_0(int, int)+0x174>)
    47b4:	4b4a      	ldr	r3, [pc, #296]	; (48e0 <__static_initialization_and_destruction_0(int, int)+0x178>)
    47b6:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * function_map =
    47b8:	4b4a      	ldr	r3, [pc, #296]	; (48e4 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	f003 0301 	and.w	r3, r3, #1
    47c0:	2b00      	cmp	r3, #0
    47c2:	d106      	bne.n	47d2 <__static_initialization_and_destruction_0(int, int)+0x6a>
    47c4:	4b47      	ldr	r3, [pc, #284]	; (48e4 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    47c6:	2201      	movs	r2, #1
    47c8:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    47ca:	4b47      	ldr	r3, [pc, #284]	; (48e8 <__static_initialization_and_destruction_0(int, int)+0x180>)
    47cc:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    47ce:	4b47      	ldr	r3, [pc, #284]	; (48ec <__static_initialization_and_destruction_0(int, int)+0x184>)
    47d0:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    47d2:	4b47      	ldr	r3, [pc, #284]	; (48f0 <__static_initialization_and_destruction_0(int, int)+0x188>)
    47d4:	681b      	ldr	r3, [r3, #0]
    47d6:	f003 0301 	and.w	r3, r3, #1
    47da:	2b00      	cmp	r3, #0
    47dc:	d106      	bne.n	47ec <__static_initialization_and_destruction_0(int, int)+0x84>
    47de:	4b44      	ldr	r3, [pc, #272]	; (48f0 <__static_initialization_and_destruction_0(int, int)+0x188>)
    47e0:	2201      	movs	r2, #1
    47e2:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    47e4:	4b40      	ldr	r3, [pc, #256]	; (48e8 <__static_initialization_and_destruction_0(int, int)+0x180>)
    47e6:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    47e8:	4a42      	ldr	r2, [pc, #264]	; (48f4 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    47ea:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    47ec:	4b42      	ldr	r3, [pc, #264]	; (48f8 <__static_initialization_and_destruction_0(int, int)+0x190>)
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	f003 0301 	and.w	r3, r3, #1
    47f4:	2b00      	cmp	r3, #0
    47f6:	d106      	bne.n	4806 <__static_initialization_and_destruction_0(int, int)+0x9e>
    47f8:	4b3f      	ldr	r3, [pc, #252]	; (48f8 <__static_initialization_and_destruction_0(int, int)+0x190>)
    47fa:	2201      	movs	r2, #1
    47fc:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    47fe:	4b3a      	ldr	r3, [pc, #232]	; (48e8 <__static_initialization_and_destruction_0(int, int)+0x180>)
    4800:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    4802:	4a3e      	ldr	r2, [pc, #248]	; (48fc <__static_initialization_and_destruction_0(int, int)+0x194>)
    4804:	6013      	str	r3, [r2, #0]
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    4806:	4b3e      	ldr	r3, [pc, #248]	; (4900 <__static_initialization_and_destruction_0(int, int)+0x198>)
    4808:	681b      	ldr	r3, [r3, #0]
    480a:	f003 0301 	and.w	r3, r3, #1
    480e:	2b00      	cmp	r3, #0
    4810:	d105      	bne.n	481e <__static_initialization_and_destruction_0(int, int)+0xb6>
    4812:	4b3b      	ldr	r3, [pc, #236]	; (4900 <__static_initialization_and_destruction_0(int, int)+0x198>)
    4814:	2201      	movs	r2, #1
    4816:	601a      	str	r2, [r3, #0]
    4818:	4a30      	ldr	r2, [pc, #192]	; (48dc <__static_initialization_and_destruction_0(int, int)+0x174>)
    481a:	4b3a      	ldr	r3, [pc, #232]	; (4904 <__static_initialization_and_destruction_0(int, int)+0x19c>)
    481c:	601a      	str	r2, [r3, #0]
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    481e:	4b3a      	ldr	r3, [pc, #232]	; (4908 <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	f003 0301 	and.w	r3, r3, #1
    4826:	2b00      	cmp	r3, #0
    4828:	d105      	bne.n	4836 <__static_initialization_and_destruction_0(int, int)+0xce>
    482a:	4b37      	ldr	r3, [pc, #220]	; (4908 <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    482c:	2201      	movs	r2, #1
    482e:	601a      	str	r2, [r3, #0]
    4830:	4a2d      	ldr	r2, [pc, #180]	; (48e8 <__static_initialization_and_destruction_0(int, int)+0x180>)
    4832:	4b36      	ldr	r3, [pc, #216]	; (490c <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    4834:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    4836:	4b36      	ldr	r3, [pc, #216]	; (4910 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    4838:	681b      	ldr	r3, [r3, #0]
    483a:	f003 0301 	and.w	r3, r3, #1
    483e:	2b00      	cmp	r3, #0
    4840:	d105      	bne.n	484e <__static_initialization_and_destruction_0(int, int)+0xe6>
    4842:	4b33      	ldr	r3, [pc, #204]	; (4910 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    4844:	2201      	movs	r2, #1
    4846:	601a      	str	r2, [r3, #0]
    };
    4848:	4a32      	ldr	r2, [pc, #200]	; (4914 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    484a:	4b33      	ldr	r3, [pc, #204]	; (4918 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    484c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    484e:	4b33      	ldr	r3, [pc, #204]	; (491c <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    4850:	681b      	ldr	r3, [r3, #0]
    4852:	f003 0301 	and.w	r3, r3, #1
    4856:	2b00      	cmp	r3, #0
    4858:	d105      	bne.n	4866 <__static_initialization_and_destruction_0(int, int)+0xfe>
    485a:	4b30      	ldr	r3, [pc, #192]	; (491c <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    485c:	2201      	movs	r2, #1
    485e:	601a      	str	r2, [r3, #0]
    };
    4860:	4a2f      	ldr	r2, [pc, #188]	; (4920 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    4862:	4b30      	ldr	r3, [pc, #192]	; (4924 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    4864:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    4866:	4b30      	ldr	r3, [pc, #192]	; (4928 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	f003 0301 	and.w	r3, r3, #1
    486e:	2b00      	cmp	r3, #0
    4870:	d105      	bne.n	487e <__static_initialization_and_destruction_0(int, int)+0x116>
    4872:	4b2d      	ldr	r3, [pc, #180]	; (4928 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    4874:	2201      	movs	r2, #1
    4876:	601a      	str	r2, [r3, #0]
    };
    4878:	4a2c      	ldr	r2, [pc, #176]	; (492c <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    487a:	4b2d      	ldr	r3, [pc, #180]	; (4930 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    487c:	601a      	str	r2, [r3, #0]
  inline static const Pin kUart3Tx = Pin(4, 28);
  inline static const Pin kUart3Rx = Pin(4, 29);

 public:
  /// Definition for uart port 0 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart0 = {
    487e:	4b2d      	ldr	r3, [pc, #180]	; (4934 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	f003 0301 	and.w	r3, r3, #1
    4886:	2b00      	cmp	r3, #0
    4888:	d105      	bne.n	4896 <__static_initialization_and_destruction_0(int, int)+0x12e>
    488a:	4b2a      	ldr	r3, [pc, #168]	; (4934 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    488c:	2201      	movs	r2, #1
    488e:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart0,
    .tx             = kUart0Tx,
    .rx             = kUart0Rx,
    .tx_function_id = 0b01,
    .rx_function_id = 0b01,
  };
    4890:	4a29      	ldr	r2, [pc, #164]	; (4938 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    4892:	4b2a      	ldr	r3, [pc, #168]	; (493c <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    4894:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 1 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart2 = {
    4896:	4b2a      	ldr	r3, [pc, #168]	; (4940 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	f003 0301 	and.w	r3, r3, #1
    489e:	2b00      	cmp	r3, #0
    48a0:	d105      	bne.n	48ae <__static_initialization_and_destruction_0(int, int)+0x146>
    48a2:	4b27      	ldr	r3, [pc, #156]	; (4940 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    48a4:	2201      	movs	r2, #1
    48a6:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart2,
    .tx             = kUart2Tx,
    .rx             = kUart2Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    48a8:	4a1a      	ldr	r2, [pc, #104]	; (4914 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    48aa:	4b26      	ldr	r3, [pc, #152]	; (4944 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    48ac:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 2 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart3 = {
    48ae:	4b26      	ldr	r3, [pc, #152]	; (4948 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    48b0:	681b      	ldr	r3, [r3, #0]
    48b2:	f003 0301 	and.w	r3, r3, #1
    48b6:	2b00      	cmp	r3, #0
    48b8:	d105      	bne.n	48c6 <__static_initialization_and_destruction_0(int, int)+0x15e>
    48ba:	4b23      	ldr	r3, [pc, #140]	; (4948 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    48bc:	2201      	movs	r2, #1
    48be:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart3,
    .tx             = kUart3Tx,
    .rx             = kUart3Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    48c0:	4a17      	ldr	r2, [pc, #92]	; (4920 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    48c2:	4b22      	ldr	r3, [pc, #136]	; (494c <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    48c4:	601a      	str	r2, [r3, #0]
    48c6:	bf00      	nop
    48c8:	3708      	adds	r7, #8
    48ca:	46bd      	mov	sp, r7
    48cc:	bd80      	pop	{r7, pc}
    48ce:	bf00      	nop
    48d0:	2007c250 	.word	0x2007c250
    48d4:	2007c150 	.word	0x2007c150
    48d8:	2007c2f8 	.word	0x2007c2f8
    48dc:	400fc000 	.word	0x400fc000
    48e0:	2007c2e0 	.word	0x2007c2e0
    48e4:	2007c2fc 	.word	0x2007c2fc
    48e8:	4002c000 	.word	0x4002c000
    48ec:	2007c2e4 	.word	0x2007c2e4
    48f0:	2007c300 	.word	0x2007c300
    48f4:	2007c2e8 	.word	0x2007c2e8
    48f8:	2007c304 	.word	0x2007c304
    48fc:	2007c2ec 	.word	0x2007c2ec
    4900:	2007c308 	.word	0x2007c308
    4904:	2007c2f0 	.word	0x2007c2f0
    4908:	2007c140 	.word	0x2007c140
    490c:	2007c13c 	.word	0x2007c13c
    4910:	2007c30c 	.word	0x2007c30c
    4914:	40098000 	.word	0x40098000
    4918:	2007c024 	.word	0x2007c024
    491c:	2007c310 	.word	0x2007c310
    4920:	4009c000 	.word	0x4009c000
    4924:	2007c038 	.word	0x2007c038
    4928:	2007c314 	.word	0x2007c314
    492c:	400a4000 	.word	0x400a4000
    4930:	2007c04c 	.word	0x2007c04c
    4934:	2007c318 	.word	0x2007c318
    4938:	4000c000 	.word	0x4000c000
    493c:	2007c060 	.word	0x2007c060
    4940:	2007c31c 	.word	0x2007c31c
    4944:	2007c074 	.word	0x2007c074
    4948:	2007c320 	.word	0x2007c320
    494c:	2007c088 	.word	0x2007c088

00004950 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    4950:	b580      	push	{r7, lr}
    4952:	af00      	add	r7, sp, #0
    4954:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4958:	2001      	movs	r0, #1
    495a:	f7ff ff05 	bl	4768 <__static_initialization_and_destruction_0(int, int)>
    495e:	bd80      	pop	{r7, pc}

00004960 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4960:	4b07      	ldr	r3, [pc, #28]	; (4980 <pxCurrentTCBConst2>)
    4962:	6819      	ldr	r1, [r3, #0]
    4964:	6808      	ldr	r0, [r1, #0]
    4966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    496a:	f380 8809 	msr	PSP, r0
    496e:	f3bf 8f6f 	isb	sy
    4972:	f04f 0000 	mov.w	r0, #0
    4976:	f380 8811 	msr	BASEPRI, r0
    497a:	f04e 0e0d 	orr.w	lr, lr, #13
    497e:	4770      	bx	lr

00004980 <pxCurrentTCBConst2>:
    4980:	2007c254 	.word	0x2007c254
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    4984:	bf00      	nop
    4986:	bf00      	nop
    4988:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    498c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004990 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4990:	f3ef 8009 	mrs	r0, PSP
    4994:	f3bf 8f6f 	isb	sy
    4998:	4b0d      	ldr	r3, [pc, #52]	; (49d0 <pxCurrentTCBConst>)
    499a:	681a      	ldr	r2, [r3, #0]
    499c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    49a0:	6010      	str	r0, [r2, #0]
    49a2:	e92d 4008 	stmdb	sp!, {r3, lr}
    49a6:	f04f 0028 	mov.w	r0, #40	; 0x28
    49aa:	f380 8811 	msr	BASEPRI, r0
    49ae:	f7fc fd0d 	bl	13cc <vTaskSwitchContext>
    49b2:	f04f 0000 	mov.w	r0, #0
    49b6:	f380 8811 	msr	BASEPRI, r0
    49ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    49be:	6819      	ldr	r1, [r3, #0]
    49c0:	6808      	ldr	r0, [r1, #0]
    49c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    49c6:	f380 8809 	msr	PSP, r0
    49ca:	f3bf 8f6f 	isb	sy
    49ce:	4770      	bx	lr

000049d0 <pxCurrentTCBConst>:
    49d0:	2007c254 	.word	0x2007c254
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    49d4:	bf00      	nop
    49d6:	bf00      	nop

000049d8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    49d8:	b480      	push	{r7}
    49da:	b083      	sub	sp, #12
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
    49e0:	6039      	str	r1, [r7, #0]
  return 1;
    49e2:	2301      	movs	r3, #1
}
    49e4:	4618      	mov	r0, r3
    49e6:	370c      	adds	r7, #12
    49e8:	46bd      	mov	sp, r7
    49ea:	bc80      	pop	{r7}
    49ec:	4770      	bx	lr

000049ee <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    49ee:	b480      	push	{r7}
    49f0:	b083      	sub	sp, #12
    49f2:	af00      	add	r7, sp, #0
    49f4:	6078      	str	r0, [r7, #4]
    49f6:	6039      	str	r1, [r7, #0]
  return 0;
    49f8:	2300      	movs	r3, #0
}
    49fa:	4618      	mov	r0, r3
    49fc:	370c      	adds	r7, #12
    49fe:	46bd      	mov	sp, r7
    4a00:	bc80      	pop	{r7}
    4a02:	4770      	bx	lr

00004a04 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4a04:	b480      	push	{r7}
    4a06:	b083      	sub	sp, #12
    4a08:	af00      	add	r7, sp, #0
    4a0a:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    4a0c:	4a03      	ldr	r2, [pc, #12]	; (4a1c <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x18>)
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	6013      	str	r3, [r2, #0]
}
    4a12:	bf00      	nop
    4a14:	370c      	adds	r7, #12
    4a16:	46bd      	mov	sp, r7
    4a18:	bc80      	pop	{r7}
    4a1a:	4770      	bx	lr
    4a1c:	2007c008 	.word	0x2007c008

00004a20 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4a20:	b480      	push	{r7}
    4a22:	b083      	sub	sp, #12
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    4a28:	4a03      	ldr	r2, [pc, #12]	; (4a38 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x18>)
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	6013      	str	r3, [r2, #0]
}
    4a2e:	bf00      	nop
    4a30:	370c      	adds	r7, #12
    4a32:	46bd      	mov	sp, r7
    4a34:	bc80      	pop	{r7}
    4a36:	4770      	bx	lr
    4a38:	2007c00c 	.word	0x2007c00c

00004a3c <__cxa_pure_virtual>:
    4a3c:	b508      	push	{r3, lr}
    4a3e:	f000 f80d 	bl	4a5c <std::terminate()>

00004a42 <__cxxabiv1::__terminate(void (*)())>:
    4a42:	b508      	push	{r3, lr}
    4a44:	4780      	blx	r0
    4a46:	f001 fc8d 	bl	6364 <abort>
    4a4a:	Address 0x0000000000004a4a is out of bounds.


00004a4c <std::get_terminate()>:
    4a4c:	4b02      	ldr	r3, [pc, #8]	; (4a58 <std::get_terminate()+0xc>)
    4a4e:	6818      	ldr	r0, [r3, #0]
    4a50:	f3bf 8f5b 	dmb	ish
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	2007c0b8 	.word	0x2007c0b8

00004a5c <std::terminate()>:
    4a5c:	b508      	push	{r3, lr}
    4a5e:	f7ff fff5 	bl	4a4c <std::get_terminate()>
    4a62:	f7ff ffee 	bl	4a42 <__cxxabiv1::__terminate(void (*)())>
    4a66:	Address 0x0000000000004a66 is out of bounds.


00004a68 <__aeabi_d2f>:
    4a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4a70:	bf24      	itt	cs
    4a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4a7a:	d90d      	bls.n	4a98 <__aeabi_d2f+0x30>
    4a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4a90:	bf08      	it	eq
    4a92:	f020 0001 	biceq.w	r0, r0, #1
    4a96:	4770      	bx	lr
    4a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4a9c:	d121      	bne.n	4ae2 <__aeabi_d2f+0x7a>
    4a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4aa2:	bfbc      	itt	lt
    4aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4aa8:	4770      	bxlt	lr
    4aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4ab2:	f1c2 0218 	rsb	r2, r2, #24
    4ab6:	f1c2 0c20 	rsb	ip, r2, #32
    4aba:	fa10 f30c 	lsls.w	r3, r0, ip
    4abe:	fa20 f002 	lsr.w	r0, r0, r2
    4ac2:	bf18      	it	ne
    4ac4:	f040 0001 	orrne.w	r0, r0, #1
    4ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
    4ad4:	ea40 000c 	orr.w	r0, r0, ip
    4ad8:	fa23 f302 	lsr.w	r3, r3, r2
    4adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4ae0:	e7cc      	b.n	4a7c <__aeabi_d2f+0x14>
    4ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4ae6:	d107      	bne.n	4af8 <__aeabi_d2f+0x90>
    4ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4aec:	bf1e      	ittt	ne
    4aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4af6:	4770      	bxne	lr
    4af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop

00004b08 <__aeabi_frsub>:
    4b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4b0c:	e002      	b.n	4b14 <__addsf3>
    4b0e:	bf00      	nop

00004b10 <__aeabi_fsub>:
    4b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004b14 <__addsf3>:
    4b14:	0042      	lsls	r2, r0, #1
    4b16:	bf1f      	itttt	ne
    4b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4b1c:	ea92 0f03 	teqne	r2, r3
    4b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4b28:	d06a      	beq.n	4c00 <__addsf3+0xec>
    4b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4b32:	bfc1      	itttt	gt
    4b34:	18d2      	addgt	r2, r2, r3
    4b36:	4041      	eorgt	r1, r0
    4b38:	4048      	eorgt	r0, r1
    4b3a:	4041      	eorgt	r1, r0
    4b3c:	bfb8      	it	lt
    4b3e:	425b      	neglt	r3, r3
    4b40:	2b19      	cmp	r3, #25
    4b42:	bf88      	it	hi
    4b44:	4770      	bxhi	lr
    4b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4b52:	bf18      	it	ne
    4b54:	4240      	negne	r0, r0
    4b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4b62:	bf18      	it	ne
    4b64:	4249      	negne	r1, r1
    4b66:	ea92 0f03 	teq	r2, r3
    4b6a:	d03f      	beq.n	4bec <__addsf3+0xd8>
    4b6c:	f1a2 0201 	sub.w	r2, r2, #1
    4b70:	fa41 fc03 	asr.w	ip, r1, r3
    4b74:	eb10 000c 	adds.w	r0, r0, ip
    4b78:	f1c3 0320 	rsb	r3, r3, #32
    4b7c:	fa01 f103 	lsl.w	r1, r1, r3
    4b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4b84:	d502      	bpl.n	4b8c <__addsf3+0x78>
    4b86:	4249      	negs	r1, r1
    4b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4b90:	d313      	bcc.n	4bba <__addsf3+0xa6>
    4b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4b96:	d306      	bcc.n	4ba6 <__addsf3+0x92>
    4b98:	0840      	lsrs	r0, r0, #1
    4b9a:	ea4f 0131 	mov.w	r1, r1, rrx
    4b9e:	f102 0201 	add.w	r2, r2, #1
    4ba2:	2afe      	cmp	r2, #254	; 0xfe
    4ba4:	d251      	bcs.n	4c4a <__addsf3+0x136>
    4ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4bae:	bf08      	it	eq
    4bb0:	f020 0001 	biceq.w	r0, r0, #1
    4bb4:	ea40 0003 	orr.w	r0, r0, r3
    4bb8:	4770      	bx	lr
    4bba:	0049      	lsls	r1, r1, #1
    4bbc:	eb40 0000 	adc.w	r0, r0, r0
    4bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4bc4:	f1a2 0201 	sub.w	r2, r2, #1
    4bc8:	d1ed      	bne.n	4ba6 <__addsf3+0x92>
    4bca:	fab0 fc80 	clz	ip, r0
    4bce:	f1ac 0c08 	sub.w	ip, ip, #8
    4bd2:	ebb2 020c 	subs.w	r2, r2, ip
    4bd6:	fa00 f00c 	lsl.w	r0, r0, ip
    4bda:	bfaa      	itet	ge
    4bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4be0:	4252      	neglt	r2, r2
    4be2:	4318      	orrge	r0, r3
    4be4:	bfbc      	itt	lt
    4be6:	40d0      	lsrlt	r0, r2
    4be8:	4318      	orrlt	r0, r3
    4bea:	4770      	bx	lr
    4bec:	f092 0f00 	teq	r2, #0
    4bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4bf4:	bf06      	itte	eq
    4bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4bfa:	3201      	addeq	r2, #1
    4bfc:	3b01      	subne	r3, #1
    4bfe:	e7b5      	b.n	4b6c <__addsf3+0x58>
    4c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4c08:	bf18      	it	ne
    4c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4c0e:	d021      	beq.n	4c54 <__addsf3+0x140>
    4c10:	ea92 0f03 	teq	r2, r3
    4c14:	d004      	beq.n	4c20 <__addsf3+0x10c>
    4c16:	f092 0f00 	teq	r2, #0
    4c1a:	bf08      	it	eq
    4c1c:	4608      	moveq	r0, r1
    4c1e:	4770      	bx	lr
    4c20:	ea90 0f01 	teq	r0, r1
    4c24:	bf1c      	itt	ne
    4c26:	2000      	movne	r0, #0
    4c28:	4770      	bxne	lr
    4c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4c2e:	d104      	bne.n	4c3a <__addsf3+0x126>
    4c30:	0040      	lsls	r0, r0, #1
    4c32:	bf28      	it	cs
    4c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4c38:	4770      	bx	lr
    4c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4c3e:	bf3c      	itt	cc
    4c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4c44:	4770      	bxcc	lr
    4c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c52:	4770      	bx	lr
    4c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4c58:	bf16      	itet	ne
    4c5a:	4608      	movne	r0, r1
    4c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4c60:	4601      	movne	r1, r0
    4c62:	0242      	lsls	r2, r0, #9
    4c64:	bf06      	itte	eq
    4c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4c6a:	ea90 0f01 	teqeq	r0, r1
    4c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4c72:	4770      	bx	lr

00004c74 <__aeabi_ui2f>:
    4c74:	f04f 0300 	mov.w	r3, #0
    4c78:	e004      	b.n	4c84 <__aeabi_i2f+0x8>
    4c7a:	bf00      	nop

00004c7c <__aeabi_i2f>:
    4c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4c80:	bf48      	it	mi
    4c82:	4240      	negmi	r0, r0
    4c84:	ea5f 0c00 	movs.w	ip, r0
    4c88:	bf08      	it	eq
    4c8a:	4770      	bxeq	lr
    4c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4c90:	4601      	mov	r1, r0
    4c92:	f04f 0000 	mov.w	r0, #0
    4c96:	e01c      	b.n	4cd2 <__aeabi_l2f+0x2a>

00004c98 <__aeabi_ul2f>:
    4c98:	ea50 0201 	orrs.w	r2, r0, r1
    4c9c:	bf08      	it	eq
    4c9e:	4770      	bxeq	lr
    4ca0:	f04f 0300 	mov.w	r3, #0
    4ca4:	e00a      	b.n	4cbc <__aeabi_l2f+0x14>
    4ca6:	bf00      	nop

00004ca8 <__aeabi_l2f>:
    4ca8:	ea50 0201 	orrs.w	r2, r0, r1
    4cac:	bf08      	it	eq
    4cae:	4770      	bxeq	lr
    4cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4cb4:	d502      	bpl.n	4cbc <__aeabi_l2f+0x14>
    4cb6:	4240      	negs	r0, r0
    4cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4cbc:	ea5f 0c01 	movs.w	ip, r1
    4cc0:	bf02      	ittt	eq
    4cc2:	4684      	moveq	ip, r0
    4cc4:	4601      	moveq	r1, r0
    4cc6:	2000      	moveq	r0, #0
    4cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4ccc:	bf08      	it	eq
    4cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4cd6:	fabc f28c 	clz	r2, ip
    4cda:	3a08      	subs	r2, #8
    4cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4ce0:	db10      	blt.n	4d04 <__aeabi_l2f+0x5c>
    4ce2:	fa01 fc02 	lsl.w	ip, r1, r2
    4ce6:	4463      	add	r3, ip
    4ce8:	fa00 fc02 	lsl.w	ip, r0, r2
    4cec:	f1c2 0220 	rsb	r2, r2, #32
    4cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4cf4:	fa20 f202 	lsr.w	r2, r0, r2
    4cf8:	eb43 0002 	adc.w	r0, r3, r2
    4cfc:	bf08      	it	eq
    4cfe:	f020 0001 	biceq.w	r0, r0, #1
    4d02:	4770      	bx	lr
    4d04:	f102 0220 	add.w	r2, r2, #32
    4d08:	fa01 fc02 	lsl.w	ip, r1, r2
    4d0c:	f1c2 0220 	rsb	r2, r2, #32
    4d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4d14:	fa21 f202 	lsr.w	r2, r1, r2
    4d18:	eb43 0002 	adc.w	r0, r3, r2
    4d1c:	bf08      	it	eq
    4d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4d22:	4770      	bx	lr

00004d24 <__aeabi_fmul>:
    4d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4d2c:	bf1e      	ittt	ne
    4d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4d32:	ea92 0f0c 	teqne	r2, ip
    4d36:	ea93 0f0c 	teqne	r3, ip
    4d3a:	d06f      	beq.n	4e1c <__aeabi_fmul+0xf8>
    4d3c:	441a      	add	r2, r3
    4d3e:	ea80 0c01 	eor.w	ip, r0, r1
    4d42:	0240      	lsls	r0, r0, #9
    4d44:	bf18      	it	ne
    4d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    4d4a:	d01e      	beq.n	4d8a <__aeabi_fmul+0x66>
    4d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    4d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    4d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    4d58:	fba0 3101 	umull	r3, r1, r0, r1
    4d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    4d64:	bf3e      	ittt	cc
    4d66:	0049      	lslcc	r1, r1, #1
    4d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    4d6c:	005b      	lslcc	r3, r3, #1
    4d6e:	ea40 0001 	orr.w	r0, r0, r1
    4d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    4d76:	2afd      	cmp	r2, #253	; 0xfd
    4d78:	d81d      	bhi.n	4db6 <__aeabi_fmul+0x92>
    4d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4d82:	bf08      	it	eq
    4d84:	f020 0001 	biceq.w	r0, r0, #1
    4d88:	4770      	bx	lr
    4d8a:	f090 0f00 	teq	r0, #0
    4d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4d92:	bf08      	it	eq
    4d94:	0249      	lsleq	r1, r1, #9
    4d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    4d9e:	3a7f      	subs	r2, #127	; 0x7f
    4da0:	bfc2      	ittt	gt
    4da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4daa:	4770      	bxgt	lr
    4dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4db0:	f04f 0300 	mov.w	r3, #0
    4db4:	3a01      	subs	r2, #1
    4db6:	dc5d      	bgt.n	4e74 <__aeabi_fmul+0x150>
    4db8:	f112 0f19 	cmn.w	r2, #25
    4dbc:	bfdc      	itt	le
    4dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    4dc2:	4770      	bxle	lr
    4dc4:	f1c2 0200 	rsb	r2, r2, #0
    4dc8:	0041      	lsls	r1, r0, #1
    4dca:	fa21 f102 	lsr.w	r1, r1, r2
    4dce:	f1c2 0220 	rsb	r2, r2, #32
    4dd2:	fa00 fc02 	lsl.w	ip, r0, r2
    4dd6:	ea5f 0031 	movs.w	r0, r1, rrx
    4dda:	f140 0000 	adc.w	r0, r0, #0
    4dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    4de2:	bf08      	it	eq
    4de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4de8:	4770      	bx	lr
    4dea:	f092 0f00 	teq	r2, #0
    4dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4df2:	bf02      	ittt	eq
    4df4:	0040      	lsleq	r0, r0, #1
    4df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4dfa:	3a01      	subeq	r2, #1
    4dfc:	d0f9      	beq.n	4df2 <__aeabi_fmul+0xce>
    4dfe:	ea40 000c 	orr.w	r0, r0, ip
    4e02:	f093 0f00 	teq	r3, #0
    4e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4e0a:	bf02      	ittt	eq
    4e0c:	0049      	lsleq	r1, r1, #1
    4e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4e12:	3b01      	subeq	r3, #1
    4e14:	d0f9      	beq.n	4e0a <__aeabi_fmul+0xe6>
    4e16:	ea41 010c 	orr.w	r1, r1, ip
    4e1a:	e78f      	b.n	4d3c <__aeabi_fmul+0x18>
    4e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4e20:	ea92 0f0c 	teq	r2, ip
    4e24:	bf18      	it	ne
    4e26:	ea93 0f0c 	teqne	r3, ip
    4e2a:	d00a      	beq.n	4e42 <__aeabi_fmul+0x11e>
    4e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4e30:	bf18      	it	ne
    4e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4e36:	d1d8      	bne.n	4dea <__aeabi_fmul+0xc6>
    4e38:	ea80 0001 	eor.w	r0, r0, r1
    4e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4e40:	4770      	bx	lr
    4e42:	f090 0f00 	teq	r0, #0
    4e46:	bf17      	itett	ne
    4e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    4e4c:	4608      	moveq	r0, r1
    4e4e:	f091 0f00 	teqne	r1, #0
    4e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    4e56:	d014      	beq.n	4e82 <__aeabi_fmul+0x15e>
    4e58:	ea92 0f0c 	teq	r2, ip
    4e5c:	d101      	bne.n	4e62 <__aeabi_fmul+0x13e>
    4e5e:	0242      	lsls	r2, r0, #9
    4e60:	d10f      	bne.n	4e82 <__aeabi_fmul+0x15e>
    4e62:	ea93 0f0c 	teq	r3, ip
    4e66:	d103      	bne.n	4e70 <__aeabi_fmul+0x14c>
    4e68:	024b      	lsls	r3, r1, #9
    4e6a:	bf18      	it	ne
    4e6c:	4608      	movne	r0, r1
    4e6e:	d108      	bne.n	4e82 <__aeabi_fmul+0x15e>
    4e70:	ea80 0001 	eor.w	r0, r0, r1
    4e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4e80:	4770      	bx	lr
    4e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    4e8a:	4770      	bx	lr

00004e8c <__aeabi_fdiv>:
    4e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4e94:	bf1e      	ittt	ne
    4e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4e9a:	ea92 0f0c 	teqne	r2, ip
    4e9e:	ea93 0f0c 	teqne	r3, ip
    4ea2:	d069      	beq.n	4f78 <__aeabi_fdiv+0xec>
    4ea4:	eba2 0203 	sub.w	r2, r2, r3
    4ea8:	ea80 0c01 	eor.w	ip, r0, r1
    4eac:	0249      	lsls	r1, r1, #9
    4eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
    4eb2:	d037      	beq.n	4f24 <__aeabi_fdiv+0x98>
    4eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    4ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    4ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4ec4:	428b      	cmp	r3, r1
    4ec6:	bf38      	it	cc
    4ec8:	005b      	lslcc	r3, r3, #1
    4eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    4ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    4ed2:	428b      	cmp	r3, r1
    4ed4:	bf24      	itt	cs
    4ed6:	1a5b      	subcs	r3, r3, r1
    4ed8:	ea40 000c 	orrcs.w	r0, r0, ip
    4edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    4ee0:	bf24      	itt	cs
    4ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    4ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    4eee:	bf24      	itt	cs
    4ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    4ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4efc:	bf24      	itt	cs
    4efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    4f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4f06:	011b      	lsls	r3, r3, #4
    4f08:	bf18      	it	ne
    4f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    4f0e:	d1e0      	bne.n	4ed2 <__aeabi_fdiv+0x46>
    4f10:	2afd      	cmp	r2, #253	; 0xfd
    4f12:	f63f af50 	bhi.w	4db6 <__aeabi_fmul+0x92>
    4f16:	428b      	cmp	r3, r1
    4f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4f1c:	bf08      	it	eq
    4f1e:	f020 0001 	biceq.w	r0, r0, #1
    4f22:	4770      	bx	lr
    4f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4f2c:	327f      	adds	r2, #127	; 0x7f
    4f2e:	bfc2      	ittt	gt
    4f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4f38:	4770      	bxgt	lr
    4f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4f3e:	f04f 0300 	mov.w	r3, #0
    4f42:	3a01      	subs	r2, #1
    4f44:	e737      	b.n	4db6 <__aeabi_fmul+0x92>
    4f46:	f092 0f00 	teq	r2, #0
    4f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4f4e:	bf02      	ittt	eq
    4f50:	0040      	lsleq	r0, r0, #1
    4f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4f56:	3a01      	subeq	r2, #1
    4f58:	d0f9      	beq.n	4f4e <__aeabi_fdiv+0xc2>
    4f5a:	ea40 000c 	orr.w	r0, r0, ip
    4f5e:	f093 0f00 	teq	r3, #0
    4f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4f66:	bf02      	ittt	eq
    4f68:	0049      	lsleq	r1, r1, #1
    4f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4f6e:	3b01      	subeq	r3, #1
    4f70:	d0f9      	beq.n	4f66 <__aeabi_fdiv+0xda>
    4f72:	ea41 010c 	orr.w	r1, r1, ip
    4f76:	e795      	b.n	4ea4 <__aeabi_fdiv+0x18>
    4f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4f7c:	ea92 0f0c 	teq	r2, ip
    4f80:	d108      	bne.n	4f94 <__aeabi_fdiv+0x108>
    4f82:	0242      	lsls	r2, r0, #9
    4f84:	f47f af7d 	bne.w	4e82 <__aeabi_fmul+0x15e>
    4f88:	ea93 0f0c 	teq	r3, ip
    4f8c:	f47f af70 	bne.w	4e70 <__aeabi_fmul+0x14c>
    4f90:	4608      	mov	r0, r1
    4f92:	e776      	b.n	4e82 <__aeabi_fmul+0x15e>
    4f94:	ea93 0f0c 	teq	r3, ip
    4f98:	d104      	bne.n	4fa4 <__aeabi_fdiv+0x118>
    4f9a:	024b      	lsls	r3, r1, #9
    4f9c:	f43f af4c 	beq.w	4e38 <__aeabi_fmul+0x114>
    4fa0:	4608      	mov	r0, r1
    4fa2:	e76e      	b.n	4e82 <__aeabi_fmul+0x15e>
    4fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4fa8:	bf18      	it	ne
    4faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4fae:	d1ca      	bne.n	4f46 <__aeabi_fdiv+0xba>
    4fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    4fb4:	f47f af5c 	bne.w	4e70 <__aeabi_fmul+0x14c>
    4fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    4fbc:	f47f af3c 	bne.w	4e38 <__aeabi_fmul+0x114>
    4fc0:	e75f      	b.n	4e82 <__aeabi_fmul+0x15e>
    4fc2:	bf00      	nop

00004fc4 <__gesf2>:
    4fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4fc8:	e006      	b.n	4fd8 <__cmpsf2+0x4>
    4fca:	bf00      	nop

00004fcc <__lesf2>:
    4fcc:	f04f 0c01 	mov.w	ip, #1
    4fd0:	e002      	b.n	4fd8 <__cmpsf2+0x4>
    4fd2:	bf00      	nop

00004fd4 <__cmpsf2>:
    4fd4:	f04f 0c01 	mov.w	ip, #1
    4fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
    4fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4fe8:	bf18      	it	ne
    4fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4fee:	d011      	beq.n	5014 <__cmpsf2+0x40>
    4ff0:	b001      	add	sp, #4
    4ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    4ff6:	bf18      	it	ne
    4ff8:	ea90 0f01 	teqne	r0, r1
    4ffc:	bf58      	it	pl
    4ffe:	ebb2 0003 	subspl.w	r0, r2, r3
    5002:	bf88      	it	hi
    5004:	17c8      	asrhi	r0, r1, #31
    5006:	bf38      	it	cc
    5008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    500c:	bf18      	it	ne
    500e:	f040 0001 	orrne.w	r0, r0, #1
    5012:	4770      	bx	lr
    5014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5018:	d102      	bne.n	5020 <__cmpsf2+0x4c>
    501a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    501e:	d105      	bne.n	502c <__cmpsf2+0x58>
    5020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    5024:	d1e4      	bne.n	4ff0 <__cmpsf2+0x1c>
    5026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    502a:	d0e1      	beq.n	4ff0 <__cmpsf2+0x1c>
    502c:	f85d 0b04 	ldr.w	r0, [sp], #4
    5030:	4770      	bx	lr
    5032:	bf00      	nop

00005034 <__aeabi_cfrcmple>:
    5034:	4684      	mov	ip, r0
    5036:	4608      	mov	r0, r1
    5038:	4661      	mov	r1, ip
    503a:	e7ff      	b.n	503c <__aeabi_cfcmpeq>

0000503c <__aeabi_cfcmpeq>:
    503c:	b50f      	push	{r0, r1, r2, r3, lr}
    503e:	f7ff ffc9 	bl	4fd4 <__cmpsf2>
    5042:	2800      	cmp	r0, #0
    5044:	bf48      	it	mi
    5046:	f110 0f00 	cmnmi.w	r0, #0
    504a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000504c <__aeabi_fcmpeq>:
    504c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5050:	f7ff fff4 	bl	503c <__aeabi_cfcmpeq>
    5054:	bf0c      	ite	eq
    5056:	2001      	moveq	r0, #1
    5058:	2000      	movne	r0, #0
    505a:	f85d fb08 	ldr.w	pc, [sp], #8
    505e:	bf00      	nop

00005060 <__aeabi_fcmplt>:
    5060:	f84d ed08 	str.w	lr, [sp, #-8]!
    5064:	f7ff ffea 	bl	503c <__aeabi_cfcmpeq>
    5068:	bf34      	ite	cc
    506a:	2001      	movcc	r0, #1
    506c:	2000      	movcs	r0, #0
    506e:	f85d fb08 	ldr.w	pc, [sp], #8
    5072:	bf00      	nop

00005074 <__aeabi_fcmple>:
    5074:	f84d ed08 	str.w	lr, [sp, #-8]!
    5078:	f7ff ffe0 	bl	503c <__aeabi_cfcmpeq>
    507c:	bf94      	ite	ls
    507e:	2001      	movls	r0, #1
    5080:	2000      	movhi	r0, #0
    5082:	f85d fb08 	ldr.w	pc, [sp], #8
    5086:	bf00      	nop

00005088 <__aeabi_fcmpge>:
    5088:	f84d ed08 	str.w	lr, [sp, #-8]!
    508c:	f7ff ffd2 	bl	5034 <__aeabi_cfrcmple>
    5090:	bf94      	ite	ls
    5092:	2001      	movls	r0, #1
    5094:	2000      	movhi	r0, #0
    5096:	f85d fb08 	ldr.w	pc, [sp], #8
    509a:	bf00      	nop

0000509c <__aeabi_fcmpgt>:
    509c:	f84d ed08 	str.w	lr, [sp, #-8]!
    50a0:	f7ff ffc8 	bl	5034 <__aeabi_cfrcmple>
    50a4:	bf34      	ite	cc
    50a6:	2001      	movcc	r0, #1
    50a8:	2000      	movcs	r0, #0
    50aa:	f85d fb08 	ldr.w	pc, [sp], #8
    50ae:	bf00      	nop

000050b0 <__aeabi_f2iz>:
    50b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    50b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    50b8:	d30f      	bcc.n	50da <__aeabi_f2iz+0x2a>
    50ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
    50be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    50c2:	d90d      	bls.n	50e0 <__aeabi_f2iz+0x30>
    50c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    50c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    50cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    50d0:	fa23 f002 	lsr.w	r0, r3, r2
    50d4:	bf18      	it	ne
    50d6:	4240      	negne	r0, r0
    50d8:	4770      	bx	lr
    50da:	f04f 0000 	mov.w	r0, #0
    50de:	4770      	bx	lr
    50e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    50e4:	d101      	bne.n	50ea <__aeabi_f2iz+0x3a>
    50e6:	0242      	lsls	r2, r0, #9
    50e8:	d105      	bne.n	50f6 <__aeabi_f2iz+0x46>
    50ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    50ee:	bf08      	it	eq
    50f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    50f4:	4770      	bx	lr
    50f6:	f04f 0000 	mov.w	r0, #0
    50fa:	4770      	bx	lr

000050fc <__aeabi_f2uiz>:
    50fc:	0042      	lsls	r2, r0, #1
    50fe:	d20e      	bcs.n	511e <__aeabi_f2uiz+0x22>
    5100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    5104:	d30b      	bcc.n	511e <__aeabi_f2uiz+0x22>
    5106:	f04f 039e 	mov.w	r3, #158	; 0x9e
    510a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    510e:	d409      	bmi.n	5124 <__aeabi_f2uiz+0x28>
    5110:	ea4f 2300 	mov.w	r3, r0, lsl #8
    5114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5118:	fa23 f002 	lsr.w	r0, r3, r2
    511c:	4770      	bx	lr
    511e:	f04f 0000 	mov.w	r0, #0
    5122:	4770      	bx	lr
    5124:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5128:	d101      	bne.n	512e <__aeabi_f2uiz+0x32>
    512a:	0242      	lsls	r2, r0, #9
    512c:	d102      	bne.n	5134 <__aeabi_f2uiz+0x38>
    512e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5132:	4770      	bx	lr
    5134:	f04f 0000 	mov.w	r0, #0
    5138:	4770      	bx	lr
    513a:	bf00      	nop

0000513c <__aeabi_uldivmod>:
    513c:	b953      	cbnz	r3, 5154 <__aeabi_uldivmod+0x18>
    513e:	b94a      	cbnz	r2, 5154 <__aeabi_uldivmod+0x18>
    5140:	2900      	cmp	r1, #0
    5142:	bf08      	it	eq
    5144:	2800      	cmpeq	r0, #0
    5146:	bf1c      	itt	ne
    5148:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    514c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    5150:	f001 b906 	b.w	6360 <__aeabi_idiv0>
    5154:	f1ad 0c08 	sub.w	ip, sp, #8
    5158:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    515c:	f000 f806 	bl	516c <__udivmoddi4>
    5160:	f8dd e004 	ldr.w	lr, [sp, #4]
    5164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5168:	b004      	add	sp, #16
    516a:	4770      	bx	lr

0000516c <__udivmoddi4>:
    516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5170:	468c      	mov	ip, r1
    5172:	4604      	mov	r4, r0
    5174:	9e08      	ldr	r6, [sp, #32]
    5176:	2b00      	cmp	r3, #0
    5178:	d14b      	bne.n	5212 <__udivmoddi4+0xa6>
    517a:	428a      	cmp	r2, r1
    517c:	4615      	mov	r5, r2
    517e:	d967      	bls.n	5250 <__udivmoddi4+0xe4>
    5180:	fab2 f282 	clz	r2, r2
    5184:	b14a      	cbz	r2, 519a <__udivmoddi4+0x2e>
    5186:	f1c2 0720 	rsb	r7, r2, #32
    518a:	fa01 f302 	lsl.w	r3, r1, r2
    518e:	fa20 f707 	lsr.w	r7, r0, r7
    5192:	4095      	lsls	r5, r2
    5194:	ea47 0c03 	orr.w	ip, r7, r3
    5198:	4094      	lsls	r4, r2
    519a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    519e:	fbbc f7fe 	udiv	r7, ip, lr
    51a2:	fa1f f885 	uxth.w	r8, r5
    51a6:	fb0e c317 	mls	r3, lr, r7, ip
    51aa:	fb07 f908 	mul.w	r9, r7, r8
    51ae:	0c21      	lsrs	r1, r4, #16
    51b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    51b4:	4599      	cmp	r9, r3
    51b6:	d909      	bls.n	51cc <__udivmoddi4+0x60>
    51b8:	18eb      	adds	r3, r5, r3
    51ba:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
    51be:	f080 811c 	bcs.w	53fa <__udivmoddi4+0x28e>
    51c2:	4599      	cmp	r9, r3
    51c4:	f240 8119 	bls.w	53fa <__udivmoddi4+0x28e>
    51c8:	3f02      	subs	r7, #2
    51ca:	442b      	add	r3, r5
    51cc:	eba3 0309 	sub.w	r3, r3, r9
    51d0:	fbb3 f0fe 	udiv	r0, r3, lr
    51d4:	fb0e 3310 	mls	r3, lr, r0, r3
    51d8:	fb00 f108 	mul.w	r1, r0, r8
    51dc:	b2a4      	uxth	r4, r4
    51de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    51e2:	42a1      	cmp	r1, r4
    51e4:	d909      	bls.n	51fa <__udivmoddi4+0x8e>
    51e6:	192c      	adds	r4, r5, r4
    51e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    51ec:	f080 8107 	bcs.w	53fe <__udivmoddi4+0x292>
    51f0:	42a1      	cmp	r1, r4
    51f2:	f240 8104 	bls.w	53fe <__udivmoddi4+0x292>
    51f6:	3802      	subs	r0, #2
    51f8:	442c      	add	r4, r5
    51fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    51fe:	2700      	movs	r7, #0
    5200:	1a64      	subs	r4, r4, r1
    5202:	b11e      	cbz	r6, 520c <__udivmoddi4+0xa0>
    5204:	2300      	movs	r3, #0
    5206:	40d4      	lsrs	r4, r2
    5208:	e9c6 4300 	strd	r4, r3, [r6]
    520c:	4639      	mov	r1, r7
    520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5212:	428b      	cmp	r3, r1
    5214:	d909      	bls.n	522a <__udivmoddi4+0xbe>
    5216:	2e00      	cmp	r6, #0
    5218:	f000 80ec 	beq.w	53f4 <__udivmoddi4+0x288>
    521c:	2700      	movs	r7, #0
    521e:	e9c6 0100 	strd	r0, r1, [r6]
    5222:	4638      	mov	r0, r7
    5224:	4639      	mov	r1, r7
    5226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    522a:	fab3 f783 	clz	r7, r3
    522e:	2f00      	cmp	r7, #0
    5230:	d148      	bne.n	52c4 <__udivmoddi4+0x158>
    5232:	428b      	cmp	r3, r1
    5234:	d302      	bcc.n	523c <__udivmoddi4+0xd0>
    5236:	4282      	cmp	r2, r0
    5238:	f200 80fb 	bhi.w	5432 <__udivmoddi4+0x2c6>
    523c:	1a84      	subs	r4, r0, r2
    523e:	eb61 0303 	sbc.w	r3, r1, r3
    5242:	2001      	movs	r0, #1
    5244:	469c      	mov	ip, r3
    5246:	2e00      	cmp	r6, #0
    5248:	d0e0      	beq.n	520c <__udivmoddi4+0xa0>
    524a:	e9c6 4c00 	strd	r4, ip, [r6]
    524e:	e7dd      	b.n	520c <__udivmoddi4+0xa0>
    5250:	b902      	cbnz	r2, 5254 <__udivmoddi4+0xe8>
    5252:	deff      	udf	#255	; 0xff
    5254:	fab2 f282 	clz	r2, r2
    5258:	2a00      	cmp	r2, #0
    525a:	f040 808f 	bne.w	537c <__udivmoddi4+0x210>
    525e:	2701      	movs	r7, #1
    5260:	1b49      	subs	r1, r1, r5
    5262:	ea4f 4815 	mov.w	r8, r5, lsr #16
    5266:	fa1f f985 	uxth.w	r9, r5
    526a:	fbb1 fef8 	udiv	lr, r1, r8
    526e:	fb08 111e 	mls	r1, r8, lr, r1
    5272:	fb09 f00e 	mul.w	r0, r9, lr
    5276:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    527a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
    527e:	4298      	cmp	r0, r3
    5280:	d907      	bls.n	5292 <__udivmoddi4+0x126>
    5282:	18eb      	adds	r3, r5, r3
    5284:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    5288:	d202      	bcs.n	5290 <__udivmoddi4+0x124>
    528a:	4298      	cmp	r0, r3
    528c:	f200 80cd 	bhi.w	542a <__udivmoddi4+0x2be>
    5290:	468e      	mov	lr, r1
    5292:	1a1b      	subs	r3, r3, r0
    5294:	fbb3 f0f8 	udiv	r0, r3, r8
    5298:	fb08 3310 	mls	r3, r8, r0, r3
    529c:	fb09 f900 	mul.w	r9, r9, r0
    52a0:	b2a4      	uxth	r4, r4
    52a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    52a6:	45a1      	cmp	r9, r4
    52a8:	d907      	bls.n	52ba <__udivmoddi4+0x14e>
    52aa:	192c      	adds	r4, r5, r4
    52ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    52b0:	d202      	bcs.n	52b8 <__udivmoddi4+0x14c>
    52b2:	45a1      	cmp	r9, r4
    52b4:	f200 80b6 	bhi.w	5424 <__udivmoddi4+0x2b8>
    52b8:	4618      	mov	r0, r3
    52ba:	eba4 0409 	sub.w	r4, r4, r9
    52be:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    52c2:	e79e      	b.n	5202 <__udivmoddi4+0x96>
    52c4:	f1c7 0520 	rsb	r5, r7, #32
    52c8:	40bb      	lsls	r3, r7
    52ca:	fa22 fc05 	lsr.w	ip, r2, r5
    52ce:	ea4c 0c03 	orr.w	ip, ip, r3
    52d2:	fa21 f405 	lsr.w	r4, r1, r5
    52d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    52da:	fbb4 f9fe 	udiv	r9, r4, lr
    52de:	fa1f f88c 	uxth.w	r8, ip
    52e2:	fb0e 4419 	mls	r4, lr, r9, r4
    52e6:	fa20 f305 	lsr.w	r3, r0, r5
    52ea:	40b9      	lsls	r1, r7
    52ec:	fb09 fa08 	mul.w	sl, r9, r8
    52f0:	4319      	orrs	r1, r3
    52f2:	0c0b      	lsrs	r3, r1, #16
    52f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    52f8:	45a2      	cmp	sl, r4
    52fa:	fa02 f207 	lsl.w	r2, r2, r7
    52fe:	fa00 f307 	lsl.w	r3, r0, r7
    5302:	d90b      	bls.n	531c <__udivmoddi4+0x1b0>
    5304:	eb1c 0404 	adds.w	r4, ip, r4
    5308:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    530c:	f080 8088 	bcs.w	5420 <__udivmoddi4+0x2b4>
    5310:	45a2      	cmp	sl, r4
    5312:	f240 8085 	bls.w	5420 <__udivmoddi4+0x2b4>
    5316:	f1a9 0902 	sub.w	r9, r9, #2
    531a:	4464      	add	r4, ip
    531c:	eba4 040a 	sub.w	r4, r4, sl
    5320:	fbb4 f0fe 	udiv	r0, r4, lr
    5324:	fb0e 4410 	mls	r4, lr, r0, r4
    5328:	fb00 fa08 	mul.w	sl, r0, r8
    532c:	b289      	uxth	r1, r1
    532e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
    5332:	45a2      	cmp	sl, r4
    5334:	d908      	bls.n	5348 <__udivmoddi4+0x1dc>
    5336:	eb1c 0404 	adds.w	r4, ip, r4
    533a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    533e:	d26b      	bcs.n	5418 <__udivmoddi4+0x2ac>
    5340:	45a2      	cmp	sl, r4
    5342:	d969      	bls.n	5418 <__udivmoddi4+0x2ac>
    5344:	3802      	subs	r0, #2
    5346:	4464      	add	r4, ip
    5348:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    534c:	fba0 8902 	umull	r8, r9, r0, r2
    5350:	eba4 040a 	sub.w	r4, r4, sl
    5354:	454c      	cmp	r4, r9
    5356:	4641      	mov	r1, r8
    5358:	46ce      	mov	lr, r9
    535a:	d354      	bcc.n	5406 <__udivmoddi4+0x29a>
    535c:	d051      	beq.n	5402 <__udivmoddi4+0x296>
    535e:	2e00      	cmp	r6, #0
    5360:	d069      	beq.n	5436 <__udivmoddi4+0x2ca>
    5362:	1a5a      	subs	r2, r3, r1
    5364:	eb64 040e 	sbc.w	r4, r4, lr
    5368:	fa04 f505 	lsl.w	r5, r4, r5
    536c:	fa22 f307 	lsr.w	r3, r2, r7
    5370:	40fc      	lsrs	r4, r7
    5372:	431d      	orrs	r5, r3
    5374:	e9c6 5400 	strd	r5, r4, [r6]
    5378:	2700      	movs	r7, #0
    537a:	e747      	b.n	520c <__udivmoddi4+0xa0>
    537c:	4095      	lsls	r5, r2
    537e:	f1c2 0320 	rsb	r3, r2, #32
    5382:	fa21 f003 	lsr.w	r0, r1, r3
    5386:	ea4f 4815 	mov.w	r8, r5, lsr #16
    538a:	fbb0 f7f8 	udiv	r7, r0, r8
    538e:	fa1f f985 	uxth.w	r9, r5
    5392:	fb08 0017 	mls	r0, r8, r7, r0
    5396:	fa24 f303 	lsr.w	r3, r4, r3
    539a:	4091      	lsls	r1, r2
    539c:	fb07 fc09 	mul.w	ip, r7, r9
    53a0:	430b      	orrs	r3, r1
    53a2:	0c19      	lsrs	r1, r3, #16
    53a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    53a8:	458c      	cmp	ip, r1
    53aa:	fa04 f402 	lsl.w	r4, r4, r2
    53ae:	d907      	bls.n	53c0 <__udivmoddi4+0x254>
    53b0:	1869      	adds	r1, r5, r1
    53b2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    53b6:	d231      	bcs.n	541c <__udivmoddi4+0x2b0>
    53b8:	458c      	cmp	ip, r1
    53ba:	d92f      	bls.n	541c <__udivmoddi4+0x2b0>
    53bc:	3f02      	subs	r7, #2
    53be:	4429      	add	r1, r5
    53c0:	eba1 010c 	sub.w	r1, r1, ip
    53c4:	fbb1 f0f8 	udiv	r0, r1, r8
    53c8:	fb08 1c10 	mls	ip, r8, r0, r1
    53cc:	fb00 fe09 	mul.w	lr, r0, r9
    53d0:	b299      	uxth	r1, r3
    53d2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    53d6:	458e      	cmp	lr, r1
    53d8:	d907      	bls.n	53ea <__udivmoddi4+0x27e>
    53da:	1869      	adds	r1, r5, r1
    53dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    53e0:	d218      	bcs.n	5414 <__udivmoddi4+0x2a8>
    53e2:	458e      	cmp	lr, r1
    53e4:	d916      	bls.n	5414 <__udivmoddi4+0x2a8>
    53e6:	3802      	subs	r0, #2
    53e8:	4429      	add	r1, r5
    53ea:	eba1 010e 	sub.w	r1, r1, lr
    53ee:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    53f2:	e73a      	b.n	526a <__udivmoddi4+0xfe>
    53f4:	4637      	mov	r7, r6
    53f6:	4630      	mov	r0, r6
    53f8:	e708      	b.n	520c <__udivmoddi4+0xa0>
    53fa:	460f      	mov	r7, r1
    53fc:	e6e6      	b.n	51cc <__udivmoddi4+0x60>
    53fe:	4618      	mov	r0, r3
    5400:	e6fb      	b.n	51fa <__udivmoddi4+0x8e>
    5402:	4543      	cmp	r3, r8
    5404:	d2ab      	bcs.n	535e <__udivmoddi4+0x1f2>
    5406:	ebb8 0102 	subs.w	r1, r8, r2
    540a:	eb69 020c 	sbc.w	r2, r9, ip
    540e:	3801      	subs	r0, #1
    5410:	4696      	mov	lr, r2
    5412:	e7a4      	b.n	535e <__udivmoddi4+0x1f2>
    5414:	4618      	mov	r0, r3
    5416:	e7e8      	b.n	53ea <__udivmoddi4+0x27e>
    5418:	4608      	mov	r0, r1
    541a:	e795      	b.n	5348 <__udivmoddi4+0x1dc>
    541c:	4607      	mov	r7, r0
    541e:	e7cf      	b.n	53c0 <__udivmoddi4+0x254>
    5420:	4681      	mov	r9, r0
    5422:	e77b      	b.n	531c <__udivmoddi4+0x1b0>
    5424:	3802      	subs	r0, #2
    5426:	442c      	add	r4, r5
    5428:	e747      	b.n	52ba <__udivmoddi4+0x14e>
    542a:	f1ae 0e02 	sub.w	lr, lr, #2
    542e:	442b      	add	r3, r5
    5430:	e72f      	b.n	5292 <__udivmoddi4+0x126>
    5432:	4638      	mov	r0, r7
    5434:	e707      	b.n	5246 <__udivmoddi4+0xda>
    5436:	4637      	mov	r7, r6
    5438:	e6e8      	b.n	520c <__udivmoddi4+0xa0>
    543a:	bf00      	nop

0000543c <selfrel_offset31>:
    543c:	6803      	ldr	r3, [r0, #0]
    543e:	005a      	lsls	r2, r3, #1
    5440:	bf4c      	ite	mi
    5442:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    5446:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    544a:	4418      	add	r0, r3
    544c:	4770      	bx	lr
    544e:	bf00      	nop

00005450 <search_EIT_table>:
    5450:	b361      	cbz	r1, 54ac <search_EIT_table+0x5c>
    5452:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5456:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    545a:	4690      	mov	r8, r2
    545c:	4606      	mov	r6, r0
    545e:	46d1      	mov	r9, sl
    5460:	2700      	movs	r7, #0
    5462:	eb07 0409 	add.w	r4, r7, r9
    5466:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    546a:	1064      	asrs	r4, r4, #1
    546c:	00e5      	lsls	r5, r4, #3
    546e:	1971      	adds	r1, r6, r5
    5470:	4608      	mov	r0, r1
    5472:	f7ff ffe3 	bl	543c <selfrel_offset31>
    5476:	45a2      	cmp	sl, r4
    5478:	4683      	mov	fp, r0
    547a:	f105 0008 	add.w	r0, r5, #8
    547e:	4430      	add	r0, r6
    5480:	d009      	beq.n	5496 <search_EIT_table+0x46>
    5482:	f7ff ffdb 	bl	543c <selfrel_offset31>
    5486:	45c3      	cmp	fp, r8
    5488:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    548c:	d805      	bhi.n	549a <search_EIT_table+0x4a>
    548e:	4540      	cmp	r0, r8
    5490:	d209      	bcs.n	54a6 <search_EIT_table+0x56>
    5492:	1c67      	adds	r7, r4, #1
    5494:	e7e5      	b.n	5462 <search_EIT_table+0x12>
    5496:	45c3      	cmp	fp, r8
    5498:	d905      	bls.n	54a6 <search_EIT_table+0x56>
    549a:	42a7      	cmp	r7, r4
    549c:	d002      	beq.n	54a4 <search_EIT_table+0x54>
    549e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    54a2:	e7de      	b.n	5462 <search_EIT_table+0x12>
    54a4:	2100      	movs	r1, #0
    54a6:	4608      	mov	r0, r1
    54a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54ac:	4608      	mov	r0, r1
    54ae:	4770      	bx	lr

000054b0 <__gnu_unwind_get_pr_addr>:
    54b0:	2801      	cmp	r0, #1
    54b2:	d007      	beq.n	54c4 <__gnu_unwind_get_pr_addr+0x14>
    54b4:	2802      	cmp	r0, #2
    54b6:	d007      	beq.n	54c8 <__gnu_unwind_get_pr_addr+0x18>
    54b8:	4b04      	ldr	r3, [pc, #16]	; (54cc <__gnu_unwind_get_pr_addr+0x1c>)
    54ba:	2800      	cmp	r0, #0
    54bc:	bf0c      	ite	eq
    54be:	4618      	moveq	r0, r3
    54c0:	2000      	movne	r0, #0
    54c2:	4770      	bx	lr
    54c4:	4802      	ldr	r0, [pc, #8]	; (54d0 <__gnu_unwind_get_pr_addr+0x20>)
    54c6:	4770      	bx	lr
    54c8:	4802      	ldr	r0, [pc, #8]	; (54d4 <__gnu_unwind_get_pr_addr+0x24>)
    54ca:	4770      	bx	lr
    54cc:	00005bad 	.word	0x00005bad
    54d0:	00005bb1 	.word	0x00005bb1
    54d4:	00005bb5 	.word	0x00005bb5

000054d8 <get_eit_entry>:
    54d8:	b530      	push	{r4, r5, lr}
    54da:	4b26      	ldr	r3, [pc, #152]	; (5574 <get_eit_entry+0x9c>)
    54dc:	b083      	sub	sp, #12
    54de:	4604      	mov	r4, r0
    54e0:	1e8d      	subs	r5, r1, #2
    54e2:	b34b      	cbz	r3, 5538 <get_eit_entry+0x60>
    54e4:	a901      	add	r1, sp, #4
    54e6:	4628      	mov	r0, r5
    54e8:	f3af 8000 	nop.w
    54ec:	b1f0      	cbz	r0, 552c <get_eit_entry+0x54>
    54ee:	9901      	ldr	r1, [sp, #4]
    54f0:	462a      	mov	r2, r5
    54f2:	f7ff ffad 	bl	5450 <search_EIT_table>
    54f6:	4601      	mov	r1, r0
    54f8:	b1c0      	cbz	r0, 552c <get_eit_entry+0x54>
    54fa:	f7ff ff9f 	bl	543c <selfrel_offset31>
    54fe:	684b      	ldr	r3, [r1, #4]
    5500:	64a0      	str	r0, [r4, #72]	; 0x48
    5502:	2b01      	cmp	r3, #1
    5504:	d02f      	beq.n	5566 <get_eit_entry+0x8e>
    5506:	2b00      	cmp	r3, #0
    5508:	f101 0004 	add.w	r0, r1, #4
    550c:	db27      	blt.n	555e <get_eit_entry+0x86>
    550e:	f7ff ff95 	bl	543c <selfrel_offset31>
    5512:	2300      	movs	r3, #0
    5514:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5518:	6803      	ldr	r3, [r0, #0]
    551a:	2b00      	cmp	r3, #0
    551c:	db13      	blt.n	5546 <get_eit_entry+0x6e>
    551e:	f7ff ff8d 	bl	543c <selfrel_offset31>
    5522:	2300      	movs	r3, #0
    5524:	6120      	str	r0, [r4, #16]
    5526:	4618      	mov	r0, r3
    5528:	b003      	add	sp, #12
    552a:	bd30      	pop	{r4, r5, pc}
    552c:	2309      	movs	r3, #9
    552e:	2200      	movs	r2, #0
    5530:	4618      	mov	r0, r3
    5532:	6122      	str	r2, [r4, #16]
    5534:	b003      	add	sp, #12
    5536:	bd30      	pop	{r4, r5, pc}
    5538:	4b0f      	ldr	r3, [pc, #60]	; (5578 <get_eit_entry+0xa0>)
    553a:	4910      	ldr	r1, [pc, #64]	; (557c <get_eit_entry+0xa4>)
    553c:	4618      	mov	r0, r3
    553e:	1ac9      	subs	r1, r1, r3
    5540:	10c9      	asrs	r1, r1, #3
    5542:	9101      	str	r1, [sp, #4]
    5544:	e7d4      	b.n	54f0 <get_eit_entry+0x18>
    5546:	f3c3 6003 	ubfx	r0, r3, #24, #4
    554a:	f7ff ffb1 	bl	54b0 <__gnu_unwind_get_pr_addr>
    554e:	2800      	cmp	r0, #0
    5550:	bf14      	ite	ne
    5552:	2300      	movne	r3, #0
    5554:	2309      	moveq	r3, #9
    5556:	6120      	str	r0, [r4, #16]
    5558:	4618      	mov	r0, r3
    555a:	b003      	add	sp, #12
    555c:	bd30      	pop	{r4, r5, pc}
    555e:	2301      	movs	r3, #1
    5560:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5564:	e7d8      	b.n	5518 <get_eit_entry+0x40>
    5566:	2305      	movs	r3, #5
    5568:	2200      	movs	r2, #0
    556a:	4618      	mov	r0, r3
    556c:	6122      	str	r2, [r4, #16]
    556e:	b003      	add	sp, #12
    5570:	bd30      	pop	{r4, r5, pc}
    5572:	bf00      	nop
    5574:	00000000 	.word	0x00000000
    5578:	00007c18 	.word	0x00007c18
    557c:	00007cd0 	.word	0x00007cd0

00005580 <restore_non_core_regs>:
    5580:	6803      	ldr	r3, [r0, #0]
    5582:	b510      	push	{r4, lr}
    5584:	07da      	lsls	r2, r3, #31
    5586:	4604      	mov	r4, r0
    5588:	d406      	bmi.n	5598 <restore_non_core_regs+0x18>
    558a:	079b      	lsls	r3, r3, #30
    558c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5590:	d509      	bpl.n	55a6 <restore_non_core_regs+0x26>
    5592:	f000 fc67 	bl	5e64 <__gnu_Unwind_Restore_VFP_D>
    5596:	6823      	ldr	r3, [r4, #0]
    5598:	0759      	lsls	r1, r3, #29
    559a:	d509      	bpl.n	55b0 <restore_non_core_regs+0x30>
    559c:	071a      	lsls	r2, r3, #28
    559e:	d50e      	bpl.n	55be <restore_non_core_regs+0x3e>
    55a0:	06db      	lsls	r3, r3, #27
    55a2:	d513      	bpl.n	55cc <restore_non_core_regs+0x4c>
    55a4:	bd10      	pop	{r4, pc}
    55a6:	f000 fc55 	bl	5e54 <__gnu_Unwind_Restore_VFP>
    55aa:	6823      	ldr	r3, [r4, #0]
    55ac:	0759      	lsls	r1, r3, #29
    55ae:	d4f5      	bmi.n	559c <restore_non_core_regs+0x1c>
    55b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    55b4:	f000 fc5e 	bl	5e74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    55b8:	6823      	ldr	r3, [r4, #0]
    55ba:	071a      	lsls	r2, r3, #28
    55bc:	d4f0      	bmi.n	55a0 <restore_non_core_regs+0x20>
    55be:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    55c2:	f000 fc5f 	bl	5e84 <__gnu_Unwind_Restore_WMMXD>
    55c6:	6823      	ldr	r3, [r4, #0]
    55c8:	06db      	lsls	r3, r3, #27
    55ca:	d4eb      	bmi.n	55a4 <restore_non_core_regs+0x24>
    55cc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    55d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55d4:	f000 bc9a 	b.w	5f0c <__gnu_Unwind_Restore_WMMXC>

000055d8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    55d8:	6803      	ldr	r3, [r0, #0]
    55da:	b103      	cbz	r3, 55de <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    55dc:	4403      	add	r3, r0
    55de:	4618      	mov	r0, r3
    55e0:	4770      	bx	lr
    55e2:	bf00      	nop

000055e4 <__gnu_unwind_24bit.isra.1>:
    55e4:	2009      	movs	r0, #9
    55e6:	4770      	bx	lr

000055e8 <_Unwind_DebugHook>:
    55e8:	4770      	bx	lr
    55ea:	bf00      	nop

000055ec <unwind_phase2>:
    55ec:	b570      	push	{r4, r5, r6, lr}
    55ee:	4604      	mov	r4, r0
    55f0:	460d      	mov	r5, r1
    55f2:	e008      	b.n	5606 <unwind_phase2+0x1a>
    55f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    55f6:	6923      	ldr	r3, [r4, #16]
    55f8:	6162      	str	r2, [r4, #20]
    55fa:	4621      	mov	r1, r4
    55fc:	462a      	mov	r2, r5
    55fe:	2001      	movs	r0, #1
    5600:	4798      	blx	r3
    5602:	2808      	cmp	r0, #8
    5604:	d108      	bne.n	5618 <unwind_phase2+0x2c>
    5606:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5608:	4620      	mov	r0, r4
    560a:	f7ff ff65 	bl	54d8 <get_eit_entry>
    560e:	4606      	mov	r6, r0
    5610:	2800      	cmp	r0, #0
    5612:	d0ef      	beq.n	55f4 <unwind_phase2+0x8>
    5614:	f000 fea6 	bl	6364 <abort>
    5618:	2807      	cmp	r0, #7
    561a:	d1fb      	bne.n	5614 <unwind_phase2+0x28>
    561c:	4630      	mov	r0, r6
    561e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5620:	f7ff ffe2 	bl	55e8 <_Unwind_DebugHook>
    5624:	1d28      	adds	r0, r5, #4
    5626:	f000 fc09 	bl	5e3c <__restore_core_regs>
    562a:	bf00      	nop

0000562c <unwind_phase2_forced>:
    562c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5630:	4605      	mov	r5, r0
    5632:	f04f 0c00 	mov.w	ip, #0
    5636:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    563a:	ac03      	add	r4, sp, #12
    563c:	1d0e      	adds	r6, r1, #4
    563e:	4617      	mov	r7, r2
    5640:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5644:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5648:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    564a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    564c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    5650:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5654:	f8d5 9018 	ldr.w	r9, [r5, #24]
    5658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    565c:	ac02      	add	r4, sp, #8
    565e:	f8c4 c000 	str.w	ip, [r4]
    5662:	e021      	b.n	56a8 <unwind_phase2_forced+0x7c>
    5664:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    566a:	616b      	str	r3, [r5, #20]
    566c:	4621      	mov	r1, r4
    566e:	a87a      	add	r0, sp, #488	; 0x1e8
    5670:	f000 fea4 	bl	63bc <memcpy>
    5674:	692b      	ldr	r3, [r5, #16]
    5676:	aa7a      	add	r2, sp, #488	; 0x1e8
    5678:	4629      	mov	r1, r5
    567a:	4630      	mov	r0, r6
    567c:	4798      	blx	r3
    567e:	9b88      	ldr	r3, [sp, #544]	; 0x220
    5680:	e9cd 4900 	strd	r4, r9, [sp]
    5684:	4682      	mov	sl, r0
    5686:	6463      	str	r3, [r4, #68]	; 0x44
    5688:	4631      	mov	r1, r6
    568a:	462b      	mov	r3, r5
    568c:	462a      	mov	r2, r5
    568e:	2001      	movs	r0, #1
    5690:	47c0      	blx	r8
    5692:	4607      	mov	r7, r0
    5694:	b9f8      	cbnz	r0, 56d6 <unwind_phase2_forced+0xaa>
    5696:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    569a:	a97a      	add	r1, sp, #488	; 0x1e8
    569c:	4620      	mov	r0, r4
    569e:	f000 fe8d 	bl	63bc <memcpy>
    56a2:	f1ba 0f08 	cmp.w	sl, #8
    56a6:	d11c      	bne.n	56e2 <unwind_phase2_forced+0xb6>
    56a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    56aa:	4628      	mov	r0, r5
    56ac:	f7ff ff14 	bl	54d8 <get_eit_entry>
    56b0:	2f00      	cmp	r7, #0
    56b2:	bf08      	it	eq
    56b4:	2609      	moveq	r6, #9
    56b6:	4607      	mov	r7, r0
    56b8:	bf18      	it	ne
    56ba:	260a      	movne	r6, #10
    56bc:	2800      	cmp	r0, #0
    56be:	d0d1      	beq.n	5664 <unwind_phase2_forced+0x38>
    56c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    56c2:	f046 0110 	orr.w	r1, r6, #16
    56c6:	e9cd 4900 	strd	r4, r9, [sp]
    56ca:	462a      	mov	r2, r5
    56cc:	6463      	str	r3, [r4, #68]	; 0x44
    56ce:	2001      	movs	r0, #1
    56d0:	462b      	mov	r3, r5
    56d2:	47c0      	blx	r8
    56d4:	b100      	cbz	r0, 56d8 <unwind_phase2_forced+0xac>
    56d6:	2709      	movs	r7, #9
    56d8:	4638      	mov	r0, r7
    56da:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    56de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56e2:	f1ba 0f07 	cmp.w	sl, #7
    56e6:	d1f6      	bne.n	56d6 <unwind_phase2_forced+0xaa>
    56e8:	4638      	mov	r0, r7
    56ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
    56ec:	f7ff ff7c 	bl	55e8 <_Unwind_DebugHook>
    56f0:	a803      	add	r0, sp, #12
    56f2:	f000 fba3 	bl	5e3c <__restore_core_regs>
    56f6:	bf00      	nop

000056f8 <_Unwind_GetCFA>:
    56f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
    56fa:	4770      	bx	lr

000056fc <__gnu_Unwind_RaiseException>:
    56fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5700:	b5f0      	push	{r4, r5, r6, r7, lr}
    5702:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5704:	b0f9      	sub	sp, #484	; 0x1e4
    5706:	640b      	str	r3, [r1, #64]	; 0x40
    5708:	1d0d      	adds	r5, r1, #4
    570a:	ac01      	add	r4, sp, #4
    570c:	460f      	mov	r7, r1
    570e:	4606      	mov	r6, r0
    5710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    571a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    571c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5724:	f8cd c000 	str.w	ip, [sp]
    5728:	e006      	b.n	5738 <__gnu_Unwind_RaiseException+0x3c>
    572a:	6933      	ldr	r3, [r6, #16]
    572c:	466a      	mov	r2, sp
    572e:	4631      	mov	r1, r6
    5730:	4798      	blx	r3
    5732:	2808      	cmp	r0, #8
    5734:	4604      	mov	r4, r0
    5736:	d108      	bne.n	574a <__gnu_Unwind_RaiseException+0x4e>
    5738:	9910      	ldr	r1, [sp, #64]	; 0x40
    573a:	4630      	mov	r0, r6
    573c:	f7ff fecc 	bl	54d8 <get_eit_entry>
    5740:	2800      	cmp	r0, #0
    5742:	d0f2      	beq.n	572a <__gnu_Unwind_RaiseException+0x2e>
    5744:	2009      	movs	r0, #9
    5746:	b079      	add	sp, #484	; 0x1e4
    5748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    574a:	4668      	mov	r0, sp
    574c:	f7ff ff18 	bl	5580 <restore_non_core_regs>
    5750:	2c06      	cmp	r4, #6
    5752:	d1f7      	bne.n	5744 <__gnu_Unwind_RaiseException+0x48>
    5754:	4639      	mov	r1, r7
    5756:	4630      	mov	r0, r6
    5758:	f7ff ff48 	bl	55ec <unwind_phase2>

0000575c <__gnu_Unwind_ForcedUnwind>:
    575c:	b430      	push	{r4, r5}
    575e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5760:	60c1      	str	r1, [r0, #12]
    5762:	6182      	str	r2, [r0, #24]
    5764:	4619      	mov	r1, r3
    5766:	641d      	str	r5, [r3, #64]	; 0x40
    5768:	2200      	movs	r2, #0
    576a:	bc30      	pop	{r4, r5}
    576c:	e75e      	b.n	562c <unwind_phase2_forced>
    576e:	bf00      	nop

00005770 <__gnu_Unwind_Resume>:
    5770:	b570      	push	{r4, r5, r6, lr}
    5772:	6943      	ldr	r3, [r0, #20]
    5774:	68c6      	ldr	r6, [r0, #12]
    5776:	640b      	str	r3, [r1, #64]	; 0x40
    5778:	b9be      	cbnz	r6, 57aa <__gnu_Unwind_Resume+0x3a>
    577a:	6903      	ldr	r3, [r0, #16]
    577c:	460a      	mov	r2, r1
    577e:	4604      	mov	r4, r0
    5780:	460d      	mov	r5, r1
    5782:	4601      	mov	r1, r0
    5784:	2002      	movs	r0, #2
    5786:	4798      	blx	r3
    5788:	2807      	cmp	r0, #7
    578a:	d007      	beq.n	579c <__gnu_Unwind_Resume+0x2c>
    578c:	2808      	cmp	r0, #8
    578e:	d103      	bne.n	5798 <__gnu_Unwind_Resume+0x28>
    5790:	4629      	mov	r1, r5
    5792:	4620      	mov	r0, r4
    5794:	f7ff ff2a 	bl	55ec <unwind_phase2>
    5798:	f000 fde4 	bl	6364 <abort>
    579c:	4630      	mov	r0, r6
    579e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    57a0:	f7ff ff22 	bl	55e8 <_Unwind_DebugHook>
    57a4:	1d28      	adds	r0, r5, #4
    57a6:	f000 fb49 	bl	5e3c <__restore_core_regs>
    57aa:	2201      	movs	r2, #1
    57ac:	f7ff ff3e 	bl	562c <unwind_phase2_forced>
    57b0:	f000 fdd8 	bl	6364 <abort>

000057b4 <__gnu_Unwind_Resume_or_Rethrow>:
    57b4:	68c2      	ldr	r2, [r0, #12]
    57b6:	b12a      	cbz	r2, 57c4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
    57b8:	b410      	push	{r4}
    57ba:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    57bc:	2200      	movs	r2, #0
    57be:	640c      	str	r4, [r1, #64]	; 0x40
    57c0:	bc10      	pop	{r4}
    57c2:	e733      	b.n	562c <unwind_phase2_forced>
    57c4:	e79a      	b.n	56fc <__gnu_Unwind_RaiseException>
    57c6:	bf00      	nop

000057c8 <_Unwind_Complete>:
    57c8:	4770      	bx	lr
    57ca:	bf00      	nop

000057cc <_Unwind_DeleteException>:
    57cc:	6883      	ldr	r3, [r0, #8]
    57ce:	b113      	cbz	r3, 57d6 <_Unwind_DeleteException+0xa>
    57d0:	4601      	mov	r1, r0
    57d2:	2001      	movs	r0, #1
    57d4:	4718      	bx	r3
    57d6:	4770      	bx	lr

000057d8 <_Unwind_VRS_Get>:
    57d8:	2904      	cmp	r1, #4
    57da:	d807      	bhi.n	57ec <_Unwind_VRS_Get+0x14>
    57dc:	e8df f001 	tbb	[pc, r1]
    57e0:	08060803 	.word	0x08060803
    57e4:	08          	.byte	0x08
    57e5:	00          	.byte	0x00
    57e6:	b90b      	cbnz	r3, 57ec <_Unwind_VRS_Get+0x14>
    57e8:	2a0f      	cmp	r2, #15
    57ea:	d903      	bls.n	57f4 <_Unwind_VRS_Get+0x1c>
    57ec:	2002      	movs	r0, #2
    57ee:	4770      	bx	lr
    57f0:	2001      	movs	r0, #1
    57f2:	4770      	bx	lr
    57f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    57f8:	6842      	ldr	r2, [r0, #4]
    57fa:	4618      	mov	r0, r3
    57fc:	9b00      	ldr	r3, [sp, #0]
    57fe:	601a      	str	r2, [r3, #0]
    5800:	4770      	bx	lr
    5802:	bf00      	nop

00005804 <_Unwind_GetGR>:
    5804:	2300      	movs	r3, #0
    5806:	b510      	push	{r4, lr}
    5808:	b084      	sub	sp, #16
    580a:	ac03      	add	r4, sp, #12
    580c:	460a      	mov	r2, r1
    580e:	9400      	str	r4, [sp, #0]
    5810:	4619      	mov	r1, r3
    5812:	f7ff ffe1 	bl	57d8 <_Unwind_VRS_Get>
    5816:	9803      	ldr	r0, [sp, #12]
    5818:	b004      	add	sp, #16
    581a:	bd10      	pop	{r4, pc}

0000581c <_Unwind_VRS_Set>:
    581c:	2904      	cmp	r1, #4
    581e:	d807      	bhi.n	5830 <_Unwind_VRS_Set+0x14>
    5820:	e8df f001 	tbb	[pc, r1]
    5824:	08060803 	.word	0x08060803
    5828:	08          	.byte	0x08
    5829:	00          	.byte	0x00
    582a:	b90b      	cbnz	r3, 5830 <_Unwind_VRS_Set+0x14>
    582c:	2a0f      	cmp	r2, #15
    582e:	d903      	bls.n	5838 <_Unwind_VRS_Set+0x1c>
    5830:	2002      	movs	r0, #2
    5832:	4770      	bx	lr
    5834:	2001      	movs	r0, #1
    5836:	4770      	bx	lr
    5838:	9900      	ldr	r1, [sp, #0]
    583a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    583e:	6809      	ldr	r1, [r1, #0]
    5840:	4618      	mov	r0, r3
    5842:	6051      	str	r1, [r2, #4]
    5844:	4770      	bx	lr
    5846:	bf00      	nop

00005848 <_Unwind_SetGR>:
    5848:	2300      	movs	r3, #0
    584a:	b510      	push	{r4, lr}
    584c:	b084      	sub	sp, #16
    584e:	ac04      	add	r4, sp, #16
    5850:	f844 2d04 	str.w	r2, [r4, #-4]!
    5854:	9400      	str	r4, [sp, #0]
    5856:	460a      	mov	r2, r1
    5858:	4619      	mov	r1, r3
    585a:	f7ff ffdf 	bl	581c <_Unwind_VRS_Set>
    585e:	b004      	add	sp, #16
    5860:	bd10      	pop	{r4, pc}
    5862:	bf00      	nop

00005864 <__gnu_Unwind_Backtrace>:
    5864:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5868:	b5f0      	push	{r4, r5, r6, r7, lr}
    586a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    586c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5870:	6413      	str	r3, [r2, #64]	; 0x40
    5872:	1d15      	adds	r5, r2, #4
    5874:	ac17      	add	r4, sp, #92	; 0x5c
    5876:	4607      	mov	r7, r0
    5878:	460e      	mov	r6, r1
    587a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    587c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    587e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5886:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    588a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    588e:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
    5892:	e012      	b.n	58ba <__gnu_Unwind_Backtrace+0x56>
    5894:	210c      	movs	r1, #12
    5896:	a816      	add	r0, sp, #88	; 0x58
    5898:	466a      	mov	r2, sp
    589a:	f7ff ffd5 	bl	5848 <_Unwind_SetGR>
    589e:	4631      	mov	r1, r6
    58a0:	a816      	add	r0, sp, #88	; 0x58
    58a2:	47b8      	blx	r7
    58a4:	b978      	cbnz	r0, 58c6 <__gnu_Unwind_Backtrace+0x62>
    58a6:	9b04      	ldr	r3, [sp, #16]
    58a8:	aa16      	add	r2, sp, #88	; 0x58
    58aa:	4669      	mov	r1, sp
    58ac:	2008      	movs	r0, #8
    58ae:	4798      	blx	r3
    58b0:	2805      	cmp	r0, #5
    58b2:	4604      	mov	r4, r0
    58b4:	d008      	beq.n	58c8 <__gnu_Unwind_Backtrace+0x64>
    58b6:	2809      	cmp	r0, #9
    58b8:	d005      	beq.n	58c6 <__gnu_Unwind_Backtrace+0x62>
    58ba:	9926      	ldr	r1, [sp, #152]	; 0x98
    58bc:	4668      	mov	r0, sp
    58be:	f7ff fe0b 	bl	54d8 <get_eit_entry>
    58c2:	2800      	cmp	r0, #0
    58c4:	d0e6      	beq.n	5894 <__gnu_Unwind_Backtrace+0x30>
    58c6:	2409      	movs	r4, #9
    58c8:	a816      	add	r0, sp, #88	; 0x58
    58ca:	f7ff fe59 	bl	5580 <restore_non_core_regs>
    58ce:	4620      	mov	r0, r4
    58d0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    58d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58d6:	bf00      	nop

000058d8 <__gnu_unwind_pr_common>:
    58d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58dc:	460d      	mov	r5, r1
    58de:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    58e0:	b089      	sub	sp, #36	; 0x24
    58e2:	1d0c      	adds	r4, r1, #4
    58e4:	4616      	mov	r6, r2
    58e6:	f000 0b03 	and.w	fp, r0, #3
    58ea:	680a      	ldr	r2, [r1, #0]
    58ec:	461f      	mov	r7, r3
    58ee:	9406      	str	r4, [sp, #24]
    58f0:	2b00      	cmp	r3, #0
    58f2:	d068      	beq.n	59c6 <__gnu_unwind_pr_common+0xee>
    58f4:	2102      	movs	r1, #2
    58f6:	0c13      	lsrs	r3, r2, #16
    58f8:	f88d 301d 	strb.w	r3, [sp, #29]
    58fc:	0412      	lsls	r2, r2, #16
    58fe:	b2db      	uxtb	r3, r3
    5900:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5904:	9205      	str	r2, [sp, #20]
    5906:	f88d 101c 	strb.w	r1, [sp, #28]
    590a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    590c:	f1bb 0f02 	cmp.w	fp, #2
    5910:	bf08      	it	eq
    5912:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5914:	f013 0301 	ands.w	r3, r3, #1
    5918:	d146      	bne.n	59a8 <__gnu_unwind_pr_common+0xd0>
    591a:	9301      	str	r3, [sp, #4]
    591c:	f000 0308 	and.w	r3, r0, #8
    5920:	9300      	str	r3, [sp, #0]
    5922:	f8d4 9000 	ldr.w	r9, [r4]
    5926:	f1b9 0f00 	cmp.w	r9, #0
    592a:	f000 80f3 	beq.w	5b14 <__gnu_unwind_pr_common+0x23c>
    592e:	2f02      	cmp	r7, #2
    5930:	d045      	beq.n	59be <__gnu_unwind_pr_common+0xe6>
    5932:	f8b4 9000 	ldrh.w	r9, [r4]
    5936:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    593a:	3404      	adds	r4, #4
    593c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    593e:	f028 0a01 	bic.w	sl, r8, #1
    5942:	210f      	movs	r1, #15
    5944:	4630      	mov	r0, r6
    5946:	449a      	add	sl, r3
    5948:	f7ff ff5c 	bl	5804 <_Unwind_GetGR>
    594c:	4582      	cmp	sl, r0
    594e:	d834      	bhi.n	59ba <__gnu_unwind_pr_common+0xe2>
    5950:	f029 0301 	bic.w	r3, r9, #1
    5954:	4453      	add	r3, sl
    5956:	4283      	cmp	r3, r0
    5958:	bf94      	ite	ls
    595a:	2000      	movls	r0, #0
    595c:	2001      	movhi	r0, #1
    595e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5962:	f008 0802 	and.w	r8, r8, #2
    5966:	f009 0901 	and.w	r9, r9, #1
    596a:	ea48 0809 	orr.w	r8, r8, r9
    596e:	f1b8 0f01 	cmp.w	r8, #1
    5972:	d03a      	beq.n	59ea <__gnu_unwind_pr_common+0x112>
    5974:	d331      	bcc.n	59da <__gnu_unwind_pr_common+0x102>
    5976:	f1b8 0f02 	cmp.w	r8, #2
    597a:	d11a      	bne.n	59b2 <__gnu_unwind_pr_common+0xda>
    597c:	6823      	ldr	r3, [r4, #0]
    597e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    5982:	f1bb 0f00 	cmp.w	fp, #0
    5986:	d166      	bne.n	5a56 <__gnu_unwind_pr_common+0x17e>
    5988:	b130      	cbz	r0, 5998 <__gnu_unwind_pr_common+0xc0>
    598a:	9a00      	ldr	r2, [sp, #0]
    598c:	2a00      	cmp	r2, #0
    598e:	d06c      	beq.n	5a6a <__gnu_unwind_pr_common+0x192>
    5990:	f1ba 0f00 	cmp.w	sl, #0
    5994:	f000 8090 	beq.w	5ab8 <__gnu_unwind_pr_common+0x1e0>
    5998:	2b00      	cmp	r3, #0
    599a:	da00      	bge.n	599e <__gnu_unwind_pr_common+0xc6>
    599c:	3404      	adds	r4, #4
    599e:	f10a 0301 	add.w	r3, sl, #1
    59a2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    59a6:	e7bc      	b.n	5922 <__gnu_unwind_pr_common+0x4a>
    59a8:	4630      	mov	r0, r6
    59aa:	a905      	add	r1, sp, #20
    59ac:	f000 fb48 	bl	6040 <__gnu_unwind_execute>
    59b0:	b178      	cbz	r0, 59d2 <__gnu_unwind_pr_common+0xfa>
    59b2:	2009      	movs	r0, #9
    59b4:	b009      	add	sp, #36	; 0x24
    59b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59ba:	2000      	movs	r0, #0
    59bc:	e7cf      	b.n	595e <__gnu_unwind_pr_common+0x86>
    59be:	f8d4 8004 	ldr.w	r8, [r4, #4]
    59c2:	3408      	adds	r4, #8
    59c4:	e7ba      	b.n	593c <__gnu_unwind_pr_common+0x64>
    59c6:	2303      	movs	r3, #3
    59c8:	0212      	lsls	r2, r2, #8
    59ca:	9205      	str	r2, [sp, #20]
    59cc:	f8ad 301c 	strh.w	r3, [sp, #28]
    59d0:	e79b      	b.n	590a <__gnu_unwind_pr_common+0x32>
    59d2:	2008      	movs	r0, #8
    59d4:	b009      	add	sp, #36	; 0x24
    59d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59da:	f1bb 0f00 	cmp.w	fp, #0
    59de:	d002      	beq.n	59e6 <__gnu_unwind_pr_common+0x10e>
    59e0:	2800      	cmp	r0, #0
    59e2:	f040 80b4 	bne.w	5b4e <__gnu_unwind_pr_common+0x276>
    59e6:	3404      	adds	r4, #4
    59e8:	e79b      	b.n	5922 <__gnu_unwind_pr_common+0x4a>
    59ea:	f1bb 0f00 	cmp.w	fp, #0
    59ee:	d118      	bne.n	5a22 <__gnu_unwind_pr_common+0x14a>
    59f0:	b1a8      	cbz	r0, 5a1e <__gnu_unwind_pr_common+0x146>
    59f2:	e9d4 2300 	ldrd	r2, r3, [r4]
    59f6:	1c99      	adds	r1, r3, #2
    59f8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    59fc:	d0d9      	beq.n	59b2 <__gnu_unwind_pr_common+0xda>
    59fe:	f105 0158 	add.w	r1, r5, #88	; 0x58
    5a02:	3301      	adds	r3, #1
    5a04:	9104      	str	r1, [sp, #16]
    5a06:	f000 80b5 	beq.w	5b74 <__gnu_unwind_pr_common+0x29c>
    5a0a:	1d20      	adds	r0, r4, #4
    5a0c:	f7ff fde4 	bl	55d8 <_Unwind_decode_typeinfo_ptr.isra.0>
    5a10:	ab04      	add	r3, sp, #16
    5a12:	4601      	mov	r1, r0
    5a14:	4628      	mov	r0, r5
    5a16:	f3af 8000 	nop.w
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d167      	bne.n	5aee <__gnu_unwind_pr_common+0x216>
    5a1e:	3408      	adds	r4, #8
    5a20:	e77f      	b.n	5922 <__gnu_unwind_pr_common+0x4a>
    5a22:	210d      	movs	r1, #13
    5a24:	4630      	mov	r0, r6
    5a26:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5a2a:	f7ff feeb 	bl	5804 <_Unwind_GetGR>
    5a2e:	4580      	cmp	r8, r0
    5a30:	d1f5      	bne.n	5a1e <__gnu_unwind_pr_common+0x146>
    5a32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5a34:	429c      	cmp	r4, r3
    5a36:	d1f2      	bne.n	5a1e <__gnu_unwind_pr_common+0x146>
    5a38:	4620      	mov	r0, r4
    5a3a:	f7ff fcff 	bl	543c <selfrel_offset31>
    5a3e:	210f      	movs	r1, #15
    5a40:	4602      	mov	r2, r0
    5a42:	4630      	mov	r0, r6
    5a44:	f7ff ff00 	bl	5848 <_Unwind_SetGR>
    5a48:	4630      	mov	r0, r6
    5a4a:	462a      	mov	r2, r5
    5a4c:	2100      	movs	r1, #0
    5a4e:	f7ff fefb 	bl	5848 <_Unwind_SetGR>
    5a52:	2007      	movs	r0, #7
    5a54:	e7ae      	b.n	59b4 <__gnu_unwind_pr_common+0xdc>
    5a56:	210d      	movs	r1, #13
    5a58:	4630      	mov	r0, r6
    5a5a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5a5e:	f7ff fed1 	bl	5804 <_Unwind_GetGR>
    5a62:	4580      	cmp	r8, r0
    5a64:	d032      	beq.n	5acc <__gnu_unwind_pr_common+0x1f4>
    5a66:	6823      	ldr	r3, [r4, #0]
    5a68:	e796      	b.n	5998 <__gnu_unwind_pr_common+0xc0>
    5a6a:	f1ba 0f00 	cmp.w	sl, #0
    5a6e:	d023      	beq.n	5ab8 <__gnu_unwind_pr_common+0x1e0>
    5a70:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5a74:	f104 0804 	add.w	r8, r4, #4
    5a78:	f8cd b008 	str.w	fp, [sp, #8]
    5a7c:	f8dd 9000 	ldr.w	r9, [sp]
    5a80:	46a3      	mov	fp, r4
    5a82:	9703      	str	r7, [sp, #12]
    5a84:	461c      	mov	r4, r3
    5a86:	e002      	b.n	5a8e <__gnu_unwind_pr_common+0x1b6>
    5a88:	4557      	cmp	r7, sl
    5a8a:	46b9      	mov	r9, r7
    5a8c:	d040      	beq.n	5b10 <__gnu_unwind_pr_common+0x238>
    5a8e:	4640      	mov	r0, r8
    5a90:	9404      	str	r4, [sp, #16]
    5a92:	f7ff fda1 	bl	55d8 <_Unwind_decode_typeinfo_ptr.isra.0>
    5a96:	ab04      	add	r3, sp, #16
    5a98:	4601      	mov	r1, r0
    5a9a:	2200      	movs	r2, #0
    5a9c:	4628      	mov	r0, r5
    5a9e:	f3af 8000 	nop.w
    5aa2:	f109 0701 	add.w	r7, r9, #1
    5aa6:	f108 0804 	add.w	r8, r8, #4
    5aaa:	2800      	cmp	r0, #0
    5aac:	d0ec      	beq.n	5a88 <__gnu_unwind_pr_common+0x1b0>
    5aae:	45d1      	cmp	r9, sl
    5ab0:	465c      	mov	r4, fp
    5ab2:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    5ab6:	d1d6      	bne.n	5a66 <__gnu_unwind_pr_common+0x18e>
    5ab8:	4630      	mov	r0, r6
    5aba:	210d      	movs	r1, #13
    5abc:	f7ff fea2 	bl	5804 <_Unwind_GetGR>
    5ac0:	9b04      	ldr	r3, [sp, #16]
    5ac2:	6228      	str	r0, [r5, #32]
    5ac4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    5ac8:	2006      	movs	r0, #6
    5aca:	e773      	b.n	59b4 <__gnu_unwind_pr_common+0xdc>
    5acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ace:	429c      	cmp	r4, r3
    5ad0:	d1c9      	bne.n	5a66 <__gnu_unwind_pr_common+0x18e>
    5ad2:	2204      	movs	r2, #4
    5ad4:	f04f 0800 	mov.w	r8, #0
    5ad8:	18a3      	adds	r3, r4, r2
    5ada:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    5ade:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    5ae2:	6823      	ldr	r3, [r4, #0]
    5ae4:	4543      	cmp	r3, r8
    5ae6:	db4d      	blt.n	5b84 <__gnu_unwind_pr_common+0x2ac>
    5ae8:	2301      	movs	r3, #1
    5aea:	9301      	str	r3, [sp, #4]
    5aec:	e757      	b.n	599e <__gnu_unwind_pr_common+0xc6>
    5aee:	4680      	mov	r8, r0
    5af0:	210d      	movs	r1, #13
    5af2:	4630      	mov	r0, r6
    5af4:	f7ff fe86 	bl	5804 <_Unwind_GetGR>
    5af8:	f1b8 0f02 	cmp.w	r8, #2
    5afc:	6228      	str	r0, [r5, #32]
    5afe:	d13e      	bne.n	5b7e <__gnu_unwind_pr_common+0x2a6>
    5b00:	462b      	mov	r3, r5
    5b02:	9a04      	ldr	r2, [sp, #16]
    5b04:	f843 2f2c 	str.w	r2, [r3, #44]!
    5b08:	626b      	str	r3, [r5, #36]	; 0x24
    5b0a:	62ac      	str	r4, [r5, #40]	; 0x28
    5b0c:	2006      	movs	r0, #6
    5b0e:	e751      	b.n	59b4 <__gnu_unwind_pr_common+0xdc>
    5b10:	465c      	mov	r4, fp
    5b12:	e7d1      	b.n	5ab8 <__gnu_unwind_pr_common+0x1e0>
    5b14:	a905      	add	r1, sp, #20
    5b16:	4630      	mov	r0, r6
    5b18:	f000 fa92 	bl	6040 <__gnu_unwind_execute>
    5b1c:	2800      	cmp	r0, #0
    5b1e:	f47f af48 	bne.w	59b2 <__gnu_unwind_pr_common+0xda>
    5b22:	9b01      	ldr	r3, [sp, #4]
    5b24:	2b00      	cmp	r3, #0
    5b26:	f43f af54 	beq.w	59d2 <__gnu_unwind_pr_common+0xfa>
    5b2a:	210f      	movs	r1, #15
    5b2c:	4630      	mov	r0, r6
    5b2e:	f7ff fe69 	bl	5804 <_Unwind_GetGR>
    5b32:	210e      	movs	r1, #14
    5b34:	4602      	mov	r2, r0
    5b36:	4630      	mov	r0, r6
    5b38:	f7ff fe86 	bl	5848 <_Unwind_SetGR>
    5b3c:	4630      	mov	r0, r6
    5b3e:	4a1a      	ldr	r2, [pc, #104]	; (5ba8 <__gnu_unwind_pr_common+0x2d0>)
    5b40:	210f      	movs	r1, #15
    5b42:	f7ff fe81 	bl	5848 <_Unwind_SetGR>
    5b46:	2007      	movs	r0, #7
    5b48:	b009      	add	sp, #36	; 0x24
    5b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b4e:	4620      	mov	r0, r4
    5b50:	f7ff fc74 	bl	543c <selfrel_offset31>
    5b54:	3404      	adds	r4, #4
    5b56:	4607      	mov	r7, r0
    5b58:	63ac      	str	r4, [r5, #56]	; 0x38
    5b5a:	4628      	mov	r0, r5
    5b5c:	f3af 8000 	nop.w
    5b60:	2800      	cmp	r0, #0
    5b62:	f43f af26 	beq.w	59b2 <__gnu_unwind_pr_common+0xda>
    5b66:	4630      	mov	r0, r6
    5b68:	463a      	mov	r2, r7
    5b6a:	210f      	movs	r1, #15
    5b6c:	f7ff fe6c 	bl	5848 <_Unwind_SetGR>
    5b70:	2007      	movs	r0, #7
    5b72:	e71f      	b.n	59b4 <__gnu_unwind_pr_common+0xdc>
    5b74:	4630      	mov	r0, r6
    5b76:	210d      	movs	r1, #13
    5b78:	f7ff fe44 	bl	5804 <_Unwind_GetGR>
    5b7c:	6228      	str	r0, [r5, #32]
    5b7e:	9b04      	ldr	r3, [sp, #16]
    5b80:	626b      	str	r3, [r5, #36]	; 0x24
    5b82:	e7c2      	b.n	5b0a <__gnu_unwind_pr_common+0x232>
    5b84:	f10a 0001 	add.w	r0, sl, #1
    5b88:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5b8c:	f7ff fc56 	bl	543c <selfrel_offset31>
    5b90:	210f      	movs	r1, #15
    5b92:	4602      	mov	r2, r0
    5b94:	4630      	mov	r0, r6
    5b96:	f7ff fe57 	bl	5848 <_Unwind_SetGR>
    5b9a:	4630      	mov	r0, r6
    5b9c:	462a      	mov	r2, r5
    5b9e:	4641      	mov	r1, r8
    5ba0:	f7ff fe52 	bl	5848 <_Unwind_SetGR>
    5ba4:	2007      	movs	r0, #7
    5ba6:	e705      	b.n	59b4 <__gnu_unwind_pr_common+0xdc>
    5ba8:	00000000 	.word	0x00000000

00005bac <__aeabi_unwind_cpp_pr0>:
    5bac:	2300      	movs	r3, #0
    5bae:	e693      	b.n	58d8 <__gnu_unwind_pr_common>

00005bb0 <__aeabi_unwind_cpp_pr1>:
    5bb0:	2301      	movs	r3, #1
    5bb2:	e691      	b.n	58d8 <__gnu_unwind_pr_common>

00005bb4 <__aeabi_unwind_cpp_pr2>:
    5bb4:	2302      	movs	r3, #2
    5bb6:	e68f      	b.n	58d8 <__gnu_unwind_pr_common>

00005bb8 <_Unwind_VRS_Pop>:
    5bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bbc:	4605      	mov	r5, r0
    5bbe:	b0c4      	sub	sp, #272	; 0x110
    5bc0:	2904      	cmp	r1, #4
    5bc2:	d806      	bhi.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5bc4:	e8df f001 	tbb	[pc, r1]
    5bc8:	03052b4d 	.word	0x03052b4d
    5bcc:	09          	.byte	0x09
    5bcd:	00          	.byte	0x00
    5bce:	2b03      	cmp	r3, #3
    5bd0:	d05f      	beq.n	5c92 <_Unwind_VRS_Pop+0xda>
    5bd2:	2002      	movs	r0, #2
    5bd4:	b044      	add	sp, #272	; 0x110
    5bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d1f9      	bne.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5bde:	2a10      	cmp	r2, #16
    5be0:	d8f7      	bhi.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5be2:	682b      	ldr	r3, [r5, #0]
    5be4:	06dc      	lsls	r4, r3, #27
    5be6:	f100 80f6 	bmi.w	5dd6 <_Unwind_VRS_Pop+0x21e>
    5bea:	ac22      	add	r4, sp, #136	; 0x88
    5bec:	4620      	mov	r0, r4
    5bee:	9201      	str	r2, [sp, #4]
    5bf0:	2601      	movs	r6, #1
    5bf2:	f000 f995 	bl	5f20 <__gnu_Unwind_Save_WMMXC>
    5bf6:	2300      	movs	r3, #0
    5bf8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5bfa:	9a01      	ldr	r2, [sp, #4]
    5bfc:	fa06 f103 	lsl.w	r1, r6, r3
    5c00:	4211      	tst	r1, r2
    5c02:	d003      	beq.n	5c0c <_Unwind_VRS_Pop+0x54>
    5c04:	6801      	ldr	r1, [r0, #0]
    5c06:	3004      	adds	r0, #4
    5c08:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    5c0c:	3301      	adds	r3, #1
    5c0e:	2b04      	cmp	r3, #4
    5c10:	d1f4      	bne.n	5bfc <_Unwind_VRS_Pop+0x44>
    5c12:	63a8      	str	r0, [r5, #56]	; 0x38
    5c14:	4620      	mov	r0, r4
    5c16:	f000 f979 	bl	5f0c <__gnu_Unwind_Restore_WMMXC>
    5c1a:	2000      	movs	r0, #0
    5c1c:	e7da      	b.n	5bd4 <_Unwind_VRS_Pop+0x1c>
    5c1e:	2b01      	cmp	r3, #1
    5c20:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5c24:	b297      	uxth	r7, r2
    5c26:	d054      	beq.n	5cd2 <_Unwind_VRS_Pop+0x11a>
    5c28:	2b05      	cmp	r3, #5
    5c2a:	d1d2      	bne.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5c2c:	eb06 0807 	add.w	r8, r6, r7
    5c30:	f1b8 0f20 	cmp.w	r8, #32
    5c34:	d8cd      	bhi.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5c36:	2e0f      	cmp	r6, #15
    5c38:	f240 809b 	bls.w	5d72 <_Unwind_VRS_Pop+0x1ba>
    5c3c:	46b8      	mov	r8, r7
    5c3e:	2f00      	cmp	r7, #0
    5c40:	f040 80dd 	bne.w	5dfe <_Unwind_VRS_Pop+0x246>
    5c44:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5c46:	2e0f      	cmp	r6, #15
    5c48:	63aa      	str	r2, [r5, #56]	; 0x38
    5c4a:	f240 80c0 	bls.w	5dce <_Unwind_VRS_Pop+0x216>
    5c4e:	f1b8 0f00 	cmp.w	r8, #0
    5c52:	d002      	beq.n	5c5a <_Unwind_VRS_Pop+0xa2>
    5c54:	a802      	add	r0, sp, #8
    5c56:	f000 f90d 	bl	5e74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5c5a:	2000      	movs	r0, #0
    5c5c:	b044      	add	sp, #272	; 0x110
    5c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c62:	2b00      	cmp	r3, #0
    5c64:	d1b5      	bne.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5c66:	2701      	movs	r7, #1
    5c68:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5c6a:	b296      	uxth	r6, r2
    5c6c:	1d28      	adds	r0, r5, #4
    5c6e:	fa07 f103 	lsl.w	r1, r7, r3
    5c72:	4231      	tst	r1, r6
    5c74:	f103 0301 	add.w	r3, r3, #1
    5c78:	d002      	beq.n	5c80 <_Unwind_VRS_Pop+0xc8>
    5c7a:	6821      	ldr	r1, [r4, #0]
    5c7c:	3404      	adds	r4, #4
    5c7e:	6001      	str	r1, [r0, #0]
    5c80:	2b10      	cmp	r3, #16
    5c82:	f100 0004 	add.w	r0, r0, #4
    5c86:	d1f2      	bne.n	5c6e <_Unwind_VRS_Pop+0xb6>
    5c88:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5c8c:	d1e5      	bne.n	5c5a <_Unwind_VRS_Pop+0xa2>
    5c8e:	63ac      	str	r4, [r5, #56]	; 0x38
    5c90:	e7a0      	b.n	5bd4 <_Unwind_VRS_Pop+0x1c>
    5c92:	0c16      	lsrs	r6, r2, #16
    5c94:	b297      	uxth	r7, r2
    5c96:	19f3      	adds	r3, r6, r7
    5c98:	2b10      	cmp	r3, #16
    5c9a:	d89a      	bhi.n	5bd2 <_Unwind_VRS_Pop+0x1a>
    5c9c:	682b      	ldr	r3, [r5, #0]
    5c9e:	071a      	lsls	r2, r3, #28
    5ca0:	d45f      	bmi.n	5d62 <_Unwind_VRS_Pop+0x1aa>
    5ca2:	ac22      	add	r4, sp, #136	; 0x88
    5ca4:	4620      	mov	r0, r4
    5ca6:	f000 f90f 	bl	5ec8 <__gnu_Unwind_Save_WMMXD>
    5caa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5cae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5cb0:	b14f      	cbz	r7, 5cc6 <_Unwind_VRS_Pop+0x10e>
    5cb2:	4603      	mov	r3, r0
    5cb4:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    5cb8:	681a      	ldr	r2, [r3, #0]
    5cba:	3304      	adds	r3, #4
    5cbc:	4283      	cmp	r3, r0
    5cbe:	f841 2b04 	str.w	r2, [r1], #4
    5cc2:	d1f9      	bne.n	5cb8 <_Unwind_VRS_Pop+0x100>
    5cc4:	4618      	mov	r0, r3
    5cc6:	63a8      	str	r0, [r5, #56]	; 0x38
    5cc8:	4620      	mov	r0, r4
    5cca:	f000 f8db 	bl	5e84 <__gnu_Unwind_Restore_WMMXD>
    5cce:	2000      	movs	r0, #0
    5cd0:	e780      	b.n	5bd4 <_Unwind_VRS_Pop+0x1c>
    5cd2:	19f2      	adds	r2, r6, r7
    5cd4:	2a10      	cmp	r2, #16
    5cd6:	f63f af7c 	bhi.w	5bd2 <_Unwind_VRS_Pop+0x1a>
    5cda:	2e0f      	cmp	r6, #15
    5cdc:	f63f af79 	bhi.w	5bd2 <_Unwind_VRS_Pop+0x1a>
    5ce0:	682a      	ldr	r2, [r5, #0]
    5ce2:	07d1      	lsls	r1, r2, #31
    5ce4:	d508      	bpl.n	5cf8 <_Unwind_VRS_Pop+0x140>
    5ce6:	4628      	mov	r0, r5
    5ce8:	f022 0203 	bic.w	r2, r2, #3
    5cec:	f840 2b48 	str.w	r2, [r0], #72
    5cf0:	9301      	str	r3, [sp, #4]
    5cf2:	f000 f8b3 	bl	5e5c <__gnu_Unwind_Save_VFP>
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	ac22      	add	r4, sp, #136	; 0x88
    5cfa:	4620      	mov	r0, r4
    5cfc:	9301      	str	r3, [sp, #4]
    5cfe:	f000 f8ad 	bl	5e5c <__gnu_Unwind_Save_VFP>
    5d02:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5d04:	9b01      	ldr	r3, [sp, #4]
    5d06:	2f00      	cmp	r7, #0
    5d08:	f000 8095 	beq.w	5e36 <_Unwind_VRS_Pop+0x27e>
    5d0c:	f04f 0800 	mov.w	r8, #0
    5d10:	007a      	lsls	r2, r7, #1
    5d12:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5d16:	3c04      	subs	r4, #4
    5d18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5d1c:	f851 0b04 	ldr.w	r0, [r1], #4
    5d20:	4291      	cmp	r1, r2
    5d22:	f844 0f04 	str.w	r0, [r4, #4]!
    5d26:	d1f9      	bne.n	5d1c <_Unwind_VRS_Pop+0x164>
    5d28:	f1b8 0f00 	cmp.w	r8, #0
    5d2c:	d00f      	beq.n	5d4e <_Unwind_VRS_Pop+0x196>
    5d2e:	ac02      	add	r4, sp, #8
    5d30:	2e10      	cmp	r6, #16
    5d32:	4631      	mov	r1, r6
    5d34:	bf38      	it	cc
    5d36:	2110      	movcc	r1, #16
    5d38:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5d3c:	3984      	subs	r1, #132	; 0x84
    5d3e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    5d42:	f852 0b04 	ldr.w	r0, [r2], #4
    5d46:	4294      	cmp	r4, r2
    5d48:	f841 0f04 	str.w	r0, [r1, #4]!
    5d4c:	d1f9      	bne.n	5d42 <_Unwind_VRS_Pop+0x18a>
    5d4e:	2b01      	cmp	r3, #1
    5d50:	f47f af79 	bne.w	5c46 <_Unwind_VRS_Pop+0x8e>
    5d54:	ac22      	add	r4, sp, #136	; 0x88
    5d56:	3204      	adds	r2, #4
    5d58:	63aa      	str	r2, [r5, #56]	; 0x38
    5d5a:	4620      	mov	r0, r4
    5d5c:	f000 f87a 	bl	5e54 <__gnu_Unwind_Restore_VFP>
    5d60:	e77b      	b.n	5c5a <_Unwind_VRS_Pop+0xa2>
    5d62:	f023 0308 	bic.w	r3, r3, #8
    5d66:	602b      	str	r3, [r5, #0]
    5d68:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5d6c:	f000 f8ac 	bl	5ec8 <__gnu_Unwind_Save_WMMXD>
    5d70:	e797      	b.n	5ca2 <_Unwind_VRS_Pop+0xea>
    5d72:	f1b8 0f10 	cmp.w	r8, #16
    5d76:	682a      	ldr	r2, [r5, #0]
    5d78:	d943      	bls.n	5e02 <_Unwind_VRS_Pop+0x24a>
    5d7a:	07d0      	lsls	r0, r2, #31
    5d7c:	f1a8 0810 	sub.w	r8, r8, #16
    5d80:	d50b      	bpl.n	5d9a <_Unwind_VRS_Pop+0x1e2>
    5d82:	4628      	mov	r0, r5
    5d84:	f022 0201 	bic.w	r2, r2, #1
    5d88:	f042 0202 	orr.w	r2, r2, #2
    5d8c:	f840 2b48 	str.w	r2, [r0], #72
    5d90:	9301      	str	r3, [sp, #4]
    5d92:	f000 f86b 	bl	5e6c <__gnu_Unwind_Save_VFP_D>
    5d96:	682a      	ldr	r2, [r5, #0]
    5d98:	9b01      	ldr	r3, [sp, #4]
    5d9a:	0751      	lsls	r1, r2, #29
    5d9c:	d425      	bmi.n	5dea <_Unwind_VRS_Pop+0x232>
    5d9e:	2e0f      	cmp	r6, #15
    5da0:	d804      	bhi.n	5dac <_Unwind_VRS_Pop+0x1f4>
    5da2:	a822      	add	r0, sp, #136	; 0x88
    5da4:	9301      	str	r3, [sp, #4]
    5da6:	f000 f861 	bl	5e6c <__gnu_Unwind_Save_VFP_D>
    5daa:	9b01      	ldr	r3, [sp, #4]
    5dac:	ac02      	add	r4, sp, #8
    5dae:	4620      	mov	r0, r4
    5db0:	9301      	str	r3, [sp, #4]
    5db2:	f000 f863 	bl	5e7c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5db6:	f1c6 0010 	rsb	r0, r6, #16
    5dba:	2800      	cmp	r0, #0
    5dbc:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5dbe:	9b01      	ldr	r3, [sp, #4]
    5dc0:	ddb6      	ble.n	5d30 <_Unwind_VRS_Pop+0x178>
    5dc2:	ac22      	add	r4, sp, #136	; 0x88
    5dc4:	4611      	mov	r1, r2
    5dc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5dca:	0042      	lsls	r2, r0, #1
    5dcc:	e7a3      	b.n	5d16 <_Unwind_VRS_Pop+0x15e>
    5dce:	a822      	add	r0, sp, #136	; 0x88
    5dd0:	f000 f848 	bl	5e64 <__gnu_Unwind_Restore_VFP_D>
    5dd4:	e73b      	b.n	5c4e <_Unwind_VRS_Pop+0x96>
    5dd6:	f023 0310 	bic.w	r3, r3, #16
    5dda:	602b      	str	r3, [r5, #0]
    5ddc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5de0:	9201      	str	r2, [sp, #4]
    5de2:	f000 f89d 	bl	5f20 <__gnu_Unwind_Save_WMMXC>
    5de6:	9a01      	ldr	r2, [sp, #4]
    5de8:	e6ff      	b.n	5bea <_Unwind_VRS_Pop+0x32>
    5dea:	4628      	mov	r0, r5
    5dec:	f022 0204 	bic.w	r2, r2, #4
    5df0:	f840 2bd0 	str.w	r2, [r0], #208
    5df4:	9301      	str	r3, [sp, #4]
    5df6:	f000 f841 	bl	5e7c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	e7cf      	b.n	5d9e <_Unwind_VRS_Pop+0x1e6>
    5dfe:	682a      	ldr	r2, [r5, #0]
    5e00:	e7cb      	b.n	5d9a <_Unwind_VRS_Pop+0x1e2>
    5e02:	07d0      	lsls	r0, r2, #31
    5e04:	d50a      	bpl.n	5e1c <_Unwind_VRS_Pop+0x264>
    5e06:	4628      	mov	r0, r5
    5e08:	f022 0201 	bic.w	r2, r2, #1
    5e0c:	f042 0202 	orr.w	r2, r2, #2
    5e10:	f840 2b48 	str.w	r2, [r0], #72
    5e14:	9301      	str	r3, [sp, #4]
    5e16:	f000 f829 	bl	5e6c <__gnu_Unwind_Save_VFP_D>
    5e1a:	9b01      	ldr	r3, [sp, #4]
    5e1c:	ac22      	add	r4, sp, #136	; 0x88
    5e1e:	4620      	mov	r0, r4
    5e20:	9301      	str	r3, [sp, #4]
    5e22:	46b8      	mov	r8, r7
    5e24:	f000 f822 	bl	5e6c <__gnu_Unwind_Save_VFP_D>
    5e28:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5e2a:	9b01      	ldr	r3, [sp, #4]
    5e2c:	2f00      	cmp	r7, #0
    5e2e:	f47f af6d 	bne.w	5d0c <_Unwind_VRS_Pop+0x154>
    5e32:	460a      	mov	r2, r1
    5e34:	e707      	b.n	5c46 <_Unwind_VRS_Pop+0x8e>
    5e36:	460a      	mov	r2, r1
    5e38:	e78d      	b.n	5d56 <_Unwind_VRS_Pop+0x19e>
    5e3a:	bf00      	nop

00005e3c <__restore_core_regs>:
    5e3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5e40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5e44:	469c      	mov	ip, r3
    5e46:	46a6      	mov	lr, r4
    5e48:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5e4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5e50:	46e5      	mov	sp, ip
    5e52:	bd00      	pop	{pc}

00005e54 <__gnu_Unwind_Restore_VFP>:
    5e54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5e58:	4770      	bx	lr
    5e5a:	bf00      	nop

00005e5c <__gnu_Unwind_Save_VFP>:
    5e5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5e60:	4770      	bx	lr
    5e62:	bf00      	nop

00005e64 <__gnu_Unwind_Restore_VFP_D>:
    5e64:	ec90 0b20 	vldmia	r0, {d0-d15}
    5e68:	4770      	bx	lr
    5e6a:	bf00      	nop

00005e6c <__gnu_Unwind_Save_VFP_D>:
    5e6c:	ec80 0b20 	vstmia	r0, {d0-d15}
    5e70:	4770      	bx	lr
    5e72:	bf00      	nop

00005e74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5e74:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5e78:	4770      	bx	lr
    5e7a:	bf00      	nop

00005e7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5e7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop

00005e84 <__gnu_Unwind_Restore_WMMXD>:
    5e84:	ecf0 0102 	ldfe	f0, [r0], #8
    5e88:	ecf0 1102 	ldfe	f1, [r0], #8
    5e8c:	ecf0 2102 	ldfe	f2, [r0], #8
    5e90:	ecf0 3102 	ldfe	f3, [r0], #8
    5e94:	ecf0 4102 	ldfe	f4, [r0], #8
    5e98:	ecf0 5102 	ldfe	f5, [r0], #8
    5e9c:	ecf0 6102 	ldfe	f6, [r0], #8
    5ea0:	ecf0 7102 	ldfe	f7, [r0], #8
    5ea4:	ecf0 8102 	ldfp	f0, [r0], #8
    5ea8:	ecf0 9102 	ldfp	f1, [r0], #8
    5eac:	ecf0 a102 	ldfp	f2, [r0], #8
    5eb0:	ecf0 b102 	ldfp	f3, [r0], #8
    5eb4:	ecf0 c102 	ldfp	f4, [r0], #8
    5eb8:	ecf0 d102 	ldfp	f5, [r0], #8
    5ebc:	ecf0 e102 	ldfp	f6, [r0], #8
    5ec0:	ecf0 f102 	ldfp	f7, [r0], #8
    5ec4:	4770      	bx	lr
    5ec6:	bf00      	nop

00005ec8 <__gnu_Unwind_Save_WMMXD>:
    5ec8:	ece0 0102 	stfe	f0, [r0], #8
    5ecc:	ece0 1102 	stfe	f1, [r0], #8
    5ed0:	ece0 2102 	stfe	f2, [r0], #8
    5ed4:	ece0 3102 	stfe	f3, [r0], #8
    5ed8:	ece0 4102 	stfe	f4, [r0], #8
    5edc:	ece0 5102 	stfe	f5, [r0], #8
    5ee0:	ece0 6102 	stfe	f6, [r0], #8
    5ee4:	ece0 7102 	stfe	f7, [r0], #8
    5ee8:	ece0 8102 	stfp	f0, [r0], #8
    5eec:	ece0 9102 	stfp	f1, [r0], #8
    5ef0:	ece0 a102 	stfp	f2, [r0], #8
    5ef4:	ece0 b102 	stfp	f3, [r0], #8
    5ef8:	ece0 c102 	stfp	f4, [r0], #8
    5efc:	ece0 d102 	stfp	f5, [r0], #8
    5f00:	ece0 e102 	stfp	f6, [r0], #8
    5f04:	ece0 f102 	stfp	f7, [r0], #8
    5f08:	4770      	bx	lr
    5f0a:	bf00      	nop

00005f0c <__gnu_Unwind_Restore_WMMXC>:
    5f0c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5f10:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5f14:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5f18:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5f1c:	4770      	bx	lr
    5f1e:	bf00      	nop

00005f20 <__gnu_Unwind_Save_WMMXC>:
    5f20:	fca0 8101 	stc2	1, cr8, [r0], #4
    5f24:	fca0 9101 	stc2	1, cr9, [r0], #4
    5f28:	fca0 a101 	stc2	1, cr10, [r0], #4
    5f2c:	fca0 b101 	stc2	1, cr11, [r0], #4
    5f30:	4770      	bx	lr
    5f32:	bf00      	nop

00005f34 <_Unwind_RaiseException>:
    5f34:	46ec      	mov	ip, sp
    5f36:	b500      	push	{lr}
    5f38:	e92d 5000 	stmdb	sp!, {ip, lr}
    5f3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5f40:	f04f 0300 	mov.w	r3, #0
    5f44:	e92d 000c 	stmdb	sp!, {r2, r3}
    5f48:	a901      	add	r1, sp, #4
    5f4a:	f7ff fbd7 	bl	56fc <__gnu_Unwind_RaiseException>
    5f4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5f52:	b012      	add	sp, #72	; 0x48
    5f54:	4770      	bx	lr
    5f56:	bf00      	nop

00005f58 <_Unwind_Resume>:
    5f58:	46ec      	mov	ip, sp
    5f5a:	b500      	push	{lr}
    5f5c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5f60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5f64:	f04f 0300 	mov.w	r3, #0
    5f68:	e92d 000c 	stmdb	sp!, {r2, r3}
    5f6c:	a901      	add	r1, sp, #4
    5f6e:	f7ff fbff 	bl	5770 <__gnu_Unwind_Resume>
    5f72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5f76:	b012      	add	sp, #72	; 0x48
    5f78:	4770      	bx	lr
    5f7a:	bf00      	nop

00005f7c <_Unwind_Resume_or_Rethrow>:
    5f7c:	46ec      	mov	ip, sp
    5f7e:	b500      	push	{lr}
    5f80:	e92d 5000 	stmdb	sp!, {ip, lr}
    5f84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5f88:	f04f 0300 	mov.w	r3, #0
    5f8c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5f90:	a901      	add	r1, sp, #4
    5f92:	f7ff fc0f 	bl	57b4 <__gnu_Unwind_Resume_or_Rethrow>
    5f96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5f9a:	b012      	add	sp, #72	; 0x48
    5f9c:	4770      	bx	lr
    5f9e:	bf00      	nop

00005fa0 <_Unwind_ForcedUnwind>:
    5fa0:	46ec      	mov	ip, sp
    5fa2:	b500      	push	{lr}
    5fa4:	e92d 5000 	stmdb	sp!, {ip, lr}
    5fa8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5fac:	f04f 0300 	mov.w	r3, #0
    5fb0:	e92d 000c 	stmdb	sp!, {r2, r3}
    5fb4:	ab01      	add	r3, sp, #4
    5fb6:	f7ff fbd1 	bl	575c <__gnu_Unwind_ForcedUnwind>
    5fba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5fbe:	b012      	add	sp, #72	; 0x48
    5fc0:	4770      	bx	lr
    5fc2:	bf00      	nop

00005fc4 <_Unwind_Backtrace>:
    5fc4:	46ec      	mov	ip, sp
    5fc6:	b500      	push	{lr}
    5fc8:	e92d 5000 	stmdb	sp!, {ip, lr}
    5fcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5fd0:	f04f 0300 	mov.w	r3, #0
    5fd4:	e92d 000c 	stmdb	sp!, {r2, r3}
    5fd8:	aa01      	add	r2, sp, #4
    5fda:	f7ff fc43 	bl	5864 <__gnu_Unwind_Backtrace>
    5fde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5fe2:	b012      	add	sp, #72	; 0x48
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop

00005fe8 <next_unwind_byte>:
    5fe8:	7a02      	ldrb	r2, [r0, #8]
    5fea:	b97a      	cbnz	r2, 600c <next_unwind_byte+0x24>
    5fec:	7a43      	ldrb	r3, [r0, #9]
    5fee:	b1a3      	cbz	r3, 601a <next_unwind_byte+0x32>
    5ff0:	2103      	movs	r1, #3
    5ff2:	6842      	ldr	r2, [r0, #4]
    5ff4:	3b01      	subs	r3, #1
    5ff6:	b410      	push	{r4}
    5ff8:	7243      	strb	r3, [r0, #9]
    5ffa:	6813      	ldr	r3, [r2, #0]
    5ffc:	1d14      	adds	r4, r2, #4
    5ffe:	7201      	strb	r1, [r0, #8]
    6000:	021a      	lsls	r2, r3, #8
    6002:	6044      	str	r4, [r0, #4]
    6004:	6002      	str	r2, [r0, #0]
    6006:	bc10      	pop	{r4}
    6008:	0e18      	lsrs	r0, r3, #24
    600a:	4770      	bx	lr
    600c:	6803      	ldr	r3, [r0, #0]
    600e:	3a01      	subs	r2, #1
    6010:	7202      	strb	r2, [r0, #8]
    6012:	021a      	lsls	r2, r3, #8
    6014:	6002      	str	r2, [r0, #0]
    6016:	0e18      	lsrs	r0, r3, #24
    6018:	4770      	bx	lr
    601a:	20b0      	movs	r0, #176	; 0xb0
    601c:	4770      	bx	lr
    601e:	bf00      	nop

00006020 <_Unwind_GetGR.constprop.0>:
    6020:	2300      	movs	r3, #0
    6022:	b500      	push	{lr}
    6024:	b085      	sub	sp, #20
    6026:	aa03      	add	r2, sp, #12
    6028:	9200      	str	r2, [sp, #0]
    602a:	4619      	mov	r1, r3
    602c:	220c      	movs	r2, #12
    602e:	f7ff fbd3 	bl	57d8 <_Unwind_VRS_Get>
    6032:	9803      	ldr	r0, [sp, #12]
    6034:	b005      	add	sp, #20
    6036:	f85d fb04 	ldr.w	pc, [sp], #4
    603a:	bf00      	nop

0000603c <unwind_UCB_from_context>:
    603c:	e7f0      	b.n	6020 <_Unwind_GetGR.constprop.0>
    603e:	bf00      	nop

00006040 <__gnu_unwind_execute>:
    6040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6044:	4605      	mov	r5, r0
    6046:	460e      	mov	r6, r1
    6048:	f04f 0800 	mov.w	r8, #0
    604c:	b085      	sub	sp, #20
    604e:	4630      	mov	r0, r6
    6050:	f7ff ffca 	bl	5fe8 <next_unwind_byte>
    6054:	28b0      	cmp	r0, #176	; 0xb0
    6056:	4604      	mov	r4, r0
    6058:	f000 80b0 	beq.w	61bc <__gnu_unwind_execute+0x17c>
    605c:	0607      	lsls	r7, r0, #24
    605e:	d520      	bpl.n	60a2 <__gnu_unwind_execute+0x62>
    6060:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    6064:	2b80      	cmp	r3, #128	; 0x80
    6066:	d065      	beq.n	6134 <__gnu_unwind_execute+0xf4>
    6068:	2b90      	cmp	r3, #144	; 0x90
    606a:	d036      	beq.n	60da <__gnu_unwind_execute+0x9a>
    606c:	2ba0      	cmp	r3, #160	; 0xa0
    606e:	d078      	beq.n	6162 <__gnu_unwind_execute+0x122>
    6070:	2bb0      	cmp	r3, #176	; 0xb0
    6072:	d047      	beq.n	6104 <__gnu_unwind_execute+0xc4>
    6074:	2bc0      	cmp	r3, #192	; 0xc0
    6076:	f000 8089 	beq.w	618c <__gnu_unwind_execute+0x14c>
    607a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    607e:	2bd0      	cmp	r3, #208	; 0xd0
    6080:	d10b      	bne.n	609a <__gnu_unwind_execute+0x5a>
    6082:	f000 0207 	and.w	r2, r0, #7
    6086:	3201      	adds	r2, #1
    6088:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    608c:	2305      	movs	r3, #5
    608e:	2101      	movs	r1, #1
    6090:	4628      	mov	r0, r5
    6092:	f7ff fd91 	bl	5bb8 <_Unwind_VRS_Pop>
    6096:	2800      	cmp	r0, #0
    6098:	d0d9      	beq.n	604e <__gnu_unwind_execute+0xe>
    609a:	2009      	movs	r0, #9
    609c:	b005      	add	sp, #20
    609e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    60a2:	2300      	movs	r3, #0
    60a4:	f10d 090c 	add.w	r9, sp, #12
    60a8:	4619      	mov	r1, r3
    60aa:	0087      	lsls	r7, r0, #2
    60ac:	f8cd 9000 	str.w	r9, [sp]
    60b0:	220d      	movs	r2, #13
    60b2:	4628      	mov	r0, r5
    60b4:	f7ff fb90 	bl	57d8 <_Unwind_VRS_Get>
    60b8:	b2ff      	uxtb	r7, r7
    60ba:	9b03      	ldr	r3, [sp, #12]
    60bc:	3704      	adds	r7, #4
    60be:	0660      	lsls	r0, r4, #25
    60c0:	bf4c      	ite	mi
    60c2:	1bdf      	submi	r7, r3, r7
    60c4:	18ff      	addpl	r7, r7, r3
    60c6:	2300      	movs	r3, #0
    60c8:	f8cd 9000 	str.w	r9, [sp]
    60cc:	4619      	mov	r1, r3
    60ce:	220d      	movs	r2, #13
    60d0:	4628      	mov	r0, r5
    60d2:	9703      	str	r7, [sp, #12]
    60d4:	f7ff fba2 	bl	581c <_Unwind_VRS_Set>
    60d8:	e7b9      	b.n	604e <__gnu_unwind_execute+0xe>
    60da:	f000 030d 	and.w	r3, r0, #13
    60de:	2b0d      	cmp	r3, #13
    60e0:	d0db      	beq.n	609a <__gnu_unwind_execute+0x5a>
    60e2:	2300      	movs	r3, #0
    60e4:	af03      	add	r7, sp, #12
    60e6:	f000 020f 	and.w	r2, r0, #15
    60ea:	4619      	mov	r1, r3
    60ec:	9700      	str	r7, [sp, #0]
    60ee:	4628      	mov	r0, r5
    60f0:	f7ff fb72 	bl	57d8 <_Unwind_VRS_Get>
    60f4:	2300      	movs	r3, #0
    60f6:	9700      	str	r7, [sp, #0]
    60f8:	4619      	mov	r1, r3
    60fa:	220d      	movs	r2, #13
    60fc:	4628      	mov	r0, r5
    60fe:	f7ff fb8d 	bl	581c <_Unwind_VRS_Set>
    6102:	e7a4      	b.n	604e <__gnu_unwind_execute+0xe>
    6104:	28b1      	cmp	r0, #177	; 0xb1
    6106:	d05e      	beq.n	61c6 <__gnu_unwind_execute+0x186>
    6108:	28b2      	cmp	r0, #178	; 0xb2
    610a:	f000 80cb 	beq.w	62a4 <__gnu_unwind_execute+0x264>
    610e:	28b3      	cmp	r0, #179	; 0xb3
    6110:	d07d      	beq.n	620e <__gnu_unwind_execute+0x1ce>
    6112:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    6116:	2bb4      	cmp	r3, #180	; 0xb4
    6118:	d0bf      	beq.n	609a <__gnu_unwind_execute+0x5a>
    611a:	2301      	movs	r3, #1
    611c:	f000 0207 	and.w	r2, r0, #7
    6120:	441a      	add	r2, r3
    6122:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    6126:	4619      	mov	r1, r3
    6128:	4628      	mov	r0, r5
    612a:	f7ff fd45 	bl	5bb8 <_Unwind_VRS_Pop>
    612e:	2800      	cmp	r0, #0
    6130:	d08d      	beq.n	604e <__gnu_unwind_execute+0xe>
    6132:	e7b2      	b.n	609a <__gnu_unwind_execute+0x5a>
    6134:	4630      	mov	r0, r6
    6136:	f7ff ff57 	bl	5fe8 <next_unwind_byte>
    613a:	0224      	lsls	r4, r4, #8
    613c:	4304      	orrs	r4, r0
    613e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    6142:	d0aa      	beq.n	609a <__gnu_unwind_execute+0x5a>
    6144:	2300      	movs	r3, #0
    6146:	0124      	lsls	r4, r4, #4
    6148:	b2a2      	uxth	r2, r4
    614a:	4619      	mov	r1, r3
    614c:	4628      	mov	r0, r5
    614e:	f7ff fd33 	bl	5bb8 <_Unwind_VRS_Pop>
    6152:	2800      	cmp	r0, #0
    6154:	d1a1      	bne.n	609a <__gnu_unwind_execute+0x5a>
    6156:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    615a:	bf18      	it	ne
    615c:	f04f 0801 	movne.w	r8, #1
    6160:	e775      	b.n	604e <__gnu_unwind_execute+0xe>
    6162:	43c3      	mvns	r3, r0
    6164:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    6168:	f003 0307 	and.w	r3, r3, #7
    616c:	411a      	asrs	r2, r3
    616e:	2300      	movs	r3, #0
    6170:	0701      	lsls	r1, r0, #28
    6172:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    6176:	bf48      	it	mi
    6178:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    617c:	4619      	mov	r1, r3
    617e:	4628      	mov	r0, r5
    6180:	f7ff fd1a 	bl	5bb8 <_Unwind_VRS_Pop>
    6184:	2800      	cmp	r0, #0
    6186:	f43f af62 	beq.w	604e <__gnu_unwind_execute+0xe>
    618a:	e786      	b.n	609a <__gnu_unwind_execute+0x5a>
    618c:	28c6      	cmp	r0, #198	; 0xc6
    618e:	d051      	beq.n	6234 <__gnu_unwind_execute+0x1f4>
    6190:	28c7      	cmp	r0, #199	; 0xc7
    6192:	d05a      	beq.n	624a <__gnu_unwind_execute+0x20a>
    6194:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    6198:	2bc0      	cmp	r3, #192	; 0xc0
    619a:	d069      	beq.n	6270 <__gnu_unwind_execute+0x230>
    619c:	28c8      	cmp	r0, #200	; 0xc8
    619e:	d075      	beq.n	628c <__gnu_unwind_execute+0x24c>
    61a0:	28c9      	cmp	r0, #201	; 0xc9
    61a2:	f47f af7a 	bne.w	609a <__gnu_unwind_execute+0x5a>
    61a6:	4630      	mov	r0, r6
    61a8:	f7ff ff1e 	bl	5fe8 <next_unwind_byte>
    61ac:	0302      	lsls	r2, r0, #12
    61ae:	f000 000f 	and.w	r0, r0, #15
    61b2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    61b6:	3001      	adds	r0, #1
    61b8:	4302      	orrs	r2, r0
    61ba:	e767      	b.n	608c <__gnu_unwind_execute+0x4c>
    61bc:	f1b8 0f00 	cmp.w	r8, #0
    61c0:	d014      	beq.n	61ec <__gnu_unwind_execute+0x1ac>
    61c2:	2000      	movs	r0, #0
    61c4:	e76a      	b.n	609c <__gnu_unwind_execute+0x5c>
    61c6:	4630      	mov	r0, r6
    61c8:	f7ff ff0e 	bl	5fe8 <next_unwind_byte>
    61cc:	2800      	cmp	r0, #0
    61ce:	f43f af64 	beq.w	609a <__gnu_unwind_execute+0x5a>
    61d2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    61d6:	f47f af60 	bne.w	609a <__gnu_unwind_execute+0x5a>
    61da:	4602      	mov	r2, r0
    61dc:	4619      	mov	r1, r3
    61de:	4628      	mov	r0, r5
    61e0:	f7ff fcea 	bl	5bb8 <_Unwind_VRS_Pop>
    61e4:	2800      	cmp	r0, #0
    61e6:	f43f af32 	beq.w	604e <__gnu_unwind_execute+0xe>
    61ea:	e756      	b.n	609a <__gnu_unwind_execute+0x5a>
    61ec:	ac03      	add	r4, sp, #12
    61ee:	4643      	mov	r3, r8
    61f0:	220e      	movs	r2, #14
    61f2:	4641      	mov	r1, r8
    61f4:	9400      	str	r4, [sp, #0]
    61f6:	4628      	mov	r0, r5
    61f8:	f7ff faee 	bl	57d8 <_Unwind_VRS_Get>
    61fc:	9400      	str	r4, [sp, #0]
    61fe:	4628      	mov	r0, r5
    6200:	4643      	mov	r3, r8
    6202:	220f      	movs	r2, #15
    6204:	4641      	mov	r1, r8
    6206:	f7ff fb09 	bl	581c <_Unwind_VRS_Set>
    620a:	4640      	mov	r0, r8
    620c:	e746      	b.n	609c <__gnu_unwind_execute+0x5c>
    620e:	4630      	mov	r0, r6
    6210:	f7ff feea 	bl	5fe8 <next_unwind_byte>
    6214:	2301      	movs	r3, #1
    6216:	0301      	lsls	r1, r0, #12
    6218:	f000 000f 	and.w	r0, r0, #15
    621c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6220:	18c2      	adds	r2, r0, r3
    6222:	430a      	orrs	r2, r1
    6224:	4628      	mov	r0, r5
    6226:	4619      	mov	r1, r3
    6228:	f7ff fcc6 	bl	5bb8 <_Unwind_VRS_Pop>
    622c:	2800      	cmp	r0, #0
    622e:	f43f af0e 	beq.w	604e <__gnu_unwind_execute+0xe>
    6232:	e732      	b.n	609a <__gnu_unwind_execute+0x5a>
    6234:	4630      	mov	r0, r6
    6236:	f7ff fed7 	bl	5fe8 <next_unwind_byte>
    623a:	0301      	lsls	r1, r0, #12
    623c:	f000 000f 	and.w	r0, r0, #15
    6240:	2303      	movs	r3, #3
    6242:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6246:	1c42      	adds	r2, r0, #1
    6248:	e7eb      	b.n	6222 <__gnu_unwind_execute+0x1e2>
    624a:	4630      	mov	r0, r6
    624c:	f7ff fecc 	bl	5fe8 <next_unwind_byte>
    6250:	4602      	mov	r2, r0
    6252:	2800      	cmp	r0, #0
    6254:	f43f af21 	beq.w	609a <__gnu_unwind_execute+0x5a>
    6258:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    625c:	f47f af1d 	bne.w	609a <__gnu_unwind_execute+0x5a>
    6260:	2104      	movs	r1, #4
    6262:	4628      	mov	r0, r5
    6264:	f7ff fca8 	bl	5bb8 <_Unwind_VRS_Pop>
    6268:	2800      	cmp	r0, #0
    626a:	f43f aef0 	beq.w	604e <__gnu_unwind_execute+0xe>
    626e:	e714      	b.n	609a <__gnu_unwind_execute+0x5a>
    6270:	2303      	movs	r3, #3
    6272:	f000 020f 	and.w	r2, r0, #15
    6276:	3201      	adds	r2, #1
    6278:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    627c:	4619      	mov	r1, r3
    627e:	4628      	mov	r0, r5
    6280:	f7ff fc9a 	bl	5bb8 <_Unwind_VRS_Pop>
    6284:	2800      	cmp	r0, #0
    6286:	f43f aee2 	beq.w	604e <__gnu_unwind_execute+0xe>
    628a:	e706      	b.n	609a <__gnu_unwind_execute+0x5a>
    628c:	4630      	mov	r0, r6
    628e:	f7ff feab 	bl	5fe8 <next_unwind_byte>
    6292:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    6296:	f000 030f 	and.w	r3, r0, #15
    629a:	3210      	adds	r2, #16
    629c:	3301      	adds	r3, #1
    629e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    62a2:	e6f3      	b.n	608c <__gnu_unwind_execute+0x4c>
    62a4:	2300      	movs	r3, #0
    62a6:	f10d 090c 	add.w	r9, sp, #12
    62aa:	220d      	movs	r2, #13
    62ac:	4619      	mov	r1, r3
    62ae:	f8cd 9000 	str.w	r9, [sp]
    62b2:	4628      	mov	r0, r5
    62b4:	f7ff fa90 	bl	57d8 <_Unwind_VRS_Get>
    62b8:	4630      	mov	r0, r6
    62ba:	f7ff fe95 	bl	5fe8 <next_unwind_byte>
    62be:	0602      	lsls	r2, r0, #24
    62c0:	f04f 0702 	mov.w	r7, #2
    62c4:	d50c      	bpl.n	62e0 <__gnu_unwind_execute+0x2a0>
    62c6:	9b03      	ldr	r3, [sp, #12]
    62c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    62cc:	40b8      	lsls	r0, r7
    62ce:	4403      	add	r3, r0
    62d0:	4630      	mov	r0, r6
    62d2:	9303      	str	r3, [sp, #12]
    62d4:	f7ff fe88 	bl	5fe8 <next_unwind_byte>
    62d8:	0603      	lsls	r3, r0, #24
    62da:	f107 0707 	add.w	r7, r7, #7
    62de:	d4f2      	bmi.n	62c6 <__gnu_unwind_execute+0x286>
    62e0:	2300      	movs	r3, #0
    62e2:	9a03      	ldr	r2, [sp, #12]
    62e4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    62e8:	40bc      	lsls	r4, r7
    62ea:	f502 7201 	add.w	r2, r2, #516	; 0x204
    62ee:	4414      	add	r4, r2
    62f0:	f8cd 9000 	str.w	r9, [sp]
    62f4:	4619      	mov	r1, r3
    62f6:	220d      	movs	r2, #13
    62f8:	4628      	mov	r0, r5
    62fa:	9403      	str	r4, [sp, #12]
    62fc:	f7ff fa8e 	bl	581c <_Unwind_VRS_Set>
    6300:	e6a5      	b.n	604e <__gnu_unwind_execute+0xe>
    6302:	bf00      	nop

00006304 <__gnu_unwind_frame>:
    6304:	b530      	push	{r4, r5, lr}
    6306:	2403      	movs	r4, #3
    6308:	460d      	mov	r5, r1
    630a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    630c:	b085      	sub	sp, #20
    630e:	685a      	ldr	r2, [r3, #4]
    6310:	f88d 400c 	strb.w	r4, [sp, #12]
    6314:	79dc      	ldrb	r4, [r3, #7]
    6316:	0212      	lsls	r2, r2, #8
    6318:	3308      	adds	r3, #8
    631a:	a901      	add	r1, sp, #4
    631c:	4628      	mov	r0, r5
    631e:	9201      	str	r2, [sp, #4]
    6320:	f88d 400d 	strb.w	r4, [sp, #13]
    6324:	9302      	str	r3, [sp, #8]
    6326:	f7ff fe8b 	bl	6040 <__gnu_unwind_execute>
    632a:	b005      	add	sp, #20
    632c:	bd30      	pop	{r4, r5, pc}
    632e:	bf00      	nop

00006330 <_Unwind_GetRegionStart>:
    6330:	b508      	push	{r3, lr}
    6332:	f7ff fe83 	bl	603c <unwind_UCB_from_context>
    6336:	6c80      	ldr	r0, [r0, #72]	; 0x48
    6338:	bd08      	pop	{r3, pc}
    633a:	bf00      	nop

0000633c <_Unwind_GetLanguageSpecificData>:
    633c:	b508      	push	{r3, lr}
    633e:	f7ff fe7d 	bl	603c <unwind_UCB_from_context>
    6342:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6344:	79c3      	ldrb	r3, [r0, #7]
    6346:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    634a:	3008      	adds	r0, #8
    634c:	bd08      	pop	{r3, pc}
    634e:	bf00      	nop

00006350 <_Unwind_GetDataRelBase>:
    6350:	b508      	push	{r3, lr}
    6352:	f000 f807 	bl	6364 <abort>
    6356:	bf00      	nop

00006358 <_Unwind_GetTextRelBase>:
    6358:	b508      	push	{r3, lr}
    635a:	f7ff fff9 	bl	6350 <_Unwind_GetDataRelBase>
    635e:	bf00      	nop

00006360 <__aeabi_idiv0>:
    6360:	4770      	bx	lr
    6362:	bf00      	nop

00006364 <abort>:
    6364:	b508      	push	{r3, lr}
    6366:	2006      	movs	r0, #6
    6368:	f000 f864 	bl	6434 <raise>
    636c:	2001      	movs	r0, #1
    636e:	f7fb f8df 	bl	1530 <_exit>
    6372:	Address 0x0000000000006372 is out of bounds.


00006374 <__libc_init_array>:
    6374:	b570      	push	{r4, r5, r6, lr}
    6376:	2500      	movs	r5, #0
    6378:	4e0c      	ldr	r6, [pc, #48]	; (63ac <__libc_init_array+0x38>)
    637a:	4c0d      	ldr	r4, [pc, #52]	; (63b0 <__libc_init_array+0x3c>)
    637c:	1ba4      	subs	r4, r4, r6
    637e:	10a4      	asrs	r4, r4, #2
    6380:	42a5      	cmp	r5, r4
    6382:	d109      	bne.n	6398 <__libc_init_array+0x24>
    6384:	f001 fc26 	bl	7bd4 <_init>
    6388:	2500      	movs	r5, #0
    638a:	4e0a      	ldr	r6, [pc, #40]	; (63b4 <__libc_init_array+0x40>)
    638c:	4c0a      	ldr	r4, [pc, #40]	; (63b8 <__libc_init_array+0x44>)
    638e:	1ba4      	subs	r4, r4, r6
    6390:	10a4      	asrs	r4, r4, #2
    6392:	42a5      	cmp	r5, r4
    6394:	d105      	bne.n	63a2 <__libc_init_array+0x2e>
    6396:	bd70      	pop	{r4, r5, r6, pc}
    6398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    639c:	4798      	blx	r3
    639e:	3501      	adds	r5, #1
    63a0:	e7ee      	b.n	6380 <__libc_init_array+0xc>
    63a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    63a6:	4798      	blx	r3
    63a8:	3501      	adds	r5, #1
    63aa:	e7f2      	b.n	6392 <__libc_init_array+0x1e>
    63ac:	00007be0 	.word	0x00007be0
    63b0:	00007be0 	.word	0x00007be0
    63b4:	00007be0 	.word	0x00007be0
    63b8:	00007bf4 	.word	0x00007bf4

000063bc <memcpy>:
    63bc:	b510      	push	{r4, lr}
    63be:	1e43      	subs	r3, r0, #1
    63c0:	440a      	add	r2, r1
    63c2:	4291      	cmp	r1, r2
    63c4:	d100      	bne.n	63c8 <memcpy+0xc>
    63c6:	bd10      	pop	{r4, pc}
    63c8:	f811 4b01 	ldrb.w	r4, [r1], #1
    63cc:	f803 4f01 	strb.w	r4, [r3, #1]!
    63d0:	e7f7      	b.n	63c2 <memcpy+0x6>

000063d2 <memset>:
    63d2:	4603      	mov	r3, r0
    63d4:	4402      	add	r2, r0
    63d6:	4293      	cmp	r3, r2
    63d8:	d100      	bne.n	63dc <memset+0xa>
    63da:	4770      	bx	lr
    63dc:	f803 1b01 	strb.w	r1, [r3], #1
    63e0:	e7f9      	b.n	63d6 <memset+0x4>

000063e2 <_raise_r>:
    63e2:	291f      	cmp	r1, #31
    63e4:	b538      	push	{r3, r4, r5, lr}
    63e6:	4604      	mov	r4, r0
    63e8:	460d      	mov	r5, r1
    63ea:	d904      	bls.n	63f6 <_raise_r+0x14>
    63ec:	2316      	movs	r3, #22
    63ee:	6003      	str	r3, [r0, #0]
    63f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63f4:	bd38      	pop	{r3, r4, r5, pc}
    63f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    63f8:	b112      	cbz	r2, 6400 <_raise_r+0x1e>
    63fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    63fe:	b94b      	cbnz	r3, 6414 <_raise_r+0x32>
    6400:	4620      	mov	r0, r4
    6402:	f000 f831 	bl	6468 <_getpid_r>
    6406:	462a      	mov	r2, r5
    6408:	4601      	mov	r1, r0
    640a:	4620      	mov	r0, r4
    640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6410:	f000 b818 	b.w	6444 <_kill_r>
    6414:	2b01      	cmp	r3, #1
    6416:	d00a      	beq.n	642e <_raise_r+0x4c>
    6418:	1c59      	adds	r1, r3, #1
    641a:	d103      	bne.n	6424 <_raise_r+0x42>
    641c:	2316      	movs	r3, #22
    641e:	6003      	str	r3, [r0, #0]
    6420:	2001      	movs	r0, #1
    6422:	e7e7      	b.n	63f4 <_raise_r+0x12>
    6424:	2400      	movs	r4, #0
    6426:	4628      	mov	r0, r5
    6428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    642c:	4798      	blx	r3
    642e:	2000      	movs	r0, #0
    6430:	e7e0      	b.n	63f4 <_raise_r+0x12>
    6432:	Address 0x0000000000006432 is out of bounds.


00006434 <raise>:
    6434:	4b02      	ldr	r3, [pc, #8]	; (6440 <raise+0xc>)
    6436:	4601      	mov	r1, r0
    6438:	6818      	ldr	r0, [r3, #0]
    643a:	f7ff bfd2 	b.w	63e2 <_raise_r>
    643e:	bf00      	nop
    6440:	2007c0bc 	.word	0x2007c0bc

00006444 <_kill_r>:
    6444:	b538      	push	{r3, r4, r5, lr}
    6446:	2300      	movs	r3, #0
    6448:	4c06      	ldr	r4, [pc, #24]	; (6464 <_kill_r+0x20>)
    644a:	4605      	mov	r5, r0
    644c:	4608      	mov	r0, r1
    644e:	4611      	mov	r1, r2
    6450:	6023      	str	r3, [r4, #0]
    6452:	f7fb f824 	bl	149e <_kill>
    6456:	1c43      	adds	r3, r0, #1
    6458:	d102      	bne.n	6460 <_kill_r+0x1c>
    645a:	6823      	ldr	r3, [r4, #0]
    645c:	b103      	cbz	r3, 6460 <_kill_r+0x1c>
    645e:	602b      	str	r3, [r5, #0]
    6460:	bd38      	pop	{r3, r4, r5, pc}
    6462:	bf00      	nop
    6464:	2007c324 	.word	0x2007c324

00006468 <_getpid_r>:
    6468:	f7fb b812 	b.w	1490 <_getpid>

0000646c <strlen>:
    646c:	4603      	mov	r3, r0
    646e:	f813 2b01 	ldrb.w	r2, [r3], #1
    6472:	2a00      	cmp	r2, #0
    6474:	d1fb      	bne.n	646e <strlen+0x2>
    6476:	1a18      	subs	r0, r3, r0
    6478:	3801      	subs	r0, #1
    647a:	4770      	bx	lr

0000647c <vtable for sjsu::LabGPIO>:
	...
    6484:	0179 0000 0269 0000 0359 0000 03e1 0000     y...i...Y.......
    6494:	046d 0000 0481 0000 0499 0000               m...........

000064a0 <vtable for sjsu::Gpio>:
	...
    64a8:	4a3d 0000 4a3d 0000 4a3d 0000 4a3d 0000     =J..=J..=J..=J..
    64b8:	4a3d 0000 4a3d 0000 4a3d 0000 ffff ffff     =J..=J..=J......

000064c8 <std::integral_constant<long long, 100ll>::value>:
    64c8:	0064 0000 0000 0000                         d.......

000064d0 <std::integral_constant<long long, 5ll>::value>:
    64d0:	0005 0000 0000 0000                         ........

000064d8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    64d8:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...
    64e8:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    64f8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6508:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6518:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    6528:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    6538:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    6548:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    6558:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    6568:	6574 7473 2520 0a64 0000 0000 6574 7473     test %d.....test
    6578:	2032 6425 000a 0000 0015 0000 0a2d 0000     2 %d........-...
    6588:	0001 0000 0000 0000 6568 6c6c 206f 6f77     ........hello wo
    6598:	6c72 0064 6950 206e 6f6e 2074 6573 2074     rld.Pin not set 
    65a8:	6f6c 0077 6970 206e 7473 7461 3a65 3020     low.pin state: 0
    65b8:	2578 3830 0a78 0000 6950 206e 6f6e 2074     x%08x...Pin not 
    65c8:	6573 2074 6968 6867 0000 0000 6950 206e     set high....Pin 
    65d8:	6177 2073 6f6e 2074 6f74 6767 656c 0064     was not toggled.

000065e8 <vtable for sjsu::cortex::InterruptController>:
	...
    65f0:	0821 0000 0875 0000                         !...u...

000065f8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    65f8:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    6608:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    6618:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    6628:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    6638:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    6648:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    6658:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    6668:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    6678:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    6688:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    6698:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    66a8:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    66b8:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    66c8:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    66d8:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    66e8:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    66f8:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    6708:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    6718:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    6728:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    6738:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    6748:	6c6c 6465 002e 0000 5b1b 3534 206d 2020     lled.....[45m   
    6758:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    6768:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6778:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6788:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6798:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    67a8:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    67b8:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    67c8:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    67d8:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    67e8:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    67f8:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    6808:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6818:	7254 6361 3a65 000a 5b1b 3534 206d 2020     Trace:...[45m   
    6828:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    6838:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6848:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6858:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6868:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6878:	2820 6174 6b73 502e 6572 7552 286e 2929      (task.PreRun())
    6888:	200a 2020 2020 2020 2020 5020 6572 7552     .          PreRu
    6898:	286e 2029 6166 6c69 6465 6620 726f 7420     n() failed for t
    68a8:	7361 3a6b 2520 2c73 7420 7265 696d 616e     ask: %s, termina
    68b8:	6974 676e 7320 6863 6465 6c75 7265 1b21     ting scheduler!.
    68c8:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3334     [0m.[0m......[43
    68d8:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    68e8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    68f8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6908:	6e41 6520 7272 726f 6f20 6363 7275 6465     An error occured
    6918:	202c 6874 2065 6f66 6c6c 776f 6e69 2067     , the following 
    6928:	6174 6b73 7720 6c69 206c 6562 7320 7375     task will be sus
    6938:	6570 646e 6465 203a 7325 5b1b 6d30 5b1b     pended: %s.[0m.[
    6948:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    6958:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    6968:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6978:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    6988:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    6998:	6974 6e6f 5420 7365 6574 3a64 2820 6174     tion Tested: (ta
    69a8:	6b73 3e2d 6547 4874 6e61 6c64 2865 2029     sk->GetHandle() 
    69b8:	3d21 6e20 6c75 706c 7274 0a29 2020 2020     != nullptr).    
    69c8:	2020 2020 2020 6e55 6261 656c 7420 206f           Unable to 
    69d8:	7263 6165 6574 7420 7361 3a6b 2520 1b73     create task: %s.
    69e8:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3534     [0m.[0m......[45
    69f8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    6a08:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6a18:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6a28:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    6a38:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    6a48:	6574 3a64 2820 6174 6b73 3e2d 6553 7574     ted: (task->Setu
    6a58:	2870 2929 200a 2020 2020 2020 2020 4620     p()).          F
    6a68:	6961 656c 2064 6f74 6320 6d6f 6c70 7465     ailed to complet
    6a78:	2065 6553 7574 2870 2029 6f66 2072 6174     e Setup() for ta
    6a88:	6b73 203a 7325 5b1b 6d30 5b1b 6d30 000a     sk: %s.[0m.[0m..
    6a98:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    6aa8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6ab8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6ac8:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6ad8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6ae8:	5420 7365 6574 3a64 2820 7270 5f65 7572      Tested: (pre_ru
    6af8:	5f6e 7665 6e65 5f74 7267 756f 5f70 6168     n_event_group_ha
    6b08:	646e 656c 205f 3d21 6e20 6c75 706c 7274     ndle_ != nullptr
    6b18:	0a29 2020 2020 2020 2020 2020 6146 6c69     ).          Fail
    6b28:	6465 7420 206f 7263 6165 6574 5020 6572     ed to create Pre
    6b38:	7552 206e 7645 6e65 2074 7247 756f 2170     Run Event Group!
    6b48:	5b1b 6d30 5b1b 6d30 000a ffff 6e69 6176     .[0m.[0m....inva
    6b58:	696c 0064 7061 6c70 6369 7461 6f69 006e     lid.application.
    6b68:	6f68 7473 7420 7365 0074 0000 2020 6425     host test...  %d
    6b78:	2029 7830 3025 5838 000a 0000 3020 2578     ) 0x%08X.... 0x%
    6b88:	3830 0058 2020 6425 2029 7830 7025 000a     08X.  %d) 0x%p..
    6b98:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
    6ba8:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
    6bb8:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
    6bc8:	7463 726f 0079 0000 0a0a 2020 5b1b 3b31     ctory.....  .[1;
    6bd8:	3733 006d 616d 656b 7320 6174 6b63 7274     37m.make stacktr
    6be8:	6361 2d65 7325 5420 4152 4543 3d53 0022     ace-%s TRACES=".
    6bf8:	3020 2578 0070 0000 0a22 1b0a 305b 006d      0x%p..."...[0m.
    6c08:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
    6c18:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
    6c28:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
    6c38:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
    6c48:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
    6c58:	002e 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    6c68:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    6c78:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6c88:	1b20 305b 333b 6d37 6f4e 6920 746e 7265      .[0;37mNo inter
    6c98:	7572 7470 7320 7265 6976 6563 7220 756f     rupt service rou
    6ca8:	6974 656e 6620 756f 646e 6620 726f 7420     tine found for t
    6cb8:	6568 7620 6365 6f74 2072 6425 2021 6944     he vector %d! Di
    6cc8:	6173 6c62 6e69 2067 5349 1b52 305b 0a6d     sabling ISR.[0m.
    6cd8:	0000 0000 5b1b 3134 486d 7261 2064 6146     .....[41mHard Fa
    6ce8:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
    6cf8:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
    6d08:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
    6d18:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
    6d28:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
    6d38:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
    6d48:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
    6d58:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
    6d68:	3020 2578 3830 586c 000a 0000 1b0a 315b      0x%08lX......[1
    6d78:	333b 6d37 5b1b 3234 506d 6f72 7267 6d61     ;37m.[42mProgram
    6d88:	5220 7465 7275 656e 2064 7845 7469 4320      Returned Exit C
    6d98:	646f 3a65 2520 646c 1b0a 305b 006d 0000     ode: %ld..[0m...
    6da8:	1b0a 315b 333b 6d37 5b1b 3134 506d 6f72     ..[1;37m.[41mPro
    6db8:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6dc8:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6dd8:	006d ffff 000a ffff                         m.......

00006de0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6de0:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6df0:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6e00:	bc20 4cbe 6b28 4e6e 743a 0074 ffff ffff      ..L(knN:tt.....

00006e10 <std::integral_constant<long long, 1ll>::value>:
    6e10:	0001 0000 0000 0000                         ........

00006e18 <config::kSystemClockRateMhz>:
    6e18:	0000 4240                                   ..@B

00006e1c <config::kRtosFrequency>:
    6e1c:	0000 447a 6e69 6176 696c 0064 7061 6c70     ..zDinvalid.appl
    6e2c:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    6e3c:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    6e4c:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    6e5c:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    6e6c:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    6e7c:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    6e8c:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    6e9c:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    6eac:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    6ebc:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    6ecc:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    6edc:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    6eec:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    6efc:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    6f0c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    6f1c:	2067 6163 6c6c 6465 002e 0000 5b1b 3334     g called.....[43
    6f2c:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    6f3c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6f4c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6f5c:	6f4e 6920 746e 7265 7572 7470 7320 7265     No interrupt ser
    6f6c:	6976 6563 7220 756f 6974 656e 6620 756f     vice routine fou
    6f7c:	646e 6620 726f 7420 6568 7620 6365 6f74     nd for the vecto
    6f8c:	2072 6425 2021 6944 6173 6c62 6e69 2067     r %d! Disabling 
    6f9c:	5349 1b52 305b 0a6d 0000 0000 ffff ffff     ISR.[0m.........
    6fac:	2b75 0000 0001 0000 ffff ffff 5b1b 3534     u+...........[45
    6fbc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    6fcc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6fdc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6fec:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    6ffc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    700c:	6574 3a64 2820 6157 7469 6f46 5072 6c6c     ted: (WaitForPll
    701c:	6f4c 6b63 7453 7461 7375 5028 6c6c 6553     LockStatus(PllSe
    702c:	656c 7463 3a3a 4d6b 6961 506e 6c6c 2929     lect::kMainPll))
    703c:	200a 2020 2020 2020 2020 5020 4c4c 2030     .          PLL0 
    704c:	6f6c 6b63 6320 756f 646c 6e20 746f 6220     lock could not b
    705c:	2065 7365 6174 6c62 7369 6568 2064 6562     e established be
    706c:	6f66 6572 7420 6d69 6f65 7475 5b1b 6d30     fore timeout.[0m
    707c:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    708c:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    709c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    70ac:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    70bc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    70cc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    70dc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    70ec:	5420 7365 6574 3a64 2820 6157 7469 6f46      Tested: (WaitFo
    70fc:	5072 6c6c 6f43 6e6e 6365 6974 6e6f 7453     rPllConnectionSt
    710c:	7461 7375 5028 6c6c 6553 656c 7463 3a3a     atus(PllSelect::
    711c:	4d6b 6961 506e 6c6c 2929 200a 2020 2020     kMainPll)).     
    712c:	2020 2020 4620 6961 656c 2064 6f74 6320          Failed to c
    713c:	6e6f 656e 7463 5020 4c4c 2e30 5b1b 6d30     onnect PLL0..[0m
    714c:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
    715c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    716c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    717c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    718c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    719c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    71ac:	2820 496b 4373 6e61 6550 6972 6870 7265      (kIsCanPeripher
    71bc:	6c61 0a29 2020 2020 2020 2020 2020 6854     al).          Th
    71cc:	2065 6964 6976 6564 2072 6176 756c 2065     e divider value 
    71dc:	666f 3620 6920 2073 6e6f 796c 7320 7075     of 6 is only sup
    71ec:	6f70 7472 6465 6620 726f 4320 4e41 7020     ported for CAN p
    71fc:	7265 7069 6568 6172 736c 1b2e 305b 1b6d     eripherals..[0m.
    720c:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    721c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    722c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    723c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    724c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    725c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    726c:	2820 6b21 7349 6143 506e 7265 7069 6568      (!kIsCanPeriphe
    727c:	6172 296c 200a 2020 2020 2020 2020 5420     ral).          T
    728c:	6568 6420 7669 6469 7265 7620 6c61 6575     he divider value
    729c:	6f20 2066 2038 7369 6e20 746f 7320 7075      of 8 is not sup
    72ac:	6f70 7472 6465 6620 726f 4320 4e41 7020     ported for CAN p
    72bc:	7265 7069 6568 6172 736c 1b2e 305b 1b6d     eripherals..[0m.
    72cc:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    72dc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    72ec:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    72fc:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    730c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    731c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    732c:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
    733c:	2020 4f20 6c6e 2079 6874 2065 6f66 6c6c        Only the foll
    734c:	776f 6e69 2067 6570 6972 6870 7265 6c61     owing peripheral
    735c:	6420 7669 6469 7265 7620 6c61 6575 2073      divider values 
    736c:	7261 2065 7573 7070 726f 6574 3a64 3120     are supported: 1
    737c:	202c 2c32 3420 202c 2e38 5420 6568 6420     , 2, 4, 8. The d
    738c:	7669 6469 7265 7620 6c61 6575 6f20 2066     ivider value of 
    739c:	2036 7369 7320 7075 6f70 7472 6465 6620     6 is supported f
    73ac:	726f 4320 4e41 7020 7265 7069 6568 6172     or CAN periphera
    73bc:	736c 1b2e 305b 1b6d 305b 0a6d 0000 0000     ls..[0m.[0m.....
    73cc:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    73dc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    73ec:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    73fc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    740c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    741c:	5420 7365 6574 3a64 2820 6e69 7570 5f74      Tested: (input_
    742c:	7266 7165 6575 636e 2079 203e 4d6b 6e69     frequency > kMin
    743c:	6d69 6d75 6c50 306c 6e49 7570 4674 6572     imumPll0InputFre
    744c:	7571 6e65 7963 2620 2026 6e69 7570 5f74     quency && input_
    745c:	7266 7165 6575 636e 2079 203c 4d6b 7861     frequency < kMax
    746c:	6d69 6d75 6c50 306c 6e49 7570 4674 6572     imumPll0InputFre
    747c:	7571 6e65 7963 0a29 2020 2020 2020 2020     quency).        
    748c:	2020 6854 2065 6e69 7570 2074 4c50 304c       The input PLL0
    749c:	6620 6572 7571 6e65 7963 6d20 7375 2074      frequency must 
    74ac:	6562 6220 7465 6577 6e65 3320 6b32 7a48     be between 32kHz
    74bc:	6120 646e 3520 4d30 7a48 5b1b 6d30 5b1b      and 50MHz.[0m.[
    74cc:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    74dc:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    74ec:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    74fc:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    750c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    751c:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    752c:	6973 6572 5f64 7073 6565 2064 203c 4d6b     sired_speed < kM
    753c:	7861 5043 5355 6570 6465 0a29 2020 2020     axCPUSpeed).    
    754c:	2020 2020 2020 6854 2065 6564 6973 6572           The desire
    755c:	2064 5043 2055 7073 6565 2064 6163 6e6e     d CPU speed cann
    756c:	746f 6520 6378 6565 2064 6874 2065 616d     ot exceed the ma
    757c:	6978 756d 206d 6c61 6f6c 2077 5043 2055     ximum allow CPU 
    758c:	7073 6565 2e64 5b1b 6d30 5b1b 6d30 000a     speed..[0m.[0m..
    759c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    75ac:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    75bc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    75cc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    75dc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    75ec:	5420 7365 6574 3a64 2820 6166 736c 2965      Tested: (false)
    75fc:	200a 2020 2020 2020 2020 4620 6961 656c     .          Faile
    760c:	2064 6f74 6320 6c61 7563 616c 6574 7420     d to calculate t
    761c:	6568 5020 4c4c 2030 6573 7474 6e69 7367     he PLL0 settings
    762c:	6620 726f 7420 6568 6420 7365 7269 6465      for the desired
    763c:	6620 6572 7571 6e65 7963 1b2e 305b 1b6d      frequency..[0m.
    764c:	305b 0a6d 0000 0000 011a 010a 0218 0208     [0m.............
    765c:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    766c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    767c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    768c:	333b 6d37 6e55 7573 7070 726f 6574 2064     ;37mUnsupported 
    769c:	706f 7265 7461 6f69 1b6e 305b 0a6d 0000     operation.[0m...
    76ac:	fffb ffff 4961 0000 0001 0000 ffff ffff     ....aI..........
    76bc:	fffe ffff 4991 0000 0001 0000 ffff ffff     .....I..........
    76cc:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    76dc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    76ec:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    76fc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    770c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    771c:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    772c:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    773c:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    774c:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    775c:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    776c:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    777c:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    778c:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..

0000779c <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    779c:	65f0 0000                                   .e..

000077a0 <sjsu::lpc17xx::SystemController::Peripherals::kUart0>:
    77a0:	ff03 ffff                                   ....

000077a4 <sjsu::lpc17xx::SystemController::Oscillator::kSelect>:
    77a4:	0200 ffff                                   ....

000077a8 <sjsu::lpc17xx::SystemController::CpuClock::kDivider>:
    77a8:	0800 ffff                                   ....

000077ac <sjsu::lpc17xx::SystemController::MainPll::kMultiplier>:
    77ac:	0f00 ffff                                   ....

000077b0 <sjsu::lpc17xx::SystemController::MainPll::kPreDivider>:
    77b0:	0810 ffff                                   ....

000077b4 <sjsu::lpc17xx::SystemController::kDefaultIRCFrequency>:
    77b4:	2400 4a74                                   .$tJ

000077b8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    77b8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    77c8:	2e72 7068 0070 ffff                         r.hpp...

000077d0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    77d0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    77e0:	2e72 7068 0070 ffff                         r.hpp...

000077e8 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    77e8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    77f8:	2e72 7068 0070 ffff                         r.hpp...

00007800 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7800:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7810:	2e72 7068 0070 ffff                         r.hpp...

00007818 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7818:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7828:	2e72 7068 0070 ffff                         r.hpp...

00007830 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7830:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7840:	2e72 7068 0070 ffff                         r.hpp...

00007848 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7848:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7858:	2e72 7068 0070 ffff                         r.hpp...

00007860 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7860:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7870:	2e72 7068 0070 ffff                         r.hpp...

00007878 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7878:	0302 0100                                   ....

0000787c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    787c:	6970 2e6e 7068 0070                         pin.hpp.

00007884 <sjsu::lpc40xx::Pin::kFunction>:
    7884:	0300 ffff                                   ....

00007888 <sjsu::lpc40xx::Pin::kResistor>:
    7888:	0203 ffff                                   ....

0000788c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    788c:	0107 ffff                                   ....

00007890 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7890:	010a ffff                                   ....

00007894 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7894:	7924 0000 0802 0000                         $y......

0000789c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    789c:	7924 0000 0902 0000                         $y......

000078a4 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    78a4:	7924 0000 1c04 0000                         $y......

000078ac <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    78ac:	7924 0000 1d04 0000                         $y......

000078b4 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    78b4:	7924 0000 1d01 0000                         $y......

000078bc <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    78bc:	7924 0000 0902 0000                         $y......

000078c4 <sjsu::lpc17xx::UartPort::kUart0Tx>:
    78c4:	793c 0000 0200 0204                         <y......

000078cc <sjsu::lpc17xx::UartPort::kUart0Rx>:
    78cc:	793c 0000 0300 0206                         <y......

000078d4 <sjsu::lpc17xx::UartPort::kUart2Tx>:
    78d4:	793c 0000 0802 0210                         <y......

000078dc <sjsu::lpc17xx::UartPort::kUart2Rx>:
    78dc:	793c 0000 0902 0212                         <y......

000078e4 <sjsu::lpc17xx::UartPort::kUart3Tx>:
    78e4:	793c 0000 1c04 0218                         <y......

000078ec <sjsu::lpc17xx::UartPort::kUart3Rx>:
    78ec:	793c 0000 1d04 021a                         <y......

000078f4 <sjsu::InitializePlatform()::file>:
    78f4:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00007900 <vtable for sjsu::lpc40xx::Uart>:
	...
    7908:	3ee5 0000 3fa5 0000 4031 0000 40d5 0000     .>...?..1@...@..
    7918:	41a5 0000                                   .A..

0000791c <vtable for sjsu::lpc40xx::Pin>:
	...
    7924:	3a19 0000 3a4d 0000 3abd 0000 3a81 0000     .:..M:...:...:..

00007934 <vtable for sjsu::lpc17xx::Pin>:
	...
    793c:	38b9 0000 3919 0000 39a1 0000 3975 0000     .8...9...9..u9..

0000794c <vtable for sjsu::lpc17xx::SystemController>:
	...
    7954:	2f4d 0000 3111 0000 3245 0000 32c5 0000     M/...1..E2...2..
    7964:	32e1 0000 330d 0000 3341 0000               .2...3..A3..

00007970 <vtable for sjsu::cortex::SystemTimer>:
	...
    7978:	2bdd 0000 2bf1 0000 2db9 0000 2c11 0000     .+...+...-...,..

00007988 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    7988:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7998:	3a75 6c3a 6370 3731 7878 3a3a 7953 7473     u::lpc17xx::Syst
    79a8:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    79b8:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    79c8:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    79d8:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    79e8:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    79f8:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    7a08:	736e 0074                                   nst.

00007a0c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7a0c:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7a1c:	3a75 6c3a 6370 3731 7878 3a3a 7953 7473     u::lpc17xx::Syst
    7a2c:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    7a3c:	5374 7379 6574 436d 6f6c 6b63 7246 7165     tSystemClockFreq
    7a4c:	6575 636e 2879 6e75 7469 3a73 663a 6572     uency(units::fre
    7a5c:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    7a6c:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00007a78 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7a78:	6a73 7573 3a3a 706c 3163 7837 3a78 533a     sjsu::lpc17xx::S
    7a88:	7379 6574 436d 6e6f 7274 6c6f 656c 3a72     ystemController:
    7a98:	503a 6c6c 5330 7465 6974 676e 5f73 2074     :Pll0Settings_t 
    7aa8:	6a73 7573 3a3a 706c 3163 7837 3a78 533a     sjsu::lpc17xx::S
    7ab8:	7379 6574 436d 6e6f 7274 6c6f 656c 3a72     ystemController:
    7ac8:	433a 6c61 7563 616c 6574 6c50 306c 7528     :CalculatePll0(u
    7ad8:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    7ae8:	683a 7265 7a74 745f 202c 6e75 7469 3a73     :hertz_t, units:
    7af8:	663a 6572 7571 6e65 7963 3a3a 6568 7472     :frequency::hert
    7b08:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00007b14 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__>:
    7b14:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7b24:	3a75 6c3a 6370 3731 7878 3a3a 6950 3a6e     u::lpc17xx::Pin:
    7b34:	533a 7465 7341 6e41 6c61 676f 6f4d 6564     :SetAsAnalogMode
    7b44:	6228 6f6f 296c 6320 6e6f 7473 ff00 ffff     (bool) const....

00007b54 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    7b54:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    7b64:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

00007b74 <__sf_fake_stderr>:
	...

00007b94 <__sf_fake_stdin>:
	...

00007bb4 <__sf_fake_stdout>:
	...

00007bd4 <_init>:
    7bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bd6:	bf00      	nop
    7bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7bda:	bc08      	pop	{r3}
    7bdc:	469e      	mov	lr, r3
    7bde:	4770      	bx	lr

00007be0 <__init_array_start>:
    7be0:	00000105 	.word	0x00000105
    7be4:	000004f5 	.word	0x000004f5
    7be8:	00000fb1 	.word	0x00000fb1
    7bec:	000013bd 	.word	0x000013bd
    7bf0:	00004951 	.word	0x00004951

00007bf4 <_fini>:
    7bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bf6:	bf00      	nop
    7bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7bfa:	bc08      	pop	{r3}
    7bfc:	469e      	mov	lr, r3
    7bfe:	4770      	bx	lr
