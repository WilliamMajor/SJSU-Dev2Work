
build/application/lpc17xx/firmware.elf:     file format elf32-littlearm
build/application/lpc17xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000119d

Program Header:
0x70000001 off    0x000181f4 vaddr 0x000081f4 paddr 0x000081f4 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000082ac memsz 0x000082ac flags r-x
    LOAD off    0x0001c000 vaddr 0x2007c000 paddr 0x000082ac align 2**16
         filesz 0x00000128 memsz 0x000003d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .text           000081dc  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data           00000128  2007c000  000082ac  0001c000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .bss            000002b0  2007c128  000083d4  0001c128  2**3  ALLOC
  3 .ARM.attributes 00000029  00000000  00000000  0001c128  2**0  CONTENTS, READONLY
  4 .comment        0000007e  00000000  00000000  0001c151  2**0  CONTENTS, READONLY
  5 .ARM.extab      00000018  000081dc  000081dc  000181dc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.exidx      000000b8  000081f4  000081f4  000181f4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info     00092244  00000000  00000000  0001c1cf  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev   0000522b  00000000  00000000  000ae413  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges  00000ba8  00000000  00000000  000b363e  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges   00000af8  00000000  00000000  000b41e6  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line     0000682d  00000000  00000000  000b4cde  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_str      0002bbab  00000000  00000000  000bb50b  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame    00004388  00000000  00000000  000e70b8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
2007c000 l    d  .data	00000000 .data
2007c128 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
000081dc l    d  .ARM.extab	00000000 .ARM.extab
000081f4 l    d  .ARM.exidx	00000000 .ARM.exidx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
000073f0 l     O .text	00000004 config::kSystemClockRateMhz
000073f4 l     O .text	00000004 config::kRtosFrequency
00002950 l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002968 l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002dd6 l     F .text	00000018 float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002df0 l     F .text	00000028 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007fe4 l     O .text	0000006b sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007f60 l     O .text	00000084 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00008050 l     O .text	0000009b sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000080ec l     O .text	0000003d sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__
00003c54 l     F .text	000001b0 sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
2007c0a4 l     O .data	00000004 (anonymous namespace)::system_controller
2007c2fc l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
2007c0a8 l     O .data	0000000c (anonymous namespace)::uart0
2007c0b4 l     O .data	0000000c (anonymous namespace)::system_timer
0000410c l     F .text	00000024 (anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)
00004130 l     F .text	00000034 (anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)
00000000 l     O .text	000000cc kInterruptVectorTable
00007ecc l     O .text	0000000c sjsu::InitializePlatform()::file
0000812c l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
000044ba l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000466a l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004688 l     F .text	000001e8 __static_initialization_and_destruction_0(int, int)
00004870 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 crtstuff.c
000000e0 l     F .text	00000000 __do_global_dtors_aux
2007c128 l       .bss	00000001 completed.8654
00000104 l     F .text	00000000 frame_dummy
2007c12c l       .bss	00000018 object.8659
000081bc l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 LabGPIO.cpp
000004b4 l     F .text	00000048 __static_initialization_and_destruction_0(int, int)
000004fc l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh
00000000 l    df *ABS*	00000000 main.cpp
0000050c l     F .text	0000002c NVIC_EnableIRQ
00000538 l     F .text	00000030 NVIC_DisableIRQ
00000568 l     F .text	00000050 NVIC_SetPriority
00006bdc l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00000ddc l     F .text	00000068 __static_initialization_and_destruction_0(int, int)
00000e44 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00000e54 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 exceptions.cpp
00001190 l       .text	00000000 handler2_address_const
0000120c l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00001250 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
2007c260 l     O .bss	00000064 pxReadyTasksLists
2007c2c4 l     O .bss	00000004 uxTopReadyPriority
2007c2c8 l     O .bss	00000004 xYieldPending
2007c2cc l     O .bss	00000004 uxSchedulerSuspended
2007c2d0 l     O .bss	00000004 ulTaskSwitchedInTime
2007c2d4 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
000014cc l     F .text	0000001a _out_null(char, void*, unsigned int, unsigned int)
000014e6 l     F .text	0000002c _strlen(char const*)
00001512 l     F .text	00000026 _is_digit(char)
00001538 l     F .text	00000048 _atoi(char const**)
00001580 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000017c2 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00001892 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
000073c4 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00001974 l     F .text	0000041a _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00001d90 l     F .text	000008ca _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
000026c8 l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
2007c2d8 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
000048a0 l       .text	00000000 pxCurrentTCBConst2
000048f0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_fixsfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
0000535c l     F .text	00000012 selfrel_offset31
00005370 l     F .text	00000060 search_EIT_table
000053d0 l     F .text	00000028 __gnu_unwind_get_pr_addr
000053f8 l     F .text	000000a8 get_eit_entry
000054a0 l     F .text	00000058 restore_non_core_regs
000054f8 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00005504 l     F .text	00000004 __gnu_unwind_24bit.isra.1
00005508 l     F .text	00000002 _Unwind_DebugHook
0000550c l     F .text	0000003e unwind_phase2
0000554c l     F .text	000000ca unwind_phase2_forced
00005724 l     F .text	00000018 _Unwind_GetGR
00005768 l     F .text	0000001a _Unwind_SetGR
000057f8 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005f08 l     F .text	00000036 next_unwind_byte
00005f40 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005f5c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006418 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 syscalls.c
00006938 l     F .text	00000034 findslot
0000696c l     F .text	00000020 checkerror
2007c334 l     O .bss	000000a0 openfiles
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
2007c0c8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crti.o
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crtn.o
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 reent.c
00000eb8  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005ec0 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000561c g     F .text	00000060 .hidden __gnu_Unwind_RaiseException
00002a94  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00000268 g     F .text	000000f0 sjsu::LabGPIO::Set(sjsu::Gpio::State) const
00001080  w    F .text	00000068 sjsu::InitializeBssSection()
00001324 g     F .text	0000000e _getpid
000068ec g     F .text	00000024 _lseek_r
000009a4  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00007eac  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Tx
00002adc  w    F .text	00000020 sjsu::cortex::SystemTimer::GetCount()
0000283e  w    F .text	0000002a units::literals::operator"" _Hz(unsigned long long)
00000914  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
000027a4  w    F .text	00000010 std::numeric_limits<float>::epsilon()
2007c010  w    O .data	00000004 sjsu::newlib::in
2007c318  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00002a10  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
000067e8 g     F .text	00000024 _kill_r
000000e0 g       .text	00000000 bss_section_table_end
0000265c g     F .text	00000044 printf
00003820  w    F .text	00000016 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
0000334c  w    F .text	00000220 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
0000686a g     F .text	00000024 __sseek
00006498 g     F .text	00000060 __sinit
00003260  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
0000646c g     F .text	0000002c __sfmoreglue
00006912 g     F .text	00000002 __malloc_unlock
00004358  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004dac g     F .text	00000136 .hidden __divsf3
00002d9c  w    F .text	0000003a sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)
00004228  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
0000087c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00003894  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
00000f44  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
2007c000 g       *ABS*	00000000 __base_RAM2
00005d7c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005e9c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00003294  w    F .text	00000048 sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const
000082ac g       .ARM.exidx	00000000 __exidx_end
00004fd0 g     F .text	0000004c .hidden __fixsfsi
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00007e5c  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00004164 g     F .text	00000014 ThreadRuntimeCounter
00005acc g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
2007c020  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00006a74 g     F .text	0000000c __errno
000008bc  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
2007c25c g     O .bss	00000004 pxCurrentTCB
00006250 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005e9c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
2007c3d4 g     O .bss	00000004 errno
00007df0  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
000082ac g       .ARM.exidx	00000000 _etext
000039dc  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00004296  w    F .text	00000030 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005ee4 g     F .text	00000022 .hidden _Unwind_Backtrace
00007d74  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
2007c144  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004a34 g     F .text	00000160 .hidden __aeabi_fadd
00007d80  w    O .text	00000002 sjsu::lpc17xx::SystemController::CpuClock::kDivider
2007c2e0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004a30 g     F .text	00000164 .hidden __subsf3
00007e7c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005d5c g     F .text	00000018 .hidden __restore_core_regs
00005d9c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00004612  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
00007d78  w    O .text	00000001 sjsu::lpc17xx::SystemController::Peripherals::kUart0
00007ed8  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
000029bc  w    F .text	0000001c sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00007e60  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005618 g     F .text	00000004 .hidden _Unwind_GetCFA
000065f4 g     F .text	00000016 memcpy
00003584  w    F .text	0000005c sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const
0000490e g     F .text	00000016 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000573c g     F .text	0000002a .hidden _Unwind_VRS_Set
00004fbc g     F .text	00000012 .hidden __aeabi_fcmpgt
00006460 g     F .text	0000000c _cleanup_r
000042ea  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)
0000505c g     F .text	00000000 .hidden __aeabi_uldivmod
000037d8  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
00001408 g     F .text	00000048 puts
00000630  w    F .text	00000014 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
00003908  w    F .text	0000002e sjsu::lpc17xx::Pin::PinRegisterLookup() const
00002bda  w    F .text	0000004e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003a8c  w    F .text	000000cc sjsu::lpc40xx::uart::FindClosestFractional(float)
000043c8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00002e4a  w    F .text	00000020 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
2007c320  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart0
2007c024  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00006788 g     F .text	00000050 _raise_r
00004b9c g     F .text	0000001c .hidden __aeabi_i2f
10008000 g       *ABS*	00000000 __top_RAM
00002e18  w    F .text	00000032 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000048b0 g     F .text	00000046 xPortPendSVHandler
00004eec g     F .text	00000066 .hidden __lesf2
10000000 g       *ABS*	00000000 __base_RamLoc64
00007ebc  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Tx
00000a08  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()
00000a40  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const
000039a0  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
0000680c g     F .text	00000004 _getpid_r
000081dc g       .text	00000000 __symbol_table_end
00000000 g       *ABS*	00000000 __base_MFlash512
00005784 g     F .text	00000072 .hidden __gnu_Unwind_Backtrace
00004310  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
20083fe0 g       .bss	00000000 StackTop
0000508c g     F .text	000002ce .hidden __udivmoddi4
00006768 g     F .text	00000020 _sbrk_r
000000d8 g       .text	00000000 bss_section_table
00007e64  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
2007c300  w    O .bss	00000004 guard variable for sjsu::lpc17xx::SystemController::system_controller
00002c86  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000644  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005d8c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
20084000 g       *ABS*	00000000 __top_RAM2
00006914 g     F .text	00000024 _read_r
00005ad8 g     F .text	00000282 .hidden _Unwind_VRS_Pop
00005ad4  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
000063f4 g     F .text	00000024 fflush
00002b30  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
2007c310  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005ee4 g     F .text	00000022 .hidden ___Unwind_Backtrace
000005ee  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00003ff4  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000f00  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00007e94  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00006aa4  w    O .text	00000024 vtable for sjsu::Gpio
00004ef4 g     F .text	0000005e .hidden __nesf2
2007c000 g       *ABS*	00000000 __user_heap_base
2007c2dc  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
000081f4 g       .ARM.extab	00000000 __exidx_start
000081ac g     O .text	00000004 _global_impure_ptr
000065ac g     F .text	00000048 __libc_init_array
00003bd4  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005e54 g     F .text	00000022 .hidden ___Unwind_RaiseException
00002cb6  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00006284 g     F .text	0000000e abort
00005e78 g     F .text	00000022 .hidden ___Unwind_Resume
00002c9e  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
2007c054  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
0000134c g     F .text	00000040 _sbrk
00007ec4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Rx
2007c148  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
0000092c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000081b0 g     F .text	00000000 _init
000000e0 g       .text	00000000 section_table_end
00003c00  w    F .text	00000054 sjsu::lpc40xx::uart::IsDecmial(float)
000048f8 g     F .text	00000016 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00007e68  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00004582  w    F .text	0000003a unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00003f9e  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
0000497c g     F .text	0000000a std::terminate()
00002814  w    F .text	0000002a units::detail::abs(float)
00004988 g     F .text	0000009e .hidden __aeabi_d2f
00005da4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000009d8  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004a30 g     F .text	00000164 .hidden __aeabi_fsub
00003ec4  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00004336  w    F .text	00000022 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
2007c31c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00001178 g     F .text	00000024 ArmHardFaultHandler
000000cc g       .text	00000000 section_table_start
00002c28  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
2007c3d8 g       .bss	00000000 _ebss
00007ea4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Rx
00003f50  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000028a6  w    F .text	000000aa bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000358 g     F .text	00000088 sjsu::LabGPIO::Toggle() const
00004fa8 g     F .text	00000012 .hidden __aeabi_fcmpge
00002afc  w    F .text	00000012 sjsu::cortex::SystemTimer::Initialize() const
00002886  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004bc8 g     F .text	0000007c .hidden __floatdisf
2007c07c  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart2
000009f0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()
000010fc g     F .text	0000007c GetRegistersFromStack
00004ee4 g     F .text	0000006e .hidden __gtsf2
2007c304  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
00004f94 g     F .text	00000012 .hidden __aeabi_fcmple
00007e54  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
00005d74 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00004178  w    F .text	000000b0 sjsu::InitializePlatform()
00000c80  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
0000814c g     O .text	00000020 __sf_fake_stderr
000007ec  w    F .text	00000016 sjsu::cortex::InterruptController::IrqToIndex(int)
0000496c g     F .text	00000010 std::get_terminate()
00007f0c  w    O .text	00000018 vtable for sjsu::lpc17xx::Pin
2007c3d8 g       .bss	00000000 end
00007d90  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005e78 g     F .text	00000022 .hidden _Unwind_Resume
0000071a  w    F .text	0000000c sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000056ec g     F .text	0000000c .hidden _Unwind_DeleteException
00006bcc  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000056e8 g     F .text	00000002 .hidden _Unwind_Complete
00000000 g       *ABS*	00000000 __base_Flash
0000145c g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00000a58  w    F .text	00000080 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
00007f48  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
0000661c g     F .text	00000098 _free_r
000026ac g     F .text	0000001c trace_write
2007c328  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart3
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
0000046c g     F .text	00000014 sjsu::LabGPIO::GetPin() const
10008000 g       *ABS*	00000000 __top_RamLoc64
2007c314  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00000d8e  w    F .text	0000004c bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000031e4  w    F .text	0000001c sjsu::lpc17xx::SystemController::GetSystemFrequency() const
2007c128 g       .bss	00000000 _bss
00007d7c  w    O .text	00000002 sjsu::lpc17xx::SystemController::Oscillator::kSelect
000026a0 g     F .text	0000000c trace_initialize
00003838  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
00006a06 g     F .text	00000004 _lseek
0000495c g     F .text	00000006 __cxa_pure_virtual
00004b9c g     F .text	0000001c .hidden __floatsisf
00003164  w    F .text	0000007e sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00007e6c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
2007c2f8  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005f60 g     F .text	000002c2 .hidden __gnu_unwind_execute
0000356c  w    F .text	00000016 auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)
2007c258  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00005d84 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000037c2  w    F .text	00000016 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
0000452a  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000008d8  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00006ad0  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
00004fd0 g     F .text	0000004c .hidden __aeabi_f2iz
00004ef4 g     F .text	0000005e .hidden __eqsf2
2007c158  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000a24  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
00001260 g     F .text	000000c4 vTaskSwitchContext
000035e0  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00002a60  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00006ad8  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00002794  w    F .text	00000010 std::numeric_limits<float>::min()
0000322c  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00005690 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00002a78  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000027b4  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00004dac g     F .text	00000136 .hidden __aeabi_fdiv
000068cc g     F .text	00000020 _close_r
00007e74  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
2007c000 g       *ABS*	00000000 __base_RamPeriph32
00005d94 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00002cd8  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007e50  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
000038c0  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00003764  w    F .text	00000048 sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const
00004bb8 g     F .text	0000008c .hidden __floatundisf
2007c2ec  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00005e54 g     F .text	00000022 .hidden _Unwind_RaiseException
00006280  w    F .text	00000002 .hidden __aeabi_ldiv0
0000442a  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000064f8 g     F .text	00000078 __sfp
2007c02c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000010e8  w    F .text	00000014 sjsu::SystemInitialize()
00004b94 g     F .text	00000024 .hidden __aeabi_ui2f
000000cc g       .text	00000000 data_section_table
00006810 g     F .text	00000022 __sread
2007c150  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00007e20  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
2007c30c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00006910 g     F .text	00000002 __malloc_lock
000063a0 g     F .text	00000054 _fflush_r
00004924 g     F .text	0000001c sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000816c g     O .text	00000020 __sf_fake_stdin
00004ef4 g     F .text	0000005e .hidden __cmpsf2
0000660a g     F .text	00000010 memset
00000b0c g     F .text	0000011c main
000027f8  w    F .text	0000001c sjsu::cortex::DwtCounter::GetCount()
00000728  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00003664  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00004bc8 g     F .text	0000007c .hidden __aeabi_l2f
00000cb4  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00007e9c  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Tx
2007c000 g       *ABS*	00000000 heap
00004eec g     F .text	00000066 .hidden __ltsf2
00002e6c  w    F .text	000001c4 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00000828  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00007dd8  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
0000688e g     F .text	00000008 __sclose
00007ef4  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004988 g     F .text	0000009e .hidden __truncdfsf2
000081d0 g       .text	00000000 __init_array_end
00004880 g     F .text	00000026 vPortSVCHandler
000066b4 g     F .text	000000b4 _malloc_r
00000c28 g     F .text	00000058 GpioInterruptCallback()
2007c018  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004bb8 g     F .text	0000008c .hidden __aeabi_ul2f
00002984  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004f5c g     F .text	00000010 .hidden __aeabi_cfcmple
0000567c g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000008f8  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004c44 g     F .text	00000168 .hidden __mulsf3
000032dc  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000056d4 g     F .text	00000012 .hidden __gnu_Unwind_Resume_or_Rethrow
2007c308  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
2007c00c  w    O .data	00000004 sjsu::newlib::out
20084000 g       *ABS*	00000000 heap_end
00006ac8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00007d84  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kMultiplier
0000448e  w    F .text	0000002c bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
000081d0 g     F .text	00000000 _fini
00005d5c g     F .text	00000018 .hidden restore_core_regs
00003730  w    F .text	00000034 sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const
00005e40 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00007e8c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000d8 g       .text	00000000 data_section_table_end
000005ce  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)
00002b10  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
0000698c g     F .text	0000007a _swilseek
00000cc6  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00004ee4 g     F .text	0000006e .hidden __gesf2
2007c040  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000068a8 g     F .text	00000024 _write_r
00000178 g     F .text	000000f0 sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const
000040e8  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004a28 g     F .text	0000016c .hidden __aeabi_frsub
00006278 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
2007c0c4 g     O .data	00000004 _impure_ptr
00006a0a g     F .text	0000001c _swiclose
00004f6c g     F .text	00000012 .hidden __aeabi_fcmpeq
00006294 g     F .text	0000010c __sflush_r
00002bc4  w    F .text	00000016 units::linear_scale<float>::operator()() const
00004c44 g     F .text	00000168 .hidden __aeabi_fmul
00007f24  w    O .text	00000024 vtable for sjsu::lpc17xx::SystemController
000029d8  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
000043ec  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000081bc g       .text	00000000 __preinit_array_end
000044d2  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)
00003030  w    F .text	00000134 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
000008a4  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
00003a10  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00004f54 g     F .text	00000018 .hidden __aeabi_cfrcmple
00007eb4  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Rx
2007c090  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart3
2007c000 g       .data	00000000 _data
0000439c  w    F .text	0000002c bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00002c48  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
0000625c g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000003e0 g     F .text	0000008c sjsu::LabGPIO::Read() const
0000119c g     F .text	00000070 ArmResetHandler
00004f80 g     F .text	00000012 .hidden __aeabi_fcmplt
000056f8 g     F .text	0000002a .hidden _Unwind_VRS_Get
00000804  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
2007c0c0 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005e2c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00006a80 g     O .text	00000024 vtable for sjsu::LabGPIO
00007d8c  w    O .text	00000004 sjsu::lpc17xx::SystemController::kDefaultIRCFrequency
00000654  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
0000138c g     F .text	00000030 _write
00006224 g     F .text	0000002a .hidden __gnu_unwind_frame
00005ec0 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
2007c128 g       .data	00000000 _edata
2007c2f4  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
000040c4  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000036e8  w    F .text	00000048 sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const
2007c008  w    O .data	00000001 sjsu::newlib::echo_back_is_enabled
00004266  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000ad8  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
0000501c g     F .text	0000003e .hidden __aeabi_f2uiz
00000764  w    F .text	00000014 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20084000 g       *ABS*	00000000 __top_RamPeriph32
00006832 g     F .text	00000038 __swrite
00003314  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
10000000 g       *ABS*	00000000 __base_RAM
00003200  w    F .text	0000002c sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00006570 g     F .text	0000003c _fwalk_reent
00004b94 g     F .text	00000024 .hidden __floatunsisf
00007d88  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kPreDivider
00004962 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005de8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00007e38  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001332 g     F .text	00000018 _kill
00000fe8  w    F .text	00000098 sjsu::InitializeDataSection()
00004f5c g     F .text	00000010 .hidden __aeabi_cfcmpeq
00000610  w    F .text	00000020 sjsu::DefaultUptime()
0000818c g     O .text	00000020 __sf_fake_stdout
000005b8  w    F .text	00000016 std::numeric_limits<long long>::max()
000013bc g     F .text	0000004c _read
000081bc g       .text	00000000 __init_array_start
00006280  w    F .text	00000002 .hidden __aeabi_idiv0
000042c6  w    F .text	00000024 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
0000501c g     F .text	0000003e .hidden __fixunssfsi
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
00007da8  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000004a0 g     F .text	00000012 sjsu::LabGPIO::DetachInterrupt() const
00001450 g     F .text	0000000c _exit
00007e84  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
00007dc0  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
2007c068  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart0
00002868  w    F .text	0000001e units::linear_scale<float>::linear_scale<>(float const&)
00003b58  w    F .text	0000003e sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000700  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000037ac  w    F .text	00000016 sjsu::Pin::GetPort() const
00006896 g     F .text	00000010 strlen
00003938  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
2007c000  w    O .data	00000004 sjsu::Uptime
00005ad0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00000d38  w    F .text	00000056 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
2007c330 g     O .bss	00000004 __malloc_sbrk_start
00004940 g     F .text	0000001c sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
2007c2e8  w    O .bss	00000004 sjsu::lpc17xx::SystemController::system_controller
00000e7c  w    F .text	0000003c sjsu::build::Stringify(sjsu::build::Target)
00006270 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000081dc g       .text	00000000 __symbol_table_start
00003b96  w    F .text	0000003e sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
2007c32c g     O .bss	00000004 __malloc_free_list
2007c004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
000045bc  w    F .text	00000056 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
0000396c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
000081bc g       .text	00000000 __preinit_array_start
2007c014  w    O .data	00000004 heap_position
00007e08  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000cee  w    F .text	0000004a bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000778  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
2007c028  w    O .data	00000004 sjsu::lpc17xx::SystemController::speed_in_hertz
00004a34 g     F .text	00000160 .hidden __addsf3
0000437a  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
2007c324  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart2
00004468  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
2007c2f0  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00000480 g     F .text	00000020 sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
00003e04  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
2007c01c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00006a28 g     F .text	0000004c _close
000067d8 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	e0 3f 08 20 9d 11 00 00 d9 29 00 00 79 11 00 00     .?. .....)..y...
      10:	d9 29 00 00 d9 29 00 00 d9 29 00 00 00 00 00 00     .)...)...)......
	...
      2c:	d9 29 00 00 d9 29 00 00 00 00 00 00 d9 29 00 00     .)...).......)..
      3c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      4c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      5c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      6c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      7c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      8c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      9c:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      ac:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..
      bc:	d9 29 00 00 d9 29 00 00 d9 29 00 00 d9 29 00 00     .)...)...)...)..

000000cc <data_section_table>:
      cc:	000082ac 	.word	0x000082ac
      d0:	2007c000 	.word	0x2007c000
      d4:	00000128 	.word	0x00000128

000000d8 <bss_section_table>:
      d8:	2007c128 	.word	0x2007c128
      dc:	000002b0 	.word	0x000002b0

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
      e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
      ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	2007c128 	.word	0x2007c128
      fc:	00000000 	.word	0x00000000
     100:	000081f4 	.word	0x000081f4

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
     106:	4b03      	ldr	r3, [pc, #12]	; (114 <frame_dummy+0x10>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4903      	ldr	r1, [pc, #12]	; (118 <frame_dummy+0x14>)
     10c:	4803      	ldr	r0, [pc, #12]	; (11c <frame_dummy+0x18>)
     10e:	f3af 8000 	nop.w
     112:	bd08      	pop	{r3, pc}
     114:	00000000 	.word	0x00000000
     118:	2007c12c 	.word	0x2007c12c
     11c:	000081f4 	.word	0x000081f4

00000120 <sjsu::Gpio::Gpio()>:
#include "utility/status.hpp"

namespace sjsu
{
/// An abstract interface for General Purpose I/O
class Gpio
     120:	b480      	push	{r7}
     122:	b083      	sub	sp, #12
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
     128:	4a04      	ldr	r2, [pc, #16]	; (13c <sjsu::Gpio::Gpio()+0x1c>)
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	601a      	str	r2, [r3, #0]
     12e:	687b      	ldr	r3, [r7, #4]
     130:	4618      	mov	r0, r3
     132:	370c      	adds	r7, #12
     134:	46bd      	mov	sp, r7
     136:	bc80      	pop	{r7}
     138:	4770      	bx	lr
     13a:	bf00      	nop
     13c:	00006aac 	.word	0x00006aac

00000140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "L0_Platform/lpc17xx/LPC17xx.h"

#include <cstdint>
using namespace sjsu;

LabGPIO::LabGPIO(uint8_t port, uint8_t pin)
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
     148:	460b      	mov	r3, r1
     14a:	70fb      	strb	r3, [r7, #3]
     14c:	4613      	mov	r3, r2
     14e:	70bb      	strb	r3, [r7, #2]
     150:	687b      	ldr	r3, [r7, #4]
     152:	4618      	mov	r0, r3
     154:	f7ff ffe4 	bl	120 <sjsu::Gpio::Gpio()>
     158:	4a06      	ldr	r2, [pc, #24]	; (174 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)+0x34>)
     15a:	687b      	ldr	r3, [r7, #4]
     15c:	601a      	str	r2, [r3, #0]
{
    PIN = pin;
     15e:	687b      	ldr	r3, [r7, #4]
     160:	78ba      	ldrb	r2, [r7, #2]
     162:	711a      	strb	r2, [r3, #4]
    PORT = port;
     164:	687b      	ldr	r3, [r7, #4]
     166:	78fa      	ldrb	r2, [r7, #3]
     168:	715a      	strb	r2, [r3, #5]
}
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	4618      	mov	r0, r3
     16e:	3708      	adds	r7, #8
     170:	46bd      	mov	sp, r7
     172:	bd80      	pop	{r7, pc}
     174:	00006a88 	.word	0x00006a88

00000178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>:

void LabGPIO::SetDirection(Direction direction) const
{
     178:	b480      	push	{r7}
     17a:	b083      	sub	sp, #12
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	460b      	mov	r3, r1
     182:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     184:	687b      	ldr	r3, [r7, #4]
     186:	795b      	ldrb	r3, [r3, #5]
     188:	b2db      	uxtb	r3, r3
     18a:	2b01      	cmp	r3, #1
     18c:	d023      	beq.n	1d6 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x5e>
     18e:	2b02      	cmp	r3, #2
     190:	d040      	beq.n	214 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x9c>
     192:	2b00      	cmp	r3, #0
     194:	d000      	beq.n	198 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     196:	e05c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     198:	78fb      	ldrb	r3, [r7, #3]
     19a:	2b00      	cmp	r3, #0
     19c:	d10d      	bne.n	1ba <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x42>
                lpc17xx::LPC_GPIO0->FIODIR &= ~(1 << PIN);
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	791b      	ldrb	r3, [r3, #4]
     1a2:	b2db      	uxtb	r3, r3
     1a4:	461a      	mov	r2, r3
     1a6:	2301      	movs	r3, #1
     1a8:	4093      	lsls	r3, r2
     1aa:	43da      	mvns	r2, r3
     1ac:	4b2b      	ldr	r3, [pc, #172]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	4611      	mov	r1, r2
     1b2:	4a2a      	ldr	r2, [pc, #168]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1b4:	400b      	ands	r3, r1
     1b6:	6013      	str	r3, [r2, #0]
            break;
     1b8:	e04b      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO0->FIODIR |= (1 << PIN);
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	791b      	ldrb	r3, [r3, #4]
     1be:	b2db      	uxtb	r3, r3
     1c0:	461a      	mov	r2, r3
     1c2:	2301      	movs	r3, #1
     1c4:	fa03 f202 	lsl.w	r2, r3, r2
     1c8:	4b24      	ldr	r3, [pc, #144]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	4611      	mov	r1, r2
     1ce:	4a23      	ldr	r2, [pc, #140]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1d0:	430b      	orrs	r3, r1
     1d2:	6013      	str	r3, [r2, #0]
            break;
     1d4:	e03d      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     1d6:	78fb      	ldrb	r3, [r7, #3]
     1d8:	2b00      	cmp	r3, #0
     1da:	d10d      	bne.n	1f8 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x80>
                lpc17xx::LPC_GPIO1->FIODIR &= ~(1 << PIN);
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	791b      	ldrb	r3, [r3, #4]
     1e0:	b2db      	uxtb	r3, r3
     1e2:	461a      	mov	r2, r3
     1e4:	2301      	movs	r3, #1
     1e6:	4093      	lsls	r3, r2
     1e8:	43da      	mvns	r2, r3
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	4611      	mov	r1, r2
     1f0:	4a1b      	ldr	r2, [pc, #108]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1f2:	400b      	ands	r3, r1
     1f4:	6013      	str	r3, [r2, #0]
            break;
     1f6:	e02c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO1->FIODIR |= (1 << PIN);
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	791b      	ldrb	r3, [r3, #4]
     1fc:	b2db      	uxtb	r3, r3
     1fe:	461a      	mov	r2, r3
     200:	2301      	movs	r3, #1
     202:	fa03 f202 	lsl.w	r2, r3, r2
     206:	4b16      	ldr	r3, [pc, #88]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     208:	681b      	ldr	r3, [r3, #0]
     20a:	4611      	mov	r1, r2
     20c:	4a14      	ldr	r2, [pc, #80]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     20e:	430b      	orrs	r3, r1
     210:	6013      	str	r3, [r2, #0]
            break;
     212:	e01e      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     214:	78fb      	ldrb	r3, [r7, #3]
     216:	2b00      	cmp	r3, #0
     218:	d10d      	bne.n	236 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xbe>
                lpc17xx::LPC_GPIO2->FIODIR &= ~(1 << PIN);
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	791b      	ldrb	r3, [r3, #4]
     21e:	b2db      	uxtb	r3, r3
     220:	461a      	mov	r2, r3
     222:	2301      	movs	r3, #1
     224:	4093      	lsls	r3, r2
     226:	43da      	mvns	r2, r3
     228:	4b0e      	ldr	r3, [pc, #56]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	4611      	mov	r1, r2
     22e:	4a0d      	ldr	r2, [pc, #52]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     230:	400b      	ands	r3, r1
     232:	6013      	str	r3, [r2, #0]
            break;
     234:	e00c      	b.n	250 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xd8>
                lpc17xx::LPC_GPIO2->FIODIR |= (1 << PIN);
     236:	687b      	ldr	r3, [r7, #4]
     238:	791b      	ldrb	r3, [r3, #4]
     23a:	b2db      	uxtb	r3, r3
     23c:	461a      	mov	r2, r3
     23e:	2301      	movs	r3, #1
     240:	fa03 f202 	lsl.w	r2, r3, r2
     244:	4b07      	ldr	r3, [pc, #28]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     246:	681b      	ldr	r3, [r3, #0]
     248:	4611      	mov	r1, r2
     24a:	4a06      	ldr	r2, [pc, #24]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     24c:	430b      	orrs	r3, r1
     24e:	6013      	str	r3, [r2, #0]
            break;
     250:	bf00      	nop
        }


    }
}
     252:	bf00      	nop
     254:	370c      	adds	r7, #12
     256:	46bd      	mov	sp, r7
     258:	bc80      	pop	{r7}
     25a:	4770      	bx	lr
     25c:	2009c000 	.word	0x2009c000
     260:	2009c020 	.word	0x2009c020
     264:	2009c040 	.word	0x2009c040

00000268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>:

void LabGPIO::Set(State output) const
{
     268:	b480      	push	{r7}
     26a:	b083      	sub	sp, #12
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
     270:	460b      	mov	r3, r1
     272:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     274:	687b      	ldr	r3, [r7, #4]
     276:	795b      	ldrb	r3, [r3, #5]
     278:	b2db      	uxtb	r3, r3
     27a:	2b01      	cmp	r3, #1
     27c:	d023      	beq.n	2c6 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x5e>
     27e:	2b02      	cmp	r3, #2
     280:	d040      	beq.n	304 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x9c>
     282:	2b00      	cmp	r3, #0
     284:	d000      	beq.n	288 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     286:	e05c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     288:	78fb      	ldrb	r3, [r7, #3]
     28a:	2b00      	cmp	r3, #0
     28c:	d10d      	bne.n	2aa <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x42>
                lpc17xx::LPC_GPIO0->FIOPIN &= ~(1 << PIN);
     28e:	687b      	ldr	r3, [r7, #4]
     290:	791b      	ldrb	r3, [r3, #4]
     292:	b2db      	uxtb	r3, r3
     294:	461a      	mov	r2, r3
     296:	2301      	movs	r3, #1
     298:	4093      	lsls	r3, r2
     29a:	43da      	mvns	r2, r3
     29c:	4b2b      	ldr	r3, [pc, #172]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     29e:	695b      	ldr	r3, [r3, #20]
     2a0:	4611      	mov	r1, r2
     2a2:	4a2a      	ldr	r2, [pc, #168]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2a4:	400b      	ands	r3, r1
     2a6:	6153      	str	r3, [r2, #20]
            break;
     2a8:	e04b      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO0->FIOPIN |= (1 << PIN);
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	791b      	ldrb	r3, [r3, #4]
     2ae:	b2db      	uxtb	r3, r3
     2b0:	461a      	mov	r2, r3
     2b2:	2301      	movs	r3, #1
     2b4:	fa03 f202 	lsl.w	r2, r3, r2
     2b8:	4b24      	ldr	r3, [pc, #144]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2ba:	695b      	ldr	r3, [r3, #20]
     2bc:	4611      	mov	r1, r2
     2be:	4a23      	ldr	r2, [pc, #140]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2c0:	430b      	orrs	r3, r1
     2c2:	6153      	str	r3, [r2, #20]
            break;
     2c4:	e03d      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     2c6:	78fb      	ldrb	r3, [r7, #3]
     2c8:	2b00      	cmp	r3, #0
     2ca:	d10d      	bne.n	2e8 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x80>
                lpc17xx::LPC_GPIO1->FIOPIN &= ~(1 << PIN);
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	791b      	ldrb	r3, [r3, #4]
     2d0:	b2db      	uxtb	r3, r3
     2d2:	461a      	mov	r2, r3
     2d4:	2301      	movs	r3, #1
     2d6:	4093      	lsls	r3, r2
     2d8:	43da      	mvns	r2, r3
     2da:	4b1d      	ldr	r3, [pc, #116]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2dc:	695b      	ldr	r3, [r3, #20]
     2de:	4611      	mov	r1, r2
     2e0:	4a1b      	ldr	r2, [pc, #108]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2e2:	400b      	ands	r3, r1
     2e4:	6153      	str	r3, [r2, #20]
            break;
     2e6:	e02c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO1->FIOPIN |= (1 << PIN);;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	791b      	ldrb	r3, [r3, #4]
     2ec:	b2db      	uxtb	r3, r3
     2ee:	461a      	mov	r2, r3
     2f0:	2301      	movs	r3, #1
     2f2:	fa03 f202 	lsl.w	r2, r3, r2
     2f6:	4b16      	ldr	r3, [pc, #88]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2f8:	695b      	ldr	r3, [r3, #20]
     2fa:	4611      	mov	r1, r2
     2fc:	4a14      	ldr	r2, [pc, #80]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2fe:	430b      	orrs	r3, r1
     300:	6153      	str	r3, [r2, #20]
            break;
     302:	e01e      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     304:	78fb      	ldrb	r3, [r7, #3]
     306:	2b00      	cmp	r3, #0
     308:	d10d      	bne.n	326 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xbe>
                lpc17xx::LPC_GPIO2->FIOPIN &= ~(1 << PIN);
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	791b      	ldrb	r3, [r3, #4]
     30e:	b2db      	uxtb	r3, r3
     310:	461a      	mov	r2, r3
     312:	2301      	movs	r3, #1
     314:	4093      	lsls	r3, r2
     316:	43da      	mvns	r2, r3
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     31a:	695b      	ldr	r3, [r3, #20]
     31c:	4611      	mov	r1, r2
     31e:	4a0d      	ldr	r2, [pc, #52]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     320:	400b      	ands	r3, r1
     322:	6153      	str	r3, [r2, #20]
            break;
     324:	e00c      	b.n	340 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xd8>
                lpc17xx::LPC_GPIO2->FIOPIN |= (1 << PIN);
     326:	687b      	ldr	r3, [r7, #4]
     328:	791b      	ldrb	r3, [r3, #4]
     32a:	b2db      	uxtb	r3, r3
     32c:	461a      	mov	r2, r3
     32e:	2301      	movs	r3, #1
     330:	fa03 f202 	lsl.w	r2, r3, r2
     334:	4b07      	ldr	r3, [pc, #28]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     336:	695b      	ldr	r3, [r3, #20]
     338:	4611      	mov	r1, r2
     33a:	4a06      	ldr	r2, [pc, #24]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     33c:	430b      	orrs	r3, r1
     33e:	6153      	str	r3, [r2, #20]
            break;
     340:	bf00      	nop
        }
    }
}
     342:	bf00      	nop
     344:	370c      	adds	r7, #12
     346:	46bd      	mov	sp, r7
     348:	bc80      	pop	{r7}
     34a:	4770      	bx	lr
     34c:	2009c000 	.word	0x2009c000
     350:	2009c020 	.word	0x2009c020
     354:	2009c040 	.word	0x2009c040

00000358 <sjsu::LabGPIO::Toggle() const>:

void LabGPIO::Toggle() const
{
     358:	b480      	push	{r7}
     35a:	b083      	sub	sp, #12
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
    switch(PORT)
     360:	687b      	ldr	r3, [r7, #4]
     362:	795b      	ldrb	r3, [r3, #5]
     364:	b2db      	uxtb	r3, r3
     366:	2b01      	cmp	r3, #1
     368:	d012      	beq.n	390 <sjsu::LabGPIO::Toggle() const+0x38>
     36a:	2b02      	cmp	r3, #2
     36c:	d01e      	beq.n	3ac <sjsu::LabGPIO::Toggle() const+0x54>
     36e:	2b00      	cmp	r3, #0
     370:	d000      	beq.n	374 <sjsu::LabGPIO::Toggle() const+0x1c>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     372:	e029      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO0->FIOPIN ^= (1 << PIN);
     374:	687b      	ldr	r3, [r7, #4]
     376:	791b      	ldrb	r3, [r3, #4]
     378:	b2db      	uxtb	r3, r3
     37a:	461a      	mov	r2, r3
     37c:	2301      	movs	r3, #1
     37e:	fa03 f202 	lsl.w	r2, r3, r2
     382:	4b14      	ldr	r3, [pc, #80]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     384:	695b      	ldr	r3, [r3, #20]
     386:	4611      	mov	r1, r2
     388:	4a12      	ldr	r2, [pc, #72]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     38a:	404b      	eors	r3, r1
     38c:	6153      	str	r3, [r2, #20]
            break;
     38e:	e01b      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO1->FIOPIN ^= (1 << PIN);
     390:	687b      	ldr	r3, [r7, #4]
     392:	791b      	ldrb	r3, [r3, #4]
     394:	b2db      	uxtb	r3, r3
     396:	461a      	mov	r2, r3
     398:	2301      	movs	r3, #1
     39a:	fa03 f202 	lsl.w	r2, r3, r2
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a0:	695b      	ldr	r3, [r3, #20]
     3a2:	4611      	mov	r1, r2
     3a4:	4a0c      	ldr	r2, [pc, #48]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a6:	404b      	eors	r3, r1
     3a8:	6153      	str	r3, [r2, #20]
            break;
     3aa:	e00d      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO2->FIOPIN ^= (1 << PIN);
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	791b      	ldrb	r3, [r3, #4]
     3b0:	b2db      	uxtb	r3, r3
     3b2:	461a      	mov	r2, r3
     3b4:	2301      	movs	r3, #1
     3b6:	fa03 f202 	lsl.w	r2, r3, r2
     3ba:	4b08      	ldr	r3, [pc, #32]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3bc:	695b      	ldr	r3, [r3, #20]
     3be:	4611      	mov	r1, r2
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3c2:	404b      	eors	r3, r1
     3c4:	6153      	str	r3, [r2, #20]
            break;
     3c6:	bf00      	nop
        }
    }
}
     3c8:	bf00      	nop
     3ca:	370c      	adds	r7, #12
     3cc:	46bd      	mov	sp, r7
     3ce:	bc80      	pop	{r7}
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	2009c000 	.word	0x2009c000
     3d8:	2009c020 	.word	0x2009c020
     3dc:	2009c040 	.word	0x2009c040

000003e0 <sjsu::LabGPIO::Read() const>:

bool LabGPIO::Read() const
{
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    switch(PORT)
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	795b      	ldrb	r3, [r3, #5]
     3ec:	b2db      	uxtb	r3, r3
     3ee:	2b01      	cmp	r3, #1
     3f0:	d012      	beq.n	418 <sjsu::LabGPIO::Read() const+0x38>
     3f2:	2b02      	cmp	r3, #2
     3f4:	d01f      	beq.n	436 <sjsu::LabGPIO::Read() const+0x56>
     3f6:	2b00      	cmp	r3, #0
     3f8:	d12c      	bne.n	454 <sjsu::LabGPIO::Read() const+0x74>
    {
        case 0:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO0->FIOPIN & (1 << PIN)));
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <sjsu::LabGPIO::Read() const+0x80>)
     3fc:	695b      	ldr	r3, [r3, #20]
     3fe:	687a      	ldr	r2, [r7, #4]
     400:	7912      	ldrb	r2, [r2, #4]
     402:	b2d2      	uxtb	r2, r2
     404:	4611      	mov	r1, r2
     406:	2201      	movs	r2, #1
     408:	408a      	lsls	r2, r1
     40a:	4013      	ands	r3, r2
     40c:	2b00      	cmp	r3, #0
     40e:	bf14      	ite	ne
     410:	2301      	movne	r3, #1
     412:	2300      	moveq	r3, #0
     414:	b2db      	uxtb	r3, r3
     416:	e01e      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }
        case 1:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO1->FIOPIN & (1 << PIN)));
     418:	4b12      	ldr	r3, [pc, #72]	; (464 <sjsu::LabGPIO::Read() const+0x84>)
     41a:	695b      	ldr	r3, [r3, #20]
     41c:	687a      	ldr	r2, [r7, #4]
     41e:	7912      	ldrb	r2, [r2, #4]
     420:	b2d2      	uxtb	r2, r2
     422:	4611      	mov	r1, r2
     424:	2201      	movs	r2, #1
     426:	408a      	lsls	r2, r1
     428:	4013      	ands	r3, r2
     42a:	2b00      	cmp	r3, #0
     42c:	bf14      	ite	ne
     42e:	2301      	movne	r3, #1
     430:	2300      	moveq	r3, #0
     432:	b2db      	uxtb	r3, r3
     434:	e00f      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }   
        case 2:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO2->FIOPIN & (1 << PIN)));
     436:	4b0c      	ldr	r3, [pc, #48]	; (468 <sjsu::LabGPIO::Read() const+0x88>)
     438:	695b      	ldr	r3, [r3, #20]
     43a:	687a      	ldr	r2, [r7, #4]
     43c:	7912      	ldrb	r2, [r2, #4]
     43e:	b2d2      	uxtb	r2, r2
     440:	4611      	mov	r1, r2
     442:	2201      	movs	r2, #1
     444:	408a      	lsls	r2, r1
     446:	4013      	ands	r3, r2
     448:	2b00      	cmp	r3, #0
     44a:	bf14      	ite	ne
     44c:	2301      	movne	r3, #1
     44e:	2300      	moveq	r3, #0
     450:	b2db      	uxtb	r3, r3
     452:	e000      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }
    }
    return false;
     454:	2300      	movs	r3, #0
}
     456:	4618      	mov	r0, r3
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	bc80      	pop	{r7}
     45e:	4770      	bx	lr
     460:	2009c000 	.word	0x2009c000
     464:	2009c020 	.word	0x2009c020
     468:	2009c040 	.word	0x2009c040

0000046c <sjsu::LabGPIO::GetPin() const>:

const sjsu::Pin & LabGPIO::GetPin() const
{
     46c:	b480      	push	{r7}
     46e:	b083      	sub	sp, #12
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     474:	bf00      	nop
     476:	4618      	mov	r0, r3
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:

void LabGPIO::AttachInterrupt(IsrPointer function, Edge edge) const
{
     480:	b480      	push	{r7}
     482:	b087      	sub	sp, #28
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	60b9      	str	r1, [r7, #8]
     48a:	4613      	mov	r3, r2
     48c:	71fb      	strb	r3, [r7, #7]
    IsrPointer test = function;
     48e:	68bb      	ldr	r3, [r7, #8]
     490:	617b      	str	r3, [r7, #20]
    Edge testedge = edge;
     492:	79fb      	ldrb	r3, [r7, #7]
     494:	74fb      	strb	r3, [r7, #19]
    test = test;
    testedge = testedge;
}
     496:	bf00      	nop
     498:	371c      	adds	r7, #28
     49a:	46bd      	mov	sp, r7
     49c:	bc80      	pop	{r7}
     49e:	4770      	bx	lr

000004a0 <sjsu::LabGPIO::DetachInterrupt() const>:

void LabGPIO::DetachInterrupt() const
{   
     4a0:	b480      	push	{r7}
     4a2:	b083      	sub	sp, #12
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     4a8:	bf00      	nop
     4aa:	370c      	adds	r7, #12
     4ac:	46bd      	mov	sp, r7
     4ae:	bc80      	pop	{r7}
     4b0:	4770      	bx	lr
     4b2:	Address 0x00000000000004b2 is out of bounds.


000004b4 <__static_initialization_and_destruction_0(int, int)>:
     4b4:	b480      	push	{r7}
     4b6:	b083      	sub	sp, #12
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	6039      	str	r1, [r7, #0]
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	2b01      	cmp	r3, #1
     4c2:	d110      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
     4c4:	683b      	ldr	r3, [r7, #0]
     4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4ca:	4293      	cmp	r3, r2
     4cc:	d10b      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
  };
  /// A pointer holding the address to the LPC40xx PIN peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
     4ce:	4b08      	ldr	r3, [pc, #32]	; (4f0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	f003 0301 	and.w	r3, r3, #1
     4d6:	2b00      	cmp	r3, #0
     4d8:	d105      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
     4da:	4b05      	ldr	r3, [pc, #20]	; (4f0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4dc:	2201      	movs	r2, #1
     4de:	601a      	str	r2, [r3, #0]
     4e0:	4a04      	ldr	r2, [pc, #16]	; (4f4 <__static_initialization_and_destruction_0(int, int)+0x40>)
     4e2:	4b05      	ldr	r3, [pc, #20]	; (4f8 <__static_initialization_and_destruction_0(int, int)+0x44>)
     4e4:	601a      	str	r2, [r3, #0]
     4e6:	bf00      	nop
     4e8:	370c      	adds	r7, #12
     4ea:	46bd      	mov	sp, r7
     4ec:	bc80      	pop	{r7}
     4ee:	4770      	bx	lr
     4f0:	2007c148 	.word	0x2007c148
     4f4:	4002c000 	.word	0x4002c000
     4f8:	2007c144 	.word	0x2007c144

000004fc <_GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh>:
     4fc:	b580      	push	{r7, lr}
     4fe:	af00      	add	r7, sp, #0
     500:	f64f 71ff 	movw	r1, #65535	; 0xffff
     504:	2001      	movs	r0, #1
     506:	f7ff ffd5 	bl	4b4 <__static_initialization_and_destruction_0(int, int)>
     50a:	bd80      	pop	{r7, pc}

0000050c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     50c:	b480      	push	{r7}
     50e:	b083      	sub	sp, #12
     510:	af00      	add	r7, sp, #0
     512:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     514:	687b      	ldr	r3, [r7, #4]
     516:	f003 021f 	and.w	r2, r3, #31
     51a:	4906      	ldr	r1, [pc, #24]	; (534 <NVIC_EnableIRQ+0x28>)
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	095b      	lsrs	r3, r3, #5
     520:	2001      	movs	r0, #1
     522:	fa00 f202 	lsl.w	r2, r0, r2
     526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     52a:	bf00      	nop
     52c:	370c      	adds	r7, #12
     52e:	46bd      	mov	sp, r7
     530:	bc80      	pop	{r7}
     532:	4770      	bx	lr
     534:	e000e100 	.word	0xe000e100

00000538 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     538:	b480      	push	{r7}
     53a:	b083      	sub	sp, #12
     53c:	af00      	add	r7, sp, #0
     53e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     540:	687b      	ldr	r3, [r7, #4]
     542:	f003 021f 	and.w	r2, r3, #31
     546:	4907      	ldr	r1, [pc, #28]	; (564 <NVIC_DisableIRQ+0x2c>)
     548:	687b      	ldr	r3, [r7, #4]
     54a:	095b      	lsrs	r3, r3, #5
     54c:	2001      	movs	r0, #1
     54e:	fa00 f202 	lsl.w	r2, r0, r2
     552:	3320      	adds	r3, #32
     554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     558:	bf00      	nop
     55a:	370c      	adds	r7, #12
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	e000e100 	.word	0xe000e100

00000568 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     568:	b480      	push	{r7}
     56a:	b083      	sub	sp, #12
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
     570:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     572:	687b      	ldr	r3, [r7, #4]
     574:	2b00      	cmp	r3, #0
     576:	da0b      	bge.n	590 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     578:	683b      	ldr	r3, [r7, #0]
     57a:	b2da      	uxtb	r2, r3
     57c:	490c      	ldr	r1, [pc, #48]	; (5b0 <NVIC_SetPriority+0x48>)
     57e:	687b      	ldr	r3, [r7, #4]
     580:	f003 030f 	and.w	r3, r3, #15
     584:	3b04      	subs	r3, #4
     586:	0152      	lsls	r2, r2, #5
     588:	b2d2      	uxtb	r2, r2
     58a:	440b      	add	r3, r1
     58c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     58e:	e00a      	b.n	5a6 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     590:	683b      	ldr	r3, [r7, #0]
     592:	b2db      	uxtb	r3, r3
     594:	4a07      	ldr	r2, [pc, #28]	; (5b4 <NVIC_SetPriority+0x4c>)
     596:	6879      	ldr	r1, [r7, #4]
     598:	4608      	mov	r0, r1
     59a:	015b      	lsls	r3, r3, #5
     59c:	b2d9      	uxtb	r1, r3
     59e:	1813      	adds	r3, r2, r0
     5a0:	460a      	mov	r2, r1
     5a2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     5a6:	bf00      	nop
     5a8:	370c      	adds	r7, #12
     5aa:	46bd      	mov	sp, r7
     5ac:	bc80      	pop	{r7}
     5ae:	4770      	bx	lr
     5b0:	e000ed00 	.word	0xe000ed00
     5b4:	e000e100 	.word	0xe000e100

000005b8 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     5b8:	b490      	push	{r4, r7}
     5ba:	af00      	add	r7, sp, #0
     5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     5c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     5c4:	4618      	mov	r0, r3
     5c6:	4621      	mov	r1, r4
     5c8:	46bd      	mov	sp, r7
     5ca:	bc90      	pop	{r4, r7}
     5cc:	4770      	bx	lr

000005ce <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     5ce:	b490      	push	{r4, r7}
     5d0:	b082      	sub	sp, #8
     5d2:	af00      	add	r7, sp, #0
     5d4:	6078      	str	r0, [r7, #4]
     5d6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	cb18      	ldmia	r3, {r3, r4}
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	e9c2 3400 	strd	r3, r4, [r2]
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	4618      	mov	r0, r3
     5e6:	3708      	adds	r7, #8
     5e8:	46bd      	mov	sp, r7
     5ea:	bc90      	pop	{r4, r7}
     5ec:	4770      	bx	lr

000005ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     5ee:	b490      	push	{r4, r7}
     5f0:	b082      	sub	sp, #8
     5f2:	af00      	add	r7, sp, #0
     5f4:	6078      	str	r0, [r7, #4]
     5f6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     5f8:	683b      	ldr	r3, [r7, #0]
     5fa:	cb18      	ldmia	r3, {r3, r4}
     5fc:	687a      	ldr	r2, [r7, #4]
     5fe:	e9c2 3400 	strd	r3, r4, [r2]
     602:	687b      	ldr	r3, [r7, #4]
     604:	4618      	mov	r0, r3
     606:	3708      	adds	r7, #8
     608:	46bd      	mov	sp, r7
     60a:	bc90      	pop	{r4, r7}
     60c:	4770      	bx	lr
     60e:	Address 0x000000000000060e is out of bounds.


00000610 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     610:	b580      	push	{r7, lr}
     612:	b082      	sub	sp, #8
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2200      	movs	r2, #0
     61c:	4903      	ldr	r1, [pc, #12]	; (62c <sjsu::DefaultUptime()+0x1c>)
     61e:	4618      	mov	r0, r3
     620:	f000 fb2e 	bl	c80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     624:	6878      	ldr	r0, [r7, #4]
     626:	3708      	adds	r7, #8
     628:	46bd      	mov	sp, r7
     62a:	bd80      	pop	{r7, pc}
     62c:	2007c150 	.word	0x2007c150

00000630 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     630:	b480      	push	{r7}
     632:	b083      	sub	sp, #12
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
     638:	2300      	movs	r3, #0
     63a:	4618      	mov	r0, r3
     63c:	370c      	adds	r7, #12
     63e:	46bd      	mov	sp, r7
     640:	bc80      	pop	{r7}
     642:	4770      	bx	lr

00000644 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     644:	b580      	push	{r7, lr}
     646:	af00      	add	r7, sp, #0
     648:	2000      	movs	r0, #0
     64a:	f7ff fff1 	bl	630 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     64e:	4603      	mov	r3, r0
     650:	4618      	mov	r0, r3
     652:	bd80      	pop	{r7, pc}

00000654 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     654:	b590      	push	{r4, r7, lr}
     656:	b093      	sub	sp, #76	; 0x4c
     658:	af00      	add	r7, sp, #0
     65a:	e9c7 0102 	strd	r0, r1, [r7, #8]
     65e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     662:	e9c7 3406 	strd	r3, r4, [r7, #24]
     666:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     66a:	f107 0338 	add.w	r3, r7, #56	; 0x38
     66e:	4618      	mov	r0, r3
     670:	f000 fb29 	bl	cc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     674:	f107 0238 	add.w	r2, r7, #56	; 0x38
     678:	f107 0318 	add.w	r3, r7, #24
     67c:	4611      	mov	r1, r2
     67e:	4618      	mov	r0, r3
     680:	f000 fb35 	bl	cee <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     684:	4603      	mov	r3, r0
     686:	2b00      	cmp	r3, #0
     688:	d004      	beq.n	694 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     68a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     68e:	e9c7 3404 	strd	r3, r4, [r7, #16]
     692:	e011      	b.n	6b8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     694:	4b19      	ldr	r3, [pc, #100]	; (6fc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     696:	681b      	ldr	r3, [r3, #0]
     698:	f107 0230 	add.w	r2, r7, #48	; 0x30
     69c:	4610      	mov	r0, r2
     69e:	4798      	blx	r3
     6a0:	463b      	mov	r3, r7
     6a2:	f107 0218 	add.w	r2, r7, #24
     6a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
     6aa:	4618      	mov	r0, r3
     6ac:	f000 fb44 	bl	d38 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6b0:	e9d7 3400 	ldrd	r3, r4, [r7]
     6b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     6b8:	2301      	movs	r3, #1
     6ba:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     6bc:	4b0f      	ldr	r3, [pc, #60]	; (6fc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
     6c4:	4610      	mov	r0, r2
     6c6:	4798      	blx	r3
     6c8:	f107 0210 	add.w	r2, r7, #16
     6cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
     6d0:	4611      	mov	r1, r2
     6d2:	4618      	mov	r0, r3
     6d4:	f000 fb5b 	bl	d8e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6d8:	4603      	mov	r3, r0
     6da:	2b00      	cmp	r3, #0
     6dc:	d009      	beq.n	6f2 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
     6e2:	4618      	mov	r0, r3
     6e4:	f7ff ffa4 	bl	630 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     6e8:	4603      	mov	r3, r0
     6ea:	2b00      	cmp	r3, #0
     6ec:	d0e6      	beq.n	6bc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     6ee:	2300      	movs	r3, #0
     6f0:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     6f4:	4618      	mov	r0, r3
     6f6:	374c      	adds	r7, #76	; 0x4c
     6f8:	46bd      	mov	sp, r7
     6fa:	bd90      	pop	{r4, r7, pc}
     6fc:	2007c000 	.word	0x2007c000

00000700 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     700:	b580      	push	{r7, lr}
     702:	b082      	sub	sp, #8
     704:	af00      	add	r7, sp, #0
     706:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     70a:	e9d7 0100 	ldrd	r0, r1, [r7]
     70e:	f7ff ffa1 	bl	654 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     712:	bf00      	nop
     714:	3708      	adds	r7, #8
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}

0000071a <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     71a:	b480      	push	{r7}
     71c:	af00      	add	r7, sp, #0
     71e:	bf00      	nop
     720:	46bd      	mov	sp, r7
     722:	bc80      	pop	{r7}
     724:	4770      	bx	lr
     726:	Address 0x0000000000000726 is out of bounds.


00000728 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     72e:	4b09      	ldr	r3, [pc, #36]	; (754 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	9300      	str	r3, [sp, #0]
     734:	231d      	movs	r3, #29
     736:	4a08      	ldr	r2, [pc, #32]	; (758 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     738:	4908      	ldr	r1, [pc, #32]	; (75c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     73a:	4809      	ldr	r0, [pc, #36]	; (760 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     73c:	f001 ff8e 	bl	265c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     740:	4b04      	ldr	r3, [pc, #16]	; (754 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     742:	681b      	ldr	r3, [r3, #0]
     744:	3b10      	subs	r3, #16
     746:	4618      	mov	r0, r3
     748:	f7ff fef6 	bl	538 <NVIC_DisableIRQ>
  }
     74c:	bf00      	nop
     74e:	46bd      	mov	sp, r7
     750:	bd80      	pop	{r7, pc}
     752:	bf00      	nop
     754:	2007c004 	.word	0x2007c004
     758:	00006bdc 	.word	0x00006bdc
     75c:	00006ad8 	.word	0x00006ad8
     760:	00006ae8 	.word	0x00006ae8

00000764 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     764:	b480      	push	{r7}
     766:	b083      	sub	sp, #12
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     76c:	2340      	movs	r3, #64	; 0x40
     76e:	4618      	mov	r0, r3
     770:	370c      	adds	r7, #12
     772:	46bd      	mov	sp, r7
     774:	bc80      	pop	{r7}
     776:	4770      	bx	lr

00000778 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     778:	b580      	push	{r7, lr}
     77a:	b084      	sub	sp, #16
     77c:	af00      	add	r7, sp, #0
     77e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     780:	687b      	ldr	r3, [r7, #4]
     782:	4618      	mov	r0, r3
     784:	f44f 7380 	mov.w	r3, #256	; 0x100
     788:	461a      	mov	r2, r3
     78a:	2100      	movs	r1, #0
     78c:	f005 ff3d 	bl	660a <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     790:	2300      	movs	r3, #0
     792:	60fb      	str	r3, [r7, #12]
     794:	68fb      	ldr	r3, [r7, #12]
     796:	2b0f      	cmp	r3, #15
     798:	d808      	bhi.n	7ac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	68fa      	ldr	r2, [r7, #12]
     79e:	4911      	ldr	r1, [pc, #68]	; (7e4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     7a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     7a4:	68fb      	ldr	r3, [r7, #12]
     7a6:	3301      	adds	r3, #1
     7a8:	60fb      	str	r3, [r7, #12]
     7aa:	e7f3      	b.n	794 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     7ac:	2310      	movs	r3, #16
     7ae:	60bb      	str	r3, [r7, #8]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	f7ff ffd7 	bl	764 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     7b6:	4602      	mov	r2, r0
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	4293      	cmp	r3, r2
     7bc:	bf34      	ite	cc
     7be:	2301      	movcc	r3, #1
     7c0:	2300      	movcs	r3, #0
     7c2:	b2db      	uxtb	r3, r3
     7c4:	2b00      	cmp	r3, #0
     7c6:	d008      	beq.n	7da <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	68ba      	ldr	r2, [r7, #8]
     7cc:	4906      	ldr	r1, [pc, #24]	; (7e8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     7ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     7d2:	68bb      	ldr	r3, [r7, #8]
     7d4:	3301      	adds	r3, #1
     7d6:	60bb      	str	r3, [r7, #8]
     7d8:	e7ea      	b.n	7b0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     7da:	bf00      	nop
    }
     7dc:	6878      	ldr	r0, [r7, #4]
     7de:	3710      	adds	r7, #16
     7e0:	46bd      	mov	sp, r7
     7e2:	bd80      	pop	{r7, pc}
     7e4:	0000071b 	.word	0x0000071b
     7e8:	00000729 	.word	0x00000729

000007ec <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     7ec:	b480      	push	{r7}
     7ee:	b083      	sub	sp, #12
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	3310      	adds	r3, #16
  }
     7f8:	4618      	mov	r0, r3
     7fa:	370c      	adds	r7, #12
     7fc:	46bd      	mov	sp, r7
     7fe:	bc80      	pop	{r7}
     800:	4770      	bx	lr
     802:	Address 0x0000000000000802 is out of bounds.


00000804 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	f7ff ffed 	bl	7ec <sjsu::cortex::InterruptController::IrqToIndex(int)>
     812:	4603      	mov	r3, r0
     814:	009b      	lsls	r3, r3, #2
     816:	4a03      	ldr	r2, [pc, #12]	; (824 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     818:	4413      	add	r3, r2
  }
     81a:	4618      	mov	r0, r3
     81c:	3708      	adds	r7, #8
     81e:	46bd      	mov	sp, r7
     820:	bd80      	pop	{r7, pc}
     822:	bf00      	nop
     824:	2007c158 	.word	0x2007c158

00000828 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     828:	b084      	sub	sp, #16
     82a:	b590      	push	{r4, r7, lr}
     82c:	b085      	sub	sp, #20
     82e:	af00      	add	r7, sp, #0
     830:	6078      	str	r0, [r7, #4]
     832:	f107 0024 	add.w	r0, r7, #36	; 0x24
     836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     83c:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     83e:	6abc      	ldr	r4, [r7, #40]	; 0x28
     840:	68f8      	ldr	r0, [r7, #12]
     842:	f7ff ffdf 	bl	804 <sjsu::cortex::InterruptController::GetVector(int)>
     846:	4603      	mov	r3, r0
     848:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     84a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     84e:	2b00      	cmp	r3, #0
     850:	d005      	beq.n	85e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     852:	68fb      	ldr	r3, [r7, #12]
     854:	2b00      	cmp	r3, #0
     856:	db02      	blt.n	85e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     858:	68f8      	ldr	r0, [r7, #12]
     85a:	f7ff fe57 	bl	50c <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     860:	2b00      	cmp	r3, #0
     862:	db04      	blt.n	86e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     866:	4619      	mov	r1, r3
     868:	68f8      	ldr	r0, [r7, #12]
     86a:	f7ff fe7d 	bl	568 <NVIC_SetPriority>
    }
  }
     86e:	bf00      	nop
     870:	3714      	adds	r7, #20
     872:	46bd      	mov	sp, r7
     874:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     878:	b004      	add	sp, #16
     87a:	4770      	bx	lr

0000087c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     87c:	b580      	push	{r7, lr}
     87e:	b082      	sub	sp, #8
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
     884:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     886:	6838      	ldr	r0, [r7, #0]
     888:	f7ff fe56 	bl	538 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     88c:	6838      	ldr	r0, [r7, #0]
     88e:	f7ff ffb9 	bl	804 <sjsu::cortex::InterruptController::GetVector(int)>
     892:	4602      	mov	r2, r0
     894:	4b02      	ldr	r3, [pc, #8]	; (8a0 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     896:	6013      	str	r3, [r2, #0]
  }
     898:	bf00      	nop
     89a:	3708      	adds	r7, #8
     89c:	46bd      	mov	sp, r7
     89e:	bd80      	pop	{r7, pc}
     8a0:	00000729 	.word	0x00000729

000008a4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
     8a4:	b580      	push	{r7, lr}
     8a6:	b082      	sub	sp, #8
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	4618      	mov	r0, r3
     8b0:	f000 f804 	bl	8bc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
     8b4:	6878      	ldr	r0, [r7, #4]
     8b6:	3708      	adds	r7, #8
     8b8:	46bd      	mov	sp, r7
     8ba:	bd80      	pop	{r7, pc}

000008bc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     8c4:	4903      	ldr	r1, [pc, #12]	; (8d4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
     8c6:	6878      	ldr	r0, [r7, #4]
     8c8:	f000 f806 	bl	8d8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
     8cc:	6878      	ldr	r0, [r7, #4]
     8ce:	3708      	adds	r7, #8
     8d0:	46bd      	mov	sp, r7
     8d2:	bd80      	pop	{r7, pc}
     8d4:	00006ad0 	.word	0x00006ad0

000008d8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     8d8:	b490      	push	{r4, r7}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
     8e0:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	cb18      	ldmia	r3, {r3, r4}
     8e6:	687a      	ldr	r2, [r7, #4]
     8e8:	e9c2 3400 	strd	r3, r4, [r2]
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	4618      	mov	r0, r3
     8f0:	3708      	adds	r7, #8
     8f2:	46bd      	mov	sp, r7
     8f4:	bc90      	pop	{r4, r7}
     8f6:	4770      	bx	lr

000008f8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
     8fe:	6078      	str	r0, [r7, #4]
     900:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     902:	687b      	ldr	r3, [r7, #4]
     904:	6839      	ldr	r1, [r7, #0]
     906:	4618      	mov	r0, r3
     908:	f000 f810 	bl	92c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
     90c:	6878      	ldr	r0, [r7, #4]
     90e:	3708      	adds	r7, #8
     910:	46bd      	mov	sp, r7
     912:	bd80      	pop	{r7, pc}

00000914 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
     914:	b490      	push	{r4, r7}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
	{ return __r; }
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	cb18      	ldmia	r3, {r3, r4}
     920:	4618      	mov	r0, r3
     922:	4621      	mov	r1, r4
     924:	3708      	adds	r7, #8
     926:	46bd      	mov	sp, r7
     928:	bc90      	pop	{r4, r7}
     92a:	4770      	bx	lr

0000092c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     92c:	b5f0      	push	{r4, r5, r6, r7, lr}
     92e:	b085      	sub	sp, #20
     930:	af00      	add	r7, sp, #0
     932:	6078      	str	r0, [r7, #4]
     934:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     936:	6838      	ldr	r0, [r7, #0]
     938:	f7ff ffec 	bl	914 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
     93c:	4605      	mov	r5, r0
     93e:	460e      	mov	r6, r1
     940:	462b      	mov	r3, r5
     942:	4634      	mov	r4, r6
     944:	f04f 0100 	mov.w	r1, #0
     948:	f04f 0200 	mov.w	r2, #0
     94c:	0162      	lsls	r2, r4, #5
     94e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     952:	0159      	lsls	r1, r3, #5
     954:	460b      	mov	r3, r1
     956:	4614      	mov	r4, r2
     958:	1b5b      	subs	r3, r3, r5
     95a:	eb64 0406 	sbc.w	r4, r4, r6
     95e:	f04f 0100 	mov.w	r1, #0
     962:	f04f 0200 	mov.w	r2, #0
     966:	00a2      	lsls	r2, r4, #2
     968:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     96c:	0099      	lsls	r1, r3, #2
     96e:	460b      	mov	r3, r1
     970:	4614      	mov	r4, r2
     972:	195b      	adds	r3, r3, r5
     974:	eb44 0406 	adc.w	r4, r4, r6
     978:	f04f 0100 	mov.w	r1, #0
     97c:	f04f 0200 	mov.w	r2, #0
     980:	00e2      	lsls	r2, r4, #3
     982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
     986:	00d9      	lsls	r1, r3, #3
     988:	460b      	mov	r3, r1
     98a:	4614      	mov	r4, r2
     98c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     990:	f107 0308 	add.w	r3, r7, #8
     994:	4619      	mov	r1, r3
     996:	6878      	ldr	r0, [r7, #4]
     998:	f7ff fe29 	bl	5ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     99c:	6878      	ldr	r0, [r7, #4]
     99e:	3714      	adds	r7, #20
     9a0:	46bd      	mov	sp, r7
     9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000009a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     9a4:	b590      	push	{r4, r7, lr}
     9a6:	b085      	sub	sp, #20
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
     9ac:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     9ae:	f107 0308 	add.w	r3, r7, #8
     9b2:	6839      	ldr	r1, [r7, #0]
     9b4:	4618      	mov	r0, r3
     9b6:	f7ff ff9f 	bl	8f8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     9ba:	f107 0308 	add.w	r3, r7, #8
     9be:	4618      	mov	r0, r3
     9c0:	f000 f80a 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     9c4:	4603      	mov	r3, r0
     9c6:	460c      	mov	r4, r1
     9c8:	687a      	ldr	r2, [r7, #4]
     9ca:	e9c2 3400 	strd	r3, r4, [r2]
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	4618      	mov	r0, r3
     9d2:	3714      	adds	r7, #20
     9d4:	46bd      	mov	sp, r7
     9d6:	bd90      	pop	{r4, r7, pc}

000009d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
     9d8:	b490      	push	{r4, r7}
     9da:	b082      	sub	sp, #8
     9dc:	af00      	add	r7, sp, #0
     9de:	6078      	str	r0, [r7, #4]
	{ return __r; }
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	cb18      	ldmia	r3, {r3, r4}
     9e4:	4618      	mov	r0, r3
     9e6:	4621      	mov	r1, r4
     9e8:	3708      	adds	r7, #8
     9ea:	46bd      	mov	sp, r7
     9ec:	bc90      	pop	{r4, r7}
     9ee:	4770      	bx	lr

000009f0 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()>:
      operator""s()
     9f0:	b580      	push	{r7, lr}
     9f2:	b082      	sub	sp, #8
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::seconds, _Digits...>(); }
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	4618      	mov	r0, r3
     9fc:	f000 f804 	bl	a08 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()>
     a00:	6878      	ldr	r0, [r7, #4]
     a02:	3708      	adds	r7, #8
     a04:	46bd      	mov	sp, r7
     a06:	bd80      	pop	{r7, pc}

00000a08 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
     a08:	b580      	push	{r7, lr}
     a0a:	b082      	sub	sp, #8
     a0c:	af00      	add	r7, sp, #0
     a0e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     a10:	4903      	ldr	r1, [pc, #12]	; (a20 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()+0x18>)
     a12:	6878      	ldr	r0, [r7, #4]
     a14:	f7ff fddb 	bl	5ce <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>
      }
     a18:	6878      	ldr	r0, [r7, #4]
     a1a:	3708      	adds	r7, #8
     a1c:	46bd      	mov	sp, r7
     a1e:	bd80      	pop	{r7, pc}
     a20:	00006ac8 	.word	0x00006ac8

00000a24 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     a24:	b580      	push	{r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
     a2c:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	6839      	ldr	r1, [r7, #0]
     a32:	4618      	mov	r0, r3
     a34:	f000 f810 	bl	a58 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
      }
     a38:	6878      	ldr	r0, [r7, #4]
     a3a:	3708      	adds	r7, #8
     a3c:	46bd      	mov	sp, r7
     a3e:	bd80      	pop	{r7, pc}

00000a40 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>:
	count() const
     a40:	b490      	push	{r4, r7}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	6078      	str	r0, [r7, #4]
	{ return __r; }
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	cb18      	ldmia	r3, {r3, r4}
     a4c:	4618      	mov	r0, r3
     a4e:	4621      	mov	r1, r4
     a50:	3708      	adds	r7, #8
     a52:	46bd      	mov	sp, r7
     a54:	bc90      	pop	{r4, r7}
     a56:	4770      	bx	lr

00000a58 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	b085      	sub	sp, #20
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
     a60:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     a62:	6838      	ldr	r0, [r7, #0]
     a64:	f7ff ffec 	bl	a40 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>
     a68:	4605      	mov	r5, r0
     a6a:	460e      	mov	r6, r1
     a6c:	462b      	mov	r3, r5
     a6e:	4634      	mov	r4, r6
     a70:	f04f 0100 	mov.w	r1, #0
     a74:	f04f 0200 	mov.w	r2, #0
     a78:	0162      	lsls	r2, r4, #5
     a7a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     a7e:	0159      	lsls	r1, r3, #5
     a80:	460b      	mov	r3, r1
     a82:	4614      	mov	r4, r2
     a84:	1b5b      	subs	r3, r3, r5
     a86:	eb64 0406 	sbc.w	r4, r4, r6
     a8a:	f04f 0100 	mov.w	r1, #0
     a8e:	f04f 0200 	mov.w	r2, #0
     a92:	0262      	lsls	r2, r4, #9
     a94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
     a98:	0259      	lsls	r1, r3, #9
     a9a:	460b      	mov	r3, r1
     a9c:	4614      	mov	r4, r2
     a9e:	195b      	adds	r3, r3, r5
     aa0:	eb44 0406 	adc.w	r4, r4, r6
     aa4:	f04f 0100 	mov.w	r1, #0
     aa8:	f04f 0200 	mov.w	r2, #0
     aac:	01a2      	lsls	r2, r4, #6
     aae:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
     ab2:	0199      	lsls	r1, r3, #6
     ab4:	1ac9      	subs	r1, r1, r3
     ab6:	eb62 0204 	sbc.w	r2, r2, r4
     aba:	194b      	adds	r3, r1, r5
     abc:	eb42 0406 	adc.w	r4, r2, r6
     ac0:	e9c7 3402 	strd	r3, r4, [r7, #8]
     ac4:	f107 0308 	add.w	r3, r7, #8
     ac8:	4619      	mov	r1, r3
     aca:	6878      	ldr	r0, [r7, #4]
     acc:	f7ff fd8f 	bl	5ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     ad0:	6878      	ldr	r0, [r7, #4]
     ad2:	3714      	adds	r7, #20
     ad4:	46bd      	mov	sp, r7
     ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ad8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     ad8:	b590      	push	{r4, r7, lr}
     ada:	b085      	sub	sp, #20
     adc:	af00      	add	r7, sp, #0
     ade:	6078      	str	r0, [r7, #4]
     ae0:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     ae2:	f107 0308 	add.w	r3, r7, #8
     ae6:	6839      	ldr	r1, [r7, #0]
     ae8:	4618      	mov	r0, r3
     aea:	f7ff ff9b 	bl	a24 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
     aee:	f107 0308 	add.w	r3, r7, #8
     af2:	4618      	mov	r0, r3
     af4:	f7ff ff70 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     af8:	4603      	mov	r3, r0
     afa:	460c      	mov	r4, r1
     afc:	687a      	ldr	r2, [r7, #4]
     afe:	e9c2 3400 	strd	r3, r4, [r2]
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	4618      	mov	r0, r3
     b06:	3714      	adds	r7, #20
     b08:	46bd      	mov	sp, r7
     b0a:	bd90      	pop	{r4, r7, pc}

00000b0c <main>:


void GpioInterruptCallback();

int main(void)
{
     b0c:	b590      	push	{r4, r7, lr}
     b0e:	b097      	sub	sp, #92	; 0x5c
     b10:	af02      	add	r7, sp, #8
  //Setup Gpio on LED Port 0. Pin 0
  LabGPIO gpioTest0(0, 0);
     b12:	f107 0318 	add.w	r3, r7, #24
     b16:	2200      	movs	r2, #0
     b18:	2100      	movs	r1, #0
     b1a:	4618      	mov	r0, r3
     b1c:	f7ff fb10 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  
  //Set Direction of GPIO to be output
  gpioTest0.SetDirection(sjsu::Gpio::kOutput);
     b20:	f107 0318 	add.w	r3, r7, #24
     b24:	2101      	movs	r1, #1
     b26:	4618      	mov	r0, r3
     b28:	f7ff fb26 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  //Set Pin 0 to a low state

  printf("got here0\n");
     b2c:	4835      	ldr	r0, [pc, #212]	; (c04 <main+0xf8>)
     b2e:	f000 fc6b 	bl	1408 <puts>
  gpioTest0.Set(sjsu::Gpio::kLow);
     b32:	f107 0318 	add.w	r3, r7, #24
     b36:	2100      	movs	r1, #0
     b38:	4618      	mov	r0, r3
     b3a:	f7ff fb95 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  printf("got here1\n");\
     b3e:	4832      	ldr	r0, [pc, #200]	; (c08 <main+0xfc>)
     b40:	f000 fc62 	bl	1408 <puts>
  sjsu::Delay(100ms);
     b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
     b48:	4618      	mov	r0, r3
     b4a:	f7ff feab 	bl	8a4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
     b52:	f107 0320 	add.w	r3, r7, #32
     b56:	4611      	mov	r1, r2
     b58:	4618      	mov	r0, r3
     b5a:	f7ff ff23 	bl	9a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     b5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
     b62:	f7ff fdcd 	bl	700 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  
  //create Interrupt controller
  sjsu::cortex::InterruptController IntCont;
     b66:	4b29      	ldr	r3, [pc, #164]	; (c0c <main+0x100>)
     b68:	617b      	str	r3, [r7, #20]

  //initialize struct for registering interrupt
  InterruptController::RegistrationInfo_t gpioInterrupt = {
     b6a:	4b29      	ldr	r3, [pc, #164]	; (c10 <main+0x104>)
     b6c:	1d3c      	adds	r4, r7, #4
     b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GpioInterruptCallback,
    true,
    1,
  };
  //enable interrupt on and falling edge...
  lpc17xx::LPC_GPIOINT->IO0IntEnR |= 0x1;
     b74:	4b27      	ldr	r3, [pc, #156]	; (c14 <main+0x108>)
     b76:	691b      	ldr	r3, [r3, #16]
     b78:	4a26      	ldr	r2, [pc, #152]	; (c14 <main+0x108>)
     b7a:	f043 0301 	orr.w	r3, r3, #1
     b7e:	6113      	str	r3, [r2, #16]
  //lpc17xx::LPC_GPIOINT->IO0IntEnF |= 0x1;

  printf("got here2 \n");
     b80:	4825      	ldr	r0, [pc, #148]	; (c18 <main+0x10c>)
     b82:	f000 fc41 	bl	1408 <puts>
  //Register Interrupt
  IntCont.Register(gpioInterrupt);
     b86:	f107 0014 	add.w	r0, r7, #20
     b8a:	693b      	ldr	r3, [r7, #16]
     b8c:	9300      	str	r3, [sp, #0]
     b8e:	1d3b      	adds	r3, r7, #4
     b90:	cb0e      	ldmia	r3, {r1, r2, r3}
     b92:	f7ff fe49 	bl	828 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
  printf("got here3 \n");
     b96:	4821      	ldr	r0, [pc, #132]	; (c1c <main+0x110>)
     b98:	f000 fc36 	bl	1408 <puts>


  while(true)
  {

    printf("test: %d\n",lpc17xx::LPC_GPIOINT->IO0IntEnR);
     b9c:	4b1d      	ldr	r3, [pc, #116]	; (c14 <main+0x108>)
     b9e:	691b      	ldr	r3, [r3, #16]
     ba0:	4619      	mov	r1, r3
     ba2:	481f      	ldr	r0, [pc, #124]	; (c20 <main+0x114>)
     ba4:	f001 fd5a 	bl	265c <printf>
    fflush(stdout);
     ba8:	4b1e      	ldr	r3, [pc, #120]	; (c24 <main+0x118>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	689b      	ldr	r3, [r3, #8]
     bae:	4618      	mov	r0, r3
     bb0:	f005 fc20 	bl	63f4 <fflush>
    sjsu::Delay(1s);
     bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
     bb8:	4618      	mov	r0, r3
     bba:	f7ff ff19 	bl	9f0 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()>
     bbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
     bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
     bc6:	4611      	mov	r1, r2
     bc8:	4618      	mov	r0, r3
     bca:	f7ff ff85 	bl	ad8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
     bce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
     bd2:	f7ff fd95 	bl	700 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>

    //Toggle LED this should cause the interrupt to fire off...
    gpioTest0.Toggle();
     bd6:	f107 0318 	add.w	r3, r7, #24
     bda:	4618      	mov	r0, r3
     bdc:	f7ff fbbc 	bl	358 <sjsu::LabGPIO::Toggle() const>

    ///printf("test2: %d\n", lpc17xx::LPC_GPIOINT->IntStatus);
    sjsu::Delay(100ms);
     be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
     be4:	4618      	mov	r0, r3
     be6:	f7ff fe5d 	bl	8a4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     bea:	f107 0248 	add.w	r2, r7, #72	; 0x48
     bee:	f107 0340 	add.w	r3, r7, #64	; 0x40
     bf2:	4611      	mov	r1, r2
     bf4:	4618      	mov	r0, r3
     bf6:	f7ff fed5 	bl	9a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     bfa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     bfe:	f7ff fd7f 	bl	700 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
    printf("test: %d\n",lpc17xx::LPC_GPIOINT->IO0IntEnR);
     c02:	e7cb      	b.n	b9c <main+0x90>
     c04:	00006b68 	.word	0x00006b68
     c08:	00006b74 	.word	0x00006b74
     c0c:	00006bd4 	.word	0x00006bd4
     c10:	00006ba4 	.word	0x00006ba4
     c14:	40028080 	.word	0x40028080
     c18:	00006b80 	.word	0x00006b80
     c1c:	00006b8c 	.word	0x00006b8c
     c20:	00006b98 	.word	0x00006b98
     c24:	2007c0c4 	.word	0x2007c0c4

00000c28 <GpioInterruptCallback()>:
    
  }
  return 0;
}
void GpioInterruptCallback()
{
     c28:	b580      	push	{r7, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	af00      	add	r7, sp, #0
  printf("test2: %d\n", lpc17xx::LPC_GPIOINT->IntStatus);
     c2e:	4b10      	ldr	r3, [pc, #64]	; (c70 <GpioInterruptCallback()+0x48>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	4619      	mov	r1, r3
     c34:	480f      	ldr	r0, [pc, #60]	; (c74 <GpioInterruptCallback()+0x4c>)
     c36:	f001 fd11 	bl	265c <printf>
  //sjsu::Delay(100ms);
  lpc17xx::LPC_GPIOINT->IO0IntClr &= ~(0x1);
     c3a:	4b0d      	ldr	r3, [pc, #52]	; (c70 <GpioInterruptCallback()+0x48>)
     c3c:	68db      	ldr	r3, [r3, #12]
     c3e:	4a0c      	ldr	r2, [pc, #48]	; (c70 <GpioInterruptCallback()+0x48>)
     c40:	f023 0301 	bic.w	r3, r3, #1
     c44:	60d3      	str	r3, [r2, #12]
  printf("test3: %d\n", lpc17xx::LPC_GPIOINT->IntStatus);
     c46:	4b0a      	ldr	r3, [pc, #40]	; (c70 <GpioInterruptCallback()+0x48>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	4619      	mov	r1, r3
     c4c:	480a      	ldr	r0, [pc, #40]	; (c78 <GpioInterruptCallback()+0x50>)
     c4e:	f001 fd05 	bl	265c <printf>
  for (int i = 0; i < 1000000; i++)
     c52:	2300      	movs	r3, #0
     c54:	607b      	str	r3, [r7, #4]
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	4a08      	ldr	r2, [pc, #32]	; (c7c <GpioInterruptCallback()+0x54>)
     c5a:	4293      	cmp	r3, r2
     c5c:	dc03      	bgt.n	c66 <GpioInterruptCallback()+0x3e>
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	3301      	adds	r3, #1
     c62:	607b      	str	r3, [r7, #4]
     c64:	e7f7      	b.n	c56 <GpioInterruptCallback()+0x2e>
  {

  }
}
     c66:	bf00      	nop
     c68:	3708      	adds	r7, #8
     c6a:	46bd      	mov	sp, r7
     c6c:	bd80      	pop	{r7, pc}
     c6e:	bf00      	nop
     c70:	40028080 	.word	0x40028080
     c74:	00006bb4 	.word	0x00006bb4
     c78:	00006bc0 	.word	0x00006bc0
     c7c:	000f423f 	.word	0x000f423f

00000c80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
     c80:	b590      	push	{r4, r7, lr}
     c82:	b087      	sub	sp, #28
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	60b9      	str	r1, [r7, #8]
     c8a:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
     c8c:	68bb      	ldr	r3, [r7, #8]
     c8e:	cb18      	ldmia	r3, {r3, r4}
     c90:	1c59      	adds	r1, r3, #1
     c92:	f144 0200 	adc.w	r2, r4, #0
     c96:	68b8      	ldr	r0, [r7, #8]
     c98:	e9c0 1200 	strd	r1, r2, [r0]
     c9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
     ca0:	f107 0310 	add.w	r3, r7, #16
     ca4:	4619      	mov	r1, r3
     ca6:	68f8      	ldr	r0, [r7, #12]
     ca8:	f7ff fca1 	bl	5ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     cac:	68f8      	ldr	r0, [r7, #12]
     cae:	371c      	adds	r7, #28
     cb0:	46bd      	mov	sp, r7
     cb2:	bd90      	pop	{r4, r7, pc}

00000cb4 <std::chrono::duration_values<long long>::max()>:
	max()
     cb4:	b598      	push	{r3, r4, r7, lr}
     cb6:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
     cb8:	f7ff fc7e 	bl	5b8 <std::numeric_limits<long long>::max()>
     cbc:	4603      	mov	r3, r0
     cbe:	460c      	mov	r4, r1
     cc0:	4618      	mov	r0, r3
     cc2:	4621      	mov	r1, r4
     cc4:	bd98      	pop	{r3, r4, r7, pc}

00000cc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
     cc6:	b590      	push	{r4, r7, lr}
     cc8:	b085      	sub	sp, #20
     cca:	af00      	add	r7, sp, #0
     ccc:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
     cce:	f7ff fff1 	bl	cb4 <std::chrono::duration_values<long long>::max()>
     cd2:	4603      	mov	r3, r0
     cd4:	460c      	mov	r4, r1
     cd6:	e9c7 3402 	strd	r3, r4, [r7, #8]
     cda:	f107 0308 	add.w	r3, r7, #8
     cde:	4619      	mov	r1, r3
     ce0:	6878      	ldr	r0, [r7, #4]
     ce2:	f7ff fc84 	bl	5ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     ce6:	6878      	ldr	r0, [r7, #4]
     ce8:	3714      	adds	r7, #20
     cea:	46bd      	mov	sp, r7
     cec:	bd90      	pop	{r4, r7, pc}

00000cee <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
     cee:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf0:	b087      	sub	sp, #28
     cf2:	af00      	add	r7, sp, #0
     cf4:	6078      	str	r0, [r7, #4]
     cf6:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	cb18      	ldmia	r3, {r3, r4}
     cfc:	e9c7 3402 	strd	r3, r4, [r7, #8]
     d00:	f107 0308 	add.w	r3, r7, #8
     d04:	4618      	mov	r0, r3
     d06:	f7ff fe67 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d0a:	4605      	mov	r5, r0
     d0c:	460e      	mov	r6, r1
     d0e:	683b      	ldr	r3, [r7, #0]
     d10:	cb18      	ldmia	r3, {r3, r4}
     d12:	e9c7 3404 	strd	r3, r4, [r7, #16]
     d16:	f107 0310 	add.w	r3, r7, #16
     d1a:	4618      	mov	r0, r3
     d1c:	f7ff fe5c 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d20:	4603      	mov	r3, r0
     d22:	460c      	mov	r4, r1
     d24:	42a6      	cmp	r6, r4
     d26:	bf06      	itte	eq
     d28:	429d      	cmpeq	r5, r3
     d2a:	2301      	moveq	r3, #1
     d2c:	2300      	movne	r3, #0
     d2e:	b2db      	uxtb	r3, r3
      }
     d30:	4618      	mov	r0, r3
     d32:	371c      	adds	r7, #28
     d34:	46bd      	mov	sp, r7
     d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d38 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
     d38:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3a:	b08b      	sub	sp, #44	; 0x2c
     d3c:	af00      	add	r7, sp, #0
     d3e:	60f8      	str	r0, [r7, #12]
     d40:	60b9      	str	r1, [r7, #8]
     d42:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
     d44:	68bb      	ldr	r3, [r7, #8]
     d46:	cb18      	ldmia	r3, {r3, r4}
     d48:	e9c7 3406 	strd	r3, r4, [r7, #24]
     d4c:	f107 0318 	add.w	r3, r7, #24
     d50:	4618      	mov	r0, r3
     d52:	f7ff fe41 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d56:	4605      	mov	r5, r0
     d58:	460e      	mov	r6, r1
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	cb18      	ldmia	r3, {r3, r4}
     d5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
     d62:	f107 0320 	add.w	r3, r7, #32
     d66:	4618      	mov	r0, r3
     d68:	f7ff fe36 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d6c:	460a      	mov	r2, r1
     d6e:	4601      	mov	r1, r0
     d70:	194b      	adds	r3, r1, r5
     d72:	eb42 0406 	adc.w	r4, r2, r6
     d76:	e9c7 3404 	strd	r3, r4, [r7, #16]
     d7a:	f107 0310 	add.w	r3, r7, #16
     d7e:	4619      	mov	r1, r3
     d80:	68f8      	ldr	r0, [r7, #12]
     d82:	f7ff fc34 	bl	5ee <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
     d86:	68f8      	ldr	r0, [r7, #12]
     d88:	372c      	adds	r7, #44	; 0x2c
     d8a:	46bd      	mov	sp, r7
     d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d8e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
     d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
     d90:	b087      	sub	sp, #28
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	cb18      	ldmia	r3, {r3, r4}
     d9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     da0:	f107 0308 	add.w	r3, r7, #8
     da4:	4618      	mov	r0, r3
     da6:	f7ff fe17 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     daa:	4605      	mov	r5, r0
     dac:	460e      	mov	r6, r1
     dae:	683b      	ldr	r3, [r7, #0]
     db0:	cb18      	ldmia	r3, {r3, r4}
     db2:	e9c7 3404 	strd	r3, r4, [r7, #16]
     db6:	f107 0310 	add.w	r3, r7, #16
     dba:	4618      	mov	r0, r3
     dbc:	f7ff fe0c 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     dc0:	4603      	mov	r3, r0
     dc2:	460c      	mov	r4, r1
     dc4:	429d      	cmp	r5, r3
     dc6:	eb76 0304 	sbcs.w	r3, r6, r4
     dca:	bfb4      	ite	lt
     dcc:	2301      	movlt	r3, #1
     dce:	2300      	movge	r3, #0
     dd0:	b2db      	uxtb	r3, r3
      }
     dd2:	4618      	mov	r0, r3
     dd4:	371c      	adds	r7, #28
     dd6:	46bd      	mov	sp, r7
     dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dda:	Address 0x0000000000000dda is out of bounds.


00000ddc <__static_initialization_and_destruction_0(int, int)>:
     ddc:	b580      	push	{r7, lr}
     dde:	b082      	sub	sp, #8
     de0:	af00      	add	r7, sp, #0
     de2:	6078      	str	r0, [r7, #4]
     de4:	6039      	str	r1, [r7, #0]
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2b01      	cmp	r3, #1
     dea:	d11d      	bne.n	e28 <__static_initialization_and_destruction_0(int, int)+0x4c>
     dec:	683b      	ldr	r3, [r7, #0]
     dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
     df2:	4293      	cmp	r3, r2
     df4:	d118      	bne.n	e28 <__static_initialization_and_destruction_0(int, int)+0x4c>
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <__static_initialization_and_destruction_0(int, int)+0x54>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	f003 0301 	and.w	r3, r3, #1
     dfe:	2b00      	cmp	r3, #0
     e00:	d105      	bne.n	e0e <__static_initialization_and_destruction_0(int, int)+0x32>
     e02:	4b0b      	ldr	r3, [pc, #44]	; (e30 <__static_initialization_and_destruction_0(int, int)+0x54>)
     e04:	2201      	movs	r2, #1
     e06:	601a      	str	r2, [r3, #0]
     e08:	4a0a      	ldr	r2, [pc, #40]	; (e34 <__static_initialization_and_destruction_0(int, int)+0x58>)
     e0a:	4b0b      	ldr	r3, [pc, #44]	; (e38 <__static_initialization_and_destruction_0(int, int)+0x5c>)
     e0c:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
     e0e:	4b0b      	ldr	r3, [pc, #44]	; (e3c <__static_initialization_and_destruction_0(int, int)+0x60>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	f003 0301 	and.w	r3, r3, #1
     e16:	2b00      	cmp	r3, #0
     e18:	d106      	bne.n	e28 <__static_initialization_and_destruction_0(int, int)+0x4c>
     e1a:	4b08      	ldr	r3, [pc, #32]	; (e3c <__static_initialization_and_destruction_0(int, int)+0x60>)
     e1c:	2201      	movs	r2, #1
     e1e:	601a      	str	r2, [r3, #0]
     e20:	4b07      	ldr	r3, [pc, #28]	; (e40 <__static_initialization_and_destruction_0(int, int)+0x64>)
     e22:	4618      	mov	r0, r3
     e24:	f7ff fca8 	bl	778 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
     e28:	bf00      	nop
     e2a:	3708      	adds	r7, #8
     e2c:	46bd      	mov	sp, r7
     e2e:	bd80      	pop	{r7, pc}
     e30:	2007c148 	.word	0x2007c148
     e34:	4002c000 	.word	0x4002c000
     e38:	2007c144 	.word	0x2007c144
     e3c:	2007c258 	.word	0x2007c258
     e40:	2007c158 	.word	0x2007c158

00000e44 <_GLOBAL__sub_I_main>:
     e44:	b580      	push	{r7, lr}
     e46:	af00      	add	r7, sp, #0
     e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e4c:	2001      	movs	r0, #1
     e4e:	f7ff ffc5 	bl	ddc <__static_initialization_and_destruction_0(int, int)>
     e52:	bd80      	pop	{r7, pc}

00000e54 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     e54:	b580      	push	{r7, lr}
     e56:	b086      	sub	sp, #24
     e58:	af02      	add	r7, sp, #8
     e5a:	6078      	str	r0, [r7, #4]
     e5c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     e5e:	683a      	ldr	r2, [r7, #0]
     e60:	f107 030c 	add.w	r3, r7, #12
     e64:	9300      	str	r3, [sp, #0]
     e66:	2300      	movs	r3, #0
     e68:	2100      	movs	r1, #0
     e6a:	6878      	ldr	r0, [r7, #4]
     e6c:	f004 fc44 	bl	56f8 <_Unwind_VRS_Get>
      return val;
     e70:	68fb      	ldr	r3, [r7, #12]
    }
     e72:	4618      	mov	r0, r3
     e74:	3710      	adds	r7, #16
     e76:	46bd      	mov	sp, r7
     e78:	bd80      	pop	{r7, pc}
     e7a:	Address 0x0000000000000e7a is out of bounds.


00000e7c <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     e7c:	b480      	push	{r7}
     e7e:	b085      	sub	sp, #20
     e80:	af00      	add	r7, sp, #0
     e82:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     e84:	4b09      	ldr	r3, [pc, #36]	; (eac <sjsu::build::Stringify(sjsu::build::Target)+0x30>)
     e86:	60fb      	str	r3, [r7, #12]
  switch (target)
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d002      	beq.n	e94 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     e8e:	2b01      	cmp	r3, #1
     e90:	d003      	beq.n	e9a <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     e92:	e005      	b.n	ea0 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     e94:	4b06      	ldr	r3, [pc, #24]	; (eb0 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     e96:	60fb      	str	r3, [r7, #12]
     e98:	e002      	b.n	ea0 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     e9c:	60fb      	str	r3, [r7, #12]
     e9e:	bf00      	nop
  }
  return result;
     ea0:	68fb      	ldr	r3, [r7, #12]
}
     ea2:	4618      	mov	r0, r3
     ea4:	3714      	adds	r7, #20
     ea6:	46bd      	mov	sp, r7
     ea8:	bc80      	pop	{r7}
     eaa:	4770      	bx	lr
     eac:	00006c2c 	.word	0x00006c2c
     eb0:	00006c34 	.word	0x00006c34
     eb4:	00006c40 	.word	0x00006c40

00000eb8 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b084      	sub	sp, #16
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
     ec0:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     ec2:	683b      	ldr	r3, [r7, #0]
     ec4:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     ec6:	210f      	movs	r1, #15
     ec8:	6878      	ldr	r0, [r7, #4]
     eca:	f7ff ffc3 	bl	e54 <_Unwind_GetGR>
     ece:	4603      	mov	r3, r0
     ed0:	f023 0301 	bic.w	r3, r3, #1
     ed4:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     ed6:	68fb      	ldr	r3, [r7, #12]
     ed8:	6819      	ldr	r1, [r3, #0]
     eda:	68bb      	ldr	r3, [r7, #8]
     edc:	3b04      	subs	r3, #4
     ede:	461a      	mov	r2, r3
     ee0:	4806      	ldr	r0, [pc, #24]	; (efc <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     ee2:	f001 fbbb 	bl	265c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     ee6:	68fb      	ldr	r3, [r7, #12]
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	1c5a      	adds	r2, r3, #1
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     ef0:	2300      	movs	r3, #0
}
     ef2:	4618      	mov	r0, r3
     ef4:	3710      	adds	r7, #16
     ef6:	46bd      	mov	sp, r7
     ef8:	bd80      	pop	{r7, pc}
     efa:	bf00      	nop
     efc:	00006c4c 	.word	0x00006c4c

00000f00 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     f00:	b580      	push	{r7, lr}
     f02:	b084      	sub	sp, #16
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     f0a:	683b      	ldr	r3, [r7, #0]
     f0c:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     f0e:	210f      	movs	r1, #15
     f10:	6878      	ldr	r0, [r7, #4]
     f12:	f7ff ff9f 	bl	e54 <_Unwind_GetGR>
     f16:	4603      	mov	r3, r0
     f18:	f023 0301 	bic.w	r3, r3, #1
     f1c:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     f1e:	68bb      	ldr	r3, [r7, #8]
     f20:	3b04      	subs	r3, #4
     f22:	4619      	mov	r1, r3
     f24:	4806      	ldr	r0, [pc, #24]	; (f40 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     f26:	f001 fb99 	bl	265c <printf>
  (*depth)++;
     f2a:	68fb      	ldr	r3, [r7, #12]
     f2c:	681b      	ldr	r3, [r3, #0]
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     f34:	2300      	movs	r3, #0
}
     f36:	4618      	mov	r0, r3
     f38:	3710      	adds	r7, #16
     f3a:	46bd      	mov	sp, r7
     f3c:	bd80      	pop	{r7, pc}
     f3e:	bf00      	nop
     f40:	00006c5c 	.word	0x00006c5c

00000f44 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     f44:	b580      	push	{r7, lr}
     f46:	b084      	sub	sp, #16
     f48:	af00      	add	r7, sp, #0
     f4a:	4603      	mov	r3, r0
     f4c:	6039      	str	r1, [r7, #0]
     f4e:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     f50:	2300      	movs	r3, #0
     f52:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     f54:	f107 030c 	add.w	r3, r7, #12
     f58:	4619      	mov	r1, r3
     f5a:	481a      	ldr	r0, [pc, #104]	; (fc4 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     f5c:	f004 ffc2 	bl	5ee4 <_Unwind_Backtrace>
    if (final_address)
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	2b00      	cmp	r3, #0
     f64:	d005      	beq.n	f72 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     f66:	68fb      	ldr	r3, [r7, #12]
     f68:	683a      	ldr	r2, [r7, #0]
     f6a:	4619      	mov	r1, r3
     f6c:	4816      	ldr	r0, [pc, #88]	; (fc8 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     f6e:	f001 fb75 	bl	265c <printf>
    }

    if (show_make_command)
     f72:	79fb      	ldrb	r3, [r7, #7]
     f74:	2b00      	cmp	r3, #0
     f76:	d020      	beq.n	fba <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     f78:	4814      	ldr	r0, [pc, #80]	; (fcc <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     f7a:	f001 fb6f 	bl	265c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     f7e:	4814      	ldr	r0, [pc, #80]	; (fd0 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     f80:	f001 fb6c 	bl	265c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     f84:	2000      	movs	r0, #0
     f86:	f7ff ff79 	bl	e7c <sjsu::build::Stringify(sjsu::build::Target)>
     f8a:	4603      	mov	r3, r0
     f8c:	4619      	mov	r1, r3
     f8e:	4811      	ldr	r0, [pc, #68]	; (fd4 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     f90:	f001 fb64 	bl	265c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     f94:	f107 030c 	add.w	r3, r7, #12
     f98:	4619      	mov	r1, r3
     f9a:	480f      	ldr	r0, [pc, #60]	; (fd8 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     f9c:	f004 ffa2 	bl	5ee4 <_Unwind_Backtrace>
      if (final_address)
     fa0:	683b      	ldr	r3, [r7, #0]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d003      	beq.n	fae <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     fa6:	6839      	ldr	r1, [r7, #0]
     fa8:	480c      	ldr	r0, [pc, #48]	; (fdc <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     faa:	f001 fb57 	bl	265c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     fae:	480c      	ldr	r0, [pc, #48]	; (fe0 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     fb0:	f001 fb54 	bl	265c <printf>
      printf(
     fb4:	480b      	ldr	r0, [pc, #44]	; (fe4 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     fb6:	f000 fa27 	bl	1408 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     fba:	bf00      	nop
     fbc:	3710      	adds	r7, #16
     fbe:	46bd      	mov	sp, r7
     fc0:	bd80      	pop	{r7, pc}
     fc2:	bf00      	nop
     fc4:	00000eb9 	.word	0x00000eb9
     fc8:	00006c64 	.word	0x00006c64
     fcc:	00006c70 	.word	0x00006c70
     fd0:	00006ca8 	.word	0x00006ca8
     fd4:	00006cb4 	.word	0x00006cb4
     fd8:	00000f01 	.word	0x00000f01
     fdc:	00006cd0 	.word	0x00006cd0
     fe0:	00006cd8 	.word	0x00006cd8
     fe4:	00006ce0 	.word	0x00006ce0

00000fe8 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
     fe8:	b480      	push	{r7}
     fea:	b087      	sub	sp, #28
     fec:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
     fee:	2300      	movs	r3, #0
     ff0:	617b      	str	r3, [r7, #20]
     ff2:	697a      	ldr	r2, [r7, #20]
     ff4:	4613      	mov	r3, r2
     ff6:	005b      	lsls	r3, r3, #1
     ff8:	4413      	add	r3, r2
     ffa:	009b      	lsls	r3, r3, #2
     ffc:	4a1e      	ldr	r2, [pc, #120]	; (1078 <sjsu::InitializeDataSection()+0x90>)
     ffe:	4413      	add	r3, r2
    1000:	4a1e      	ldr	r2, [pc, #120]	; (107c <sjsu::InitializeDataSection()+0x94>)
    1002:	4293      	cmp	r3, r2
    1004:	d233      	bcs.n	106e <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    1006:	491c      	ldr	r1, [pc, #112]	; (1078 <sjsu::InitializeDataSection()+0x90>)
    1008:	697a      	ldr	r2, [r7, #20]
    100a:	4613      	mov	r3, r2
    100c:	005b      	lsls	r3, r3, #1
    100e:	4413      	add	r3, r2
    1010:	009b      	lsls	r3, r3, #2
    1012:	440b      	add	r3, r1
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    1018:	4917      	ldr	r1, [pc, #92]	; (1078 <sjsu::InitializeDataSection()+0x90>)
    101a:	697a      	ldr	r2, [r7, #20]
    101c:	4613      	mov	r3, r2
    101e:	005b      	lsls	r3, r3, #1
    1020:	4413      	add	r3, r2
    1022:	009b      	lsls	r3, r3, #2
    1024:	440b      	add	r3, r1
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    102a:	4913      	ldr	r1, [pc, #76]	; (1078 <sjsu::InitializeDataSection()+0x90>)
    102c:	697a      	ldr	r2, [r7, #20]
    102e:	4613      	mov	r3, r2
    1030:	005b      	lsls	r3, r3, #1
    1032:	4413      	add	r3, r2
    1034:	009b      	lsls	r3, r3, #2
    1036:	440b      	add	r3, r1
    1038:	3308      	adds	r3, #8
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    103e:	2300      	movs	r3, #0
    1040:	613b      	str	r3, [r7, #16]
    1042:	693a      	ldr	r2, [r7, #16]
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	429a      	cmp	r2, r3
    1048:	d20d      	bcs.n	1066 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    104a:	693b      	ldr	r3, [r7, #16]
    104c:	009b      	lsls	r3, r3, #2
    104e:	68fa      	ldr	r2, [r7, #12]
    1050:	441a      	add	r2, r3
    1052:	693b      	ldr	r3, [r7, #16]
    1054:	009b      	lsls	r3, r3, #2
    1056:	68b9      	ldr	r1, [r7, #8]
    1058:	440b      	add	r3, r1
    105a:	6812      	ldr	r2, [r2, #0]
    105c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    105e:	693b      	ldr	r3, [r7, #16]
    1060:	3301      	adds	r3, #1
    1062:	613b      	str	r3, [r7, #16]
    1064:	e7ed      	b.n	1042 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    1066:	697b      	ldr	r3, [r7, #20]
    1068:	3301      	adds	r3, #1
    106a:	617b      	str	r3, [r7, #20]
    106c:	e7c1      	b.n	ff2 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    106e:	bf00      	nop
    1070:	371c      	adds	r7, #28
    1072:	46bd      	mov	sp, r7
    1074:	bc80      	pop	{r7}
    1076:	4770      	bx	lr
    1078:	000000cc 	.word	0x000000cc
    107c:	000000d8 	.word	0x000000d8

00001080 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    1080:	b480      	push	{r7}
    1082:	b085      	sub	sp, #20
    1084:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    1086:	2300      	movs	r3, #0
    1088:	60fb      	str	r3, [r7, #12]
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	00db      	lsls	r3, r3, #3
    108e:	4a14      	ldr	r2, [pc, #80]	; (10e0 <sjsu::InitializeBssSection()+0x60>)
    1090:	4413      	add	r3, r2
    1092:	4a14      	ldr	r2, [pc, #80]	; (10e4 <sjsu::InitializeBssSection()+0x64>)
    1094:	4293      	cmp	r3, r2
    1096:	d21e      	bcs.n	10d6 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    1098:	4a11      	ldr	r2, [pc, #68]	; (10e0 <sjsu::InitializeBssSection()+0x60>)
    109a:	68fb      	ldr	r3, [r7, #12]
    109c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    10a0:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    10a2:	4a0f      	ldr	r2, [pc, #60]	; (10e0 <sjsu::InitializeBssSection()+0x60>)
    10a4:	68fb      	ldr	r3, [r7, #12]
    10a6:	00db      	lsls	r3, r3, #3
    10a8:	4413      	add	r3, r2
    10aa:	685b      	ldr	r3, [r3, #4]
    10ac:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    10ae:	2300      	movs	r3, #0
    10b0:	60bb      	str	r3, [r7, #8]
    10b2:	68ba      	ldr	r2, [r7, #8]
    10b4:	683b      	ldr	r3, [r7, #0]
    10b6:	429a      	cmp	r2, r3
    10b8:	d209      	bcs.n	10ce <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    10ba:	68bb      	ldr	r3, [r7, #8]
    10bc:	009b      	lsls	r3, r3, #2
    10be:	687a      	ldr	r2, [r7, #4]
    10c0:	4413      	add	r3, r2
    10c2:	2200      	movs	r2, #0
    10c4:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    10c6:	68bb      	ldr	r3, [r7, #8]
    10c8:	3301      	adds	r3, #1
    10ca:	60bb      	str	r3, [r7, #8]
    10cc:	e7f1      	b.n	10b2 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	3301      	adds	r3, #1
    10d2:	60fb      	str	r3, [r7, #12]
    10d4:	e7d9      	b.n	108a <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    10d6:	bf00      	nop
    10d8:	3714      	adds	r7, #20
    10da:	46bd      	mov	sp, r7
    10dc:	bc80      	pop	{r7}
    10de:	4770      	bx	lr
    10e0:	000000d8 	.word	0x000000d8
    10e4:	000000e0 	.word	0x000000e0

000010e8 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    10ec:	f7ff ff7c 	bl	fe8 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    10f0:	f7ff ffc6 	bl	1080 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    10f4:	f005 fa5a 	bl	65ac <__libc_init_array>
}
    10f8:	bf00      	nop
    10fa:	bd80      	pop	{r7, pc}

000010fc <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    10fc:	b580      	push	{r7, lr}
    10fe:	b08c      	sub	sp, #48	; 0x30
    1100:	af02      	add	r7, sp, #8
    1102:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	685b      	ldr	r3, [r3, #4]
    110e:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	689b      	ldr	r3, [r3, #8]
    1114:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	68db      	ldr	r3, [r3, #12]
    111a:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	691b      	ldr	r3, [r3, #16]
    1120:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	695b      	ldr	r3, [r3, #20]
    1126:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	699b      	ldr	r3, [r3, #24]
    112c:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	69db      	ldr	r3, [r3, #28]
    1132:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    1134:	480d      	ldr	r0, [pc, #52]	; (116c <GetRegistersFromStack+0x70>)
    1136:	f001 fa91 	bl	265c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    113a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    113c:	6a3a      	ldr	r2, [r7, #32]
    113e:	69f8      	ldr	r0, [r7, #28]
    1140:	69bb      	ldr	r3, [r7, #24]
    1142:	9300      	str	r3, [sp, #0]
    1144:	4603      	mov	r3, r0
    1146:	480a      	ldr	r0, [pc, #40]	; (1170 <GetRegistersFromStack+0x74>)
    1148:	f001 fa88 	bl	265c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    114c:	6979      	ldr	r1, [r7, #20]
    114e:	693a      	ldr	r2, [r7, #16]
    1150:	68f8      	ldr	r0, [r7, #12]
    1152:	68bb      	ldr	r3, [r7, #8]
    1154:	9300      	str	r3, [sp, #0]
    1156:	4603      	mov	r3, r0
    1158:	4806      	ldr	r0, [pc, #24]	; (1174 <GetRegistersFromStack+0x78>)
    115a:	f001 fa7f 	bl	265c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	4619      	mov	r1, r3
    1162:	2001      	movs	r0, #1
    1164:	f7ff feee 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    1168:	e7fe      	b.n	1168 <GetRegistersFromStack+0x6c>
    116a:	bf00      	nop
    116c:	000072c0 	.word	0x000072c0
    1170:	000072ec 	.word	0x000072ec
    1174:	00007320 	.word	0x00007320

00001178 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    1178:	b480      	push	{r7}
    117a:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    117c:	f01e 0f04 	tst.w	lr, #4
    1180:	bf0c      	ite	eq
    1182:	f3ef 8008 	mrseq	r0, MSP
    1186:	f3ef 8009 	mrsne	r0, PSP
    118a:	6981      	ldr	r1, [r0, #24]
    118c:	4a00      	ldr	r2, [pc, #0]	; (1190 <handler2_address_const>)
    118e:	4710      	bx	r2

00001190 <handler2_address_const>:
    1190:	000010fd 	.word	0x000010fd
    }
  }
    1194:	bf00      	nop
    1196:	46bd      	mov	sp, r7
    1198:	bc80      	pop	{r7}
    119a:	4770      	bx	lr

0000119c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    119c:	b580      	push	{r7, lr}
    119e:	b084      	sub	sp, #16
    11a0:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    11a2:	4b16      	ldr	r3, [pc, #88]	; (11fc <ArmResetHandler+0x60>)
    11a4:	60fb      	str	r3, [r7, #12]
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	f383 8809 	msr	PSP, r3
    11b0:	68fb      	ldr	r3, [r7, #12]
    11b2:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    11ba:	f7ff ff95 	bl	10e8 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    11be:	4b10      	ldr	r3, [pc, #64]	; (1200 <ArmResetHandler+0x64>)
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	f003 0301 	and.w	r3, r3, #1
    11c6:	2b00      	cmp	r3, #0
    11c8:	bf14      	ite	ne
    11ca:	2301      	movne	r3, #1
    11cc:	2300      	moveq	r3, #0
    11ce:	b2db      	uxtb	r3, r3
    11d0:	2b00      	cmp	r3, #0
    11d2:	d001      	beq.n	11d8 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    11d4:	f001 fa64 	bl	26a0 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    11d8:	f002 ffce 	bl	4178 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    11dc:	f7ff fc96 	bl	b0c <main>
    11e0:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    11e2:	68bb      	ldr	r3, [r7, #8]
    11e4:	2b00      	cmp	r3, #0
    11e6:	db04      	blt.n	11f2 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    11e8:	68b9      	ldr	r1, [r7, #8]
    11ea:	4806      	ldr	r0, [pc, #24]	; (1204 <ArmResetHandler+0x68>)
    11ec:	f001 fa36 	bl	265c <printf>
    11f0:	e003      	b.n	11fa <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    11f2:	68b9      	ldr	r1, [r7, #8]
    11f4:	4804      	ldr	r0, [pc, #16]	; (1208 <ArmResetHandler+0x6c>)
    11f6:	f001 fa31 	bl	265c <printf>
    11fa:	e7fe      	b.n	11fa <ArmResetHandler+0x5e>
    11fc:	20083fe0 	.word	0x20083fe0
    1200:	e000edf0 	.word	0xe000edf0
    1204:	00007358 	.word	0x00007358
    1208:	0000738c 	.word	0x0000738c

0000120c <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    120c:	b580      	push	{r7, lr}
    120e:	b082      	sub	sp, #8
    1210:	af00      	add	r7, sp, #0
    1212:	6078      	str	r0, [r7, #4]
    1214:	6039      	str	r1, [r7, #0]
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	2b01      	cmp	r3, #1
    121a:	d111      	bne.n	1240 <__static_initialization_and_destruction_0(int, int)+0x34>
    121c:	683b      	ldr	r3, [r7, #0]
    121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1222:	4293      	cmp	r3, r2
    1224:	d10c      	bne.n	1240 <__static_initialization_and_destruction_0(int, int)+0x34>
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	f003 0301 	and.w	r3, r3, #1
    122e:	2b00      	cmp	r3, #0
    1230:	d106      	bne.n	1240 <__static_initialization_and_destruction_0(int, int)+0x34>
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1234:	2201      	movs	r2, #1
    1236:	601a      	str	r2, [r3, #0]
    1238:	4b04      	ldr	r3, [pc, #16]	; (124c <__static_initialization_and_destruction_0(int, int)+0x40>)
    123a:	4618      	mov	r0, r3
    123c:	f7ff fa9c 	bl	778 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    1240:	bf00      	nop
    1242:	3708      	adds	r7, #8
    1244:	46bd      	mov	sp, r7
    1246:	bd80      	pop	{r7, pc}
    1248:	2007c258 	.word	0x2007c258
    124c:	2007c158 	.word	0x2007c158

00001250 <_GLOBAL__sub_I_GetRegistersFromStack>:
    1250:	b580      	push	{r7, lr}
    1252:	af00      	add	r7, sp, #0
    1254:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1258:	2001      	movs	r0, #1
    125a:	f7ff ffd7 	bl	120c <__static_initialization_and_destruction_0(int, int)>
    125e:	bd80      	pop	{r7, pc}

00001260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1260:	b580      	push	{r7, lr}
    1262:	b084      	sub	sp, #16
    1264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1266:	4b28      	ldr	r3, [pc, #160]	; (1308 <vTaskSwitchContext+0xa8>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    126e:	4b27      	ldr	r3, [pc, #156]	; (130c <vTaskSwitchContext+0xac>)
    1270:	2201      	movs	r2, #1
    1272:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1274:	e043      	b.n	12fe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    1276:	4b25      	ldr	r3, [pc, #148]	; (130c <vTaskSwitchContext+0xac>)
    1278:	2200      	movs	r2, #0
    127a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    127c:	f002 ff72 	bl	4164 <ThreadRuntimeCounter>
    1280:	4602      	mov	r2, r0
    1282:	4b23      	ldr	r3, [pc, #140]	; (1310 <vTaskSwitchContext+0xb0>)
    1284:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    1286:	4b22      	ldr	r3, [pc, #136]	; (1310 <vTaskSwitchContext+0xb0>)
    1288:	681a      	ldr	r2, [r3, #0]
    128a:	4b22      	ldr	r3, [pc, #136]	; (1314 <vTaskSwitchContext+0xb4>)
    128c:	681b      	ldr	r3, [r3, #0]
    128e:	429a      	cmp	r2, r3
    1290:	d909      	bls.n	12a6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    1292:	4b21      	ldr	r3, [pc, #132]	; (1318 <vTaskSwitchContext+0xb8>)
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	6d59      	ldr	r1, [r3, #84]	; 0x54
    1298:	4a1d      	ldr	r2, [pc, #116]	; (1310 <vTaskSwitchContext+0xb0>)
    129a:	6810      	ldr	r0, [r2, #0]
    129c:	4a1d      	ldr	r2, [pc, #116]	; (1314 <vTaskSwitchContext+0xb4>)
    129e:	6812      	ldr	r2, [r2, #0]
    12a0:	1a82      	subs	r2, r0, r2
    12a2:	440a      	add	r2, r1
    12a4:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    12a6:	4b1a      	ldr	r3, [pc, #104]	; (1310 <vTaskSwitchContext+0xb0>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	4a1a      	ldr	r2, [pc, #104]	; (1314 <vTaskSwitchContext+0xb4>)
    12ac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    12ae:	4b1b      	ldr	r3, [pc, #108]	; (131c <vTaskSwitchContext+0xbc>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	fab3 f383 	clz	r3, r3
    12ba:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    12bc:	78fb      	ldrb	r3, [r7, #3]
    12be:	f1c3 031f 	rsb	r3, r3, #31
    12c2:	60fb      	str	r3, [r7, #12]
    12c4:	68fa      	ldr	r2, [r7, #12]
    12c6:	4613      	mov	r3, r2
    12c8:	009b      	lsls	r3, r3, #2
    12ca:	4413      	add	r3, r2
    12cc:	009b      	lsls	r3, r3, #2
    12ce:	4a14      	ldr	r2, [pc, #80]	; (1320 <vTaskSwitchContext+0xc0>)
    12d0:	4413      	add	r3, r2
    12d2:	60bb      	str	r3, [r7, #8]
    12d4:	68bb      	ldr	r3, [r7, #8]
    12d6:	685b      	ldr	r3, [r3, #4]
    12d8:	685a      	ldr	r2, [r3, #4]
    12da:	68bb      	ldr	r3, [r7, #8]
    12dc:	605a      	str	r2, [r3, #4]
    12de:	68bb      	ldr	r3, [r7, #8]
    12e0:	685a      	ldr	r2, [r3, #4]
    12e2:	68bb      	ldr	r3, [r7, #8]
    12e4:	3308      	adds	r3, #8
    12e6:	429a      	cmp	r2, r3
    12e8:	d104      	bne.n	12f4 <vTaskSwitchContext+0x94>
    12ea:	68bb      	ldr	r3, [r7, #8]
    12ec:	685b      	ldr	r3, [r3, #4]
    12ee:	685a      	ldr	r2, [r3, #4]
    12f0:	68bb      	ldr	r3, [r7, #8]
    12f2:	605a      	str	r2, [r3, #4]
    12f4:	68bb      	ldr	r3, [r7, #8]
    12f6:	685b      	ldr	r3, [r3, #4]
    12f8:	68db      	ldr	r3, [r3, #12]
    12fa:	4a07      	ldr	r2, [pc, #28]	; (1318 <vTaskSwitchContext+0xb8>)
    12fc:	6013      	str	r3, [r2, #0]
}
    12fe:	bf00      	nop
    1300:	3710      	adds	r7, #16
    1302:	46bd      	mov	sp, r7
    1304:	bd80      	pop	{r7, pc}
    1306:	bf00      	nop
    1308:	2007c2cc 	.word	0x2007c2cc
    130c:	2007c2c8 	.word	0x2007c2c8
    1310:	2007c2d4 	.word	0x2007c2d4
    1314:	2007c2d0 	.word	0x2007c2d0
    1318:	2007c25c 	.word	0x2007c25c
    131c:	2007c2c4 	.word	0x2007c2c4
    1320:	2007c260 	.word	0x2007c260

00001324 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    1324:	b480      	push	{r7}
    1326:	af00      	add	r7, sp, #0
    return 1;
    1328:	2301      	movs	r3, #1
  }
    132a:	4618      	mov	r0, r3
    132c:	46bd      	mov	sp, r7
    132e:	bc80      	pop	{r7}
    1330:	4770      	bx	lr

00001332 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    1332:	b480      	push	{r7}
    1334:	b083      	sub	sp, #12
    1336:	af00      	add	r7, sp, #0
    1338:	6078      	str	r0, [r7, #4]
    133a:	6039      	str	r1, [r7, #0]
    return -1;
    133c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    1340:	4618      	mov	r0, r3
    1342:	370c      	adds	r7, #12
    1344:	46bd      	mov	sp, r7
    1346:	bc80      	pop	{r7}
    1348:	4770      	bx	lr
    134a:	Address 0x000000000000134a is out of bounds.


0000134c <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    134c:	b480      	push	{r7}
    134e:	b085      	sub	sp, #20
    1350:	af00      	add	r7, sp, #0
    1352:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    1354:	4b0b      	ldr	r3, [pc, #44]	; (1384 <_sbrk+0x38>)
    1356:	681b      	ldr	r3, [r3, #0]
    1358:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    135a:	4b0a      	ldr	r3, [pc, #40]	; (1384 <_sbrk+0x38>)
    135c:	681a      	ldr	r2, [r3, #0]
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	4413      	add	r3, r2
    1362:	4a09      	ldr	r2, [pc, #36]	; (1388 <_sbrk+0x3c>)
    1364:	4293      	cmp	r3, r2
    1366:	d901      	bls.n	136c <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    1368:	2300      	movs	r3, #0
    136a:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    136c:	4b05      	ldr	r3, [pc, #20]	; (1384 <_sbrk+0x38>)
    136e:	681a      	ldr	r2, [r3, #0]
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	4413      	add	r3, r2
    1374:	4a03      	ldr	r2, [pc, #12]	; (1384 <_sbrk+0x38>)
    1376:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    1378:	68fb      	ldr	r3, [r7, #12]
  }
    137a:	4618      	mov	r0, r3
    137c:	3714      	adds	r7, #20
    137e:	46bd      	mov	sp, r7
    1380:	bc80      	pop	{r7}
    1382:	4770      	bx	lr
    1384:	2007c014 	.word	0x2007c014
    1388:	20084000 	.word	0x20084000

0000138c <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	60f8      	str	r0, [r7, #12]
    1394:	60b9      	str	r1, [r7, #8]
    1396:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	4619      	mov	r1, r3
    139c:	68b8      	ldr	r0, [r7, #8]
    139e:	f001 f985 	bl	26ac <trace_write>
    return sjsu::newlib::out(ptr, length);
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <_write+0x2c>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	687a      	ldr	r2, [r7, #4]
    13a8:	4611      	mov	r1, r2
    13aa:	68b8      	ldr	r0, [r7, #8]
    13ac:	4798      	blx	r3
    13ae:	4603      	mov	r3, r0
  }
    13b0:	4618      	mov	r0, r3
    13b2:	3710      	adds	r7, #16
    13b4:	46bd      	mov	sp, r7
    13b6:	bd80      	pop	{r7, pc}
    13b8:	2007c00c 	.word	0x2007c00c

000013bc <_read>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _read(FILE * file, char * ptr, [[maybe_unused]] int length)
  {
    13bc:	b580      	push	{r7, lr}
    13be:	b086      	sub	sp, #24
    13c0:	af00      	add	r7, sp, #0
    13c2:	60f8      	str	r0, [r7, #12]
    13c4:	60b9      	str	r1, [r7, #8]
    13c6:	607a      	str	r2, [r7, #4]
    int number_of_read_characters = 0;
    13c8:	2300      	movs	r3, #0
    13ca:	617b      	str	r3, [r7, #20]
    if (file == STDIN_FILENO)
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d10e      	bne.n	13f0 <_read+0x34>
    {
      number_of_read_characters = sjsu::newlib::in(ptr, 1);
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <_read+0x40>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	2101      	movs	r1, #1
    13d8:	68b8      	ldr	r0, [r7, #8]
    13da:	4798      	blx	r3
    13dc:	6178      	str	r0, [r7, #20]
      // Echo back to STDOUT
      if (sjsu::newlib::echo_back_is_enabled)
    13de:	4b08      	ldr	r3, [pc, #32]	; (1400 <_read+0x44>)
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d004      	beq.n	13f0 <_read+0x34>
      {
        sjsu::newlib::out(ptr, 1);
    13e6:	4b07      	ldr	r3, [pc, #28]	; (1404 <_read+0x48>)
    13e8:	681b      	ldr	r3, [r3, #0]
    13ea:	2101      	movs	r1, #1
    13ec:	68b8      	ldr	r0, [r7, #8]
    13ee:	4798      	blx	r3
      }
    }
    return number_of_read_characters;
    13f0:	697b      	ldr	r3, [r7, #20]
  }
    13f2:	4618      	mov	r0, r3
    13f4:	3718      	adds	r7, #24
    13f6:	46bd      	mov	sp, r7
    13f8:	bd80      	pop	{r7, pc}
    13fa:	bf00      	nop
    13fc:	2007c010 	.word	0x2007c010
    1400:	2007c008 	.word	0x2007c008
    1404:	2007c00c 	.word	0x2007c00c

00001408 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    1408:	b580      	push	{r7, lr}
    140a:	b084      	sub	sp, #16
    140c:	af00      	add	r7, sp, #0
    140e:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    1410:	6878      	ldr	r0, [r7, #4]
    1412:	f005 fa40 	bl	6896 <strlen>
    1416:	4603      	mov	r3, r0
    1418:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    141a:	2300      	movs	r3, #0
    141c:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    141e:	68fa      	ldr	r2, [r7, #12]
    1420:	6879      	ldr	r1, [r7, #4]
    1422:	2000      	movs	r0, #0
    1424:	f7ff ffb2 	bl	138c <_write>
    1428:	4602      	mov	r2, r0
    142a:	68bb      	ldr	r3, [r7, #8]
    142c:	4413      	add	r3, r2
    142e:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    1430:	2201      	movs	r2, #1
    1432:	4906      	ldr	r1, [pc, #24]	; (144c <puts+0x44>)
    1434:	2000      	movs	r0, #0
    1436:	f7ff ffa9 	bl	138c <_write>
    143a:	4602      	mov	r2, r0
    143c:	68bb      	ldr	r3, [r7, #8]
    143e:	4413      	add	r3, r2
    1440:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    1442:	68bb      	ldr	r3, [r7, #8]
  }
    1444:	4618      	mov	r0, r3
    1446:	3710      	adds	r7, #16
    1448:	46bd      	mov	sp, r7
    144a:	bd80      	pop	{r7, pc}
    144c:	000073c0 	.word	0x000073c0

00001450 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    1450:	b480      	push	{r7}
    1452:	b083      	sub	sp, #12
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    1458:	bf00      	nop
    while (1)
    145a:	e7fd      	b.n	1458 <_exit+0x8>

0000145c <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    145c:	b580      	push	{r7, lr}
    145e:	b088      	sub	sp, #32
    1460:	af00      	add	r7, sp, #0
    1462:	60b9      	str	r1, [r7, #8]
    1464:	607a      	str	r2, [r7, #4]
    1466:	603b      	str	r3, [r7, #0]
    1468:	4603      	mov	r3, r0
    146a:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    146c:	23fe      	movs	r3, #254	; 0xfe
    146e:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    1470:	697a      	ldr	r2, [r7, #20]
    1472:	687b      	ldr	r3, [r7, #4]
    1474:	fbb3 f1f2 	udiv	r1, r3, r2
    1478:	fb02 f201 	mul.w	r2, r2, r1
    147c:	1a9b      	subs	r3, r3, r2
    147e:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    1480:	68ba      	ldr	r2, [r7, #8]
    1482:	69fb      	ldr	r3, [r7, #28]
    1484:	4413      	add	r3, r2
    1486:	7bfa      	ldrb	r2, [r7, #15]
    1488:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    148a:	7bfb      	ldrb	r3, [r7, #15]
    148c:	2b00      	cmp	r3, #0
    148e:	d106      	bne.n	149e <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    1490:	69fb      	ldr	r3, [r7, #28]
    1492:	461a      	mov	r2, r3
    1494:	68b9      	ldr	r1, [r7, #8]
    1496:	2001      	movs	r0, #1
    1498:	f7ff ff78 	bl	138c <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    149c:	e012      	b.n	14c4 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    149e:	69fb      	ldr	r3, [r7, #28]
    14a0:	1c5a      	adds	r2, r3, #1
    14a2:	697b      	ldr	r3, [r7, #20]
    14a4:	429a      	cmp	r2, r3
    14a6:	d10d      	bne.n	14c4 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    14a8:	697b      	ldr	r3, [r7, #20]
    14aa:	3301      	adds	r3, #1
    14ac:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    14ae:	68ba      	ldr	r2, [r7, #8]
    14b0:	69bb      	ldr	r3, [r7, #24]
    14b2:	4413      	add	r3, r2
    14b4:	2200      	movs	r2, #0
    14b6:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    14b8:	69bb      	ldr	r3, [r7, #24]
    14ba:	461a      	mov	r2, r3
    14bc:	68b9      	ldr	r1, [r7, #8]
    14be:	2001      	movs	r0, #1
    14c0:	f7ff ff64 	bl	138c <_write>
}
    14c4:	bf00      	nop
    14c6:	3720      	adds	r7, #32
    14c8:	46bd      	mov	sp, r7
    14ca:	bd80      	pop	{r7, pc}

000014cc <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    14cc:	b480      	push	{r7}
    14ce:	b085      	sub	sp, #20
    14d0:	af00      	add	r7, sp, #0
    14d2:	60b9      	str	r1, [r7, #8]
    14d4:	607a      	str	r2, [r7, #4]
    14d6:	603b      	str	r3, [r7, #0]
    14d8:	4603      	mov	r3, r0
    14da:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    14dc:	bf00      	nop
    14de:	3714      	adds	r7, #20
    14e0:	46bd      	mov	sp, r7
    14e2:	bc80      	pop	{r7}
    14e4:	4770      	bx	lr

000014e6 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    14e6:	b480      	push	{r7}
    14e8:	b085      	sub	sp, #20
    14ea:	af00      	add	r7, sp, #0
    14ec:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	60fb      	str	r3, [r7, #12]
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d003      	beq.n	1502 <_strlen(char const*)+0x1c>
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	3301      	adds	r3, #1
    14fe:	60fb      	str	r3, [r7, #12]
    1500:	e7f7      	b.n	14f2 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    1502:	68fa      	ldr	r2, [r7, #12]
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	1ad3      	subs	r3, r2, r3
}
    1508:	4618      	mov	r0, r3
    150a:	3714      	adds	r7, #20
    150c:	46bd      	mov	sp, r7
    150e:	bc80      	pop	{r7}
    1510:	4770      	bx	lr

00001512 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    1512:	b480      	push	{r7}
    1514:	b083      	sub	sp, #12
    1516:	af00      	add	r7, sp, #0
    1518:	4603      	mov	r3, r0
    151a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    151c:	79fb      	ldrb	r3, [r7, #7]
    151e:	2b2f      	cmp	r3, #47	; 0x2f
    1520:	d904      	bls.n	152c <_is_digit(char)+0x1a>
    1522:	79fb      	ldrb	r3, [r7, #7]
    1524:	2b39      	cmp	r3, #57	; 0x39
    1526:	d801      	bhi.n	152c <_is_digit(char)+0x1a>
    1528:	2301      	movs	r3, #1
    152a:	e000      	b.n	152e <_is_digit(char)+0x1c>
    152c:	2300      	movs	r3, #0
}
    152e:	4618      	mov	r0, r3
    1530:	370c      	adds	r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	bc80      	pop	{r7}
    1536:	4770      	bx	lr

00001538 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    1538:	b580      	push	{r7, lr}
    153a:	b084      	sub	sp, #16
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    1540:	2300      	movs	r3, #0
    1542:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	4618      	mov	r0, r3
    154c:	f7ff ffe1 	bl	1512 <_is_digit(char)>
    1550:	4603      	mov	r3, r0
    1552:	2b00      	cmp	r3, #0
    1554:	d00f      	beq.n	1576 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1556:	68fa      	ldr	r2, [r7, #12]
    1558:	4613      	mov	r3, r2
    155a:	009b      	lsls	r3, r3, #2
    155c:	4413      	add	r3, r2
    155e:	005b      	lsls	r3, r3, #1
    1560:	4618      	mov	r0, r3
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	681b      	ldr	r3, [r3, #0]
    1566:	1c59      	adds	r1, r3, #1
    1568:	687a      	ldr	r2, [r7, #4]
    156a:	6011      	str	r1, [r2, #0]
    156c:	781b      	ldrb	r3, [r3, #0]
    156e:	4403      	add	r3, r0
    1570:	3b30      	subs	r3, #48	; 0x30
    1572:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1574:	e7e6      	b.n	1544 <_atoi(char const**)+0xc>
  }
  return i;
    1576:	68fb      	ldr	r3, [r7, #12]
}
    1578:	4618      	mov	r0, r3
    157a:	3710      	adds	r7, #16
    157c:	46bd      	mov	sp, r7
    157e:	bd80      	pop	{r7, pc}

00001580 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1580:	b590      	push	{r4, r7, lr}
    1582:	b089      	sub	sp, #36	; 0x24
    1584:	af00      	add	r7, sp, #0
    1586:	60f8      	str	r0, [r7, #12]
    1588:	60b9      	str	r1, [r7, #8]
    158a:	607a      	str	r2, [r7, #4]
    158c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1594:	f003 0302 	and.w	r3, r3, #2
    1598:	2b00      	cmp	r3, #0
    159a:	d10e      	bne.n	15ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    159c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    159e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15a0:	429a      	cmp	r2, r3
    15a2:	d20a      	bcs.n	15ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    15a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15a6:	2b1f      	cmp	r3, #31
    15a8:	d807      	bhi.n	15ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    15aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15ac:	1c5a      	adds	r2, r3, #1
    15ae:	637a      	str	r2, [r7, #52]	; 0x34
    15b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15b2:	4413      	add	r3, r2
    15b4:	2230      	movs	r2, #48	; 0x30
    15b6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    15b8:	e7eb      	b.n	1592 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    15ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15bc:	f003 0302 	and.w	r3, r3, #2
    15c0:	2b00      	cmp	r3, #0
    15c2:	d113      	bne.n	15ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    15c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15c6:	f003 0301 	and.w	r3, r3, #1
    15ca:	2b00      	cmp	r3, #0
    15cc:	d00e      	beq.n	15ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    15ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    15d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    15d2:	429a      	cmp	r2, r3
    15d4:	d20a      	bcs.n	15ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    15d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15d8:	2b1f      	cmp	r3, #31
    15da:	d807      	bhi.n	15ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    15dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15de:	1c5a      	adds	r2, r3, #1
    15e0:	637a      	str	r2, [r7, #52]	; 0x34
    15e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15e4:	4413      	add	r3, r2
    15e6:	2230      	movs	r2, #48	; 0x30
    15e8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    15ea:	e7e6      	b.n	15ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    15ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15ee:	f003 0310 	and.w	r3, r3, #16
    15f2:	2b00      	cmp	r3, #0
    15f4:	d058      	beq.n	16a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    15f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    15fc:	2b00      	cmp	r3, #0
    15fe:	d116      	bne.n	162e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1602:	2b00      	cmp	r3, #0
    1604:	d013      	beq.n	162e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    160a:	429a      	cmp	r2, r3
    160c:	d003      	beq.n	1616 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    160e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1612:	429a      	cmp	r2, r3
    1614:	d10b      	bne.n	162e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    1616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1618:	3b01      	subs	r3, #1
    161a:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    161e:	2b00      	cmp	r3, #0
    1620:	d005      	beq.n	162e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1624:	2b10      	cmp	r3, #16
    1626:	d102      	bne.n	162e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    1628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    162a:	3b01      	subs	r3, #1
    162c:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1630:	2b10      	cmp	r3, #16
    1632:	d10f      	bne.n	1654 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1636:	f003 0320 	and.w	r3, r3, #32
    163a:	2b00      	cmp	r3, #0
    163c:	d10a      	bne.n	1654 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1640:	2b1f      	cmp	r3, #31
    1642:	d807      	bhi.n	1654 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    1644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1646:	1c5a      	adds	r2, r3, #1
    1648:	637a      	str	r2, [r7, #52]	; 0x34
    164a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    164c:	4413      	add	r3, r2
    164e:	2278      	movs	r2, #120	; 0x78
    1650:	701a      	strb	r2, [r3, #0]
    1652:	e01f      	b.n	1694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1656:	2b10      	cmp	r3, #16
    1658:	d10f      	bne.n	167a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    165a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    165c:	f003 0320 	and.w	r3, r3, #32
    1660:	2b00      	cmp	r3, #0
    1662:	d00a      	beq.n	167a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1666:	2b1f      	cmp	r3, #31
    1668:	d807      	bhi.n	167a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    166c:	1c5a      	adds	r2, r3, #1
    166e:	637a      	str	r2, [r7, #52]	; 0x34
    1670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1672:	4413      	add	r3, r2
    1674:	2258      	movs	r2, #88	; 0x58
    1676:	701a      	strb	r2, [r3, #0]
    1678:	e00c      	b.n	1694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    167a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    167c:	2b02      	cmp	r3, #2
    167e:	d109      	bne.n	1694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    1680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1682:	2b1f      	cmp	r3, #31
    1684:	d806      	bhi.n	1694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    1686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1688:	1c5a      	adds	r2, r3, #1
    168a:	637a      	str	r2, [r7, #52]	; 0x34
    168c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    168e:	4413      	add	r3, r2
    1690:	2262      	movs	r2, #98	; 0x62
    1692:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1696:	2b1f      	cmp	r3, #31
    1698:	d806      	bhi.n	16a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    169c:	1c5a      	adds	r2, r3, #1
    169e:	637a      	str	r2, [r7, #52]	; 0x34
    16a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    16a2:	4413      	add	r3, r2
    16a4:	2230      	movs	r2, #48	; 0x30
    16a6:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    16a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16aa:	2b00      	cmp	r3, #0
    16ac:	d014      	beq.n	16d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    16ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    16b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    16b2:	429a      	cmp	r2, r3
    16b4:	d110      	bne.n	16d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    16b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    16ba:	2b00      	cmp	r3, #0
    16bc:	d109      	bne.n	16d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    16be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16c0:	f003 0304 	and.w	r3, r3, #4
    16c4:	2b00      	cmp	r3, #0
    16c6:	d104      	bne.n	16d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    16c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16ca:	f003 0308 	and.w	r3, r3, #8
    16ce:	2b00      	cmp	r3, #0
    16d0:	d002      	beq.n	16d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    16d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16d4:	3b01      	subs	r3, #1
    16d6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    16d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16da:	2b1f      	cmp	r3, #31
    16dc:	d824      	bhi.n	1728 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    16de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    16e2:	2b00      	cmp	r3, #0
    16e4:	d007      	beq.n	16f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    16e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16e8:	1c5a      	adds	r2, r3, #1
    16ea:	637a      	str	r2, [r7, #52]	; 0x34
    16ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    16ee:	4413      	add	r3, r2
    16f0:	222d      	movs	r2, #45	; 0x2d
    16f2:	701a      	strb	r2, [r3, #0]
    16f4:	e018      	b.n	1728 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    16f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16f8:	f003 0304 	and.w	r3, r3, #4
    16fc:	2b00      	cmp	r3, #0
    16fe:	d007      	beq.n	1710 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1702:	1c5a      	adds	r2, r3, #1
    1704:	637a      	str	r2, [r7, #52]	; 0x34
    1706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1708:	4413      	add	r3, r2
    170a:	222b      	movs	r2, #43	; 0x2b
    170c:	701a      	strb	r2, [r3, #0]
    170e:	e00b      	b.n	1728 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    1710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1712:	f003 0308 	and.w	r3, r3, #8
    1716:	2b00      	cmp	r3, #0
    1718:	d006      	beq.n	1728 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171c:	1c5a      	adds	r2, r3, #1
    171e:	637a      	str	r2, [r7, #52]	; 0x34
    1720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1722:	4413      	add	r3, r2
    1724:	2220      	movs	r2, #32
    1726:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    172a:	f003 0302 	and.w	r3, r3, #2
    172e:	2b00      	cmp	r3, #0
    1730:	d116      	bne.n	1760 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    1732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1734:	f003 0301 	and.w	r3, r3, #1
    1738:	2b00      	cmp	r3, #0
    173a:	d111      	bne.n	1760 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    173e:	61fb      	str	r3, [r7, #28]
    1740:	69fa      	ldr	r2, [r7, #28]
    1742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1744:	429a      	cmp	r2, r3
    1746:	d20b      	bcs.n	1760 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    1748:	687a      	ldr	r2, [r7, #4]
    174a:	1c53      	adds	r3, r2, #1
    174c:	607b      	str	r3, [r7, #4]
    174e:	68fc      	ldr	r4, [r7, #12]
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	68b9      	ldr	r1, [r7, #8]
    1754:	2020      	movs	r0, #32
    1756:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1758:	69fb      	ldr	r3, [r7, #28]
    175a:	3301      	adds	r3, #1
    175c:	61fb      	str	r3, [r7, #28]
    175e:	e7ef      	b.n	1740 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1760:	2300      	movs	r3, #0
    1762:	61bb      	str	r3, [r7, #24]
    1764:	69ba      	ldr	r2, [r7, #24]
    1766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1768:	429a      	cmp	r2, r3
    176a:	d211      	bcs.n	1790 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    176c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    176e:	69bb      	ldr	r3, [r7, #24]
    1770:	1ad3      	subs	r3, r2, r3
    1772:	3b01      	subs	r3, #1
    1774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1776:	4413      	add	r3, r2
    1778:	7818      	ldrb	r0, [r3, #0]
    177a:	687a      	ldr	r2, [r7, #4]
    177c:	1c53      	adds	r3, r2, #1
    177e:	607b      	str	r3, [r7, #4]
    1780:	68fc      	ldr	r4, [r7, #12]
    1782:	683b      	ldr	r3, [r7, #0]
    1784:	68b9      	ldr	r1, [r7, #8]
    1786:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1788:	69bb      	ldr	r3, [r7, #24]
    178a:	3301      	adds	r3, #1
    178c:	61bb      	str	r3, [r7, #24]
    178e:	e7e9      	b.n	1764 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1792:	f003 0302 	and.w	r3, r3, #2
    1796:	2b00      	cmp	r3, #0
    1798:	d00e      	beq.n	17b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    179a:	687a      	ldr	r2, [r7, #4]
    179c:	697b      	ldr	r3, [r7, #20]
    179e:	1ad3      	subs	r3, r2, r3
    17a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    17a2:	429a      	cmp	r2, r3
    17a4:	d908      	bls.n	17b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    17a6:	687a      	ldr	r2, [r7, #4]
    17a8:	1c53      	adds	r3, r2, #1
    17aa:	607b      	str	r3, [r7, #4]
    17ac:	68fc      	ldr	r4, [r7, #12]
    17ae:	683b      	ldr	r3, [r7, #0]
    17b0:	68b9      	ldr	r1, [r7, #8]
    17b2:	2020      	movs	r0, #32
    17b4:	47a0      	blx	r4
    while (idx - start_idx < width) {
    17b6:	e7f0      	b.n	179a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    17b8:	687b      	ldr	r3, [r7, #4]
}
    17ba:	4618      	mov	r0, r3
    17bc:	3724      	adds	r7, #36	; 0x24
    17be:	46bd      	mov	sp, r7
    17c0:	bd90      	pop	{r4, r7, pc}

000017c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    17c2:	b580      	push	{r7, lr}
    17c4:	b096      	sub	sp, #88	; 0x58
    17c6:	af08      	add	r7, sp, #32
    17c8:	60f8      	str	r0, [r7, #12]
    17ca:	60b9      	str	r1, [r7, #8]
    17cc:	607a      	str	r2, [r7, #4]
    17ce:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    17d0:	2300      	movs	r3, #0
    17d2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    17d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17d6:	2b00      	cmp	r3, #0
    17d8:	d103      	bne.n	17e2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    17da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    17dc:	f023 0310 	bic.w	r3, r3, #16
    17e0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    17e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    17e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    17e8:	2b00      	cmp	r3, #0
    17ea:	d002      	beq.n	17f2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    17ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17ee:	2b00      	cmp	r3, #0
    17f0:	d034      	beq.n	185c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    17f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    17f6:	fbb3 f2f2 	udiv	r2, r3, r2
    17fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    17fc:	fb01 f202 	mul.w	r2, r1, r2
    1800:	1a9b      	subs	r3, r3, r2
    1802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    180a:	2b09      	cmp	r3, #9
    180c:	d804      	bhi.n	1818 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    180e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1812:	3330      	adds	r3, #48	; 0x30
    1814:	b2da      	uxtb	r2, r3
    1816:	e00d      	b.n	1834 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    1818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    181a:	f003 0320 	and.w	r3, r3, #32
    181e:	2b00      	cmp	r3, #0
    1820:	d001      	beq.n	1826 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    1822:	2241      	movs	r2, #65	; 0x41
    1824:	e000      	b.n	1828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    1826:	2261      	movs	r2, #97	; 0x61
    1828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    182c:	4413      	add	r3, r2
    182e:	b2db      	uxtb	r3, r3
    1830:	3b0a      	subs	r3, #10
    1832:	b2da      	uxtb	r2, r3
    1834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1836:	1c59      	adds	r1, r3, #1
    1838:	6379      	str	r1, [r7, #52]	; 0x34
    183a:	f107 0138 	add.w	r1, r7, #56	; 0x38
    183e:	440b      	add	r3, r1
    1840:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1848:	fbb2 f3f3 	udiv	r3, r2, r3
    184c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    184e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1850:	2b00      	cmp	r3, #0
    1852:	d003      	beq.n	185c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    1854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1856:	2b1f      	cmp	r3, #31
    1858:	d800      	bhi.n	185c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    185a:	e7ca      	b.n	17f2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    185e:	9306      	str	r3, [sp, #24]
    1860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1862:	9305      	str	r3, [sp, #20]
    1864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1866:	9304      	str	r3, [sp, #16]
    1868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    186a:	9303      	str	r3, [sp, #12]
    186c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1870:	9302      	str	r3, [sp, #8]
    1872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1874:	9301      	str	r3, [sp, #4]
    1876:	f107 0310 	add.w	r3, r7, #16
    187a:	9300      	str	r3, [sp, #0]
    187c:	683b      	ldr	r3, [r7, #0]
    187e:	687a      	ldr	r2, [r7, #4]
    1880:	68b9      	ldr	r1, [r7, #8]
    1882:	68f8      	ldr	r0, [r7, #12]
    1884:	f7ff fe7c 	bl	1580 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1888:	4603      	mov	r3, r0
}
    188a:	4618      	mov	r0, r3
    188c:	3738      	adds	r7, #56	; 0x38
    188e:	46bd      	mov	sp, r7
    1890:	bd80      	pop	{r7, pc}

00001892 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1892:	b590      	push	{r4, r7, lr}
    1894:	b097      	sub	sp, #92	; 0x5c
    1896:	af08      	add	r7, sp, #32
    1898:	60f8      	str	r0, [r7, #12]
    189a:	60b9      	str	r1, [r7, #8]
    189c:	607a      	str	r2, [r7, #4]
    189e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    18a0:	2300      	movs	r3, #0
    18a2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    18a4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    18a8:	4323      	orrs	r3, r4
    18aa:	d103      	bne.n	18b4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    18ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    18ae:	f023 0310 	bic.w	r3, r3, #16
    18b2:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    18b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    18b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    18ba:	2b00      	cmp	r3, #0
    18bc:	d003      	beq.n	18c6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    18be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    18c2:	4323      	orrs	r3, r4
    18c4:	d03a      	beq.n	193c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    18c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    18ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    18ce:	f003 fbc5 	bl	505c <__aeabi_uldivmod>
    18d2:	461c      	mov	r4, r3
    18d4:	4613      	mov	r3, r2
    18d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    18da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    18de:	2b09      	cmp	r3, #9
    18e0:	d804      	bhi.n	18ec <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    18e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    18e6:	3330      	adds	r3, #48	; 0x30
    18e8:	b2da      	uxtb	r2, r3
    18ea:	e00d      	b.n	1908 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    18ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    18ee:	f003 0320 	and.w	r3, r3, #32
    18f2:	2b00      	cmp	r3, #0
    18f4:	d001      	beq.n	18fa <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    18f6:	2241      	movs	r2, #65	; 0x41
    18f8:	e000      	b.n	18fc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    18fa:	2261      	movs	r2, #97	; 0x61
    18fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1900:	4413      	add	r3, r2
    1902:	b2db      	uxtb	r3, r3
    1904:	3b0a      	subs	r3, #10
    1906:	b2da      	uxtb	r2, r3
    1908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    190a:	1c59      	adds	r1, r3, #1
    190c:	6379      	str	r1, [r7, #52]	; 0x34
    190e:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1912:	440b      	add	r3, r1
    1914:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1918:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    191c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    1920:	f003 fb9c 	bl	505c <__aeabi_uldivmod>
    1924:	4603      	mov	r3, r0
    1926:	460c      	mov	r4, r1
    1928:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    192c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1930:	4323      	orrs	r3, r4
    1932:	d003      	beq.n	193c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    1934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1936:	2b1f      	cmp	r3, #31
    1938:	d800      	bhi.n	193c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    193a:	e7c4      	b.n	18c6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    193c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    193e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1940:	9206      	str	r2, [sp, #24]
    1942:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1944:	9205      	str	r2, [sp, #20]
    1946:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1948:	9204      	str	r2, [sp, #16]
    194a:	9303      	str	r3, [sp, #12]
    194c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    1950:	9302      	str	r3, [sp, #8]
    1952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1954:	9301      	str	r3, [sp, #4]
    1956:	f107 0310 	add.w	r3, r7, #16
    195a:	9300      	str	r3, [sp, #0]
    195c:	683b      	ldr	r3, [r7, #0]
    195e:	687a      	ldr	r2, [r7, #4]
    1960:	68b9      	ldr	r1, [r7, #8]
    1962:	68f8      	ldr	r0, [r7, #12]
    1964:	f7ff fe0c 	bl	1580 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1968:	4603      	mov	r3, r0
}
    196a:	4618      	mov	r0, r3
    196c:	373c      	adds	r7, #60	; 0x3c
    196e:	46bd      	mov	sp, r7
    1970:	bd90      	pop	{r4, r7, pc}
    1972:	Address 0x0000000000001972 is out of bounds.


00001974 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    1974:	b590      	push	{r4, r7, lr}
    1976:	b099      	sub	sp, #100	; 0x64
    1978:	af00      	add	r7, sp, #0
    197a:	60f8      	str	r0, [r7, #12]
    197c:	60b9      	str	r1, [r7, #8]
    197e:	607a      	str	r2, [r7, #4]
    1980:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	63fb      	str	r3, [r7, #60]	; 0x3c

  float value = static_cast<float>(value_param);
    1986:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
    198a:	f002 fffd 	bl	4988 <__aeabi_d2f>
    198e:	4603      	mov	r3, r0
    1990:	65fb      	str	r3, [r7, #92]	; 0x5c

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    1992:	2300      	movs	r3, #0
    1994:	65bb      	str	r3, [r7, #88]	; 0x58
  float diff = 0.0;
    1996:	f04f 0300 	mov.w	r3, #0
    199a:	63bb      	str	r3, [r7, #56]	; 0x38

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    199c:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    19a0:	637b      	str	r3, [r7, #52]	; 0x34

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    19a2:	2300      	movs	r3, #0
    19a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (value < 0) {
    19a8:	f04f 0100 	mov.w	r1, #0
    19ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    19ae:	f003 fae7 	bl	4f80 <__aeabi_fcmplt>
    19b2:	4603      	mov	r3, r0
    19b4:	2b00      	cmp	r3, #0
    19b6:	d009      	beq.n	19cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x58>
    negative = true;
    19b8:	2301      	movs	r3, #1
    19ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    value = 0 - value;
    19be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    19c0:	f04f 0000 	mov.w	r0, #0
    19c4:	f003 f834 	bl	4a30 <__aeabi_fsub>
    19c8:	4603      	mov	r3, r0
    19ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    19cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    19d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    19d4:	2b00      	cmp	r3, #0
    19d6:	d101      	bne.n	19dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
    prec = 6U;
    19d8:	2306      	movs	r3, #6
    19da:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    19dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    19de:	2b1f      	cmp	r3, #31
    19e0:	d80f      	bhi.n	1a02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    19e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19e4:	2b09      	cmp	r3, #9
    19e6:	d90c      	bls.n	1a02 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    buf[len++] = '0';
    19e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    19ea:	1c5a      	adds	r2, r3, #1
    19ec:	65ba      	str	r2, [r7, #88]	; 0x58
    19ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
    19f2:	4413      	add	r3, r2
    19f4:	2230      	movs	r2, #48	; 0x30
    19f6:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    19fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19fc:	3b01      	subs	r3, #1
    19fe:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1a00:	e7ec      	b.n	19dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
  }

  int whole = (int)value;
    1a02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1a04:	f003 fae4 	bl	4fd0 <__aeabi_f2iz>
    1a08:	4603      	mov	r3, r0
    1a0a:	653b      	str	r3, [r7, #80]	; 0x50
  float tmp = (value - whole) * pow10[prec];
    1a0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    1a0e:	f003 f8c5 	bl	4b9c <__aeabi_i2f>
    1a12:	4603      	mov	r3, r0
    1a14:	4619      	mov	r1, r3
    1a16:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1a18:	f003 f80a 	bl	4a30 <__aeabi_fsub>
    1a1c:	4603      	mov	r3, r0
    1a1e:	4618      	mov	r0, r3
    1a20:	4aa7      	ldr	r2, [pc, #668]	; (1cc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    1a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a28:	4619      	mov	r1, r3
    1a2a:	f003 f90b 	bl	4c44 <__aeabi_fmul>
    1a2e:	4603      	mov	r3, r0
    1a30:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
    1a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a34:	f003 faf2 	bl	501c <__aeabi_f2uiz>
    1a38:	4603      	mov	r3, r0
    1a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  diff = tmp - frac;
    1a3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1a3e:	f003 f8a9 	bl	4b94 <__aeabi_ui2f>
    1a42:	4603      	mov	r3, r0
    1a44:	4619      	mov	r1, r3
    1a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a48:	f002 fff2 	bl	4a30 <__aeabi_fsub>
    1a4c:	4603      	mov	r3, r0
    1a4e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
    1a50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1a56:	f003 fab1 	bl	4fbc <__aeabi_fcmpgt>
    1a5a:	4603      	mov	r3, r0
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d015      	beq.n	1a8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x118>
    ++frac;
    1a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a62:	3301      	adds	r3, #1
    1a64:	64fb      	str	r3, [r7, #76]	; 0x4c
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1a66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1a68:	f003 f894 	bl	4b94 <__aeabi_ui2f>
    1a6c:	4a94      	ldr	r2, [pc, #592]	; (1cc0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    1a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a74:	4619      	mov	r1, r3
    1a76:	f003 fa97 	bl	4fa8 <__aeabi_fcmpge>
    1a7a:	4603      	mov	r3, r0
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d018      	beq.n	1ab2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
      frac = 0;
    1a80:	2300      	movs	r3, #0
    1a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      ++whole;
    1a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1a86:	3301      	adds	r3, #1
    1a88:	653b      	str	r3, [r7, #80]	; 0x50
    1a8a:	e012      	b.n	1ab2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    1a8c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1a92:	f003 fa6b 	bl	4f6c <__aeabi_fcmpeq>
    1a96:	4603      	mov	r3, r0
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d00a      	beq.n	1ab2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    1a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d004      	beq.n	1aac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x138>
    1aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1aa4:	f003 0301 	and.w	r3, r3, #1
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d002      	beq.n	1ab2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    1aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1aae:	3301      	adds	r3, #1
    1ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    1ab2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    1ab6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1ab8:	f003 fa80 	bl	4fbc <__aeabi_fcmpgt>
    1abc:	4603      	mov	r3, r0
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d001      	beq.n	1ac6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x152>
    return 0U;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e15f      	b.n	1d86 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x412>
  }

  if (prec == 0U) {
    1ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d126      	bne.n	1b1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a6>
    diff = value - (float)whole;
    1acc:	6d38      	ldr	r0, [r7, #80]	; 0x50
    1ace:	f003 f865 	bl	4b9c <__aeabi_i2f>
    1ad2:	4603      	mov	r3, r0
    1ad4:	4619      	mov	r1, r3
    1ad6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1ad8:	f002 ffaa 	bl	4a30 <__aeabi_fsub>
    1adc:	4603      	mov	r3, r0
    1ade:	63bb      	str	r3, [r7, #56]	; 0x38
    if (diff > 0.5) {
    1ae0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1ae6:	f003 fa69 	bl	4fbc <__aeabi_fcmpgt>
    1aea:	4603      	mov	r3, r0
    1aec:	2b00      	cmp	r3, #0
    1aee:	d003      	beq.n	1af8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x184>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    1af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1af2:	3301      	adds	r3, #1
    1af4:	653b      	str	r3, [r7, #80]	; 0x50
    1af6:	e061      	b.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    1af8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1afe:	f003 fa35 	bl	4f6c <__aeabi_fcmpeq>
    1b02:	4603      	mov	r3, r0
    1b04:	2b00      	cmp	r3, #0
    1b06:	d059      	beq.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    1b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1b0a:	f003 0301 	and.w	r3, r3, #1
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d054      	beq.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    1b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1b14:	3301      	adds	r3, #1
    1b16:	653b      	str	r3, [r7, #80]	; 0x50
    1b18:	e050      	b.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
  }
  else {
    unsigned int count = prec;
    1b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1b1c:	64bb      	str	r3, [r7, #72]	; 0x48
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b20:	2b1f      	cmp	r3, #31
    1b22:	d828      	bhi.n	1b76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
      --count;
    1b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b26:	3b01      	subs	r3, #1
    1b28:	64bb      	str	r3, [r7, #72]	; 0x48
      buf[len++] = (char)(48U + (frac % 10U));
    1b2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1b2c:	4b65      	ldr	r3, [pc, #404]	; (1cc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1b2e:	fba3 2301 	umull	r2, r3, r3, r1
    1b32:	08da      	lsrs	r2, r3, #3
    1b34:	4613      	mov	r3, r2
    1b36:	009b      	lsls	r3, r3, #2
    1b38:	4413      	add	r3, r2
    1b3a:	005b      	lsls	r3, r3, #1
    1b3c:	1aca      	subs	r2, r1, r3
    1b3e:	b2d3      	uxtb	r3, r2
    1b40:	3330      	adds	r3, #48	; 0x30
    1b42:	b2d9      	uxtb	r1, r3
    1b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b46:	1c5a      	adds	r2, r3, #1
    1b48:	65ba      	str	r2, [r7, #88]	; 0x58
    1b4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1b4e:	4413      	add	r3, r2
    1b50:	460a      	mov	r2, r1
    1b52:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    1b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b58:	4a5a      	ldr	r2, [pc, #360]	; (1cc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1b5a:	fba2 2303 	umull	r2, r3, r2, r3
    1b5e:	08db      	lsrs	r3, r3, #3
    1b60:	64fb      	str	r3, [r7, #76]	; 0x4c
    1b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b64:	2b00      	cmp	r3, #0
    1b66:	bf0c      	ite	eq
    1b68:	2301      	moveq	r3, #1
    1b6a:	2300      	movne	r3, #0
    1b6c:	b2db      	uxtb	r3, r3
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d100      	bne.n	1b74 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x200>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1b72:	e7d4      	b.n	1b1e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1aa>
        break;
    1b74:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b78:	2b1f      	cmp	r3, #31
    1b7a:	d806      	bhi.n	1b8a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b7e:	1e5a      	subs	r2, r3, #1
    1b80:	64ba      	str	r2, [r7, #72]	; 0x48
    1b82:	2b00      	cmp	r3, #0
    1b84:	d001      	beq.n	1b8a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1b86:	2301      	movs	r3, #1
    1b88:	e000      	b.n	1b8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x218>
    1b8a:	2300      	movs	r3, #0
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d009      	beq.n	1ba4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x230>
      buf[len++] = '0';
    1b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b92:	1c5a      	adds	r2, r3, #1
    1b94:	65ba      	str	r2, [r7, #88]	; 0x58
    1b96:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1b9a:	4413      	add	r3, r2
    1b9c:	2230      	movs	r2, #48	; 0x30
    1b9e:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1ba2:	e7e8      	b.n	1b76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1ba6:	2b1f      	cmp	r3, #31
    1ba8:	d808      	bhi.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // add decimal
      buf[len++] = '.';
    1baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1bac:	1c5a      	adds	r2, r3, #1
    1bae:	65ba      	str	r2, [r7, #88]	; 0x58
    1bb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1bb4:	4413      	add	r3, r2
    1bb6:	222e      	movs	r2, #46	; 0x2e
    1bb8:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1bbe:	2b1f      	cmp	r3, #31
    1bc0:	d829      	bhi.n	1c16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
    buf[len++] = (char)(48 + (whole % 10));
    1bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1bc4:	4b40      	ldr	r3, [pc, #256]	; (1cc8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1bc6:	fb83 1302 	smull	r1, r3, r3, r2
    1bca:	1099      	asrs	r1, r3, #2
    1bcc:	17d3      	asrs	r3, r2, #31
    1bce:	1ac9      	subs	r1, r1, r3
    1bd0:	460b      	mov	r3, r1
    1bd2:	009b      	lsls	r3, r3, #2
    1bd4:	440b      	add	r3, r1
    1bd6:	005b      	lsls	r3, r3, #1
    1bd8:	1ad1      	subs	r1, r2, r3
    1bda:	b2cb      	uxtb	r3, r1
    1bdc:	3330      	adds	r3, #48	; 0x30
    1bde:	b2d9      	uxtb	r1, r3
    1be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1be2:	1c5a      	adds	r2, r3, #1
    1be4:	65ba      	str	r2, [r7, #88]	; 0x58
    1be6:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1bea:	4413      	add	r3, r2
    1bec:	460a      	mov	r2, r1
    1bee:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    1bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1bf4:	4a34      	ldr	r2, [pc, #208]	; (1cc8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1bf6:	fb82 1203 	smull	r1, r2, r2, r3
    1bfa:	1092      	asrs	r2, r2, #2
    1bfc:	17db      	asrs	r3, r3, #31
    1bfe:	1ad3      	subs	r3, r2, r3
    1c00:	653b      	str	r3, [r7, #80]	; 0x50
    1c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1c04:	2b00      	cmp	r3, #0
    1c06:	bf0c      	ite	eq
    1c08:	2301      	moveq	r3, #1
    1c0a:	2300      	movne	r3, #0
    1c0c:	b2db      	uxtb	r3, r3
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d100      	bne.n	1c14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c12:	e7d3      	b.n	1bbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      break;
    1c14:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1c1a:	f003 0302 	and.w	r3, r3, #2
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d116      	bne.n	1c50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1c26:	f003 0301 	and.w	r3, r3, #1
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d010      	beq.n	1c50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1c32:	429a      	cmp	r2, r3
    1c34:	d20c      	bcs.n	1c50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c38:	2b1f      	cmp	r3, #31
    1c3a:	d809      	bhi.n	1c50 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    buf[len++] = '0';
    1c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c3e:	1c5a      	adds	r2, r3, #1
    1c40:	65ba      	str	r2, [r7, #88]	; 0x58
    1c42:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c46:	4413      	add	r3, r2
    1c48:	2230      	movs	r2, #48	; 0x30
    1c4a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1c4e:	e7e2      	b.n	1c16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1c54:	429a      	cmp	r2, r3
    1c56:	d112      	bne.n	1c7e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    1c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d10b      	bne.n	1c78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1c64:	f003 0304 	and.w	r3, r3, #4
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d105      	bne.n	1c78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1c70:	f003 0308 	and.w	r3, r3, #8
    1c74:	2b00      	cmp	r3, #0
    1c76:	d002      	beq.n	1c7e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    len--;
    1c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c7a:	3b01      	subs	r3, #1
    1c7c:	65bb      	str	r3, [r7, #88]	; 0x58
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c80:	2b1f      	cmp	r3, #31
    1c82:	d832      	bhi.n	1cea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    if (negative) {
    1c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d009      	beq.n	1ca0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x32c>
      buf[len++] = '-';
    1c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c8e:	1c5a      	adds	r2, r3, #1
    1c90:	65ba      	str	r2, [r7, #88]	; 0x58
    1c92:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c96:	4413      	add	r3, r2
    1c98:	222d      	movs	r2, #45	; 0x2d
    1c9a:	f803 2c50 	strb.w	r2, [r3, #-80]
    1c9e:	e024      	b.n	1cea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    }
    else if (flags & FLAGS_PLUS) {
    1ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1ca4:	f003 0304 	and.w	r3, r3, #4
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d00f      	beq.n	1ccc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x358>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1cae:	1c5a      	adds	r2, r3, #1
    1cb0:	65ba      	str	r2, [r7, #88]	; 0x58
    1cb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1cb6:	4413      	add	r3, r2
    1cb8:	222b      	movs	r2, #43	; 0x2b
    1cba:	f803 2c50 	strb.w	r2, [r3, #-80]
    1cbe:	e014      	b.n	1cea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    1cc0:	000073c4 	.word	0x000073c4
    1cc4:	cccccccd 	.word	0xcccccccd
    1cc8:	66666667 	.word	0x66666667
    }
    else if (flags & FLAGS_SPACE) {
    1ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1cd0:	f003 0308 	and.w	r3, r3, #8
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d008      	beq.n	1cea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
      buf[len++] = ' ';
    1cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1cda:	1c5a      	adds	r2, r3, #1
    1cdc:	65ba      	str	r2, [r7, #88]	; 0x58
    1cde:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1ce2:	4413      	add	r3, r2
    1ce4:	2220      	movs	r2, #32
    1ce6:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1cee:	f003 0302 	and.w	r3, r3, #2
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d117      	bne.n	1d26 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    1cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1cfa:	f003 0301 	and.w	r3, r3, #1
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d111      	bne.n	1d26 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    for (size_t i = len; i < width; i++) {
    1d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d04:	647b      	str	r3, [r7, #68]	; 0x44
    1d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d20b      	bcs.n	1d26 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
      out(' ', buffer, idx++, maxlen);
    1d0e:	687a      	ldr	r2, [r7, #4]
    1d10:	1c53      	adds	r3, r2, #1
    1d12:	607b      	str	r3, [r7, #4]
    1d14:	68fc      	ldr	r4, [r7, #12]
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	68b9      	ldr	r1, [r7, #8]
    1d1a:	2020      	movs	r0, #32
    1d1c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1d20:	3301      	adds	r3, #1
    1d22:	647b      	str	r3, [r7, #68]	; 0x44
    1d24:	e7ef      	b.n	1d06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x392>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1d26:	2300      	movs	r3, #0
    1d28:	643b      	str	r3, [r7, #64]	; 0x40
    1d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1d2e:	429a      	cmp	r2, r3
    1d30:	d213      	bcs.n	1d5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3e6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d36:	1ad3      	subs	r3, r2, r3
    1d38:	3b01      	subs	r3, #1
    1d3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1d3e:	4413      	add	r3, r2
    1d40:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    1d44:	687a      	ldr	r2, [r7, #4]
    1d46:	1c53      	adds	r3, r2, #1
    1d48:	607b      	str	r3, [r7, #4]
    1d4a:	68fc      	ldr	r4, [r7, #12]
    1d4c:	683b      	ldr	r3, [r7, #0]
    1d4e:	68b9      	ldr	r1, [r7, #8]
    1d50:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d54:	3301      	adds	r3, #1
    1d56:	643b      	str	r3, [r7, #64]	; 0x40
    1d58:	e7e7      	b.n	1d2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b6>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1d5e:	f003 0302 	and.w	r3, r3, #2
    1d62:	2b00      	cmp	r3, #0
    1d64:	d00e      	beq.n	1d84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
    while (idx - start_idx < width) {
    1d66:	687a      	ldr	r2, [r7, #4]
    1d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d6a:	1ad3      	subs	r3, r2, r3
    1d6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1d6e:	429a      	cmp	r2, r3
    1d70:	d908      	bls.n	1d84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
      out(' ', buffer, idx++, maxlen);
    1d72:	687a      	ldr	r2, [r7, #4]
    1d74:	1c53      	adds	r3, r2, #1
    1d76:	607b      	str	r3, [r7, #4]
    1d78:	68fc      	ldr	r4, [r7, #12]
    1d7a:	683b      	ldr	r3, [r7, #0]
    1d7c:	68b9      	ldr	r1, [r7, #8]
    1d7e:	2020      	movs	r0, #32
    1d80:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1d82:	e7f0      	b.n	1d66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f2>
    }
  }

  return idx;
    1d84:	687b      	ldr	r3, [r7, #4]
}
    1d86:	4618      	mov	r0, r3
    1d88:	3764      	adds	r7, #100	; 0x64
    1d8a:	46bd      	mov	sp, r7
    1d8c:	bd90      	pop	{r4, r7, pc}
    1d8e:	bf00      	nop

00001d90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1d90:	b5b0      	push	{r4, r5, r7, lr}
    1d92:	b0a0      	sub	sp, #128	; 0x80
    1d94:	af0a      	add	r7, sp, #40	; 0x28
    1d96:	60f8      	str	r0, [r7, #12]
    1d98:	60b9      	str	r1, [r7, #8]
    1d9a:	607a      	str	r2, [r7, #4]
    1d9c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    1d9e:	2300      	movs	r3, #0
    1da0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    1da2:	68bb      	ldr	r3, [r7, #8]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d101      	bne.n	1dac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    1da8:	4ba2      	ldr	r3, [pc, #648]	; (2034 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    1daa:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    1dac:	683b      	ldr	r3, [r7, #0]
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	2b00      	cmp	r3, #0
    1db2:	f000 8440 	beq.w	2636 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a6>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1db6:	683b      	ldr	r3, [r7, #0]
    1db8:	781b      	ldrb	r3, [r3, #0]
    1dba:	2b25      	cmp	r3, #37	; 0x25
    1dbc:	d00d      	beq.n	1dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    1dbe:	683b      	ldr	r3, [r7, #0]
    1dc0:	7818      	ldrb	r0, [r3, #0]
    1dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1dc4:	1c53      	adds	r3, r2, #1
    1dc6:	647b      	str	r3, [r7, #68]	; 0x44
    1dc8:	68fc      	ldr	r4, [r7, #12]
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	68b9      	ldr	r1, [r7, #8]
    1dce:	47a0      	blx	r4
      format++;
    1dd0:	683b      	ldr	r3, [r7, #0]
    1dd2:	3301      	adds	r3, #1
    1dd4:	603b      	str	r3, [r7, #0]
      continue;
    1dd6:	f000 bc2c 	b.w	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
    }
    else {
      // yes, evaluate it
      format++;
    1dda:	683b      	ldr	r3, [r7, #0]
    1ddc:	3301      	adds	r3, #1
    1dde:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    1de0:	2300      	movs	r3, #0
    1de2:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    1de4:	683b      	ldr	r3, [r7, #0]
    1de6:	781b      	ldrb	r3, [r3, #0]
    1de8:	3b20      	subs	r3, #32
    1dea:	2b10      	cmp	r3, #16
    1dec:	d856      	bhi.n	1e9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    1dee:	a201      	add	r2, pc, #4	; (adr r2, 1df4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    1df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1df4:	00001e75 	.word	0x00001e75
    1df8:	00001e9d 	.word	0x00001e9d
    1dfc:	00001e9d 	.word	0x00001e9d
    1e00:	00001e89 	.word	0x00001e89
    1e04:	00001e9d 	.word	0x00001e9d
    1e08:	00001e9d 	.word	0x00001e9d
    1e0c:	00001e9d 	.word	0x00001e9d
    1e10:	00001e9d 	.word	0x00001e9d
    1e14:	00001e9d 	.word	0x00001e9d
    1e18:	00001e9d 	.word	0x00001e9d
    1e1c:	00001e9d 	.word	0x00001e9d
    1e20:	00001e61 	.word	0x00001e61
    1e24:	00001e9d 	.word	0x00001e9d
    1e28:	00001e4d 	.word	0x00001e4d
    1e2c:	00001e9d 	.word	0x00001e9d
    1e30:	00001e9d 	.word	0x00001e9d
    1e34:	00001e39 	.word	0x00001e39
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e3a:	f043 0301 	orr.w	r3, r3, #1
    1e3e:	657b      	str	r3, [r7, #84]	; 0x54
    1e40:	683b      	ldr	r3, [r7, #0]
    1e42:	3301      	adds	r3, #1
    1e44:	603b      	str	r3, [r7, #0]
    1e46:	2301      	movs	r3, #1
    1e48:	64bb      	str	r3, [r7, #72]	; 0x48
    1e4a:	e02a      	b.n	1ea2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e4e:	f043 0302 	orr.w	r3, r3, #2
    1e52:	657b      	str	r3, [r7, #84]	; 0x54
    1e54:	683b      	ldr	r3, [r7, #0]
    1e56:	3301      	adds	r3, #1
    1e58:	603b      	str	r3, [r7, #0]
    1e5a:	2301      	movs	r3, #1
    1e5c:	64bb      	str	r3, [r7, #72]	; 0x48
    1e5e:	e020      	b.n	1ea2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e62:	f043 0304 	orr.w	r3, r3, #4
    1e66:	657b      	str	r3, [r7, #84]	; 0x54
    1e68:	683b      	ldr	r3, [r7, #0]
    1e6a:	3301      	adds	r3, #1
    1e6c:	603b      	str	r3, [r7, #0]
    1e6e:	2301      	movs	r3, #1
    1e70:	64bb      	str	r3, [r7, #72]	; 0x48
    1e72:	e016      	b.n	1ea2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e76:	f043 0308 	orr.w	r3, r3, #8
    1e7a:	657b      	str	r3, [r7, #84]	; 0x54
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	3301      	adds	r3, #1
    1e80:	603b      	str	r3, [r7, #0]
    1e82:	2301      	movs	r3, #1
    1e84:	64bb      	str	r3, [r7, #72]	; 0x48
    1e86:	e00c      	b.n	1ea2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e8a:	f043 0310 	orr.w	r3, r3, #16
    1e8e:	657b      	str	r3, [r7, #84]	; 0x54
    1e90:	683b      	ldr	r3, [r7, #0]
    1e92:	3301      	adds	r3, #1
    1e94:	603b      	str	r3, [r7, #0]
    1e96:	2301      	movs	r3, #1
    1e98:	64bb      	str	r3, [r7, #72]	; 0x48
    1e9a:	e002      	b.n	1ea2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    1e9c:	2300      	movs	r3, #0
    1e9e:	64bb      	str	r3, [r7, #72]	; 0x48
    1ea0:	bf00      	nop
      }
    } while (n);
    1ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d000      	beq.n	1eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    1ea8:	e79c      	b.n	1de4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    1eaa:	2300      	movs	r3, #0
    1eac:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    1eae:	683b      	ldr	r3, [r7, #0]
    1eb0:	781b      	ldrb	r3, [r3, #0]
    1eb2:	4618      	mov	r0, r3
    1eb4:	f7ff fb2d 	bl	1512 <_is_digit(char)>
    1eb8:	4603      	mov	r3, r0
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d005      	beq.n	1eca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    1ebe:	463b      	mov	r3, r7
    1ec0:	4618      	mov	r0, r3
    1ec2:	f7ff fb39 	bl	1538 <_atoi(char const**)>
    1ec6:	6538      	str	r0, [r7, #80]	; 0x50
    1ec8:	e018      	b.n	1efc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    1eca:	683b      	ldr	r3, [r7, #0]
    1ecc:	781b      	ldrb	r3, [r3, #0]
    1ece:	2b2a      	cmp	r3, #42	; 0x2a
    1ed0:	d114      	bne.n	1efc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    1ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ed4:	1d1a      	adds	r2, r3, #4
    1ed6:	66ba      	str	r2, [r7, #104]	; 0x68
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    1edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ede:	2b00      	cmp	r3, #0
    1ee0:	da07      	bge.n	1ef2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    1ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ee4:	f043 0302 	orr.w	r3, r3, #2
    1ee8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    1eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1eec:	425b      	negs	r3, r3
    1eee:	653b      	str	r3, [r7, #80]	; 0x50
    1ef0:	e001      	b.n	1ef6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    1ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ef4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	3301      	adds	r3, #1
    1efa:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    1efc:	2300      	movs	r3, #0
    1efe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    1f00:	683b      	ldr	r3, [r7, #0]
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	2b2e      	cmp	r3, #46	; 0x2e
    1f06:	d124      	bne.n	1f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    1f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1f0e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    1f10:	683b      	ldr	r3, [r7, #0]
    1f12:	3301      	adds	r3, #1
    1f14:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    1f16:	683b      	ldr	r3, [r7, #0]
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	4618      	mov	r0, r3
    1f1c:	f7ff faf9 	bl	1512 <_is_digit(char)>
    1f20:	4603      	mov	r3, r0
    1f22:	2b00      	cmp	r3, #0
    1f24:	d005      	beq.n	1f32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    1f26:	463b      	mov	r3, r7
    1f28:	4618      	mov	r0, r3
    1f2a:	f7ff fb05 	bl	1538 <_atoi(char const**)>
    1f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
    1f30:	e00f      	b.n	1f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    1f32:	683b      	ldr	r3, [r7, #0]
    1f34:	781b      	ldrb	r3, [r3, #0]
    1f36:	2b2a      	cmp	r3, #42	; 0x2a
    1f38:	d10b      	bne.n	1f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    1f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f3c:	1d1a      	adds	r2, r3, #4
    1f3e:	66ba      	str	r2, [r7, #104]	; 0x68
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	3301      	adds	r3, #1
    1f50:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    1f52:	683b      	ldr	r3, [r7, #0]
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	3b68      	subs	r3, #104	; 0x68
    1f58:	2b12      	cmp	r3, #18
    1f5a:	d867      	bhi.n	202c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    1f5c:	a201      	add	r2, pc, #4	; (adr r2, 1f64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    1f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f62:	bf00      	nop
    1f64:	00001fd7 	.word	0x00001fd7
    1f68:	0000202d 	.word	0x0000202d
    1f6c:	0000200d 	.word	0x0000200d
    1f70:	0000202d 	.word	0x0000202d
    1f74:	00001fb1 	.word	0x00001fb1
    1f78:	0000202d 	.word	0x0000202d
    1f7c:	0000202d 	.word	0x0000202d
    1f80:	0000202d 	.word	0x0000202d
    1f84:	0000202d 	.word	0x0000202d
    1f88:	0000202d 	.word	0x0000202d
    1f8c:	0000202d 	.word	0x0000202d
    1f90:	0000202d 	.word	0x0000202d
    1f94:	00001ffd 	.word	0x00001ffd
    1f98:	0000202d 	.word	0x0000202d
    1f9c:	0000202d 	.word	0x0000202d
    1fa0:	0000202d 	.word	0x0000202d
    1fa4:	0000202d 	.word	0x0000202d
    1fa8:	0000202d 	.word	0x0000202d
    1fac:	0000201d 	.word	0x0000201d
      case 'l' :
        flags |= FLAGS_LONG;
    1fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1fb6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1fb8:	683b      	ldr	r3, [r7, #0]
    1fba:	3301      	adds	r3, #1
    1fbc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    1fbe:	683b      	ldr	r3, [r7, #0]
    1fc0:	781b      	ldrb	r3, [r3, #0]
    1fc2:	2b6c      	cmp	r3, #108	; 0x6c
    1fc4:	d134      	bne.n	2030 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    1fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1fcc:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1fce:	683b      	ldr	r3, [r7, #0]
    1fd0:	3301      	adds	r3, #1
    1fd2:	603b      	str	r3, [r7, #0]
        }
        break;
    1fd4:	e02c      	b.n	2030 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    1fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1fdc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1fde:	683b      	ldr	r3, [r7, #0]
    1fe0:	3301      	adds	r3, #1
    1fe2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    1fe4:	683b      	ldr	r3, [r7, #0]
    1fe6:	781b      	ldrb	r3, [r3, #0]
    1fe8:	2b68      	cmp	r3, #104	; 0x68
    1fea:	d125      	bne.n	2038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    1fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ff2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1ff4:	683b      	ldr	r3, [r7, #0]
    1ff6:	3301      	adds	r3, #1
    1ff8:	603b      	str	r3, [r7, #0]
        }
        break;
    1ffa:	e01d      	b.n	2038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2002:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2004:	683b      	ldr	r3, [r7, #0]
    2006:	3301      	adds	r3, #1
    2008:	603b      	str	r3, [r7, #0]
        break;
    200a:	e016      	b.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2012:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2014:	683b      	ldr	r3, [r7, #0]
    2016:	3301      	adds	r3, #1
    2018:	603b      	str	r3, [r7, #0]
        break;
    201a:	e00e      	b.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2022:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2024:	683b      	ldr	r3, [r7, #0]
    2026:	3301      	adds	r3, #1
    2028:	603b      	str	r3, [r7, #0]
        break;
    202a:	e006      	b.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    202c:	bf00      	nop
    202e:	e004      	b.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    2030:	bf00      	nop
    2032:	e002      	b.n	203a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    2034:	000014cd 	.word	0x000014cd
        break;
    2038:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    203a:	683b      	ldr	r3, [r7, #0]
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	3b25      	subs	r3, #37	; 0x25
    2040:	2b53      	cmp	r3, #83	; 0x53
    2042:	f200 82e9 	bhi.w	2618 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x888>
    2046:	a201      	add	r2, pc, #4	; (adr r2, 204c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    2048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    204c:	00002601 	.word	0x00002601
    2050:	00002619 	.word	0x00002619
    2054:	00002619 	.word	0x00002619
    2058:	00002619 	.word	0x00002619
    205c:	00002619 	.word	0x00002619
    2060:	00002619 	.word	0x00002619
    2064:	00002619 	.word	0x00002619
    2068:	00002619 	.word	0x00002619
    206c:	00002619 	.word	0x00002619
    2070:	00002619 	.word	0x00002619
    2074:	00002619 	.word	0x00002619
    2078:	00002619 	.word	0x00002619
    207c:	00002619 	.word	0x00002619
    2080:	00002619 	.word	0x00002619
    2084:	00002619 	.word	0x00002619
    2088:	00002619 	.word	0x00002619
    208c:	00002619 	.word	0x00002619
    2090:	00002619 	.word	0x00002619
    2094:	00002619 	.word	0x00002619
    2098:	00002619 	.word	0x00002619
    209c:	00002619 	.word	0x00002619
    20a0:	00002619 	.word	0x00002619
    20a4:	00002619 	.word	0x00002619
    20a8:	00002619 	.word	0x00002619
    20ac:	00002619 	.word	0x00002619
    20b0:	00002619 	.word	0x00002619
    20b4:	00002619 	.word	0x00002619
    20b8:	00002619 	.word	0x00002619
    20bc:	00002619 	.word	0x00002619
    20c0:	00002619 	.word	0x00002619
    20c4:	00002619 	.word	0x00002619
    20c8:	00002619 	.word	0x00002619
    20cc:	00002619 	.word	0x00002619
    20d0:	00002425 	.word	0x00002425
    20d4:	00002619 	.word	0x00002619
    20d8:	00002619 	.word	0x00002619
    20dc:	00002619 	.word	0x00002619
    20e0:	00002619 	.word	0x00002619
    20e4:	00002619 	.word	0x00002619
    20e8:	00002619 	.word	0x00002619
    20ec:	00002619 	.word	0x00002619
    20f0:	00002619 	.word	0x00002619
    20f4:	00002619 	.word	0x00002619
    20f8:	00002619 	.word	0x00002619
    20fc:	00002619 	.word	0x00002619
    2100:	00002619 	.word	0x00002619
    2104:	00002619 	.word	0x00002619
    2108:	00002619 	.word	0x00002619
    210c:	00002619 	.word	0x00002619
    2110:	00002619 	.word	0x00002619
    2114:	00002619 	.word	0x00002619
    2118:	0000219d 	.word	0x0000219d
    211c:	00002619 	.word	0x00002619
    2120:	00002619 	.word	0x00002619
    2124:	00002619 	.word	0x00002619
    2128:	00002619 	.word	0x00002619
    212c:	00002619 	.word	0x00002619
    2130:	00002619 	.word	0x00002619
    2134:	00002619 	.word	0x00002619
    2138:	00002619 	.word	0x00002619
    213c:	00002619 	.word	0x00002619
    2140:	0000219d 	.word	0x0000219d
    2144:	0000245b 	.word	0x0000245b
    2148:	0000219d 	.word	0x0000219d
    214c:	00002619 	.word	0x00002619
    2150:	00002425 	.word	0x00002425
    2154:	00002619 	.word	0x00002619
    2158:	00002619 	.word	0x00002619
    215c:	0000219d 	.word	0x0000219d
    2160:	00002619 	.word	0x00002619
    2164:	00002619 	.word	0x00002619
    2168:	00002619 	.word	0x00002619
    216c:	00002619 	.word	0x00002619
    2170:	00002619 	.word	0x00002619
    2174:	0000219d 	.word	0x0000219d
    2178:	000025b9 	.word	0x000025b9
    217c:	00002619 	.word	0x00002619
    2180:	00002619 	.word	0x00002619
    2184:	000024e3 	.word	0x000024e3
    2188:	00002619 	.word	0x00002619
    218c:	0000219d 	.word	0x0000219d
    2190:	00002619 	.word	0x00002619
    2194:	00002619 	.word	0x00002619
    2198:	0000219d 	.word	0x0000219d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	2b78      	cmp	r3, #120	; 0x78
    21a2:	d003      	beq.n	21ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    21a4:	683b      	ldr	r3, [r7, #0]
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	2b58      	cmp	r3, #88	; 0x58
    21aa:	d102      	bne.n	21b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    21ac:	2310      	movs	r3, #16
    21ae:	643b      	str	r3, [r7, #64]	; 0x40
    21b0:	e013      	b.n	21da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    21b2:	683b      	ldr	r3, [r7, #0]
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2b6f      	cmp	r3, #111	; 0x6f
    21b8:	d102      	bne.n	21c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    21ba:	2308      	movs	r3, #8
    21bc:	643b      	str	r3, [r7, #64]	; 0x40
    21be:	e00c      	b.n	21da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    21c0:	683b      	ldr	r3, [r7, #0]
    21c2:	781b      	ldrb	r3, [r3, #0]
    21c4:	2b62      	cmp	r3, #98	; 0x62
    21c6:	d102      	bne.n	21ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    21c8:	2302      	movs	r3, #2
    21ca:	643b      	str	r3, [r7, #64]	; 0x40
    21cc:	e005      	b.n	21da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    21ce:	230a      	movs	r3, #10
    21d0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    21d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21d4:	f023 0310 	bic.w	r3, r3, #16
    21d8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    21da:	683b      	ldr	r3, [r7, #0]
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	2b58      	cmp	r3, #88	; 0x58
    21e0:	d103      	bne.n	21ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    21e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21e4:	f043 0320 	orr.w	r3, r3, #32
    21e8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    21ea:	683b      	ldr	r3, [r7, #0]
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	2b69      	cmp	r3, #105	; 0x69
    21f0:	d007      	beq.n	2202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    21f2:	683b      	ldr	r3, [r7, #0]
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	2b64      	cmp	r3, #100	; 0x64
    21f8:	d003      	beq.n	2202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    21fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21fc:	f023 030c 	bic.w	r3, r3, #12
    2200:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2208:	2b00      	cmp	r3, #0
    220a:	d003      	beq.n	2214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    220c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    220e:	f023 0301 	bic.w	r3, r3, #1
    2212:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2214:	683b      	ldr	r3, [r7, #0]
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	2b69      	cmp	r3, #105	; 0x69
    221a:	d004      	beq.n	2226 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    221c:	683b      	ldr	r3, [r7, #0]
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	2b64      	cmp	r3, #100	; 0x64
    2222:	f040 808c 	bne.w	233e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5ae>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2228:	f403 7300 	and.w	r3, r3, #512	; 0x200
    222c:	2b00      	cmp	r3, #0
    222e:	d02d      	beq.n	228c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2232:	3307      	adds	r3, #7
    2234:	f023 0307 	bic.w	r3, r3, #7
    2238:	f103 0208 	add.w	r2, r3, #8
    223c:	66ba      	str	r2, [r7, #104]	; 0x68
    223e:	cb18      	ldmia	r3, {r3, r4}
    2240:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2244:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    2248:	2b00      	cmp	r3, #0
    224a:	f174 0200 	sbcs.w	r2, r4, #0
    224e:	da02      	bge.n	2256 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c6>
    2250:	425b      	negs	r3, r3
    2252:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    2256:	4619      	mov	r1, r3
    2258:	4622      	mov	r2, r4
    225a:	697b      	ldr	r3, [r7, #20]
    225c:	0fdb      	lsrs	r3, r3, #31
    225e:	b2d8      	uxtb	r0, r3
    2260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2262:	f04f 0400 	mov.w	r4, #0
    2266:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    2268:	9508      	str	r5, [sp, #32]
    226a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    226c:	9507      	str	r5, [sp, #28]
    226e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    2270:	9506      	str	r5, [sp, #24]
    2272:	e9cd 3404 	strd	r3, r4, [sp, #16]
    2276:	9002      	str	r0, [sp, #8]
    2278:	e9cd 1200 	strd	r1, r2, [sp]
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2280:	68b9      	ldr	r1, [r7, #8]
    2282:	68f8      	ldr	r0, [r7, #12]
    2284:	f7ff fb05 	bl	1892 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2288:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    228a:	e0c7      	b.n	241c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          else if (flags & FLAGS_LONG) {
    228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2292:	2b00      	cmp	r3, #0
    2294:	d01e      	beq.n	22d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x544>
            const long value = va_arg(va, long);
    2296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2298:	1d1a      	adds	r2, r3, #4
    229a:	66ba      	str	r2, [r7, #104]	; 0x68
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    22a0:	69fb      	ldr	r3, [r7, #28]
    22a2:	2b00      	cmp	r3, #0
    22a4:	bfb8      	it	lt
    22a6:	425b      	neglt	r3, r3
    22a8:	4619      	mov	r1, r3
    22aa:	69fb      	ldr	r3, [r7, #28]
    22ac:	0fdb      	lsrs	r3, r3, #31
    22ae:	b2db      	uxtb	r3, r3
    22b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    22b2:	9205      	str	r2, [sp, #20]
    22b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    22b6:	9204      	str	r2, [sp, #16]
    22b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    22ba:	9203      	str	r2, [sp, #12]
    22bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    22be:	9202      	str	r2, [sp, #8]
    22c0:	9301      	str	r3, [sp, #4]
    22c2:	9100      	str	r1, [sp, #0]
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    22c8:	68b9      	ldr	r1, [r7, #8]
    22ca:	68f8      	ldr	r0, [r7, #12]
    22cc:	f7ff fa79 	bl	17c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    22d0:	6478      	str	r0, [r7, #68]	; 0x44
          }
    22d2:	e0a3      	b.n	241c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    22d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    22da:	2b00      	cmp	r3, #0
    22dc:	d005      	beq.n	22ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55a>
    22de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22e0:	1d1a      	adds	r2, r3, #4
    22e2:	66ba      	str	r2, [r7, #104]	; 0x68
    22e4:	681b      	ldr	r3, [r3, #0]
    22e6:	b2db      	uxtb	r3, r3
    22e8:	e00e      	b.n	2308 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    22ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    22f0:	2b00      	cmp	r3, #0
    22f2:	d005      	beq.n	2300 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x570>
    22f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22f6:	1d1a      	adds	r2, r3, #4
    22f8:	66ba      	str	r2, [r7, #104]	; 0x68
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	b21b      	sxth	r3, r3
    22fe:	e003      	b.n	2308 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    2300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2302:	1d1a      	adds	r2, r3, #4
    2304:	66ba      	str	r2, [r7, #104]	; 0x68
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    230a:	6a3b      	ldr	r3, [r7, #32]
    230c:	2b00      	cmp	r3, #0
    230e:	bfb8      	it	lt
    2310:	425b      	neglt	r3, r3
    2312:	4619      	mov	r1, r3
    2314:	6a3b      	ldr	r3, [r7, #32]
    2316:	0fdb      	lsrs	r3, r3, #31
    2318:	b2db      	uxtb	r3, r3
    231a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    231c:	9205      	str	r2, [sp, #20]
    231e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2320:	9204      	str	r2, [sp, #16]
    2322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2324:	9203      	str	r2, [sp, #12]
    2326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2328:	9202      	str	r2, [sp, #8]
    232a:	9301      	str	r3, [sp, #4]
    232c:	9100      	str	r1, [sp, #0]
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2332:	68b9      	ldr	r1, [r7, #8]
    2334:	68f8      	ldr	r0, [r7, #12]
    2336:	f7ff fa44 	bl	17c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    233a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    233c:	e06e      	b.n	241c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    233e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2340:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2344:	2b00      	cmp	r3, #0
    2346:	d01f      	beq.n	2388 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    234a:	3307      	adds	r3, #7
    234c:	f023 0307 	bic.w	r3, r3, #7
    2350:	f103 0208 	add.w	r2, r3, #8
    2354:	66ba      	str	r2, [r7, #104]	; 0x68
    2356:	cb18      	ldmia	r3, {r3, r4}
    2358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    235a:	4611      	mov	r1, r2
    235c:	f04f 0200 	mov.w	r2, #0
    2360:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2362:	9008      	str	r0, [sp, #32]
    2364:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2366:	9007      	str	r0, [sp, #28]
    2368:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    236a:	9006      	str	r0, [sp, #24]
    236c:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2370:	2200      	movs	r2, #0
    2372:	9202      	str	r2, [sp, #8]
    2374:	e9cd 3400 	strd	r3, r4, [sp]
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    237c:	68b9      	ldr	r1, [r7, #8]
    237e:	68f8      	ldr	r0, [r7, #12]
    2380:	f7ff fa87 	bl	1892 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2384:	6478      	str	r0, [r7, #68]	; 0x44
    2386:	e049      	b.n	241c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    238e:	2b00      	cmp	r3, #0
    2390:	d016      	beq.n	23c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x630>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2394:	1d1a      	adds	r2, r3, #4
    2396:	66ba      	str	r2, [r7, #104]	; 0x68
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    239c:	9205      	str	r2, [sp, #20]
    239e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    23a0:	9204      	str	r2, [sp, #16]
    23a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    23a4:	9203      	str	r2, [sp, #12]
    23a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    23a8:	9202      	str	r2, [sp, #8]
    23aa:	2200      	movs	r2, #0
    23ac:	9201      	str	r2, [sp, #4]
    23ae:	9300      	str	r3, [sp, #0]
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    23b4:	68b9      	ldr	r1, [r7, #8]
    23b6:	68f8      	ldr	r0, [r7, #12]
    23b8:	f7ff fa03 	bl	17c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    23bc:	6478      	str	r0, [r7, #68]	; 0x44
    23be:	e02d      	b.n	241c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    23c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    23c6:	2b00      	cmp	r3, #0
    23c8:	d005      	beq.n	23d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x646>
    23ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23cc:	1d1a      	adds	r2, r3, #4
    23ce:	66ba      	str	r2, [r7, #104]	; 0x68
    23d0:	681b      	ldr	r3, [r3, #0]
    23d2:	b2db      	uxtb	r3, r3
    23d4:	e00e      	b.n	23f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    23d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    23dc:	2b00      	cmp	r3, #0
    23de:	d005      	beq.n	23ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65c>
    23e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23e2:	1d1a      	adds	r2, r3, #4
    23e4:	66ba      	str	r2, [r7, #104]	; 0x68
    23e6:	681b      	ldr	r3, [r3, #0]
    23e8:	b29b      	uxth	r3, r3
    23ea:	e003      	b.n	23f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    23ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23ee:	1d1a      	adds	r2, r3, #4
    23f0:	66ba      	str	r2, [r7, #104]	; 0x68
    23f2:	681b      	ldr	r3, [r3, #0]
    23f4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    23f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23f8:	9305      	str	r3, [sp, #20]
    23fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    23fc:	9304      	str	r3, [sp, #16]
    23fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2400:	9303      	str	r3, [sp, #12]
    2402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2404:	9302      	str	r3, [sp, #8]
    2406:	2300      	movs	r3, #0
    2408:	9301      	str	r3, [sp, #4]
    240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    240c:	9300      	str	r3, [sp, #0]
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2412:	68b9      	ldr	r1, [r7, #8]
    2414:	68f8      	ldr	r0, [r7, #12]
    2416:	f7ff f9d4 	bl	17c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    241a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	3301      	adds	r3, #1
    2420:	603b      	str	r3, [r7, #0]
        break;
    2422:	e106      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2426:	3307      	adds	r3, #7
    2428:	f023 0307 	bic.w	r3, r3, #7
    242c:	f103 0208 	add.w	r2, r3, #8
    2430:	66ba      	str	r2, [r7, #104]	; 0x68
    2432:	cb18      	ldmia	r3, {r3, r4}
    2434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2436:	9204      	str	r2, [sp, #16]
    2438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    243a:	9203      	str	r2, [sp, #12]
    243c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    243e:	9202      	str	r2, [sp, #8]
    2440:	e9cd 3400 	strd	r3, r4, [sp]
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2448:	68b9      	ldr	r1, [r7, #8]
    244a:	68f8      	ldr	r0, [r7, #12]
    244c:	f7ff fa92 	bl	1974 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2450:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2452:	683b      	ldr	r3, [r7, #0]
    2454:	3301      	adds	r3, #1
    2456:	603b      	str	r3, [r7, #0]
        break;
    2458:	e0eb      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    245a:	2301      	movs	r3, #1
    245c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2460:	f003 0302 	and.w	r3, r3, #2
    2464:	2b00      	cmp	r3, #0
    2466:	d113      	bne.n	2490 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
          while (l++ < width) {
    2468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    246a:	1c5a      	adds	r2, r3, #1
    246c:	63fa      	str	r2, [r7, #60]	; 0x3c
    246e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2470:	429a      	cmp	r2, r3
    2472:	bf8c      	ite	hi
    2474:	2301      	movhi	r3, #1
    2476:	2300      	movls	r3, #0
    2478:	b2db      	uxtb	r3, r3
    247a:	2b00      	cmp	r3, #0
    247c:	d008      	beq.n	2490 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
            out(' ', buffer, idx++, maxlen);
    247e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2480:	1c53      	adds	r3, r2, #1
    2482:	647b      	str	r3, [r7, #68]	; 0x44
    2484:	68fc      	ldr	r4, [r7, #12]
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	68b9      	ldr	r1, [r7, #8]
    248a:	2020      	movs	r0, #32
    248c:	47a0      	blx	r4
          while (l++ < width) {
    248e:	e7eb      	b.n	2468 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6d8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2492:	1d1a      	adds	r2, r3, #4
    2494:	66ba      	str	r2, [r7, #104]	; 0x68
    2496:	681b      	ldr	r3, [r3, #0]
    2498:	b2d8      	uxtb	r0, r3
    249a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    249c:	1c53      	adds	r3, r2, #1
    249e:	647b      	str	r3, [r7, #68]	; 0x44
    24a0:	68fc      	ldr	r4, [r7, #12]
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	68b9      	ldr	r1, [r7, #8]
    24a6:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    24a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24aa:	f003 0302 	and.w	r3, r3, #2
    24ae:	2b00      	cmp	r3, #0
    24b0:	d013      	beq.n	24da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
          while (l++ < width) {
    24b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    24b4:	1c5a      	adds	r2, r3, #1
    24b6:	63fa      	str	r2, [r7, #60]	; 0x3c
    24b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    24ba:	429a      	cmp	r2, r3
    24bc:	bf8c      	ite	hi
    24be:	2301      	movhi	r3, #1
    24c0:	2300      	movls	r3, #0
    24c2:	b2db      	uxtb	r3, r3
    24c4:	2b00      	cmp	r3, #0
    24c6:	d008      	beq.n	24da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
            out(' ', buffer, idx++, maxlen);
    24c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    24ca:	1c53      	adds	r3, r2, #1
    24cc:	647b      	str	r3, [r7, #68]	; 0x44
    24ce:	68fc      	ldr	r4, [r7, #12]
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	68b9      	ldr	r1, [r7, #8]
    24d4:	2020      	movs	r0, #32
    24d6:	47a0      	blx	r4
          while (l++ < width) {
    24d8:	e7eb      	b.n	24b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x722>
          }
        }
        format++;
    24da:	683b      	ldr	r3, [r7, #0]
    24dc:	3301      	adds	r3, #1
    24de:	603b      	str	r3, [r7, #0]
        break;
    24e0:	e0a7      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    24e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    24e4:	1d1a      	adds	r2, r3, #4
    24e6:	66ba      	str	r2, [r7, #104]	; 0x68
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    24ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    24ee:	f7fe fffa 	bl	14e6 <_strlen(char const*)>
    24f2:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    24f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    24fa:	2b00      	cmp	r3, #0
    24fc:	d007      	beq.n	250e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77e>
          l = (l < precision ? l : precision);
    24fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2502:	429a      	cmp	r2, r3
    2504:	d201      	bcs.n	250a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77a>
    2506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2508:	e000      	b.n	250c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77c>
    250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    250c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2510:	f003 0302 	and.w	r3, r3, #2
    2514:	2b00      	cmp	r3, #0
    2516:	d113      	bne.n	2540 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
          while (l++ < width) {
    2518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    251a:	1c5a      	adds	r2, r3, #1
    251c:	637a      	str	r2, [r7, #52]	; 0x34
    251e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2520:	429a      	cmp	r2, r3
    2522:	bf8c      	ite	hi
    2524:	2301      	movhi	r3, #1
    2526:	2300      	movls	r3, #0
    2528:	b2db      	uxtb	r3, r3
    252a:	2b00      	cmp	r3, #0
    252c:	d008      	beq.n	2540 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
            out(' ', buffer, idx++, maxlen);
    252e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2530:	1c53      	adds	r3, r2, #1
    2532:	647b      	str	r3, [r7, #68]	; 0x44
    2534:	68fc      	ldr	r4, [r7, #12]
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	68b9      	ldr	r1, [r7, #8]
    253a:	2020      	movs	r0, #32
    253c:	47a0      	blx	r4
          while (l++ < width) {
    253e:	e7eb      	b.n	2518 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2542:	781b      	ldrb	r3, [r3, #0]
    2544:	2b00      	cmp	r3, #0
    2546:	d00b      	beq.n	2560 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    2548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    254e:	2b00      	cmp	r3, #0
    2550:	d004      	beq.n	255c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7cc>
    2552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2554:	1e5a      	subs	r2, r3, #1
    2556:	64fa      	str	r2, [r7, #76]	; 0x4c
    2558:	2b00      	cmp	r3, #0
    255a:	d001      	beq.n	2560 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    255c:	2301      	movs	r3, #1
    255e:	e000      	b.n	2562 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d2>
    2560:	2300      	movs	r3, #0
    2562:	2b00      	cmp	r3, #0
    2564:	d00b      	beq.n	257e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ee>
          out(*(p++), buffer, idx++, maxlen);
    2566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2568:	1c5a      	adds	r2, r3, #1
    256a:	63ba      	str	r2, [r7, #56]	; 0x38
    256c:	7818      	ldrb	r0, [r3, #0]
    256e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2570:	1c53      	adds	r3, r2, #1
    2572:	647b      	str	r3, [r7, #68]	; 0x44
    2574:	68fc      	ldr	r4, [r7, #12]
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	68b9      	ldr	r1, [r7, #8]
    257a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    257c:	e7e0      	b.n	2540 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2580:	f003 0302 	and.w	r3, r3, #2
    2584:	2b00      	cmp	r3, #0
    2586:	d013      	beq.n	25b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
          while (l++ < width) {
    2588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    258a:	1c5a      	adds	r2, r3, #1
    258c:	637a      	str	r2, [r7, #52]	; 0x34
    258e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2590:	429a      	cmp	r2, r3
    2592:	bf8c      	ite	hi
    2594:	2301      	movhi	r3, #1
    2596:	2300      	movls	r3, #0
    2598:	b2db      	uxtb	r3, r3
    259a:	2b00      	cmp	r3, #0
    259c:	d008      	beq.n	25b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
            out(' ', buffer, idx++, maxlen);
    259e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    25a0:	1c53      	adds	r3, r2, #1
    25a2:	647b      	str	r3, [r7, #68]	; 0x44
    25a4:	68fc      	ldr	r4, [r7, #12]
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	68b9      	ldr	r1, [r7, #8]
    25aa:	2020      	movs	r0, #32
    25ac:	47a0      	blx	r4
          while (l++ < width) {
    25ae:	e7eb      	b.n	2588 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          }
        }
        format++;
    25b0:	683b      	ldr	r3, [r7, #0]
    25b2:	3301      	adds	r3, #1
    25b4:	603b      	str	r3, [r7, #0]
        break;
    25b6:	e03c      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    25b8:	2308      	movs	r3, #8
    25ba:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    25bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    25be:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    25c2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    25c4:	2300      	movs	r3, #0
    25c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    25ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    25cc:	1d1a      	adds	r2, r3, #4
    25ce:	66ba      	str	r2, [r7, #104]	; 0x68
    25d0:	681b      	ldr	r3, [r3, #0]
    25d2:	461a      	mov	r2, r3
    25d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    25d6:	9305      	str	r3, [sp, #20]
    25d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    25da:	9304      	str	r3, [sp, #16]
    25dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    25de:	9303      	str	r3, [sp, #12]
    25e0:	2310      	movs	r3, #16
    25e2:	9302      	str	r3, [sp, #8]
    25e4:	2300      	movs	r3, #0
    25e6:	9301      	str	r3, [sp, #4]
    25e8:	9200      	str	r2, [sp, #0]
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    25ee:	68b9      	ldr	r1, [r7, #8]
    25f0:	68f8      	ldr	r0, [r7, #12]
    25f2:	f7ff f8e6 	bl	17c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    25f6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    25f8:	683b      	ldr	r3, [r7, #0]
    25fa:	3301      	adds	r3, #1
    25fc:	603b      	str	r3, [r7, #0]
        break;
    25fe:	e018      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2602:	1c53      	adds	r3, r2, #1
    2604:	647b      	str	r3, [r7, #68]	; 0x44
    2606:	68fc      	ldr	r4, [r7, #12]
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	68b9      	ldr	r1, [r7, #8]
    260c:	2025      	movs	r0, #37	; 0x25
    260e:	47a0      	blx	r4
        format++;
    2610:	683b      	ldr	r3, [r7, #0]
    2612:	3301      	adds	r3, #1
    2614:	603b      	str	r3, [r7, #0]
        break;
    2616:	e00c      	b.n	2632 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>

      default :
        out(*format, buffer, idx++, maxlen);
    2618:	683b      	ldr	r3, [r7, #0]
    261a:	7818      	ldrb	r0, [r3, #0]
    261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    261e:	1c53      	adds	r3, r2, #1
    2620:	647b      	str	r3, [r7, #68]	; 0x44
    2622:	68fc      	ldr	r4, [r7, #12]
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	68b9      	ldr	r1, [r7, #8]
    2628:	47a0      	blx	r4
        format++;
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	3301      	adds	r3, #1
    262e:	603b      	str	r3, [r7, #0]
        break;
    2630:	bf00      	nop
  while (*format)
    2632:	f7ff bbbb 	b.w	1dac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	429a      	cmp	r2, r3
    263c:	d302      	bcc.n	2644 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b4>
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	1e5a      	subs	r2, r3, #1
    2642:	e000      	b.n	2646 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b6>
    2644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2646:	68fc      	ldr	r4, [r7, #12]
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	68b9      	ldr	r1, [r7, #8]
    264c:	2000      	movs	r0, #0
    264e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    2650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2652:	4618      	mov	r0, r3
    2654:	3758      	adds	r7, #88	; 0x58
    2656:	46bd      	mov	sp, r7
    2658:	bdb0      	pop	{r4, r5, r7, pc}
    265a:	bf00      	nop

0000265c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    265c:	b40f      	push	{r0, r1, r2, r3}
    265e:	b580      	push	{r7, lr}
    2660:	b0c4      	sub	sp, #272	; 0x110
    2662:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    2664:	f507 738a 	add.w	r3, r7, #276	; 0x114
    2668:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    266c:	4639      	mov	r1, r7
    266e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    2672:	9300      	str	r3, [sp, #0]
    2674:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    2678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    267c:	4807      	ldr	r0, [pc, #28]	; (269c <printf+0x40>)
    267e:	f7ff fb87 	bl	1d90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    2682:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    2686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    268a:	4618      	mov	r0, r3
    268c:	f507 7784 	add.w	r7, r7, #264	; 0x108
    2690:	46bd      	mov	sp, r7
    2692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2696:	b004      	add	sp, #16
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	0000145d 	.word	0x0000145d

000026a0 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    26a0:	b480      	push	{r7}
    26a2:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    26a4:	bf00      	nop
    26a6:	46bd      	mov	sp, r7
    26a8:	bc80      	pop	{r7}
    26aa:	4770      	bx	lr

000026ac <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    26ac:	b580      	push	{r7, lr}
    26ae:	b082      	sub	sp, #8
    26b0:	af00      	add	r7, sp, #0
    26b2:	6078      	str	r0, [r7, #4]
    26b4:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    26b6:	6839      	ldr	r1, [r7, #0]
    26b8:	6878      	ldr	r0, [r7, #4]
    26ba:	f000 f805 	bl	26c8 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    26be:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    26c0:	4618      	mov	r0, r3
    26c2:	3708      	adds	r7, #8
    26c4:	46bd      	mov	sp, r7
    26c6:	bd80      	pop	{r7, pc}

000026c8 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    26c8:	b5b0      	push	{r4, r5, r7, lr}
    26ca:	b08c      	sub	sp, #48	; 0x30
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
    26d0:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    26d2:	4b2d      	ldr	r3, [pc, #180]	; (2788 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    26d4:	681b      	ldr	r3, [r3, #0]
    26d6:	f003 0301 	and.w	r3, r3, #1
    26da:	2b00      	cmp	r3, #0
    26dc:	bf0c      	ite	eq
    26de:	2301      	moveq	r3, #1
    26e0:	2300      	movne	r3, #0
    26e2:	b2db      	uxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	d001      	beq.n	26ec <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	e049      	b.n	2780 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    26ec:	4b27      	ldr	r3, [pc, #156]	; (278c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d11d      	bne.n	2730 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    26f4:	4b26      	ldr	r3, [pc, #152]	; (2790 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    26f6:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    26f8:	2304      	movs	r3, #4
    26fa:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    26fc:	2303      	movs	r3, #3
    26fe:	613b      	str	r3, [r7, #16]
    2700:	2301      	movs	r3, #1
    2702:	62bb      	str	r3, [r7, #40]	; 0x28
    2704:	f107 0308 	add.w	r3, r7, #8
    2708:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    270a:	6abc      	ldr	r4, [r7, #40]	; 0x28
    270c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    270e:	4620      	mov	r0, r4
    2710:	4629      	mov	r1, r5
    2712:	beab      	bkpt	0x00ab
    2714:	4604      	mov	r4, r0
    2716:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    2718:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    271a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    271e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2722:	d102      	bne.n	272a <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    2724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2728:	e02a      	b.n	2780 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    272a:	4a18      	ldr	r2, [pc, #96]	; (278c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    272e:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    2730:	4b16      	ldr	r3, [pc, #88]	; (278c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	613b      	str	r3, [r7, #16]
    273e:	2305      	movs	r3, #5
    2740:	61fb      	str	r3, [r7, #28]
    2742:	f107 0308 	add.w	r3, r7, #8
    2746:	61bb      	str	r3, [r7, #24]
  );
    2748:	69fc      	ldr	r4, [r7, #28]
    274a:	69bd      	ldr	r5, [r7, #24]
    274c:	4620      	mov	r0, r4
    274e:	4629      	mov	r1, r5
    2750:	beab      	bkpt	0x00ab
    2752:	4604      	mov	r4, r0
    2754:	617c      	str	r4, [r7, #20]
  return value;
    2756:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    2758:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    275c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2760:	d102      	bne.n	2768 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    2762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2766:	e00b      	b.n	2780 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	461a      	mov	r2, r3
    276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    276e:	4293      	cmp	r3, r2
    2770:	d102      	bne.n	2778 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    2772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2776:	e003      	b.n	2780 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    2778:	683b      	ldr	r3, [r7, #0]
    277a:	461a      	mov	r2, r3
    277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    277e:	1ad3      	subs	r3, r2, r3
}
    2780:	4618      	mov	r0, r3
    2782:	3730      	adds	r7, #48	; 0x30
    2784:	46bd      	mov	sp, r7
    2786:	bdb0      	pop	{r4, r5, r7, pc}
    2788:	e000edf0 	.word	0xe000edf0
    278c:	2007c2d8 	.word	0x2007c2d8
    2790:	000073ec 	.word	0x000073ec

00002794 <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
    2794:	b480      	push	{r7}
    2796:	af00      	add	r7, sp, #0
    2798:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    279c:	4618      	mov	r0, r3
    279e:	46bd      	mov	sp, r7
    27a0:	bc80      	pop	{r7}
    27a2:	4770      	bx	lr

000027a4 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
    27a4:	b480      	push	{r7}
    27a6:	af00      	add	r7, sp, #0
    27a8:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
    27ac:	4618      	mov	r0, r3
    27ae:	46bd      	mov	sp, r7
    27b0:	bc80      	pop	{r7}
    27b2:	4770      	bx	lr

000027b4 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    27b4:	b480      	push	{r7}
    27b6:	b083      	sub	sp, #12
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    27bc:	4b0c      	ldr	r3, [pc, #48]	; (27f0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	68da      	ldr	r2, [r3, #12]
    27c2:	4b0b      	ldr	r3, [pc, #44]	; (27f0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    27ca:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    27cc:	4b09      	ldr	r3, [pc, #36]	; (27f4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    27ce:	681b      	ldr	r3, [r3, #0]
    27d0:	2200      	movs	r2, #0
    27d2:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    27d4:	4b07      	ldr	r3, [pc, #28]	; (27f4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	681a      	ldr	r2, [r3, #0]
    27da:	4b06      	ldr	r3, [pc, #24]	; (27f4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    27dc:	681b      	ldr	r3, [r3, #0]
    27de:	f042 0201 	orr.w	r2, r2, #1
    27e2:	601a      	str	r2, [r3, #0]
  }
    27e4:	bf00      	nop
    27e6:	370c      	adds	r7, #12
    27e8:	46bd      	mov	sp, r7
    27ea:	bc80      	pop	{r7}
    27ec:	4770      	bx	lr
    27ee:	bf00      	nop
    27f0:	2007c01c 	.word	0x2007c01c
    27f4:	2007c018 	.word	0x2007c018

000027f8 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    27f8:	b480      	push	{r7}
    27fa:	b083      	sub	sp, #12
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    2800:	4b03      	ldr	r3, [pc, #12]	; (2810 <sjsu::cortex::DwtCounter::GetCount()+0x18>)
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	685b      	ldr	r3, [r3, #4]
  }
    2806:	4618      	mov	r0, r3
    2808:	370c      	adds	r7, #12
    280a:	46bd      	mov	sp, r7
    280c:	bc80      	pop	{r7}
    280e:	4770      	bx	lr
    2810:	2007c018 	.word	0x2007c018

00002814 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
    2814:	b580      	push	{r7, lr}
    2816:	b082      	sub	sp, #8
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
			return x < 0 ? -x : x;
    281c:	f04f 0100 	mov.w	r1, #0
    2820:	6878      	ldr	r0, [r7, #4]
    2822:	f002 fbad 	bl	4f80 <__aeabi_fcmplt>
    2826:	4603      	mov	r3, r0
    2828:	2b00      	cmp	r3, #0
    282a:	d003      	beq.n	2834 <units::detail::abs(float)+0x20>
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    2832:	e000      	b.n	2836 <units::detail::abs(float)+0x22>
    2834:	687b      	ldr	r3, [r7, #4]
		}
    2836:	4618      	mov	r0, r3
    2838:	3708      	adds	r7, #8
    283a:	46bd      	mov	sp, r7
    283c:	bd80      	pop	{r7, pc}

0000283e <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    283e:	b580      	push	{r7, lr}
    2840:	b084      	sub	sp, #16
    2842:	af00      	add	r7, sp, #0
    2844:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    2848:	e9d7 0100 	ldrd	r0, r1, [r7]
    284c:	f002 f9b4 	bl	4bb8 <__aeabi_ul2f>
    2850:	4602      	mov	r2, r0
    2852:	f107 030c 	add.w	r3, r7, #12
    2856:	4611      	mov	r1, r2
    2858:	4618      	mov	r0, r3
    285a:	f000 f814 	bl	2886 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	4618      	mov	r0, r3
    2862:	3710      	adds	r7, #16
    2864:	46bd      	mov	sp, r7
    2866:	bd80      	pop	{r7, pc}

00002868 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2868:	b480      	push	{r7}
    286a:	b083      	sub	sp, #12
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    2870:	6039      	str	r1, [r7, #0]
    2872:	683b      	ldr	r3, [r7, #0]
    2874:	681a      	ldr	r2, [r3, #0]
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	601a      	str	r2, [r3, #0]
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	4618      	mov	r0, r3
    287e:	370c      	adds	r7, #12
    2880:	46bd      	mov	sp, r7
    2882:	bc80      	pop	{r7}
    2884:	4770      	bx	lr

00002886 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2886:	b580      	push	{r7, lr}
    2888:	b082      	sub	sp, #8
    288a:	af00      	add	r7, sp, #0
    288c:	6078      	str	r0, [r7, #4]
    288e:	6039      	str	r1, [r7, #0]
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	463a      	mov	r2, r7
    2894:	4611      	mov	r1, r2
    2896:	4618      	mov	r0, r3
    2898:	f7ff ffe6 	bl	2868 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	4618      	mov	r0, r3
    28a0:	3708      	adds	r7, #8
    28a2:	46bd      	mov	sp, r7
    28a4:	bd80      	pop	{r7, pc}

000028a6 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    28a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a8:	b083      	sub	sp, #12
    28aa:	af00      	add	r7, sp, #0
    28ac:	6078      	str	r0, [r7, #4]
    28ae:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	681c      	ldr	r4, [r3, #0]
    28b4:	683b      	ldr	r3, [r7, #0]
    28b6:	4618      	mov	r0, r3
    28b8:	f000 f84a 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    28bc:	4603      	mov	r3, r0
    28be:	4619      	mov	r1, r3
    28c0:	4620      	mov	r0, r4
    28c2:	f002 f8b5 	bl	4a30 <__aeabi_fsub>
    28c6:	4603      	mov	r3, r0
    28c8:	4618      	mov	r0, r3
    28ca:	f7ff ffa3 	bl	2814 <units::detail::abs(float)>
    28ce:	4605      	mov	r5, r0
    28d0:	f7ff ff68 	bl	27a4 <std::numeric_limits<float>::epsilon()>
    28d4:	4606      	mov	r6, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	681c      	ldr	r4, [r3, #0]
    28da:	683b      	ldr	r3, [r7, #0]
    28dc:	4618      	mov	r0, r3
    28de:	f000 f837 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    28e2:	4603      	mov	r3, r0
    28e4:	4619      	mov	r1, r3
    28e6:	4620      	mov	r0, r4
    28e8:	f002 f8a4 	bl	4a34 <__addsf3>
    28ec:	4603      	mov	r3, r0
    28ee:	4618      	mov	r0, r3
    28f0:	f7ff ff90 	bl	2814 <units::detail::abs(float)>
    28f4:	4603      	mov	r3, r0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    28f6:	4619      	mov	r1, r3
    28f8:	4630      	mov	r0, r6
    28fa:	f002 f9a3 	bl	4c44 <__aeabi_fmul>
    28fe:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    2900:	4619      	mov	r1, r3
    2902:	4628      	mov	r0, r5
    2904:	f002 fb3c 	bl	4f80 <__aeabi_fcmplt>
    2908:	4603      	mov	r3, r0
    290a:	2b00      	cmp	r3, #0
    290c:	d119      	bne.n	2942 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	681c      	ldr	r4, [r3, #0]
    2912:	683b      	ldr	r3, [r7, #0]
    2914:	4618      	mov	r0, r3
    2916:	f000 f81b 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    291a:	4603      	mov	r3, r0
    291c:	4619      	mov	r1, r3
    291e:	4620      	mov	r0, r4
    2920:	f002 f886 	bl	4a30 <__aeabi_fsub>
    2924:	4603      	mov	r3, r0
    2926:	4618      	mov	r0, r3
    2928:	f7ff ff74 	bl	2814 <units::detail::abs(float)>
    292c:	4604      	mov	r4, r0
    292e:	f7ff ff31 	bl	2794 <std::numeric_limits<float>::min()>
    2932:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    2934:	4619      	mov	r1, r3
    2936:	4620      	mov	r0, r4
    2938:	f002 fb22 	bl	4f80 <__aeabi_fcmplt>
    293c:	4603      	mov	r3, r0
    293e:	2b00      	cmp	r3, #0
    2940:	d001      	beq.n	2946 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
    2942:	2301      	movs	r3, #1
    2944:	e000      	b.n	2948 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
    2946:	2300      	movs	r3, #0
		}
    2948:	4618      	mov	r0, r3
    294a:	370c      	adds	r7, #12
    294c:	46bd      	mov	sp, r7
    294e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2950:	b580      	push	{r7, lr}
    2952:	b086      	sub	sp, #24
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2958:	6878      	ldr	r0, [r7, #4]
    295a:	f000 f805 	bl	2968 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    295e:	4603      	mov	r3, r0
	}
    2960:	4618      	mov	r0, r3
    2962:	3718      	adds	r7, #24
    2964:	46bd      	mov	sp, r7
    2966:	bd80      	pop	{r7, pc}

00002968 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2968:	b480      	push	{r7}
    296a:	b085      	sub	sp, #20
    296c:	af00      	add	r7, sp, #0
    296e:	60f8      	str	r0, [r7, #12]
    2970:	7239      	strb	r1, [r7, #8]
    2972:	713a      	strb	r2, [r7, #4]
    2974:	703b      	strb	r3, [r7, #0]
			return value;
    2976:	68fb      	ldr	r3, [r7, #12]
    2978:	681b      	ldr	r3, [r3, #0]
		}
    297a:	4618      	mov	r0, r3
    297c:	3714      	adds	r7, #20
    297e:	46bd      	mov	sp, r7
    2980:	bc80      	pop	{r7}
    2982:	4770      	bx	lr

00002984 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2984:	b5b0      	push	{r4, r5, r7, lr}
    2986:	b082      	sub	sp, #8
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
    298c:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	681c      	ldr	r4, [r3, #0]
    2992:	683b      	ldr	r3, [r7, #0]
    2994:	4618      	mov	r0, r3
    2996:	f7ff ffdb 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    299a:	4602      	mov	r2, r0
    299c:	2301      	movs	r3, #1
    299e:	461d      	mov	r5, r3
    29a0:	4611      	mov	r1, r2
    29a2:	4620      	mov	r0, r4
    29a4:	f002 faf6 	bl	4f94 <__aeabi_fcmple>
    29a8:	4603      	mov	r3, r0
    29aa:	2b00      	cmp	r3, #0
    29ac:	d101      	bne.n	29b2 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    29ae:	2300      	movs	r3, #0
    29b0:	461d      	mov	r5, r3
    29b2:	b2eb      	uxtb	r3, r5
		}
    29b4:	4618      	mov	r0, r3
    29b6:	3708      	adds	r7, #8
    29b8:	46bd      	mov	sp, r7
    29ba:	bdb0      	pop	{r4, r5, r7, pc}

000029bc <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    29bc:	b480      	push	{r7}
    29be:	b083      	sub	sp, #12
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    29c4:	4a03      	ldr	r2, [pc, #12]	; (29d4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x18>)
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	6013      	str	r3, [r2, #0]
}
    29ca:	bf00      	nop
    29cc:	370c      	adds	r7, #12
    29ce:	46bd      	mov	sp, r7
    29d0:	bc80      	pop	{r7}
    29d2:	4770      	bx	lr
    29d4:	2007c000 	.word	0x2007c000

000029d8 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    29d8:	b580      	push	{r7, lr}
    29da:	b082      	sub	sp, #8
    29dc:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    29de:	4b09      	ldr	r3, [pc, #36]	; (2a04 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	685b      	ldr	r3, [r3, #4]
    29e4:	b2db      	uxtb	r3, r3
    29e6:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    29e8:	4a07      	ldr	r2, [pc, #28]	; (2a08 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    29ee:	4a07      	ldr	r2, [pc, #28]	; (2a0c <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    29f6:	603b      	str	r3, [r7, #0]
    isr();
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4798      	blx	r3
  }
    29fc:	bf00      	nop
    29fe:	3708      	adds	r7, #8
    2a00:	46bd      	mov	sp, r7
    2a02:	bd80      	pop	{r7, pc}
    2a04:	2007c020 	.word	0x2007c020
    2a08:	2007c004 	.word	0x2007c004
    2a0c:	2007c158 	.word	0x2007c158

00002a10 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    2a18:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	3308      	adds	r3, #8
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	6839      	ldr	r1, [r7, #0]
    2a24:	6878      	ldr	r0, [r7, #4]
    2a26:	4798      	blx	r3
    2a28:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    2a2a:	f04f 0300 	mov.w	r3, #0
    2a2e:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    2a30:	697b      	ldr	r3, [r7, #20]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d00f      	beq.n	2a56 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	681b      	ldr	r3, [r3, #0]
    2a3a:	330c      	adds	r3, #12
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	6878      	ldr	r0, [r7, #4]
    2a40:	4798      	blx	r3
    2a42:	4603      	mov	r3, r0
    2a44:	613b      	str	r3, [r7, #16]
    2a46:	f107 0310 	add.w	r3, r7, #16
    2a4a:	6979      	ldr	r1, [r7, #20]
    2a4c:	4618      	mov	r0, r3
    2a4e:	f001 fbeb 	bl	4228 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    2a52:	4603      	mov	r3, r0
    2a54:	60fb      	str	r3, [r7, #12]
    }
    return result;
    2a56:	68fb      	ldr	r3, [r7, #12]
  }
    2a58:	4618      	mov	r0, r3
    2a5a:	3718      	adds	r7, #24
    2a5c:	46bd      	mov	sp, r7
    2a5e:	bd80      	pop	{r7, pc}

00002a60 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	4618      	mov	r0, r3
    2a6c:	f000 f804 	bl	2a78 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    2a70:	6878      	ldr	r0, [r7, #4]
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}

00002a78 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2a80:	4903      	ldr	r1, [pc, #12]	; (2a90 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    2a82:	6878      	ldr	r0, [r7, #4]
    2a84:	f7fd ff28 	bl	8d8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2a88:	6878      	ldr	r0, [r7, #4]
    2a8a:	3708      	adds	r7, #8
    2a8c:	46bd      	mov	sp, r7
    2a8e:	bd80      	pop	{r7, pc}
    2a90:	00006ac8 	.word	0x00006ac8

00002a94 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    2a94:	b580      	push	{r7, lr}
    2a96:	b084      	sub	sp, #16
    2a98:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    2a9a:	f107 0308 	add.w	r3, r7, #8
    2a9e:	4618      	mov	r0, r3
    2aa0:	f7ff ffde 	bl	2a60 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    2aa4:	f107 0208 	add.w	r2, r7, #8
    2aa8:	463b      	mov	r3, r7
    2aaa:	4611      	mov	r1, r2
    2aac:	4618      	mov	r0, r3
    2aae:	f7fd ff79 	bl	9a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2ab2:	463b      	mov	r3, r7
    2ab4:	4619      	mov	r1, r3
    2ab6:	4807      	ldr	r0, [pc, #28]	; (2ad4 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    2ab8:	f001 fbd5 	bl	4266 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    2abc:	4b06      	ldr	r3, [pc, #24]	; (2ad8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d002      	beq.n	2aca <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    2ac4:	4b04      	ldr	r3, [pc, #16]	; (2ad8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2ac6:	681b      	ldr	r3, [r3, #0]
    2ac8:	4798      	blx	r3
    }
  }
    2aca:	bf00      	nop
    2acc:	3710      	adds	r7, #16
    2ace:	46bd      	mov	sp, r7
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop
    2ad4:	2007c2e0 	.word	0x2007c2e0
    2ad8:	2007c2dc 	.word	0x2007c2dc

00002adc <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    2adc:	b490      	push	{r4, r7}
    2ade:	b082      	sub	sp, #8
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
  {
    return counter;
    2ae4:	687a      	ldr	r2, [r7, #4]
    2ae6:	4b04      	ldr	r3, [pc, #16]	; (2af8 <sjsu::cortex::SystemTimer::GetCount()+0x1c>)
    2ae8:	cb18      	ldmia	r3, {r3, r4}
    2aea:	e9c2 3400 	strd	r3, r4, [r2]
  }
    2aee:	6878      	ldr	r0, [r7, #4]
    2af0:	3708      	adds	r7, #8
    2af2:	46bd      	mov	sp, r7
    2af4:	bc90      	pop	{r4, r7}
    2af6:	4770      	bx	lr
    2af8:	2007c2e0 	.word	0x2007c2e0

00002afc <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    2afc:	b480      	push	{r7}
    2afe:	b083      	sub	sp, #12
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
    2b04:	bf00      	nop
    2b06:	370c      	adds	r7, #12
    2b08:	46bd      	mov	sp, r7
    2b0a:	bc80      	pop	{r7}
    2b0c:	4770      	bx	lr
    2b0e:	Address 0x0000000000002b0e is out of bounds.


00002b10 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    2b10:	b480      	push	{r7}
    2b12:	b083      	sub	sp, #12
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    2b18:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    2b1a:	4a04      	ldr	r2, [pc, #16]	; (2b2c <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	6013      	str	r3, [r2, #0]
  }
    2b20:	bf00      	nop
    2b22:	370c      	adds	r7, #12
    2b24:	46bd      	mov	sp, r7
    2b26:	bc80      	pop	{r7}
    2b28:	4770      	bx	lr
    2b2a:	bf00      	nop
    2b2c:	2007c2dc 	.word	0x2007c2dc

00002b30 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	b08b      	sub	sp, #44	; 0x2c
    2b34:	af02      	add	r7, sp, #8
    2b36:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    2b38:	2304      	movs	r3, #4
    2b3a:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    2b3c:	4b1f      	ldr	r3, [pc, #124]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	685b      	ldr	r3, [r3, #4]
    2b42:	2b00      	cmp	r3, #0
    2b44:	bf14      	ite	ne
    2b46:	2301      	movne	r3, #1
    2b48:	2300      	moveq	r3, #0
    2b4a:	b2db      	uxtb	r3, r3
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d030      	beq.n	2bb2 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    2b50:	4b1a      	ldr	r3, [pc, #104]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b52:	681b      	ldr	r3, [r3, #0]
    2b54:	2200      	movs	r2, #0
    2b56:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    2b58:	4b18      	ldr	r3, [pc, #96]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	681a      	ldr	r2, [r3, #0]
    2b5e:	4b17      	ldr	r3, [pc, #92]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	f042 0202 	orr.w	r2, r2, #2
    2b66:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    2b68:	4b14      	ldr	r3, [pc, #80]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	681a      	ldr	r2, [r3, #0]
    2b6e:	4b13      	ldr	r3, [pc, #76]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b70:	681b      	ldr	r3, [r3, #0]
    2b72:	f042 0201 	orr.w	r2, r2, #1
    2b76:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    2b78:	4b10      	ldr	r3, [pc, #64]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	681a      	ldr	r2, [r3, #0]
    2b7e:	4b0f      	ldr	r3, [pc, #60]	; (2bbc <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2b80:	681b      	ldr	r3, [r3, #0]
    2b82:	f042 0204 	orr.w	r2, r2, #4
    2b86:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	689e      	ldr	r6, [r3, #8]
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    2b94:	4b0a      	ldr	r3, [pc, #40]	; (2bc0 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    2b96:	f107 040c 	add.w	r4, r7, #12
    2b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2ba0:	69bb      	ldr	r3, [r7, #24]
    2ba2:	9300      	str	r3, [sp, #0]
    2ba4:	f107 030c 	add.w	r3, r7, #12
    2ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
    2baa:	4630      	mov	r0, r6
    2bac:	47a8      	blx	r5
      status = Status::kSuccess;
    2bae:	2300      	movs	r3, #0
    2bb0:	61fb      	str	r3, [r7, #28]
    }

    return status;
    2bb2:	69fb      	ldr	r3, [r7, #28]
  }
    2bb4:	4618      	mov	r0, r3
    2bb6:	3724      	adds	r7, #36	; 0x24
    2bb8:	46bd      	mov	sp, r7
    2bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bbc:	2007c024 	.word	0x2007c024
    2bc0:	00007580 	.word	0x00007580

00002bc4 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	4618      	mov	r0, r3
    2bd2:	370c      	adds	r7, #12
    2bd4:	46bd      	mov	sp, r7
    2bd6:	bc80      	pop	{r7}
    2bd8:	4770      	bx	lr

00002bda <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2bda:	b590      	push	{r4, r7, lr}
    2bdc:	b085      	sub	sp, #20
    2bde:	af00      	add	r7, sp, #0
    2be0:	6078      	str	r0, [r7, #4]
    2be2:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	4618      	mov	r0, r3
    2be8:	f7ff ffec 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    2bec:	4604      	mov	r4, r0
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	4618      	mov	r0, r3
    2bf2:	f7ff ffe7 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    2bf6:	4603      	mov	r3, r0
    2bf8:	60fb      	str	r3, [r7, #12]
    2bfa:	f107 030c 	add.w	r3, r7, #12
    2bfe:	4618      	mov	r0, r3
    2c00:	f7ff fea6 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2c04:	4603      	mov	r3, r0
    2c06:	4619      	mov	r1, r3
    2c08:	4620      	mov	r0, r4
    2c0a:	f002 f8cf 	bl	4dac <__aeabi_fdiv>
    2c0e:	4603      	mov	r3, r0
    2c10:	461a      	mov	r2, r3
    2c12:	f107 0308 	add.w	r3, r7, #8
    2c16:	4611      	mov	r1, r2
    2c18:	4618      	mov	r0, r3
    2c1a:	f000 f805 	bl	2c28 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2c1e:	68bb      	ldr	r3, [r7, #8]
	}
    2c20:	4618      	mov	r0, r3
    2c22:	3714      	adds	r7, #20
    2c24:	46bd      	mov	sp, r7
    2c26:	bd90      	pop	{r4, r7, pc}

00002c28 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2c28:	b580      	push	{r7, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
    2c30:	6039      	str	r1, [r7, #0]
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	463a      	mov	r2, r7
    2c36:	4611      	mov	r1, r2
    2c38:	4618      	mov	r0, r3
    2c3a:	f7ff fe15 	bl	2868 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	4618      	mov	r0, r3
    2c42:	3708      	adds	r7, #8
    2c44:	46bd      	mov	sp, r7
    2c46:	bd80      	pop	{r7, pc}

00002c48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    2c48:	b590      	push	{r4, r7, lr}
    2c4a:	b085      	sub	sp, #20
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
    2c50:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	4618      	mov	r0, r3
    2c56:	f7ff ffb5 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    2c5a:	4604      	mov	r4, r0
    2c5c:	6838      	ldr	r0, [r7, #0]
    2c5e:	f001 ff9d 	bl	4b9c <__aeabi_i2f>
    2c62:	4603      	mov	r3, r0
    2c64:	4619      	mov	r1, r3
    2c66:	4620      	mov	r0, r4
    2c68:	f001 fee2 	bl	4a30 <__aeabi_fsub>
    2c6c:	4603      	mov	r3, r0
    2c6e:	461a      	mov	r2, r3
    2c70:	f107 030c 	add.w	r3, r7, #12
    2c74:	4611      	mov	r1, r2
    2c76:	4618      	mov	r0, r3
    2c78:	f7ff ffd6 	bl	2c28 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2c7c:	68fb      	ldr	r3, [r7, #12]
	}
    2c7e:	4618      	mov	r0, r3
    2c80:	3714      	adds	r7, #20
    2c82:	46bd      	mov	sp, r7
    2c84:	bd90      	pop	{r4, r7, pc}

00002c86 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2c86:	b580      	push	{r7, lr}
    2c88:	b082      	sub	sp, #8
    2c8a:	af00      	add	r7, sp, #0
    2c8c:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2c8e:	6878      	ldr	r0, [r7, #4]
    2c90:	f001 fb01 	bl	4296 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2c94:	4603      	mov	r3, r0
	}
    2c96:	4618      	mov	r0, r3
    2c98:	3708      	adds	r7, #8
    2c9a:	46bd      	mov	sp, r7
    2c9c:	bd80      	pop	{r7, pc}

00002c9e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2c9e:	b580      	push	{r7, lr}
    2ca0:	b082      	sub	sp, #8
    2ca2:	af00      	add	r7, sp, #0
    2ca4:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2ca6:	6878      	ldr	r0, [r7, #4]
    2ca8:	f000 f805 	bl	2cb6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2cac:	4603      	mov	r3, r0
	}
    2cae:	4618      	mov	r0, r3
    2cb0:	3708      	adds	r7, #8
    2cb2:	46bd      	mov	sp, r7
    2cb4:	bd80      	pop	{r7, pc}

00002cb6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2cb6:	b580      	push	{r7, lr}
    2cb8:	b082      	sub	sp, #8
    2cba:	af00      	add	r7, sp, #0
    2cbc:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff ff7f 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    2cc6:	4603      	mov	r3, r0
    2cc8:	4618      	mov	r0, r3
    2cca:	f002 f9a7 	bl	501c <__aeabi_f2uiz>
    2cce:	4603      	mov	r3, r0
		}
    2cd0:	4618      	mov	r0, r3
    2cd2:	3708      	adds	r7, #8
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bd80      	pop	{r7, pc}

00002cd8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    2cd8:	b590      	push	{r4, r7, lr}
    2cda:	b089      	sub	sp, #36	; 0x24
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    2ce2:	f04f 0001 	mov.w	r0, #1
    2ce6:	f04f 0100 	mov.w	r1, #0
    2cea:	f7ff fda8 	bl	283e <units::literals::operator"" _Hz(unsigned long long)>
    2cee:	4603      	mov	r3, r0
    2cf0:	60fb      	str	r3, [r7, #12]
    2cf2:	f107 020c 	add.w	r2, r7, #12
    2cf6:	463b      	mov	r3, r7
    2cf8:	4611      	mov	r1, r2
    2cfa:	4618      	mov	r0, r3
    2cfc:	f7ff fe42 	bl	2984 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2d00:	4603      	mov	r3, r0
    2d02:	2b00      	cmp	r3, #0
    2d04:	d002      	beq.n	2d0c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    2d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d0a:	e041      	b.n	2d90 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	685a      	ldr	r2, [r3, #4]
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	685b      	ldr	r3, [r3, #4]
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	330c      	adds	r3, #12
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	4610      	mov	r0, r2
    2d1c:	4798      	blx	r3
    2d1e:	4603      	mov	r3, r0
    2d20:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    2d22:	463a      	mov	r2, r7
    2d24:	f107 0308 	add.w	r3, r7, #8
    2d28:	4611      	mov	r1, r2
    2d2a:	4618      	mov	r0, r3
    2d2c:	f7ff ff55 	bl	2bda <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2d30:	4603      	mov	r3, r0
    2d32:	617b      	str	r3, [r7, #20]
    2d34:	f107 0314 	add.w	r3, r7, #20
    2d38:	2101      	movs	r1, #1
    2d3a:	4618      	mov	r0, r3
    2d3c:	f7ff ff84 	bl	2c48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    2d40:	4603      	mov	r3, r0
    2d42:	613b      	str	r3, [r7, #16]
    2d44:	f107 0310 	add.w	r3, r7, #16
    2d48:	4618      	mov	r0, r3
    2d4a:	f7ff ff9c 	bl	2c86 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2d4e:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2d50:	f107 0308 	add.w	r3, r7, #8
    2d54:	4618      	mov	r0, r3
    2d56:	f7ff ffa2 	bl	2c9e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2d5a:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    2d5c:	463b      	mov	r3, r7
    2d5e:	4618      	mov	r0, r3
    2d60:	f7ff ff9d 	bl	2c9e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2d64:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2d66:	fbb4 f2f3 	udiv	r2, r4, r3
    2d6a:	fb03 f302 	mul.w	r3, r3, r2
    2d6e:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    2d70:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    2d72:	69fb      	ldr	r3, [r7, #28]
    2d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2d78:	d305      	bcc.n	2d86 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    2d7a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2d7e:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    2d80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2d84:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    2d86:	4b04      	ldr	r3, [pc, #16]	; (2d98 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	69fa      	ldr	r2, [r7, #28]
    2d8c:	605a      	str	r2, [r3, #4]
    return remainder;
    2d8e:	69bb      	ldr	r3, [r7, #24]
  }
    2d90:	4618      	mov	r0, r3
    2d92:	3724      	adds	r7, #36	; 0x24
    2d94:	46bd      	mov	sp, r7
    2d96:	bd90      	pop	{r4, r7, pc}
    2d98:	2007c024 	.word	0x2007c024

00002d9c <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>:
/// @return constexpr Mask from the low bit position to the high bit position.
///         If the low_bit_position > high_bit_position, the result is
///         undefined.
constexpr Mask CreateMaskFromRange(uint8_t low_bit_position,
                                   uint8_t high_bit_position)
{
    2d9c:	b480      	push	{r7}
    2d9e:	b085      	sub	sp, #20
    2da0:	af00      	add	r7, sp, #0
    2da2:	4603      	mov	r3, r0
    2da4:	460a      	mov	r2, r1
    2da6:	71fb      	strb	r3, [r7, #7]
    2da8:	4613      	mov	r3, r2
    2daa:	71bb      	strb	r3, [r7, #6]
  return Mask({
      .position = low_bit_position,
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
  });
    2dac:	79fb      	ldrb	r3, [r7, #7]
    2dae:	733b      	strb	r3, [r7, #12]
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
    2db0:	79ba      	ldrb	r2, [r7, #6]
    2db2:	79fb      	ldrb	r3, [r7, #7]
    2db4:	1ad3      	subs	r3, r2, r3
    2db6:	b2db      	uxtb	r3, r3
    2db8:	3301      	adds	r3, #1
    2dba:	b2db      	uxtb	r3, r3
  });
    2dbc:	737b      	strb	r3, [r7, #13]
    2dbe:	2300      	movs	r3, #0
    2dc0:	7b3a      	ldrb	r2, [r7, #12]
    2dc2:	f362 0307 	bfi	r3, r2, #0, #8
    2dc6:	7b7a      	ldrb	r2, [r7, #13]
    2dc8:	f362 230f 	bfi	r3, r2, #8, #8
}
    2dcc:	4618      	mov	r0, r3
    2dce:	3714      	adds	r7, #20
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bc80      	pop	{r7}
    2dd4:	4770      	bx	lr

00002dd6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2dd6:	b580      	push	{r7, lr}
    2dd8:	b086      	sub	sp, #24
    2dda:	af00      	add	r7, sp, #0
    2ddc:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2dde:	6878      	ldr	r0, [r7, #4]
    2de0:	f000 f806 	bl	2df0 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2de4:	4603      	mov	r3, r0
	}
    2de6:	4618      	mov	r0, r3
    2de8:	3718      	adds	r7, #24
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	Address 0x0000000000002dee is out of bounds.


00002df0 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    2df0:	b580      	push	{r7, lr}
    2df2:	b084      	sub	sp, #16
    2df4:	af00      	add	r7, sp, #0
    2df6:	60f8      	str	r0, [r7, #12]
    2df8:	7239      	strb	r1, [r7, #8]
    2dfa:	713a      	strb	r2, [r7, #4]
    2dfc:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	4904      	ldr	r1, [pc, #16]	; (2e14 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x24>)
    2e04:	4618      	mov	r0, r3
    2e06:	f001 ff1d 	bl	4c44 <__aeabi_fmul>
    2e0a:	4603      	mov	r3, r0
		}
    2e0c:	4618      	mov	r0, r3
    2e0e:	3710      	adds	r7, #16
    2e10:	46bd      	mov	sp, r7
    2e12:	bd80      	pop	{r7, pc}
    2e14:	49742400 	.word	0x49742400

00002e18 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
    2e18:	b590      	push	{r4, r7, lr}
    2e1a:	b085      	sub	sp, #20
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	6078      	str	r0, [r7, #4]
    2e20:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
    2e22:	687c      	ldr	r4, [r7, #4]
    2e24:	683b      	ldr	r3, [r7, #0]
    2e26:	4618      	mov	r0, r3
    2e28:	f7ff ffd5 	bl	2dd6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2e2c:	4603      	mov	r3, r0
    2e2e:	60bb      	str	r3, [r7, #8]
    2e30:	f107 020c 	add.w	r2, r7, #12
    2e34:	f107 0308 	add.w	r3, r7, #8
    2e38:	4619      	mov	r1, r3
    2e3a:	4620      	mov	r0, r4
    2e3c:	f000 f805 	bl	2e4a <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
    2e40:	687b      	ldr	r3, [r7, #4]
    2e42:	4618      	mov	r0, r3
    2e44:	3714      	adds	r7, #20
    2e46:	46bd      	mov	sp, r7
    2e48:	bd90      	pop	{r4, r7, pc}

00002e4a <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2e4a:	b480      	push	{r7}
    2e4c:	b085      	sub	sp, #20
    2e4e:	af00      	add	r7, sp, #0
    2e50:	60f8      	str	r0, [r7, #12]
    2e52:	60b9      	str	r1, [r7, #8]
    2e54:	607a      	str	r2, [r7, #4]
    2e56:	68bb      	ldr	r3, [r7, #8]
    2e58:	681a      	ldr	r2, [r3, #0]
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	601a      	str	r2, [r3, #0]
    2e5e:	68fb      	ldr	r3, [r7, #12]
    2e60:	4618      	mov	r0, r3
    2e62:	3714      	adds	r7, #20
    2e64:	46bd      	mov	sp, r7
    2e66:	bc80      	pop	{r7}
    2e68:	4770      	bx	lr
    2e6a:	Address 0x0000000000002e6a is out of bounds.


00002e6c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// @note The USB subsystem should be configured to obtain its input clock
  ///       from the USB PLL. The internal RC is used for PLL0 and will not
  ///       generate a precise enough clock to be used by the USB subsystem.
  ///
  /// @param frequency The desired CPU Clock frequency in megahertz.
  void SetSystemClockFrequency(
    2e6c:	b590      	push	{r4, r7, lr}
    2e6e:	b085      	sub	sp, #20
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
    2e74:	6039      	str	r1, [r7, #0]
    //       update the PLL0CFG and enable PLL0 simultaneously with the same
    //       feed sequence.

    // 1. Disconnect PLL0 with one feed sequence if PLL0 is already connected.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2e76:	4b63      	ldr	r3, [pc, #396]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2e7e:	4b61      	ldr	r3, [pc, #388]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e80:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2e82:	2101      	movs	r1, #1
    2e84:	4610      	mov	r0, r2
    2e86:	f001 fa1e 	bl	42c6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2e8a:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2e8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2e90:	2100      	movs	r1, #0
    2e92:	6878      	ldr	r0, [r7, #4]
    2e94:	f000 fb76 	bl	3584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 2. Disable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2e98:	4b5a      	ldr	r3, [pc, #360]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e9a:	681b      	ldr	r3, [r3, #0]
    2e9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2ea0:	4b58      	ldr	r3, [pc, #352]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2ea2:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2ea4:	2100      	movs	r1, #0
    2ea6:	4610      	mov	r0, r2
    2ea8:	f001 fa0d 	bl	42c6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2eac:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2eae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2eb2:	2100      	movs	r1, #0
    2eb4:	6878      	ldr	r0, [r7, #4]
    2eb6:	f000 fb65 	bl	3584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 3. Change the CPU Clock Divider setting to speed up operation without
    //    PLL0, if desired.
    SetCpuClockDivider(0);
    2eba:	2100      	movs	r1, #0
    2ebc:	6878      	ldr	r0, [r7, #4]
    2ebe:	f000 fc13 	bl	36e8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 4. Write to the Clock Source Selection Control register to change the
    //    clock source if needed.
    //    The 4 MHz internal RC will be used until PLL0 achieves a lock and is
    //    connected.
    SelectOscillatorSource(OscillatorSource::kIrc);
    2ec2:	2100      	movs	r1, #0
    2ec4:	6878      	ldr	r0, [r7, #4]
    2ec6:	f000 f9e5 	bl	3294 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>
    // 5. Write to the PLL0CFG and make it effective with one feed sequence.
    //    The PLL0CFG can only be updated when PLL0 is disabled.
    const Pll0Settings_t kPll0Settings =
        CalculatePll0(kDefaultIRCFrequency, frequency);
    2eca:	463a      	mov	r2, r7
    2ecc:	f107 030c 	add.w	r3, r7, #12
    2ed0:	4611      	mov	r1, r2
    2ed2:	4618      	mov	r0, r3
    2ed4:	f7ff ffa0 	bl	2e18 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2ed8:	4b4b      	ldr	r3, [pc, #300]	; (3008 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19c>)
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	6819      	ldr	r1, [r3, #0]
    2ede:	6878      	ldr	r0, [r7, #4]
    2ee0:	f000 fa34 	bl	334c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    2ee4:	4603      	mov	r3, r0
    2ee6:	60bb      	str	r3, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2ee8:	4b46      	ldr	r3, [pc, #280]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.multiplier,
    2ef0:	8939      	ldrh	r1, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2ef2:	4b44      	ldr	r3, [pc, #272]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2ef4:	681c      	ldr	r4, [r3, #0]
    2ef6:	4b45      	ldr	r3, [pc, #276]	; (300c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a0>)
    2ef8:	781a      	ldrb	r2, [r3, #0]
    2efa:	785b      	ldrb	r3, [r3, #1]
    2efc:	021b      	lsls	r3, r3, #8
    2efe:	431a      	orrs	r2, r3
    2f00:	2300      	movs	r3, #0
    2f02:	f362 030f 	bfi	r3, r2, #0, #16
    2f06:	461a      	mov	r2, r3
    2f08:	f001 f9ef 	bl	42ea <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>
    2f0c:	4603      	mov	r3, r0
    2f0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kMultiplier);
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2f12:	4b3c      	ldr	r3, [pc, #240]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f14:	681b      	ldr	r3, [r3, #0]
    2f16:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.pre_divider,
    2f1a:	7ab9      	ldrb	r1, [r7, #10]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2f1c:	4b39      	ldr	r3, [pc, #228]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f1e:	681c      	ldr	r4, [r3, #0]
    2f20:	4b3b      	ldr	r3, [pc, #236]	; (3010 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    2f22:	781a      	ldrb	r2, [r3, #0]
    2f24:	785b      	ldrb	r3, [r3, #1]
    2f26:	021b      	lsls	r3, r3, #8
    2f28:	431a      	orrs	r2, r3
    2f2a:	2300      	movs	r3, #0
    2f2c:	f362 030f 	bfi	r3, r2, #0, #16
    2f30:	461a      	mov	r2, r3
    2f32:	f001 f9ed 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    2f36:	4603      	mov	r3, r0
    2f38:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kPreDivider);
    WritePllFeedSequence(PllSelect::kMainPll);
    2f3c:	2100      	movs	r1, #0
    2f3e:	6878      	ldr	r0, [r7, #4]
    2f40:	f000 fb20 	bl	3584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 6. Enable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    2f44:	4b2f      	ldr	r3, [pc, #188]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2f4c:	4b2d      	ldr	r3, [pc, #180]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2f4e:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    2f50:	2100      	movs	r1, #0
    2f52:	4610      	mov	r0, r2
    2f54:	f001 f9ef 	bl	4336 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2f58:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2f5a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2f5e:	2100      	movs	r1, #0
    2f60:	6878      	ldr	r0, [r7, #4]
    2f62:	f000 fb0f 	bl	3584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 7. Change the CPU Clock Divider setting for the operation with PLL0.
    //    It is critical to do this before connecting PLL0.
    SetCpuClockDivider(kPll0Settings.cpu_divider);
    2f66:	7afb      	ldrb	r3, [r7, #11]
    2f68:	4619      	mov	r1, r3
    2f6a:	6878      	ldr	r0, [r7, #4]
    2f6c:	f000 fbbc 	bl	36e8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 8. Wait for PLL0 to achieve lock by monitoring the PLOCK0 bit in the
    //    PLL0STAT register, or using the PLOCK0 interrupt, or wait for a fixed
    //    time when the input clock to PLL0 is slow (i.e. 32 kHz).
    SJ2_ASSERT_FATAL(WaitForPllLockStatus(PllSelect::kMainPll),
    2f70:	2100      	movs	r1, #0
    2f72:	6878      	ldr	r0, [r7, #4]
    2f74:	f000 fb34 	bl	35e0 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    2f78:	4603      	mov	r3, r0
    2f7a:	f083 0301 	eor.w	r3, r3, #1
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d00d      	beq.n	2fa0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x134>
    2f84:	23c5      	movs	r3, #197	; 0xc5
    2f86:	4a23      	ldr	r2, [pc, #140]	; (3014 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    2f88:	4923      	ldr	r1, [pc, #140]	; (3018 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    2f8a:	4824      	ldr	r0, [pc, #144]	; (301c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    2f8c:	f7ff fb66 	bl	265c <printf>
    2f90:	4823      	ldr	r0, [pc, #140]	; (3020 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    2f92:	f7fe fa39 	bl	1408 <puts>
    2f96:	2100      	movs	r1, #0
    2f98:	2001      	movs	r0, #1
    2f9a:	f7fd ffd3 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    2f9e:	e7fe      	b.n	2f9e <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x132>
                     "PLL0 lock could not be established before timeout");
    // 9. Connect PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    2fa0:	4b18      	ldr	r3, [pc, #96]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2fa8:	4b16      	ldr	r3, [pc, #88]	; (3004 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2faa:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    2fac:	2101      	movs	r1, #1
    2fae:	4610      	mov	r0, r2
    2fb0:	f001 f9c1 	bl	4336 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2fb4:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2fb6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2fba:	2100      	movs	r1, #0
    2fbc:	6878      	ldr	r0, [r7, #4]
    2fbe:	f000 fae1 	bl	3584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>

    SJ2_ASSERT_FATAL(WaitForPllConnectionStatus(PllSelect::kMainPll),
    2fc2:	2100      	movs	r1, #0
    2fc4:	6878      	ldr	r0, [r7, #4]
    2fc6:	f000 fb4d 	bl	3664 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    2fca:	4603      	mov	r3, r0
    2fcc:	f083 0301 	eor.w	r3, r3, #1
    2fd0:	b2db      	uxtb	r3, r3
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d00d      	beq.n	2ff2 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x186>
    2fd6:	23cc      	movs	r3, #204	; 0xcc
    2fd8:	4a0e      	ldr	r2, [pc, #56]	; (3014 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    2fda:	4912      	ldr	r1, [pc, #72]	; (3024 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    2fdc:	4812      	ldr	r0, [pc, #72]	; (3028 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    2fde:	f7ff fb3d 	bl	265c <printf>
    2fe2:	480f      	ldr	r0, [pc, #60]	; (3020 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    2fe4:	f7fe fa10 	bl	1408 <puts>
    2fe8:	2100      	movs	r1, #0
    2fea:	2001      	movs	r0, #1
    2fec:	f7fd ffaa 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    2ff0:	e7fe      	b.n	2ff0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>
                     "Failed to connect PLL0.");

    speed_in_hertz = frequency;
    2ff2:	463b      	mov	r3, r7
    2ff4:	4619      	mov	r1, r3
    2ff6:	480d      	ldr	r0, [pc, #52]	; (302c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1c0>)
    2ff8:	f001 f9ae 	bl	4358 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
  }
    2ffc:	bf00      	nop
    2ffe:	3714      	adds	r7, #20
    3000:	46bd      	mov	sp, r7
    3002:	bd90      	pop	{r4, r7, pc}
    3004:	2007c2e8 	.word	0x2007c2e8
    3008:	00007d8c 	.word	0x00007d8c
    300c:	00007d84 	.word	0x00007d84
    3010:	00007d88 	.word	0x00007d88
    3014:	00007fe4 	.word	0x00007fe4
    3018:	00007d90 	.word	0x00007d90
    301c:	00007590 	.word	0x00007590
    3020:	0000765c 	.word	0x0000765c
    3024:	00007da8 	.word	0x00007da8
    3028:	00007674 	.word	0x00007674
    302c:	2007c028 	.word	0x2007c028

00003030 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:
  /// The following dividers are supported for non-CAN peripherals: 1, 2, 4, 8.
  /// For CAN the following dividers are supported: 1, 2, 4, 6.
  ///
  /// @param peripheral_select  Peripheral to configure.
  /// @param peripheral_divider Peripheral clock divider value.
  void SetPeripheralClockDivider(const PeripheralID & peripheral_select,
    3030:	b580      	push	{r7, lr}
    3032:	b088      	sub	sp, #32
    3034:	af00      	add	r7, sp, #0
    3036:	60f8      	str	r0, [r7, #12]
    3038:	60b9      	str	r1, [r7, #8]
    303a:	4613      	mov	r3, r2
    303c:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    const bool kIsCanPeripheral =
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    303e:	68bb      	ldr	r3, [r7, #8]
    3040:	781b      	ldrb	r3, [r3, #0]
    3042:	220d      	movs	r2, #13
    3044:	4293      	cmp	r3, r2
    3046:	d004      	beq.n	3052 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x22>
        peripheral_select.device_id == Peripherals::kCan2.device_id;
    3048:	68bb      	ldr	r3, [r7, #8]
    304a:	781b      	ldrb	r3, [r3, #0]
    304c:	220e      	movs	r2, #14
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    304e:	4293      	cmp	r3, r2
    3050:	d101      	bne.n	3056 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x26>
    3052:	2301      	movs	r3, #1
    3054:	e000      	b.n	3058 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x28>
    3056:	2300      	movs	r3, #0
    const bool kIsCanPeripheral =
    3058:	75fb      	strb	r3, [r7, #23]
    // Convert the divider value to corresponding 2-bit select value
    // The list of divider select values can be found in the LPC176x/5x User
    // Manual Table 42.
    uint8_t divider_select;
    switch (peripheral_divider)
    305a:	79fb      	ldrb	r3, [r7, #7]
    305c:	3b01      	subs	r3, #1
    305e:	2b07      	cmp	r3, #7
    3060:	d848      	bhi.n	30f4 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xc4>
    3062:	a201      	add	r2, pc, #4	; (adr r2, 3068 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x38>)
    3064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3068:	00003089 	.word	0x00003089
    306c:	0000308f 	.word	0x0000308f
    3070:	000030f5 	.word	0x000030f5
    3074:	00003095 	.word	0x00003095
    3078:	000030f5 	.word	0x000030f5
    307c:	0000309b 	.word	0x0000309b
    3080:	000030f5 	.word	0x000030f5
    3084:	000030cb 	.word	0x000030cb
    {
      case 1: divider_select = 0b01; break;
    3088:	2301      	movs	r3, #1
    308a:	77fb      	strb	r3, [r7, #31]
    308c:	e041      	b.n	3112 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 2: divider_select = 0b10; break;
    308e:	2302      	movs	r3, #2
    3090:	77fb      	strb	r3, [r7, #31]
    3092:	e03e      	b.n	3112 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 4: divider_select = 0b00; break;
    3094:	2300      	movs	r3, #0
    3096:	77fb      	strb	r3, [r7, #31]
    3098:	e03b      	b.n	3112 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 6:
      {
        SJ2_ASSERT_FATAL(
    309a:	7dfb      	ldrb	r3, [r7, #23]
    309c:	f083 0301 	eor.w	r3, r3, #1
    30a0:	b2db      	uxtb	r3, r3
    30a2:	2b00      	cmp	r3, #0
    30a4:	d00e      	beq.n	30c4 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x94>
    30a6:	f44f 738e 	mov.w	r3, #284	; 0x11c
    30aa:	4a26      	ldr	r2, [pc, #152]	; (3144 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    30ac:	4926      	ldr	r1, [pc, #152]	; (3148 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x118>)
    30ae:	4827      	ldr	r0, [pc, #156]	; (314c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x11c>)
    30b0:	f7ff fad4 	bl	265c <printf>
    30b4:	4826      	ldr	r0, [pc, #152]	; (3150 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    30b6:	f7fe f9a7 	bl	1408 <puts>
    30ba:	2100      	movs	r1, #0
    30bc:	2001      	movs	r0, #1
    30be:	f7fd ff41 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    30c2:	e7fe      	b.n	30c2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x92>
            kIsCanPeripheral,
            "The divider value of 6 is only supported for CAN peripherals.");
        divider_select = 0b11;
    30c4:	2303      	movs	r3, #3
    30c6:	77fb      	strb	r3, [r7, #31]
      }
      break;
    30c8:	e023      	b.n	3112 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 8:
      {
        SJ2_ASSERT_FATAL(
    30ca:	7dfb      	ldrb	r3, [r7, #23]
    30cc:	2b00      	cmp	r3, #0
    30ce:	d00e      	beq.n	30ee <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbe>
    30d0:	f44f 7392 	mov.w	r3, #292	; 0x124
    30d4:	4a1b      	ldr	r2, [pc, #108]	; (3144 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    30d6:	491f      	ldr	r1, [pc, #124]	; (3154 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x124>)
    30d8:	481f      	ldr	r0, [pc, #124]	; (3158 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x128>)
    30da:	f7ff fabf 	bl	265c <printf>
    30de:	481c      	ldr	r0, [pc, #112]	; (3150 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    30e0:	f7fe f992 	bl	1408 <puts>
    30e4:	2100      	movs	r1, #0
    30e6:	2001      	movs	r0, #1
    30e8:	f7fd ff2c 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    30ec:	e7fe      	b.n	30ec <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbc>
            !kIsCanPeripheral,
            "The divider value of 8 is not supported for CAN peripherals.");
        divider_select = 0b11;
    30ee:	2303      	movs	r3, #3
    30f0:	77fb      	strb	r3, [r7, #31]
      }
      break;
    30f2:	e00e      	b.n	3112 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      default:
        SJ2_ASSERT_FATAL(
    30f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
    30f8:	4a12      	ldr	r2, [pc, #72]	; (3144 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    30fa:	4918      	ldr	r1, [pc, #96]	; (315c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x12c>)
    30fc:	4818      	ldr	r0, [pc, #96]	; (3160 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x130>)
    30fe:	f7ff faad 	bl	265c <printf>
    3102:	4813      	ldr	r0, [pc, #76]	; (3150 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    3104:	f7fe f980 	bl	1408 <puts>
    3108:	2100      	movs	r1, #0
    310a:	2001      	movs	r0, #1
    310c:	f7fd ff1a 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    3110:	e7fe      	b.n	3110 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe0>
            "Only the following peripheral divider values are supported: 1, 2, "
            "4, 8. The divider value of 6 is supported for CAN peripherals.");
        divider_select = -1;
    }
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    3112:	68b9      	ldr	r1, [r7, #8]
    3114:	68f8      	ldr	r0, [r7, #12]
    3116:	f000 fb0b 	bl	3730 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    311a:	61b8      	str	r0, [r7, #24]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    311c:	68b9      	ldr	r1, [r7, #8]
    311e:	68f8      	ldr	r0, [r7, #12]
    3120:	f000 fb20 	bl	3764 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    3124:	4603      	mov	r3, r0
    3126:	82bb      	strh	r3, [r7, #20]
    *pclk_sel = bit::Insert(*pclk_sel, divider_select, kDividerMask);
    3128:	69bb      	ldr	r3, [r7, #24]
    312a:	681b      	ldr	r3, [r3, #0]
    312c:	7ff9      	ldrb	r1, [r7, #31]
    312e:	697a      	ldr	r2, [r7, #20]
    3130:	4618      	mov	r0, r3
    3132:	f001 f8ed 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3136:	4602      	mov	r2, r0
    3138:	69bb      	ldr	r3, [r7, #24]
    313a:	601a      	str	r2, [r3, #0]
  }
    313c:	bf00      	nop
    313e:	3720      	adds	r7, #32
    3140:	46bd      	mov	sp, r7
    3142:	bd80      	pop	{r7, pc}
    3144:	00007f60 	.word	0x00007f60
    3148:	00007dc0 	.word	0x00007dc0
    314c:	0000772c 	.word	0x0000772c
    3150:	0000765c 	.word	0x0000765c
    3154:	00007dd8 	.word	0x00007dd8
    3158:	000077ec 	.word	0x000077ec
    315c:	00007df0 	.word	0x00007df0
    3160:	000078ac 	.word	0x000078ac

00003164 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns The clock divider for the specified peripheral.
  uint32_t GetPeripheralClockDivider(
    3164:	b580      	push	{r7, lr}
    3166:	b086      	sub	sp, #24
    3168:	af00      	add	r7, sp, #0
    316a:	6078      	str	r0, [r7, #4]
    316c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    316e:	6839      	ldr	r1, [r7, #0]
    3170:	6878      	ldr	r0, [r7, #4]
    3172:	f000 fadd 	bl	3730 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    3176:	6138      	str	r0, [r7, #16]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    3178:	6839      	ldr	r1, [r7, #0]
    317a:	6878      	ldr	r0, [r7, #4]
    317c:	f000 faf2 	bl	3764 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    3180:	4603      	mov	r3, r0
    3182:	81bb      	strh	r3, [r7, #12]
    const uint8_t kDividerSelect =
        static_cast<uint8_t>(bit::Extract(*pclk_sel, kDividerMask));
    3184:	693b      	ldr	r3, [r7, #16]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	68f9      	ldr	r1, [r7, #12]
    318a:	4618      	mov	r0, r3
    318c:	f001 f8f5 	bl	437a <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    3190:	4603      	mov	r3, r0
    3192:	73fb      	strb	r3, [r7, #15]

    uint8_t peripheral_clock_divider;
    // convert and return the actual peripheral divider value based on the 2-bit
    // divider select value
    switch (kDividerSelect)
    3194:	7bfb      	ldrb	r3, [r7, #15]
    3196:	2b03      	cmp	r3, #3
    3198:	d81e      	bhi.n	31d8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
    319a:	a201      	add	r2, pc, #4	; (adr r2, 31a0 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x3c>)
    319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    31a0:	000031b1 	.word	0x000031b1
    31a4:	000031b7 	.word	0x000031b7
    31a8:	000031bd 	.word	0x000031bd
    31ac:	000031c3 	.word	0x000031c3
    {
      case 0b00: peripheral_clock_divider = 4; break;
    31b0:	2304      	movs	r3, #4
    31b2:	75fb      	strb	r3, [r7, #23]
    31b4:	e010      	b.n	31d8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b01: peripheral_clock_divider = 1; break;
    31b6:	2301      	movs	r3, #1
    31b8:	75fb      	strb	r3, [r7, #23]
    31ba:	e00d      	b.n	31d8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b10: peripheral_clock_divider = 2; break;
    31bc:	2302      	movs	r3, #2
    31be:	75fb      	strb	r3, [r7, #23]
    31c0:	e00a      	b.n	31d8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b11:
      {
        // 0b11 for CAN peripiherals use a divider of 6 while all others use a
        // divider of 8
        switch (peripheral_select.device_id)
    31c2:	683b      	ldr	r3, [r7, #0]
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	3b0d      	subs	r3, #13
    31c8:	2b01      	cmp	r3, #1
    31ca:	d802      	bhi.n	31d2 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x6e>
        {
          case Peripherals::kCan1.device_id: [[fallthrough]];
          case Peripherals::kCan2.device_id:
            peripheral_clock_divider = 6;
    31cc:	2306      	movs	r3, #6
    31ce:	75fb      	strb	r3, [r7, #23]
            break;
    31d0:	e002      	b.n	31d8 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
          default: peripheral_clock_divider = 8; break;
    31d2:	2308      	movs	r3, #8
    31d4:	75fb      	strb	r3, [r7, #23]
    31d6:	bf00      	nop
        }
      }
    }
    return peripheral_clock_divider;
    31d8:	7dfb      	ldrb	r3, [r7, #23]
  }
    31da:	4618      	mov	r0, r3
    31dc:	3718      	adds	r7, #24
    31de:	46bd      	mov	sp, r7
    31e0:	bd80      	pop	{r7, pc}
    31e2:	bf00      	nop

000031e4 <sjsu::lpc17xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    31e4:	b480      	push	{r7}
    31e6:	b083      	sub	sp, #12
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    31ec:	4b03      	ldr	r3, [pc, #12]	; (31fc <sjsu::lpc17xx::SystemController::GetSystemFrequency() const+0x18>)
    31ee:	681b      	ldr	r3, [r3, #0]
  }
    31f0:	4618      	mov	r0, r3
    31f2:	370c      	adds	r7, #12
    31f4:	46bd      	mov	sp, r7
    31f6:	bc80      	pop	{r7}
    31f8:	4770      	bx	lr
    31fa:	bf00      	nop
    31fc:	2007c028 	.word	0x2007c028

00003200 <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:
  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
    3208:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    return bit::Read(system_controller->PCONP, peripheral_select.device_id);
    320a:	4b07      	ldr	r3, [pc, #28]	; (3228 <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x28>)
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3212:	683b      	ldr	r3, [r7, #0]
    3214:	781b      	ldrb	r3, [r3, #0]
    3216:	4619      	mov	r1, r3
    3218:	4610      	mov	r0, r2
    321a:	f001 f8bf 	bl	439c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    321e:	4603      	mov	r3, r0
  }
    3220:	4618      	mov	r0, r3
    3222:	3708      	adds	r7, #8
    3224:	46bd      	mov	sp, r7
    3226:	bd80      	pop	{r7, pc}
    3228:	2007c2e8 	.word	0x2007c2e8

0000322c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    322c:	b590      	push	{r4, r7, lr}
    322e:	b083      	sub	sp, #12
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
    3234:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3236:	4b09      	ldr	r3, [pc, #36]	; (325c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    323e:	683b      	ldr	r3, [r7, #0]
    3240:	781b      	ldrb	r3, [r3, #0]
    3242:	4619      	mov	r1, r3
    system_controller->PCONP =
    3244:	4b05      	ldr	r3, [pc, #20]	; (325c <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3246:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3248:	4610      	mov	r0, r2
    324a:	f001 f874 	bl	4336 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    324e:	4603      	mov	r3, r0
    system_controller->PCONP =
    3250:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3254:	bf00      	nop
    3256:	370c      	adds	r7, #12
    3258:	46bd      	mov	sp, r7
    325a:	bd90      	pop	{r4, r7, pc}
    325c:	2007c2e8 	.word	0x2007c2e8

00003260 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:

  void PowerDownPeripheral(
    3260:	b590      	push	{r4, r7, lr}
    3262:	b083      	sub	sp, #12
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
    3268:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    326a:	4b09      	ldr	r3, [pc, #36]	; (3290 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3272:	683b      	ldr	r3, [r7, #0]
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	4619      	mov	r1, r3
    system_controller->PCONP =
    3278:	4b05      	ldr	r3, [pc, #20]	; (3290 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    327a:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    327c:	4610      	mov	r0, r2
    327e:	f001 f822 	bl	42c6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3282:	4603      	mov	r3, r0
    system_controller->PCONP =
    3284:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3288:	bf00      	nop
    328a:	370c      	adds	r7, #12
    328c:	46bd      	mov	sp, r7
    328e:	bd90      	pop	{r4, r7, pc}
    3290:	2007c2e8 	.word	0x2007c2e8

00003294 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>:

 private:
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;

  void SelectOscillatorSource(OscillatorSource source) const
    3294:	b590      	push	{r4, r7, lr}
    3296:	b083      	sub	sp, #12
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    329c:	460b      	mov	r3, r1
    329e:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    32a0:	4b0c      	ldr	r3, [pc, #48]	; (32d4 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    32a2:	681b      	ldr	r3, [r3, #0]
    32a4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    32a8:	78f9      	ldrb	r1, [r7, #3]
    32aa:	4b0a      	ldr	r3, [pc, #40]	; (32d4 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    32ac:	681c      	ldr	r4, [r3, #0]
    32ae:	4b0a      	ldr	r3, [pc, #40]	; (32d8 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x44>)
    32b0:	781a      	ldrb	r2, [r3, #0]
    32b2:	785b      	ldrb	r3, [r3, #1]
    32b4:	021b      	lsls	r3, r3, #8
    32b6:	431a      	orrs	r2, r3
    32b8:	2300      	movs	r3, #0
    32ba:	f362 030f 	bfi	r3, r2, #0, #16
    32be:	461a      	mov	r2, r3
    32c0:	f001 f882 	bl	43c8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    32c4:	4603      	mov	r3, r0
    32c6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    32ca:	bf00      	nop
    32cc:	370c      	adds	r7, #12
    32ce:	46bd      	mov	sp, r7
    32d0:	bd90      	pop	{r4, r7, pc}
    32d2:	bf00      	nop
    32d4:	2007c2e8 	.word	0x2007c2e8
    32d8:	00007d7c 	.word	0x00007d7c

000032dc <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    32dc:	b5b0      	push	{r4, r5, r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
    32e4:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	681c      	ldr	r4, [r3, #0]
    32ea:	683b      	ldr	r3, [r7, #0]
    32ec:	4618      	mov	r0, r3
    32ee:	f7ff fb2f 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    32f2:	4602      	mov	r2, r0
    32f4:	2301      	movs	r3, #1
    32f6:	461d      	mov	r5, r3
    32f8:	4611      	mov	r1, r2
    32fa:	4620      	mov	r0, r4
    32fc:	f001 fe5e 	bl	4fbc <__aeabi_fcmpgt>
    3300:	4603      	mov	r3, r0
    3302:	2b00      	cmp	r3, #0
    3304:	d101      	bne.n	330a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    3306:	2300      	movs	r3, #0
    3308:	461d      	mov	r5, r3
    330a:	b2eb      	uxtb	r3, r5
		}
    330c:	4618      	mov	r0, r3
    330e:	3708      	adds	r7, #8
    3310:	46bd      	mov	sp, r7
    3312:	bdb0      	pop	{r4, r5, r7, pc}

00003314 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3314:	b5b0      	push	{r4, r5, r7, lr}
    3316:	b082      	sub	sp, #8
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
    331c:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	681c      	ldr	r4, [r3, #0]
    3322:	683b      	ldr	r3, [r7, #0]
    3324:	4618      	mov	r0, r3
    3326:	f7ff fb13 	bl	2950 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    332a:	4602      	mov	r2, r0
    332c:	2301      	movs	r3, #1
    332e:	461d      	mov	r5, r3
    3330:	4611      	mov	r1, r2
    3332:	4620      	mov	r0, r4
    3334:	f001 fe24 	bl	4f80 <__aeabi_fcmplt>
    3338:	4603      	mov	r3, r0
    333a:	2b00      	cmp	r3, #0
    333c:	d101      	bne.n	3342 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    333e:	2300      	movs	r3, #0
    3340:	461d      	mov	r5, r3
    3342:	b2eb      	uxtb	r3, r5
		}
    3344:	4618      	mov	r0, r3
    3346:	3708      	adds	r7, #8
    3348:	46bd      	mov	sp, r7
    334a:	bdb0      	pop	{r4, r5, r7, pc}

0000334c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// frequency.
  ///
  /// @param input_frequency Input of PLL0 should be 32 kHz to 50 MHz.
  /// @param desired_speed   Desired CPU clock to achieve. Should not
  ///                        exceed the maximum allowed CPU clock.
  Pll0Settings_t CalculatePll0(units::frequency::hertz_t input_frequency,
    334c:	b580      	push	{r7, lr}
    334e:	b090      	sub	sp, #64	; 0x40
    3350:	af00      	add	r7, sp, #0
    3352:	60f8      	str	r0, [r7, #12]
    3354:	60b9      	str	r1, [r7, #8]
    3356:	607a      	str	r2, [r7, #4]
                               units::frequency::hertz_t desired_speed) const
  {
    // minimum/maximum input and output frequencies of PLL0 in kHz
    constexpr units::frequency::hertz_t kMinimumPll0InputFrequency = 32_kHz;
    3358:	f04f 0300 	mov.w	r3, #0
    335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    335e:	4b76      	ldr	r3, [pc, #472]	; (3538 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ec>)
    3360:	62fb      	str	r3, [r7, #44]	; 0x2c
    constexpr units::frequency::hertz_t kMaximumPll0InputFrequency = 50_MHz;
    3362:	f04f 0300 	mov.w	r3, #0
    3366:	62bb      	str	r3, [r7, #40]	; 0x28
    3368:	4b74      	ldr	r3, [pc, #464]	; (353c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f0>)
    336a:	62bb      	str	r3, [r7, #40]	; 0x28
    constexpr units::frequency::hertz_t kMinimumPll0OuputFrequency = 275_MHz;
    336c:	f04f 0300 	mov.w	r3, #0
    3370:	627b      	str	r3, [r7, #36]	; 0x24
    3372:	4b73      	ldr	r3, [pc, #460]	; (3540 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f4>)
    3374:	627b      	str	r3, [r7, #36]	; 0x24
    constexpr units::frequency::hertz_t kMaximumPll0OuputFrequency = 550_MHz;
    3376:	f04f 0300 	mov.w	r3, #0
    337a:	623b      	str	r3, [r7, #32]
    337c:	4b71      	ldr	r3, [pc, #452]	; (3544 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f8>)
    337e:	623b      	str	r3, [r7, #32]

    // Maximum allowed CPU speed in kHz.
    // This value will be 100 MHz or 120 MHz depending on the MCU in use
    // For the SJOne, the max CPU speed for LPC1758 is 100 MHz.
    constexpr units::frequency::hertz_t kMaxCPUSpeed = 100_MHz;
    3380:	f04f 0300 	mov.w	r3, #0
    3384:	61fb      	str	r3, [r7, #28]
    3386:	4b70      	ldr	r3, [pc, #448]	; (3548 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1fc>)
    3388:	61fb      	str	r3, [r7, #28]

    SJ2_ASSERT_FATAL(
    338a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    338e:	f107 0308 	add.w	r3, r7, #8
    3392:	4611      	mov	r1, r2
    3394:	4618      	mov	r0, r3
    3396:	f7ff ffa1 	bl	32dc <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    339a:	4603      	mov	r3, r0
    339c:	f083 0301 	eor.w	r3, r3, #1
    33a0:	b2db      	uxtb	r3, r3
    33a2:	2b00      	cmp	r3, #0
    33a4:	d10d      	bne.n	33c2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x76>
    33a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    33aa:	f107 0308 	add.w	r3, r7, #8
    33ae:	4611      	mov	r1, r2
    33b0:	4618      	mov	r0, r3
    33b2:	f7ff ffaf 	bl	3314 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    33b6:	4603      	mov	r3, r0
    33b8:	f083 0301 	eor.w	r3, r3, #1
    33bc:	b2db      	uxtb	r3, r3
    33be:	2b00      	cmp	r3, #0
    33c0:	d001      	beq.n	33c6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7a>
    33c2:	2301      	movs	r3, #1
    33c4:	e000      	b.n	33c8 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7c>
    33c6:	2300      	movs	r3, #0
    33c8:	2b00      	cmp	r3, #0
    33ca:	d00e      	beq.n	33ea <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9e>
    33cc:	f240 1393 	movw	r3, #403	; 0x193
    33d0:	4a5e      	ldr	r2, [pc, #376]	; (354c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    33d2:	495f      	ldr	r1, [pc, #380]	; (3550 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x204>)
    33d4:	485f      	ldr	r0, [pc, #380]	; (3554 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x208>)
    33d6:	f7ff f941 	bl	265c <printf>
    33da:	485f      	ldr	r0, [pc, #380]	; (3558 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    33dc:	f7fe f814 	bl	1408 <puts>
    33e0:	2100      	movs	r1, #0
    33e2:	2001      	movs	r0, #1
    33e4:	f7fd fdae 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    33e8:	e7fe      	b.n	33e8 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9c>
        input_frequency > kMinimumPll0InputFrequency &&
            input_frequency < kMaximumPll0InputFrequency,
        "The input PLL0 frequency must be between 32kHz and 50MHz");
    SJ2_ASSERT_FATAL(
    33ea:	f107 021c 	add.w	r2, r7, #28
    33ee:	1d3b      	adds	r3, r7, #4
    33f0:	4611      	mov	r1, r2
    33f2:	4618      	mov	r0, r3
    33f4:	f7ff ff8e 	bl	3314 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    33f8:	4603      	mov	r3, r0
    33fa:	f083 0301 	eor.w	r3, r3, #1
    33fe:	b2db      	uxtb	r3, r3
    3400:	2b00      	cmp	r3, #0
    3402:	d00e      	beq.n	3422 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd6>
    3404:	f44f 73cb 	mov.w	r3, #406	; 0x196
    3408:	4a50      	ldr	r2, [pc, #320]	; (354c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    340a:	4954      	ldr	r1, [pc, #336]	; (355c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x210>)
    340c:	4854      	ldr	r0, [pc, #336]	; (3560 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x214>)
    340e:	f7ff f925 	bl	265c <printf>
    3412:	4851      	ldr	r0, [pc, #324]	; (3558 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    3414:	f7fd fff8 	bl	1408 <puts>
    3418:	2100      	movs	r1, #0
    341a:	2001      	movs	r0, #1
    341c:	f7fd fd92 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    3420:	e7fe      	b.n	3420 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd4>
    // Since a small value for the pre-divider, n, is desired, we will iterate
    // through n starting from the lowest possible value of 1 in order to find a
    // suitable multiplier, m. The values of m and n are inversely proportional;
    // therefore, we start looking for the multiplier from its largest possible
    // value of 512.
    for (uint8_t n = 0; n < 32; n++)
    3422:	2300      	movs	r3, #0
    3424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    3428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    342c:	2b1f      	cmp	r3, #31
    342e:	d868      	bhi.n	3502 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b6>
    {
      for (uint16_t m = 511; m >= 6; m--)
    3430:	f240 13ff 	movw	r3, #511	; 0x1ff
    3434:	87bb      	strh	r3, [r7, #60]	; 0x3c
    3436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    3438:	2b05      	cmp	r3, #5
    343a:	d95c      	bls.n	34f6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1aa>
        // Current calculated controlled oscillator frequency, fcco, output of
        // PLL0 in kilohertz
        // Dividing by 1000 to scale down kFcco, as the multiplier for is
        // internally scaled by 1000.
        const units::frequency::hertz_t kFcco =
            (2 * (m + 1) * input_frequency) / (n + 1);
    343c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    343e:	3301      	adds	r3, #1
    3440:	005b      	lsls	r3, r3, #1
    3442:	f107 0208 	add.w	r2, r7, #8
    3446:	4611      	mov	r1, r2
    3448:	4618      	mov	r0, r3
    344a:	f000 ffcf 	bl	43ec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    344e:	4603      	mov	r3, r0
    3450:	633b      	str	r3, [r7, #48]	; 0x30
    3452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    3456:	1c5a      	adds	r2, r3, #1
    3458:	f107 0330 	add.w	r3, r7, #48	; 0x30
    345c:	4611      	mov	r1, r2
    345e:	4618      	mov	r0, r3
    3460:	f000 ffe3 	bl	442a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3464:	4603      	mov	r3, r0
    3466:	61bb      	str	r3, [r7, #24]
        if (kMinimumPll0OuputFrequency < kFcco &&
    3468:	f107 0218 	add.w	r2, r7, #24
    346c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3470:	4611      	mov	r1, r2
    3472:	4618      	mov	r0, r3
    3474:	f7ff ff4e 	bl	3314 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3478:	4603      	mov	r3, r0
    347a:	2b00      	cmp	r3, #0
    347c:	d00c      	beq.n	3498 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
            kFcco < kMaximumPll0OuputFrequency)
    347e:	f107 0220 	add.w	r2, r7, #32
    3482:	f107 0318 	add.w	r3, r7, #24
    3486:	4611      	mov	r1, r2
    3488:	4618      	mov	r0, r3
    348a:	f7ff ff43 	bl	3314 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    348e:	4603      	mov	r3, r0
        if (kMinimumPll0OuputFrequency < kFcco &&
    3490:	2b00      	cmp	r3, #0
    3492:	d001      	beq.n	3498 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
    3494:	2301      	movs	r3, #1
    3496:	e000      	b.n	349a <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14e>
    3498:	2300      	movs	r3, #0
    349a:	2b00      	cmp	r3, #0
    349c:	d027      	beq.n	34ee <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
        {
          // since PLL0 is in use, the cpu_divider values of 0 and 1 are not
          // allowed as the resulting CPU clock will always be above the maximum
          // allowed CPU speed
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    349e:	2302      	movs	r3, #2
    34a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    34a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    34a4:	2bff      	cmp	r3, #255	; 0xff
    34a6:	d822      	bhi.n	34ee <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
          {
            // Get resulting CPU clock
            // Requires that we scale kFcco back to a proper frequency.
            const units::frequency::hertz_t kCpuClock =
                kFcco / (cpu_divider + 1);
    34a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    34aa:	1c5a      	adds	r2, r3, #1
    34ac:	f107 0318 	add.w	r3, r7, #24
    34b0:	4611      	mov	r1, r2
    34b2:	4618      	mov	r0, r3
    34b4:	f000 ffb9 	bl	442a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    34b8:	4603      	mov	r3, r0
    34ba:	617b      	str	r3, [r7, #20]
            if (kCpuClock == desired_speed)
    34bc:	1d3a      	adds	r2, r7, #4
    34be:	f107 0314 	add.w	r3, r7, #20
    34c2:	4611      	mov	r1, r2
    34c4:	4618      	mov	r0, r3
    34c6:	f7ff f9ee 	bl	28a6 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    34ca:	4603      	mov	r3, r0
    34cc:	2b00      	cmp	r3, #0
    34ce:	d00a      	beq.n	34e6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19a>
            {
              return Pll0Settings_t{ .multiplier  = m,
                                     .pre_divider = n,
                                     .cpu_divider =
                                         static_cast<uint8_t>(cpu_divider) };
    34d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    34d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    34d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    34d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    34dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    34de:	b2db      	uxtb	r3, r3
    34e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    34e4:	e01c      	b.n	3520 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d4>
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    34e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    34e8:	3301      	adds	r3, #1
    34ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    34ec:	e7d9      	b.n	34a2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x156>
      for (uint16_t m = 511; m >= 6; m--)
    34ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    34f0:	3b01      	subs	r3, #1
    34f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    34f4:	e79f      	b.n	3436 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    for (uint8_t n = 0; n < 32; n++)
    34f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    34fa:	3301      	adds	r3, #1
    34fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    3500:	e792      	b.n	3428 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xdc>
            }
          }  // cpu_divider loop
        }
      }  // m for loop
    }    // n for loop
    SJ2_ASSERT_FATAL(
    3502:	f240 13c1 	movw	r3, #449	; 0x1c1
    3506:	4a11      	ldr	r2, [pc, #68]	; (354c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    3508:	4916      	ldr	r1, [pc, #88]	; (3564 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x218>)
    350a:	4817      	ldr	r0, [pc, #92]	; (3568 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x21c>)
    350c:	f7ff f8a6 	bl	265c <printf>
    3510:	4811      	ldr	r0, [pc, #68]	; (3558 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    3512:	f7fd ff79 	bl	1408 <puts>
    3516:	2100      	movs	r1, #0
    3518:	2001      	movs	r0, #1
    351a:	f7fd fd13 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    351e:	e7fe      	b.n	351e <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d2>
    3520:	2300      	movs	r3, #0
    3522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
    3524:	f362 030f 	bfi	r3, r2, #0, #16
    3528:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    352a:	f362 431f 	bfi	r3, r2, #16, #16
        false,
        "Failed to calculate the PLL0 settings for the desired frequency.");
    return Pll0Settings_t{
      .multiplier = 0, .pre_divider = 0, .cpu_divider = 0
    };
  }
    352e:	4618      	mov	r0, r3
    3530:	3740      	adds	r7, #64	; 0x40
    3532:	46bd      	mov	sp, r7
    3534:	bd80      	pop	{r7, pc}
    3536:	bf00      	nop
    3538:	46fa0000 	.word	0x46fa0000
    353c:	4c3ebc20 	.word	0x4c3ebc20
    3540:	4d832156 	.word	0x4d832156
    3544:	4e032156 	.word	0x4e032156
    3548:	4cbebc20 	.word	0x4cbebc20
    354c:	00008050 	.word	0x00008050
    3550:	00007e08 	.word	0x00007e08
    3554:	000079a4 	.word	0x000079a4
    3558:	0000765c 	.word	0x0000765c
    355c:	00007e20 	.word	0x00007e20
    3560:	00007aa8 	.word	0x00007aa8
    3564:	00007e38 	.word	0x00007e38
    3568:	00007b74 	.word	0x00007b74

0000356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
    356c:	b480      	push	{r7}
    356e:	b083      	sub	sp, #12
    3570:	af00      	add	r7, sp, #0
    3572:	4603      	mov	r3, r0
    3574:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
    3576:	79fb      	ldrb	r3, [r7, #7]
}
    3578:	4618      	mov	r0, r3
    357a:	370c      	adds	r7, #12
    357c:	46bd      	mov	sp, r7
    357e:	bc80      	pop	{r7}
    3580:	4770      	bx	lr
    3582:	Address 0x0000000000003582 is out of bounds.


00003584 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>:
  /// Writes the feed sequence that is necessary to lock in any changes to the
  /// PLLCON and PLLCGG registers.
  void WritePllFeedSequence(PllSelect pll) const
    3584:	b580      	push	{r7, lr}
    3586:	b084      	sub	sp, #16
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
    358c:	460b      	mov	r3, r1
    358e:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pll_feed_registers[] = {
      &(system_controller->PLL0FEED),
    3590:	4b12      	ldr	r3, [pc, #72]	; (35dc <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	338c      	adds	r3, #140	; 0x8c
      &(system_controller->PLL1FEED),
    };
    3596:	60bb      	str	r3, [r7, #8]
      &(system_controller->PLL1FEED),
    3598:	4b10      	ldr	r3, [pc, #64]	; (35dc <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	33ac      	adds	r3, #172	; 0xac
    };
    359e:	60fb      	str	r3, [r7, #12]
    *(pll_feed_registers[Value(pll)]) = 0xAA;
    35a0:	78fb      	ldrb	r3, [r7, #3]
    35a2:	4618      	mov	r0, r3
    35a4:	f7ff ffe2 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    35a8:	4603      	mov	r3, r0
    35aa:	009b      	lsls	r3, r3, #2
    35ac:	f107 0210 	add.w	r2, r7, #16
    35b0:	4413      	add	r3, r2
    35b2:	f853 3c08 	ldr.w	r3, [r3, #-8]
    35b6:	22aa      	movs	r2, #170	; 0xaa
    35b8:	601a      	str	r2, [r3, #0]
    *(pll_feed_registers[Value(pll)]) = 0x55;
    35ba:	78fb      	ldrb	r3, [r7, #3]
    35bc:	4618      	mov	r0, r3
    35be:	f7ff ffd5 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    35c2:	4603      	mov	r3, r0
    35c4:	009b      	lsls	r3, r3, #2
    35c6:	f107 0210 	add.w	r2, r7, #16
    35ca:	4413      	add	r3, r2
    35cc:	f853 3c08 	ldr.w	r3, [r3, #-8]
    35d0:	2255      	movs	r2, #85	; 0x55
    35d2:	601a      	str	r2, [r3, #0]
  }
    35d4:	bf00      	nop
    35d6:	3710      	adds	r7, #16
    35d8:	46bd      	mov	sp, r7
    35da:	bd80      	pop	{r7, pc}
    35dc:	2007c2e8 	.word	0x2007c2e8

000035e0 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  bool WaitForPllLockStatus(PllSelect pll) const
    35e0:	b580      	push	{r7, lr}
    35e2:	b088      	sub	sp, #32
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
    35e8:	460b      	mov	r3, r1
    35ea:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    35ec:	4b1b      	ldr	r3, [pc, #108]	; (365c <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    35f2:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    35f4:	4b19      	ldr	r3, [pc, #100]	; (365c <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	33a8      	adds	r3, #168	; 0xa8
    };
    35fa:	61bb      	str	r3, [r7, #24]
    const bit::Mask kLockStatusMasks[] = { MainPll::kLockStatus,
    35fc:	4b18      	ldr	r3, [pc, #96]	; (3660 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	613b      	str	r3, [r7, #16]
                                           UsbPll::kLockStatus };
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    3602:	78fb      	ldrb	r3, [r7, #3]
    3604:	4618      	mov	r0, r3
    3606:	f7ff ffb1 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    360a:	4603      	mov	r3, r0
    360c:	009b      	lsls	r3, r3, #2
    360e:	f107 0220 	add.w	r2, r7, #32
    3612:	4413      	add	r3, r2
    3614:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    3618:	61fb      	str	r3, [r7, #28]
    const bit::Mask kLockStatusMask = kLockStatusMasks[Value(pll)];
    361a:	78fb      	ldrb	r3, [r7, #3]
    361c:	4618      	mov	r0, r3
    361e:	f7ff ffa5 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3622:	4603      	mov	r3, r0
    3624:	005b      	lsls	r3, r3, #1
    3626:	f107 0220 	add.w	r2, r7, #32
    362a:	4413      	add	r3, r2
    362c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    3630:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kLockStatusMask.position))
    3632:	69fb      	ldr	r3, [r7, #28]
    3634:	681b      	ldr	r3, [r3, #0]
    3636:	7b3a      	ldrb	r2, [r7, #12]
    3638:	4611      	mov	r1, r2
    363a:	4618      	mov	r0, r3
    363c:	f000 feae 	bl	439c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3640:	4603      	mov	r3, r0
    3642:	f083 0301 	eor.w	r3, r3, #1
    3646:	b2db      	uxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d001      	beq.n	3650 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    364c:	bf00      	nop
    while (!bit::Read(*status_register, kLockStatusMask.position))
    364e:	e7f0      	b.n	3632 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    3650:	2301      	movs	r3, #1
  }
    3652:	4618      	mov	r0, r3
    3654:	3720      	adds	r7, #32
    3656:	46bd      	mov	sp, r7
    3658:	bd80      	pop	{r7, pc}
    365a:	bf00      	nop
    365c:	2007c2e8 	.word	0x2007c2e8
    3660:	00007c2c 	.word	0x00007c2c

00003664 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  /// @returns  Returns true if the PLL's enable and connect status bits in the
  ///           PLL status register are both 1.
  bool WaitForPllConnectionStatus(PllSelect pll) const
    3664:	b580      	push	{r7, lr}
    3666:	b088      	sub	sp, #32
    3668:	af00      	add	r7, sp, #0
    366a:	6078      	str	r0, [r7, #4]
    366c:	460b      	mov	r3, r1
    366e:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    3670:	4b1b      	ldr	r3, [pc, #108]	; (36e0 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    3676:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    3678:	4b19      	ldr	r3, [pc, #100]	; (36e0 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	33a8      	adds	r3, #168	; 0xa8
    };
    367e:	61bb      	str	r3, [r7, #24]
    const bit::Mask kMasks[] = { MainPll::kMode, UsbPll::kMode };
    3680:	4b18      	ldr	r3, [pc, #96]	; (36e4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	613b      	str	r3, [r7, #16]
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    3686:	78fb      	ldrb	r3, [r7, #3]
    3688:	4618      	mov	r0, r3
    368a:	f7ff ff6f 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    368e:	4603      	mov	r3, r0
    3690:	009b      	lsls	r3, r3, #2
    3692:	f107 0220 	add.w	r2, r7, #32
    3696:	4413      	add	r3, r2
    3698:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    369c:	61fb      	str	r3, [r7, #28]
    const bit::Mask kPllModeMask = kMasks[Value(pll)];
    369e:	78fb      	ldrb	r3, [r7, #3]
    36a0:	4618      	mov	r0, r3
    36a2:	f7ff ff63 	bl	356c <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    36a6:	4603      	mov	r3, r0
    36a8:	005b      	lsls	r3, r3, #1
    36aa:	f107 0220 	add.w	r2, r7, #32
    36ae:	4413      	add	r3, r2
    36b0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    36b4:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kPllModeMask.position))
    36b6:	69fb      	ldr	r3, [r7, #28]
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	7b3a      	ldrb	r2, [r7, #12]
    36bc:	4611      	mov	r1, r2
    36be:	4618      	mov	r0, r3
    36c0:	f000 fe6c 	bl	439c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    36c4:	4603      	mov	r3, r0
    36c6:	f083 0301 	eor.w	r3, r3, #1
    36ca:	b2db      	uxtb	r3, r3
    36cc:	2b00      	cmp	r3, #0
    36ce:	d001      	beq.n	36d4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    36d0:	bf00      	nop
    while (!bit::Read(*status_register, kPllModeMask.position))
    36d2:	e7f0      	b.n	36b6 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    36d4:	2301      	movs	r3, #1
  }
    36d6:	4618      	mov	r0, r3
    36d8:	3720      	adds	r7, #32
    36da:	46bd      	mov	sp, r7
    36dc:	bd80      	pop	{r7, pc}
    36de:	bf00      	nop
    36e0:	2007c2e8 	.word	0x2007c2e8
    36e4:	00007c30 	.word	0x00007c30

000036e8 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>:
  /// @note If PLL0 is connected, divider values 0 and 1 are not allowed
  ///       since the the produced clock rate must not exceed the maximum
  ///       allowed CPU clock.
  ///
  /// @param cpu_divider 8-bit divider ranging from 0 - 255.
  void SetCpuClockDivider(uint8_t cpu_divider) const
    36e8:	b590      	push	{r4, r7, lr}
    36ea:	b083      	sub	sp, #12
    36ec:	af00      	add	r7, sp, #0
    36ee:	6078      	str	r0, [r7, #4]
    36f0:	460b      	mov	r3, r1
    36f2:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CCLKCFG = bit::Insert(
    36f4:	4b0c      	ldr	r3, [pc, #48]	; (3728 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    36f6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKCFG, cpu_divider, CpuClock::kDivider);
    36f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKCFG = bit::Insert(
    36fc:	4b0a      	ldr	r3, [pc, #40]	; (3728 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    36fe:	681c      	ldr	r4, [r3, #0]
    3700:	4b0a      	ldr	r3, [pc, #40]	; (372c <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x44>)
    3702:	78f9      	ldrb	r1, [r7, #3]
    3704:	781a      	ldrb	r2, [r3, #0]
    3706:	785b      	ldrb	r3, [r3, #1]
    3708:	021b      	lsls	r3, r3, #8
    370a:	431a      	orrs	r2, r3
    370c:	2300      	movs	r3, #0
    370e:	f362 030f 	bfi	r3, r2, #0, #16
    3712:	461a      	mov	r2, r3
    3714:	f000 fdfc 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3718:	4603      	mov	r3, r0
    371a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    371e:	bf00      	nop
    3720:	370c      	adds	r7, #12
    3722:	46bd      	mov	sp, r7
    3724:	bd90      	pop	{r4, r7, pc}
    3726:	bf00      	nop
    3728:	2007c2e8 	.word	0x2007c2e8
    372c:	00007d80 	.word	0x00007d80

00003730 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  Pointer to the PCLKSEL0 or PCLKSEL1 register based on the
  ///           peripheral's device_id.
  volatile uint32_t * GetPeripheralClockSelectRegister(
    3730:	b480      	push	{r7}
    3732:	b083      	sub	sp, #12
    3734:	af00      	add	r7, sp, #0
    3736:	6078      	str	r0, [r7, #4]
    3738:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    if (peripheral_select.device_id > 15)
    373a:	683b      	ldr	r3, [r7, #0]
    373c:	781b      	ldrb	r3, [r3, #0]
    373e:	2b0f      	cmp	r3, #15
    3740:	d904      	bls.n	374c <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x1c>
    {
      return &(system_controller->PCLKSEL1);
    3742:	4b07      	ldr	r3, [pc, #28]	; (3760 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    374a:	e003      	b.n	3754 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x24>
    }
    return &(system_controller->PCLKSEL0);
    374c:	4b04      	ldr	r3, [pc, #16]	; (3760 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
  }
    3754:	4618      	mov	r0, r3
    3756:	370c      	adds	r7, #12
    3758:	46bd      	mov	sp, r7
    375a:	bc80      	pop	{r7}
    375c:	4770      	bx	lr
    375e:	bf00      	nop
    3760:	2007c2e8 	.word	0x2007c2e8

00003764 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  The bit mask for the 2-bit position of the specified
  ///           peripheral's divider select in the PCLKSEL0 or PCLKSEL1
  ///           register.
  bit::Mask CalculatePeripheralClockDividerMask(
    3764:	b580      	push	{r7, lr}
    3766:	b084      	sub	sp, #16
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
    376c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    constexpr uint8_t kMaxBitWidth = 32;
    376e:	2320      	movs	r3, #32
    3770:	73fb      	strb	r3, [r7, #15]
    const uint8_t kLowBit  = (peripheral_select.device_id * 2) % kMaxBitWidth;
    3772:	683b      	ldr	r3, [r7, #0]
    3774:	781b      	ldrb	r3, [r3, #0]
    3776:	005b      	lsls	r3, r3, #1
    3778:	b2db      	uxtb	r3, r3
    377a:	f003 031e 	and.w	r3, r3, #30
    377e:	73bb      	strb	r3, [r7, #14]
    const uint8_t kHighBit = static_cast<uint8_t>(kLowBit + 1);
    3780:	7bbb      	ldrb	r3, [r7, #14]
    3782:	3301      	adds	r3, #1
    3784:	737b      	strb	r3, [r7, #13]
    return bit::CreateMaskFromRange(kLowBit, kHighBit);
    3786:	7b7a      	ldrb	r2, [r7, #13]
    3788:	7bbb      	ldrb	r3, [r7, #14]
    378a:	4611      	mov	r1, r2
    378c:	4618      	mov	r0, r3
    378e:	f7ff fb05 	bl	2d9c <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>
    3792:	4603      	mov	r3, r0
    3794:	813b      	strh	r3, [r7, #8]
    3796:	2300      	movs	r3, #0
    3798:	7a3a      	ldrb	r2, [r7, #8]
    379a:	f362 0307 	bfi	r3, r2, #0, #8
    379e:	7a7a      	ldrb	r2, [r7, #9]
    37a0:	f362 230f 	bfi	r3, r2, #8, #8
  }
    37a4:	4618      	mov	r0, r3
    37a6:	3710      	adds	r7, #16
    37a8:	46bd      	mov	sp, r7
    37aa:	bd80      	pop	{r7, pc}

000037ac <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
    37ac:	b480      	push	{r7}
    37ae:	b083      	sub	sp, #12
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
  {
    return port_;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	791b      	ldrb	r3, [r3, #4]
  }
    37b8:	4618      	mov	r0, r3
    37ba:	370c      	adds	r7, #12
    37bc:	46bd      	mov	sp, r7
    37be:	bc80      	pop	{r7}
    37c0:	4770      	bx	lr

000037c2 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
    37c2:	b480      	push	{r7}
    37c4:	b083      	sub	sp, #12
    37c6:	af00      	add	r7, sp, #0
    37c8:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	795b      	ldrb	r3, [r3, #5]
  }
    37ce:	4618      	mov	r0, r3
    37d0:	370c      	adds	r7, #12
    37d2:	46bd      	mov	sp, r7
    37d4:	bc80      	pop	{r7}
    37d6:	4770      	bx	lr

000037d8 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:
  constexpr Pin(uint8_t port, uint8_t pin)
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
  {
  }

  void SetPinFunction(uint8_t function) const override
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b085      	sub	sp, #20
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	460b      	mov	r3, r1
    37e2:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
    37e4:	6878      	ldr	r0, [r7, #4]
    37e6:	f000 f88f 	bl	3908 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    37ea:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    37ec:	4b0b      	ldr	r3, [pc, #44]	; (381c <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	68fa      	ldr	r2, [r7, #12]
    37f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
    37f6:	4b09      	ldr	r3, [pc, #36]	; (381c <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    37f8:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	78f9      	ldrb	r1, [r7, #3]
    37fe:	88da      	ldrh	r2, [r3, #6]
    3800:	2300      	movs	r3, #0
    3802:	f362 030f 	bfi	r3, r2, #0, #16
    3806:	461a      	mov	r2, r3
    3808:	f000 fd82 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    380c:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
    380e:	68fb      	ldr	r3, [r7, #12]
    3810:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
    3814:	bf00      	nop
    3816:	3714      	adds	r7, #20
    3818:	46bd      	mov	sp, r7
    381a:	bd90      	pop	{r4, r7, pc}
    381c:	2007c2ec 	.word	0x2007c2ec

00003820 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
constexpr auto Value(Enum enum_type_value)
    3820:	b480      	push	{r7}
    3822:	b083      	sub	sp, #12
    3824:	af00      	add	r7, sp, #0
    3826:	4603      	mov	r3, r0
    3828:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    382a:	79fb      	ldrb	r3, [r7, #7]
}
    382c:	4618      	mov	r0, r3
    382e:	370c      	adds	r7, #12
    3830:	46bd      	mov	sp, r7
    3832:	bc80      	pop	{r7}
    3834:	4770      	bx	lr
    3836:	Address 0x0000000000003836 is out of bounds.


00003838 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    3838:	b5b0      	push	{r4, r5, r7, lr}
    383a:	b084      	sub	sp, #16
    383c:	af00      	add	r7, sp, #0
    383e:	6078      	str	r0, [r7, #4]
    3840:	460b      	mov	r3, r1
    3842:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
    3844:	6878      	ldr	r0, [r7, #4]
    3846:	f000 f85f 	bl	3908 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    384a:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
    384c:	4b0f      	ldr	r3, [pc, #60]	; (388c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	68fa      	ldr	r2, [r7, #12]
    3852:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
    3856:	78fb      	ldrb	r3, [r7, #3]
    3858:	4618      	mov	r0, r3
    385a:	f7ff ffe1 	bl	3820 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
    385e:	4603      	mov	r3, r0
    3860:	461a      	mov	r2, r3
    3862:	4b0b      	ldr	r3, [pc, #44]	; (3890 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
    3864:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
    3866:	4b09      	ldr	r3, [pc, #36]	; (388c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    3868:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	88da      	ldrh	r2, [r3, #6]
    386e:	2300      	movs	r3, #0
    3870:	f362 030f 	bfi	r3, r2, #0, #16
    3874:	461a      	mov	r2, r3
    3876:	4628      	mov	r0, r5
    3878:	f000 fd4a 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    387c:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
    387e:	68fb      	ldr	r3, [r7, #12]
    3880:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
    3884:	bf00      	nop
    3886:	3710      	adds	r7, #16
    3888:	46bd      	mov	sp, r7
    388a:	bdb0      	pop	{r4, r5, r7, pc}
    388c:	2007c2f0 	.word	0x2007c2f0
    3890:	00007e50 	.word	0x00007e50

00003894 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
    3894:	b580      	push	{r7, lr}
    3896:	b082      	sub	sp, #8
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
    38a0:	2354      	movs	r3, #84	; 0x54
    38a2:	4a04      	ldr	r2, [pc, #16]	; (38b4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
    38a4:	4904      	ldr	r1, [pc, #16]	; (38b8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
    38a6:	4805      	ldr	r0, [pc, #20]	; (38bc <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
    38a8:	f7fe fed8 	bl	265c <printf>
  }
    38ac:	bf00      	nop
    38ae:	3708      	adds	r7, #8
    38b0:	46bd      	mov	sp, r7
    38b2:	bd80      	pop	{r7, pc}
    38b4:	000080ec 	.word	0x000080ec
    38b8:	00007e54 	.word	0x00007e54
    38bc:	00007c34 	.word	0x00007c34

000038c0 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    38c0:	b5b0      	push	{r4, r5, r7, lr}
    38c2:	b084      	sub	sp, #16
    38c4:	af00      	add	r7, sp, #0
    38c6:	6078      	str	r0, [r7, #4]
    38c8:	460b      	mov	r3, r1
    38ca:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    38cc:	4b0d      	ldr	r3, [pc, #52]	; (3904 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    38ce:	681b      	ldr	r3, [r3, #0]
    38d0:	687a      	ldr	r2, [r7, #4]
    38d2:	7912      	ldrb	r2, [r2, #4]
    38d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    38dc:	733b      	strb	r3, [r7, #12]
    38de:	2301      	movs	r3, #1
    38e0:	737b      	strb	r3, [r7, #13]
    38e2:	4b08      	ldr	r3, [pc, #32]	; (3904 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    38e4:	681c      	ldr	r4, [r3, #0]
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	791b      	ldrb	r3, [r3, #4]
    38ea:	461d      	mov	r5, r3
    38ec:	78fb      	ldrb	r3, [r7, #3]
    38ee:	68fa      	ldr	r2, [r7, #12]
    38f0:	4619      	mov	r1, r3
    38f2:	f000 fdb9 	bl	4468 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    38f6:	4603      	mov	r3, r0
    38f8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
    38fc:	bf00      	nop
    38fe:	3710      	adds	r7, #16
    3900:	46bd      	mov	sp, r7
    3902:	bdb0      	pop	{r4, r5, r7, pc}
    3904:	2007c2f4 	.word	0x2007c2f4

00003908 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  }
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
    3908:	b480      	push	{r7}
    390a:	b085      	sub	sp, #20
    390c:	af00      	add	r7, sp, #0
    390e:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	795b      	ldrb	r3, [r3, #5]
    3914:	2b0f      	cmp	r3, #15
    3916:	d901      	bls.n	391c <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
    3918:	2301      	movs	r3, #1
    391a:	e000      	b.n	391e <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
    391c:	2300      	movs	r3, #0
    391e:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
    3920:	687b      	ldr	r3, [r7, #4]
    3922:	791b      	ldrb	r3, [r3, #4]
    3924:	005b      	lsls	r3, r3, #1
    3926:	461a      	mov	r2, r3
    3928:	68fb      	ldr	r3, [r7, #12]
    392a:	4413      	add	r3, r2
  }
    392c:	4618      	mov	r0, r3
    392e:	3714      	adds	r7, #20
    3930:	46bd      	mov	sp, r7
    3932:	bc80      	pop	{r7}
    3934:	4770      	bx	lr
    3936:	Address 0x0000000000003936 is out of bounds.


00003938 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
    3938:	b580      	push	{r7, lr}
    393a:	b082      	sub	sp, #8
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
    3940:	460b      	mov	r3, r1
    3942:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
    3944:	4b08      	ldr	r3, [pc, #32]	; (3968 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
    3946:	78f9      	ldrb	r1, [r7, #3]
    3948:	781a      	ldrb	r2, [r3, #0]
    394a:	785b      	ldrb	r3, [r3, #1]
    394c:	021b      	lsls	r3, r3, #8
    394e:	431a      	orrs	r2, r3
    3950:	2300      	movs	r3, #0
    3952:	f362 030f 	bfi	r3, r2, #0, #16
    3956:	461a      	mov	r2, r3
    3958:	6878      	ldr	r0, [r7, #4]
    395a:	f000 f859 	bl	3a10 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    395e:	bf00      	nop
    3960:	3708      	adds	r7, #8
    3962:	46bd      	mov	sp, r7
    3964:	bd80      	pop	{r7, pc}
    3966:	bf00      	nop
    3968:	00007e5c 	.word	0x00007e5c

0000396c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    396c:	b580      	push	{r7, lr}
    396e:	b082      	sub	sp, #8
    3970:	af00      	add	r7, sp, #0
    3972:	6078      	str	r0, [r7, #4]
    3974:	460b      	mov	r3, r1
    3976:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
    3978:	4b08      	ldr	r3, [pc, #32]	; (399c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
    397a:	78f9      	ldrb	r1, [r7, #3]
    397c:	781a      	ldrb	r2, [r3, #0]
    397e:	785b      	ldrb	r3, [r3, #1]
    3980:	021b      	lsls	r3, r3, #8
    3982:	431a      	orrs	r2, r3
    3984:	2300      	movs	r3, #0
    3986:	f362 030f 	bfi	r3, r2, #0, #16
    398a:	461a      	mov	r2, r3
    398c:	6878      	ldr	r0, [r7, #4]
    398e:	f000 f83f 	bl	3a10 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3992:	bf00      	nop
    3994:	3708      	adds	r7, #8
    3996:	46bd      	mov	sp, r7
    3998:	bd80      	pop	{r7, pc}
    399a:	bf00      	nop
    399c:	00007e60 	.word	0x00007e60

000039a0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
    39a0:	b580      	push	{r7, lr}
    39a2:	b082      	sub	sp, #8
    39a4:	af00      	add	r7, sp, #0
    39a6:	6078      	str	r0, [r7, #4]
    39a8:	460b      	mov	r3, r1
    39aa:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
    39ac:	78fb      	ldrb	r3, [r7, #3]
    39ae:	f083 0301 	eor.w	r3, r3, #1
    39b2:	b2db      	uxtb	r3, r3
    39b4:	4619      	mov	r1, r3
    39b6:	4b08      	ldr	r3, [pc, #32]	; (39d8 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
    39b8:	781a      	ldrb	r2, [r3, #0]
    39ba:	785b      	ldrb	r3, [r3, #1]
    39bc:	021b      	lsls	r3, r3, #8
    39be:	431a      	orrs	r2, r3
    39c0:	2300      	movs	r3, #0
    39c2:	f362 030f 	bfi	r3, r2, #0, #16
    39c6:	461a      	mov	r2, r3
    39c8:	6878      	ldr	r0, [r7, #4]
    39ca:	f000 f821 	bl	3a10 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    39ce:	bf00      	nop
    39d0:	3708      	adds	r7, #8
    39d2:	46bd      	mov	sp, r7
    39d4:	bd80      	pop	{r7, pc}
    39d6:	bf00      	nop
    39d8:	00007e64 	.word	0x00007e64

000039dc <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    39dc:	b580      	push	{r7, lr}
    39de:	b082      	sub	sp, #8
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	460b      	mov	r3, r1
    39e6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
    39e8:	78f9      	ldrb	r1, [r7, #3]
    39ea:	4b08      	ldr	r3, [pc, #32]	; (3a0c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
    39ec:	781a      	ldrb	r2, [r3, #0]
    39ee:	785b      	ldrb	r3, [r3, #1]
    39f0:	021b      	lsls	r3, r3, #8
    39f2:	431a      	orrs	r2, r3
    39f4:	2300      	movs	r3, #0
    39f6:	f362 030f 	bfi	r3, r2, #0, #16
    39fa:	461a      	mov	r2, r3
    39fc:	6878      	ldr	r0, [r7, #4]
    39fe:	f000 f807 	bl	3a10 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3a02:	bf00      	nop
    3a04:	3708      	adds	r7, #8
    3a06:	46bd      	mov	sp, r7
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	bf00      	nop
    3a0c:	00007e68 	.word	0x00007e68

00003a10 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
    3a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a12:	b087      	sub	sp, #28
    3a14:	af00      	add	r7, sp, #0
    3a16:	60f8      	str	r0, [r7, #12]
    3a18:	460b      	mov	r3, r1
    3a1a:	80ba      	strh	r2, [r7, #4]
    3a1c:	72fb      	strb	r3, [r7, #11]
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
    3a22:	4b19      	ldr	r3, [pc, #100]	; (3a88 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    3a24:	681c      	ldr	r4, [r3, #0]
    3a26:	693b      	ldr	r3, [r7, #16]
    3a28:	4618      	mov	r0, r3
    3a2a:	f7ff febf 	bl	37ac <sjsu::Pin::GetPort() const>
    3a2e:	4603      	mov	r3, r0
    3a30:	461d      	mov	r5, r3
    3a32:	693b      	ldr	r3, [r7, #16]
    3a34:	4618      	mov	r0, r3
    3a36:	f7ff fec4 	bl	37c2 <sjsu::Pin::GetPin() const>
    3a3a:	4603      	mov	r3, r0
    3a3c:	461a      	mov	r2, r3
    3a3e:	016b      	lsls	r3, r5, #5
    3a40:	4413      	add	r3, r2
    3a42:	009b      	lsls	r3, r3, #2
    3a44:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	7af9      	ldrb	r1, [r7, #11]
    3a4a:	687a      	ldr	r2, [r7, #4]
    3a4c:	4618      	mov	r0, r3
    3a4e:	f000 fc5f 	bl	4310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3a52:	4605      	mov	r5, r0
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
    3a58:	4b0b      	ldr	r3, [pc, #44]	; (3a88 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    3a5a:	681c      	ldr	r4, [r3, #0]
    3a5c:	697b      	ldr	r3, [r7, #20]
    3a5e:	4618      	mov	r0, r3
    3a60:	f7ff fea4 	bl	37ac <sjsu::Pin::GetPort() const>
    3a64:	4603      	mov	r3, r0
    3a66:	461e      	mov	r6, r3
    3a68:	697b      	ldr	r3, [r7, #20]
    3a6a:	4618      	mov	r0, r3
    3a6c:	f7ff fea9 	bl	37c2 <sjsu::Pin::GetPin() const>
    3a70:	4603      	mov	r3, r0
    3a72:	461a      	mov	r2, r3
    3a74:	0173      	lsls	r3, r6, #5
    3a76:	4413      	add	r3, r2
    3a78:	009b      	lsls	r3, r3, #2
    3a7a:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3a7c:	601d      	str	r5, [r3, #0]
  }
    3a7e:	bf00      	nop
    3a80:	371c      	adds	r7, #28
    3a82:	46bd      	mov	sp, r7
    3a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a86:	bf00      	nop
    3a88:	2007c144 	.word	0x2007c144

00003a8c <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b088      	sub	sp, #32
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	6039      	str	r1, [r7, #0]
  UartCalibration_t result;
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	2200      	movs	r2, #0
    3a9a:	601a      	str	r2, [r3, #0]
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	2200      	movs	r2, #0
    3aa0:	605a      	str	r2, [r3, #4]
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	2201      	movs	r2, #1
    3aa6:	609a      	str	r2, [r3, #8]
  bool finished = false;
    3aa8:	2300      	movs	r3, #0
    3aaa:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3aac:	2300      	movs	r3, #0
    3aae:	61bb      	str	r3, [r7, #24]
    3ab0:	69bb      	ldr	r3, [r7, #24]
    3ab2:	2b0e      	cmp	r3, #14
    3ab4:	dc49      	bgt.n	3b4a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
    3ab6:	7ffb      	ldrb	r3, [r7, #31]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d146      	bne.n	3b4a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3abc:	69bb      	ldr	r3, [r7, #24]
    3abe:	3301      	adds	r3, #1
    3ac0:	617b      	str	r3, [r7, #20]
    3ac2:	697b      	ldr	r3, [r7, #20]
    3ac4:	2b0e      	cmp	r3, #14
    3ac6:	dc3c      	bgt.n	3b42 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    3ac8:	7ffb      	ldrb	r3, [r7, #31]
    3aca:	2b00      	cmp	r3, #0
    3acc:	d139      	bne.n	3b42 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    {
      float divf         = static_cast<float>(div);
    3ace:	69b8      	ldr	r0, [r7, #24]
    3ad0:	f001 f864 	bl	4b9c <__aeabi_i2f>
    3ad4:	4603      	mov	r3, r0
    3ad6:	613b      	str	r3, [r7, #16]
      float mulf         = static_cast<float>(mul);
    3ad8:	6978      	ldr	r0, [r7, #20]
    3ada:	f001 f85f 	bl	4b9c <__aeabi_i2f>
    3ade:	4603      	mov	r3, r0
    3ae0:	60fb      	str	r3, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    3ae2:	68f9      	ldr	r1, [r7, #12]
    3ae4:	6938      	ldr	r0, [r7, #16]
    3ae6:	f001 f961 	bl	4dac <__aeabi_fdiv>
    3aea:	4603      	mov	r3, r0
    3aec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3af0:	4618      	mov	r0, r3
    3af2:	f000 ff9f 	bl	4a34 <__addsf3>
    3af6:	4603      	mov	r3, r0
    3af8:	60bb      	str	r3, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    3afa:	4916      	ldr	r1, [pc, #88]	; (3b54 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    3afc:	68b8      	ldr	r0, [r7, #8]
    3afe:	f000 ff99 	bl	4a34 <__addsf3>
    3b02:	4603      	mov	r3, r0
    3b04:	4619      	mov	r1, r3
    3b06:	6838      	ldr	r0, [r7, #0]
    3b08:	f001 fa44 	bl	4f94 <__aeabi_fcmple>
    3b0c:	4603      	mov	r3, r0
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d013      	beq.n	3b3a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
          decimal >= test_decimal - kThreshold)
    3b12:	4910      	ldr	r1, [pc, #64]	; (3b54 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    3b14:	68b8      	ldr	r0, [r7, #8]
    3b16:	f000 ff8b 	bl	4a30 <__aeabi_fsub>
    3b1a:	4603      	mov	r3, r0
      if (decimal <= test_decimal + kThreshold &&
    3b1c:	4619      	mov	r1, r3
    3b1e:	6838      	ldr	r0, [r7, #0]
    3b20:	f001 fa42 	bl	4fa8 <__aeabi_fcmpge>
    3b24:	4603      	mov	r3, r0
    3b26:	2b00      	cmp	r3, #0
    3b28:	d007      	beq.n	3b3a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
      {
        result.divide_add = div;
    3b2a:	69ba      	ldr	r2, [r7, #24]
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3b30:	697a      	ldr	r2, [r7, #20]
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	609a      	str	r2, [r3, #8]
        finished          = true;
    3b36:	2301      	movs	r3, #1
    3b38:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3b3a:	697b      	ldr	r3, [r7, #20]
    3b3c:	3301      	adds	r3, #1
    3b3e:	617b      	str	r3, [r7, #20]
    3b40:	e7bf      	b.n	3ac2 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x36>
  for (int div = 0; div < 15 && !finished; div++)
    3b42:	69bb      	ldr	r3, [r7, #24]
    3b44:	3301      	adds	r3, #1
    3b46:	61bb      	str	r3, [r7, #24]
    3b48:	e7b2      	b.n	3ab0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x24>
      }
    }
  }
  return result;
    3b4a:	bf00      	nop
}
    3b4c:	6878      	ldr	r0, [r7, #4]
    3b4e:	3720      	adds	r7, #32
    3b50:	46bd      	mov	sp, r7
    3b52:	bd80      	pop	{r7, pc}
    3b54:	3d4ccccd 	.word	0x3d4ccccd

00003b58 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3b58:	b580      	push	{r7, lr}
    3b5a:	b086      	sub	sp, #24
    3b5c:	af00      	add	r7, sp, #0
    3b5e:	60f8      	str	r0, [r7, #12]
    3b60:	60b9      	str	r1, [r7, #8]
    3b62:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3b64:	6878      	ldr	r0, [r7, #4]
    3b66:	f001 f815 	bl	4b94 <__aeabi_ui2f>
    3b6a:	4603      	mov	r3, r0
    3b6c:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3b6e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3b72:	68f8      	ldr	r0, [r7, #12]
    3b74:	f001 f866 	bl	4c44 <__aeabi_fmul>
    3b78:	4603      	mov	r3, r0
    3b7a:	68b9      	ldr	r1, [r7, #8]
    3b7c:	4618      	mov	r0, r3
    3b7e:	f001 f861 	bl	4c44 <__aeabi_fmul>
    3b82:	4603      	mov	r3, r0
    3b84:	4619      	mov	r1, r3
    3b86:	6978      	ldr	r0, [r7, #20]
    3b88:	f001 f910 	bl	4dac <__aeabi_fdiv>
    3b8c:	4603      	mov	r3, r0
}
    3b8e:	4618      	mov	r0, r3
    3b90:	3718      	adds	r7, #24
    3b92:	46bd      	mov	sp, r7
    3b94:	bd80      	pop	{r7, pc}

00003b96 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    3b96:	b580      	push	{r7, lr}
    3b98:	b086      	sub	sp, #24
    3b9a:	af00      	add	r7, sp, #0
    3b9c:	60f8      	str	r0, [r7, #12]
    3b9e:	60b9      	str	r1, [r7, #8]
    3ba0:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3ba2:	6878      	ldr	r0, [r7, #4]
    3ba4:	f000 fff6 	bl	4b94 <__aeabi_ui2f>
    3ba8:	4603      	mov	r3, r0
    3baa:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    3bac:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3bb0:	68f8      	ldr	r0, [r7, #12]
    3bb2:	f001 f847 	bl	4c44 <__aeabi_fmul>
    3bb6:	4603      	mov	r3, r0
    3bb8:	68b9      	ldr	r1, [r7, #8]
    3bba:	4618      	mov	r0, r3
    3bbc:	f001 f842 	bl	4c44 <__aeabi_fmul>
    3bc0:	4603      	mov	r3, r0
    3bc2:	4619      	mov	r1, r3
    3bc4:	6978      	ldr	r0, [r7, #20]
    3bc6:	f001 f8f1 	bl	4dac <__aeabi_fdiv>
    3bca:	4603      	mov	r3, r0
}
    3bcc:	4618      	mov	r0, r3
    3bce:	3718      	adds	r7, #24
    3bd0:	46bd      	mov	sp, r7
    3bd2:	bd80      	pop	{r7, pc}

00003bd4 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b082      	sub	sp, #8
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    3bdc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3be0:	6878      	ldr	r0, [r7, #4]
    3be2:	f000 ff27 	bl	4a34 <__addsf3>
    3be6:	4603      	mov	r3, r0
    3be8:	4618      	mov	r0, r3
    3bea:	f001 f9f1 	bl	4fd0 <__aeabi_f2iz>
    3bee:	4603      	mov	r3, r0
    3bf0:	4618      	mov	r0, r3
    3bf2:	f000 ffd3 	bl	4b9c <__aeabi_i2f>
    3bf6:	4603      	mov	r3, r0
}
    3bf8:	4618      	mov	r0, r3
    3bfa:	3708      	adds	r7, #8
    3bfc:	46bd      	mov	sp, r7
    3bfe:	bd80      	pop	{r7, pc}

00003c00 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b086      	sub	sp, #24
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
  bool result         = false;
    3c08:	2300      	movs	r3, #0
    3c0a:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    3c0c:	6878      	ldr	r0, [r7, #4]
    3c0e:	f7ff ffe1 	bl	3bd4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3c12:	6138      	str	r0, [r7, #16]
  float error         = value - rounded_value;
    3c14:	6939      	ldr	r1, [r7, #16]
    3c16:	6878      	ldr	r0, [r7, #4]
    3c18:	f000 ff0a 	bl	4a30 <__aeabi_fsub>
    3c1c:	4603      	mov	r3, r0
    3c1e:	60fb      	str	r3, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    3c20:	490a      	ldr	r1, [pc, #40]	; (3c4c <sjsu::lpc40xx::uart::IsDecmial(float)+0x4c>)
    3c22:	68f8      	ldr	r0, [r7, #12]
    3c24:	f001 f9c0 	bl	4fa8 <__aeabi_fcmpge>
    3c28:	4603      	mov	r3, r0
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d008      	beq.n	3c40 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
    3c2e:	4908      	ldr	r1, [pc, #32]	; (3c50 <sjsu::lpc40xx::uart::IsDecmial(float)+0x50>)
    3c30:	68f8      	ldr	r0, [r7, #12]
    3c32:	f001 f9af 	bl	4f94 <__aeabi_fcmple>
    3c36:	4603      	mov	r3, r0
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d001      	beq.n	3c40 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
  {
    result = true;
    3c3c:	2301      	movs	r3, #1
    3c3e:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    3c40:	7dfb      	ldrb	r3, [r7, #23]
}
    3c42:	4618      	mov	r0, r3
    3c44:	3718      	adds	r7, #24
    3c46:	46bd      	mov	sp, r7
    3c48:	bd80      	pop	{r7, pc}
    3c4a:	bf00      	nop
    3c4c:	bd4ccccd 	.word	0xbd4ccccd
    3c50:	3d4ccccd 	.word	0x3d4ccccd

00003c54 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    3c54:	b590      	push	{r4, r7, lr}
    3c56:	b091      	sub	sp, #68	; 0x44
    3c58:	af00      	add	r7, sp, #0
    3c5a:	61f8      	str	r0, [r7, #28]
    3c5c:	61b9      	str	r1, [r7, #24]
    3c5e:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    3c60:	f107 0314 	add.w	r3, r7, #20
    3c64:	4618      	mov	r0, r3
    3c66:	f7ff f81a 	bl	2c9e <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3c6a:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    3c6c:	2300      	movs	r3, #0
    3c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    3c70:	69fb      	ldr	r3, [r7, #28]
    3c72:	2200      	movs	r2, #0
    3c74:	601a      	str	r2, [r3, #0]
    3c76:	69fb      	ldr	r3, [r7, #28]
    3c78:	2200      	movs	r2, #0
    3c7a:	605a      	str	r2, [r3, #4]
    3c7c:	69fb      	ldr	r3, [r7, #28]
    3c7e:	2201      	movs	r2, #1
    3c80:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    3c82:	69b8      	ldr	r0, [r7, #24]
    3c84:	f000 ff86 	bl	4b94 <__aeabi_ui2f>
    3c88:	4603      	mov	r3, r0
    3c8a:	627b      	str	r3, [r7, #36]	; 0x24
  float divide_estimate = 0;
    3c8c:	f04f 0300 	mov.w	r3, #0
    3c90:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    3c92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    3c96:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    3c98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3c9c:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    3c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    3ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ca6:	2b04      	cmp	r3, #4
    3ca8:	f000 80a0 	beq.w	3dec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x198>
  {
    switch (state)
    3cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3cae:	2b03      	cmp	r3, #3
    3cb0:	f200 809a 	bhi.w	3de8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x194>
    3cb4:	a201      	add	r2, pc, #4	; (adr r2, 3cbc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x68>)
    3cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3cba:	bf00      	nop
    3cbc:	00003ccd 	.word	0x00003ccd
    3cc0:	00003d1b 	.word	0x00003d1b
    3cc4:	00003d63 	.word	0x00003d63
    3cc8:	00003dc1 	.word	0x00003dc1
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    3ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3cce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3cd4:	f7ff ff40 	bl	3b58 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3cd8:	63b8      	str	r0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    3cda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3cde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3ce0:	f001 f94e 	bl	4f80 <__aeabi_fcmplt>
    3ce4:	4603      	mov	r3, r0
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d005      	beq.n	3cf6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xa2>
        {
          uart_calibration.divide_latch = 0;
    3cea:	69fb      	ldr	r3, [r7, #28]
    3cec:	2200      	movs	r2, #0
    3cee:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    3cf0:	2304      	movs	r3, #4
    3cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    3cf4:	e079      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        else if (IsDecmial(divide_estimate))
    3cf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cf8:	f7ff ff82 	bl	3c00 <sjsu::lpc40xx::uart::IsDecmial(float)>
    3cfc:	4603      	mov	r3, r0
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d008      	beq.n	3d14 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xc0>
              static_cast<uint32_t>(divide_estimate);
    3d02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3d04:	f001 f98a 	bl	501c <__aeabi_f2uiz>
    3d08:	4602      	mov	r2, r0
          uart_calibration.divide_latch =
    3d0a:	69fb      	ldr	r3, [r7, #28]
    3d0c:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    3d0e:	2304      	movs	r3, #4
    3d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3d12:	e06a      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kCalculateDivideLatchWithDecimal;
    3d14:	2301      	movs	r3, #1
    3d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3d18:	e067      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    3d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3d20:	f7ff ff1a 	bl	3b58 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3d24:	4603      	mov	r3, r0
    3d26:	4618      	mov	r0, r3
    3d28:	f7ff ff54 	bl	3bd4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3d2c:	63b8      	str	r0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    3d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3d34:	f7ff ff2f 	bl	3b96 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    3d38:	6378      	str	r0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    3d3a:	492f      	ldr	r1, [pc, #188]	; (3df8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a4>)
    3d3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3d3e:	f001 f933 	bl	4fa8 <__aeabi_fcmpge>
    3d42:	4603      	mov	r3, r0
    3d44:	2b00      	cmp	r3, #0
    3d46:	d009      	beq.n	3d5c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
    3d48:	492c      	ldr	r1, [pc, #176]	; (3dfc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a8>)
    3d4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3d4c:	f001 f922 	bl	4f94 <__aeabi_fcmple>
    3d50:	4603      	mov	r3, r0
    3d52:	2b00      	cmp	r3, #0
    3d54:	d002      	beq.n	3d5c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
        {
          state = States::kGenerateFractionFromDecimal;
    3d56:	2303      	movs	r3, #3
    3d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    3d5a:	e046      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kDecimalFailedGenerateNewDecimal;
    3d5c:	2302      	movs	r3, #2
    3d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3d60:	e043      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    3d62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3d68:	f000 fe64 	bl	4a34 <__addsf3>
    3d6c:	4603      	mov	r3, r0
    3d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (div > 15)
    3d70:	4923      	ldr	r1, [pc, #140]	; (3e00 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3d74:	f001 f922 	bl	4fbc <__aeabi_fcmpgt>
    3d78:	4603      	mov	r3, r0
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d002      	beq.n	3d84 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kDone;
    3d7e:	2304      	movs	r3, #4
    3d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    3d82:	e032      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        }
        else if (mul > 15)
    3d84:	491e      	ldr	r1, [pc, #120]	; (3e00 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3d88:	f001 f918 	bl	4fbc <__aeabi_fcmpgt>
    3d8c:	4603      	mov	r3, r0
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d00d      	beq.n	3dae <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15a>
        {
          div += 1;
    3d92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3d98:	f000 fe4c 	bl	4a34 <__addsf3>
    3d9c:	4603      	mov	r3, r0
    3d9e:	633b      	str	r3, [r7, #48]	; 0x30
          mul = div + 1;
    3da0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3da6:	f000 fe45 	bl	4a34 <__addsf3>
    3daa:	4603      	mov	r3, r0
    3dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    3dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3db2:	f000 fffb 	bl	4dac <__aeabi_fdiv>
    3db6:	4603      	mov	r3, r0
    3db8:	637b      	str	r3, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    3dba:	2301      	movs	r3, #1
    3dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3dbe:	e014      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    3dc0:	69fc      	ldr	r4, [r7, #28]
    3dc2:	463b      	mov	r3, r7
    3dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3dc6:	4618      	mov	r0, r3
    3dc8:	f7ff fe60 	bl	3a8c <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    3dcc:	463b      	mov	r3, r7
    3dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    3dd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3dd8:	f001 f920 	bl	501c <__aeabi_f2uiz>
    3ddc:	4602      	mov	r2, r0
    3dde:	69fb      	ldr	r3, [r7, #28]
    3de0:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    3de2:	2304      	movs	r3, #4
    3de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3de6:	e000      	b.n	3dea <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDone:
      default: break;
    3de8:	bf00      	nop
  while (state != States::kDone)
    3dea:	e75b      	b.n	3ca4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x50>
    }
  }
  return uart_calibration;
    3dec:	bf00      	nop
}
    3dee:	69f8      	ldr	r0, [r7, #28]
    3df0:	3744      	adds	r7, #68	; 0x44
    3df2:	46bd      	mov	sp, r7
    3df4:	bd90      	pop	{r4, r7, pc}
    3df6:	bf00      	nop
    3df8:	3f8ccccd 	.word	0x3f8ccccd
    3dfc:	3ff33333 	.word	0x3ff33333
    3e00:	41700000 	.word	0x41700000

00003e04 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
  {
  }

  Status Initialize(uint32_t baud_rate) const override
    3e04:	b580      	push	{r7, lr}
    3e06:	b084      	sub	sp, #16
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    3e0e:	2307      	movs	r3, #7
    3e10:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    3e12:	687b      	ldr	r3, [r7, #4]
    3e14:	6898      	ldr	r0, [r3, #8]
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	689b      	ldr	r3, [r3, #8]
    3e1a:	681b      	ldr	r3, [r3, #0]
    3e1c:	3314      	adds	r3, #20
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	6852      	ldr	r2, [r2, #4]
    3e24:	3204      	adds	r2, #4
    3e26:	4611      	mov	r1, r2
    3e28:	4798      	blx	r3

    SetBaudRate(baud_rate);
    3e2a:	6839      	ldr	r1, [r7, #0]
    3e2c:	6878      	ldr	r0, [r7, #4]
    3e2e:	f000 f849 	bl	3ec4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	685b      	ldr	r3, [r3, #4]
    3e36:	68d8      	ldr	r0, [r3, #12]
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	685b      	ldr	r3, [r3, #4]
    3e3c:	68db      	ldr	r3, [r3, #12]
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	681b      	ldr	r3, [r3, #0]
    3e42:	687a      	ldr	r2, [r7, #4]
    3e44:	6852      	ldr	r2, [r2, #4]
    3e46:	7c12      	ldrb	r2, [r2, #16]
    3e48:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    3e4c:	b2d2      	uxtb	r2, r2
    3e4e:	4611      	mov	r1, r2
    3e50:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	685b      	ldr	r3, [r3, #4]
    3e56:	6898      	ldr	r0, [r3, #8]
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	685b      	ldr	r3, [r3, #4]
    3e5c:	689b      	ldr	r3, [r3, #8]
    3e5e:	681b      	ldr	r3, [r3, #0]
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	687a      	ldr	r2, [r7, #4]
    3e64:	6852      	ldr	r2, [r2, #4]
    3e66:	7c12      	ldrb	r2, [r2, #16]
    3e68:	f3c2 0202 	ubfx	r2, r2, #0, #3
    3e6c:	b2d2      	uxtb	r2, r2
    3e6e:	4611      	mov	r1, r2
    3e70:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	685b      	ldr	r3, [r3, #4]
    3e76:	68da      	ldr	r2, [r3, #12]
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	685b      	ldr	r3, [r3, #4]
    3e7c:	68db      	ldr	r3, [r3, #12]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	3304      	adds	r3, #4
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	2102      	movs	r1, #2
    3e86:	4610      	mov	r0, r2
    3e88:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	685b      	ldr	r3, [r3, #4]
    3e8e:	689a      	ldr	r2, [r3, #8]
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	685b      	ldr	r3, [r3, #4]
    3e94:	689b      	ldr	r3, [r3, #8]
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	3304      	adds	r3, #4
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	2102      	movs	r1, #2
    3e9e:	4610      	mov	r0, r2
    3ea0:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	685b      	ldr	r3, [r3, #4]
    3ea6:	681b      	ldr	r3, [r3, #0]
    3ea8:	7a1b      	ldrb	r3, [r3, #8]
    3eaa:	b2da      	uxtb	r2, r3
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	685b      	ldr	r3, [r3, #4]
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	f042 0207 	orr.w	r2, r2, #7
    3eb6:	b2d2      	uxtb	r2, r2
    3eb8:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    3eba:	2300      	movs	r3, #0
  }
    3ebc:	4618      	mov	r0, r3
    3ebe:	3710      	adds	r7, #16
    3ec0:	46bd      	mov	sp, r7
    3ec2:	bd80      	pop	{r7, pc}

00003ec4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b086      	sub	sp, #24
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
    3ecc:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	689a      	ldr	r2, [r3, #8]
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	685b      	ldr	r3, [r3, #4]
    3ed6:	3304      	adds	r3, #4
    3ed8:	4619      	mov	r1, r3
    3eda:	4610      	mov	r0, r2
    3edc:	f7fe fd98 	bl	2a10 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    3ee0:	4602      	mov	r2, r0
    3ee2:	f107 0308 	add.w	r3, r7, #8
    3ee6:	6839      	ldr	r1, [r7, #0]
    3ee8:	4618      	mov	r0, r3
    3eea:	f7ff feb3 	bl	3c54 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    3eee:	2380      	movs	r3, #128	; 0x80
    3ef0:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    3ef2:	68bb      	ldr	r3, [r7, #8]
    3ef4:	0a1b      	lsrs	r3, r3, #8
    3ef6:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    3ef8:	68bb      	ldr	r3, [r7, #8]
    3efa:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3efc:	693b      	ldr	r3, [r7, #16]
    3efe:	b2db      	uxtb	r3, r3
    3f00:	011b      	lsls	r3, r3, #4
    3f02:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    3f04:	68fb      	ldr	r3, [r7, #12]
    3f06:	b2db      	uxtb	r3, r3
    3f08:	f003 030f 	and.w	r3, r3, #15
    3f0c:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3f0e:	4313      	orrs	r3, r2
    3f10:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	2280      	movs	r2, #128	; 0x80
    3f1a:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	685b      	ldr	r3, [r3, #4]
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	7dba      	ldrb	r2, [r7, #22]
    3f24:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	685b      	ldr	r3, [r3, #4]
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	7d7a      	ldrb	r2, [r7, #21]
    3f2e:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	685b      	ldr	r3, [r3, #4]
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	7d3a      	ldrb	r2, [r7, #20]
    3f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	685b      	ldr	r3, [r3, #4]
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	2203      	movs	r2, #3
    3f44:	731a      	strb	r2, [r3, #12]
    return true;
    3f46:	2301      	movs	r3, #1
  }
    3f48:	4618      	mov	r0, r3
    3f4a:	3718      	adds	r7, #24
    3f4c:	46bd      	mov	sp, r7
    3f4e:	bd80      	pop	{r7, pc}

00003f50 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    3f50:	b580      	push	{r7, lr}
    3f52:	b086      	sub	sp, #24
    3f54:	af00      	add	r7, sp, #0
    3f56:	60f8      	str	r0, [r7, #12]
    3f58:	60b9      	str	r1, [r7, #8]
    3f5a:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    3f5c:	2300      	movs	r3, #0
    3f5e:	617b      	str	r3, [r7, #20]
    3f60:	697a      	ldr	r2, [r7, #20]
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	429a      	cmp	r2, r3
    3f66:	d216      	bcs.n	3f96 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    3f68:	68ba      	ldr	r2, [r7, #8]
    3f6a:	697b      	ldr	r3, [r7, #20]
    3f6c:	441a      	add	r2, r3
    3f6e:	68fb      	ldr	r3, [r7, #12]
    3f70:	685b      	ldr	r3, [r3, #4]
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	7812      	ldrb	r2, [r2, #0]
    3f76:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    3f78:	68f8      	ldr	r0, [r7, #12]
    3f7a:	f000 f8b5 	bl	40e8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    3f7e:	4603      	mov	r3, r0
    3f80:	f083 0301 	eor.w	r3, r3, #1
    3f84:	b2db      	uxtb	r3, r3
    3f86:	2b00      	cmp	r3, #0
    3f88:	d001      	beq.n	3f8e <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    3f8a:	bf00      	nop
      while (!TransmissionComplete())
    3f8c:	e7f4      	b.n	3f78 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    3f8e:	697b      	ldr	r3, [r7, #20]
    3f90:	3301      	adds	r3, #1
    3f92:	617b      	str	r3, [r7, #20]
    3f94:	e7e4      	b.n	3f60 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    3f96:	bf00      	nop
    3f98:	3718      	adds	r7, #24
    3f9a:	46bd      	mov	sp, r7
    3f9c:	bd80      	pop	{r7, pc}

00003f9e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3f9e:	b590      	push	{r4, r7, lr}
    3fa0:	b083      	sub	sp, #12
    3fa2:	af00      	add	r7, sp, #0
    3fa4:	6078      	str	r0, [r7, #4]
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    3faa:	4618      	mov	r0, r3
    3fac:	f000 f88a 	bl	40c4 <sjsu::lpc40xx::Uart::HasData() const>
    3fb0:	4603      	mov	r3, r0
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d010      	beq.n	3fd8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3fba:	685b      	ldr	r3, [r3, #4]
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3fc6:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3fcc:	6813      	ldr	r3, [r2, #0]
    3fce:	1c58      	adds	r0, r3, #1
    3fd0:	6010      	str	r0, [r2, #0]
    3fd2:	440b      	add	r3, r1
    3fd4:	4622      	mov	r2, r4
    3fd6:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    3fdc:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    3fe2:	429a      	cmp	r2, r3
    3fe4:	d301      	bcc.n	3fea <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    3fe6:	2301      	movs	r3, #1
    3fe8:	e000      	b.n	3fec <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    3fea:	2300      	movs	r3, #0
    });
    3fec:	4618      	mov	r0, r3
    3fee:	370c      	adds	r7, #12
    3ff0:	46bd      	mov	sp, r7
    3ff2:	bd90      	pop	{r4, r7, pc}

00003ff4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    3ff4:	b590      	push	{r4, r7, lr}
    3ff6:	b09d      	sub	sp, #116	; 0x74
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6178      	str	r0, [r7, #20]
    3ffc:	6139      	str	r1, [r7, #16]
    3ffe:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    4000:	2300      	movs	r3, #0
    4002:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4004:	697b      	ldr	r3, [r7, #20]
    4006:	643b      	str	r3, [r7, #64]	; 0x40
    4008:	f107 0310 	add.w	r3, r7, #16
    400c:	647b      	str	r3, [r7, #68]	; 0x44
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	64bb      	str	r3, [r7, #72]	; 0x48
    4012:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    4016:	64fb      	str	r3, [r7, #76]	; 0x4c
    4018:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    401c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    4020:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    4024:	f107 0340 	add.w	r3, r7, #64	; 0x40
    4028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    402a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    402e:	f107 0360 	add.w	r3, r7, #96	; 0x60
    4032:	4618      	mov	r0, r3
    4034:	f7fc fe47 	bl	cc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4038:	f107 0260 	add.w	r2, r7, #96	; 0x60
    403c:	f107 0320 	add.w	r3, r7, #32
    4040:	4611      	mov	r1, r2
    4042:	4618      	mov	r0, r3
    4044:	f7fc fe53 	bl	cee <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4048:	4603      	mov	r3, r0
    404a:	2b00      	cmp	r3, #0
    404c:	d004      	beq.n	4058 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    404e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    4052:	e9c7 3406 	strd	r3, r4, [r7, #24]
    4056:	e011      	b.n	407c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    4058:	4b19      	ldr	r3, [pc, #100]	; (40c0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    4060:	4610      	mov	r0, r2
    4062:	4798      	blx	r3
    4064:	463b      	mov	r3, r7
    4066:	f107 0220 	add.w	r2, r7, #32
    406a:	f107 0158 	add.w	r1, r7, #88	; 0x58
    406e:	4618      	mov	r0, r3
    4070:	f7fc fe62 	bl	d38 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4074:	e9d7 3400 	ldrd	r3, r4, [r7]
    4078:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    407c:	2301      	movs	r3, #1
    407e:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    4080:	4b0f      	ldr	r3, [pc, #60]	; (40c0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    4082:	681b      	ldr	r3, [r3, #0]
    4084:	f107 0250 	add.w	r2, r7, #80	; 0x50
    4088:	4610      	mov	r0, r2
    408a:	4798      	blx	r3
    408c:	f107 0218 	add.w	r2, r7, #24
    4090:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4094:	4611      	mov	r1, r2
    4096:	4618      	mov	r0, r3
    4098:	f7fc fe79 	bl	d8e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    409c:	4603      	mov	r3, r0
    409e:	2b00      	cmp	r3, #0
    40a0:	d009      	beq.n	40b6 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    40a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    40a6:	4618      	mov	r0, r3
    40a8:	f7ff ff79 	bl	3f9e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    40ac:	4603      	mov	r3, r0
    40ae:	2b00      	cmp	r3, #0
    40b0:	d0e6      	beq.n	4080 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    40b2:	2300      	movs	r3, #0
    40b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    40b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    40b8:	4618      	mov	r0, r3
    40ba:	3774      	adds	r7, #116	; 0x74
    40bc:	46bd      	mov	sp, r7
    40be:	bd90      	pop	{r4, r7, pc}
    40c0:	2007c000 	.word	0x2007c000

000040c4 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	685b      	ldr	r3, [r3, #4]
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	7d1b      	ldrb	r3, [r3, #20]
    40d4:	b2db      	uxtb	r3, r3
    40d6:	2100      	movs	r1, #0
    40d8:	4618      	mov	r0, r3
    40da:	f000 f9d8 	bl	448e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    40de:	4603      	mov	r3, r0
  }
    40e0:	4618      	mov	r0, r3
    40e2:	3708      	adds	r7, #8
    40e4:	46bd      	mov	sp, r7
    40e6:	bd80      	pop	{r7, pc}

000040e8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	685b      	ldr	r3, [r3, #4]
    40f4:	681b      	ldr	r3, [r3, #0]
    40f6:	7d1b      	ldrb	r3, [r3, #20]
    40f8:	b2db      	uxtb	r3, r3
    40fa:	2105      	movs	r1, #5
    40fc:	4618      	mov	r0, r3
    40fe:	f000 f9c6 	bl	448e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    4102:	4603      	mov	r3, r0
  }
    4104:	4618      	mov	r0, r3
    4106:	3708      	adds	r7, #8
    4108:	46bd      	mov	sp, r7
    410a:	bd80      	pop	{r7, pc}

0000410c <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc17xxStdOut(const char * data, size_t length)
{
    410c:	b580      	push	{r7, lr}
    410e:	b082      	sub	sp, #8
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    4114:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    4116:	683a      	ldr	r2, [r7, #0]
    4118:	6879      	ldr	r1, [r7, #4]
    411a:	4804      	ldr	r0, [pc, #16]	; (412c <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)+0x20>)
    411c:	f7ff ff18 	bl	3f50 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4120:	683b      	ldr	r3, [r7, #0]
}
    4122:	4618      	mov	r0, r3
    4124:	3708      	adds	r7, #8
    4126:	46bd      	mov	sp, r7
    4128:	bd80      	pop	{r7, pc}
    412a:	bf00      	nop
    412c:	2007c0a8 	.word	0x2007c0a8

00004130 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)>:

int Lpc17xxStdIn(char * data, size_t length)
{
    4130:	b590      	push	{r4, r7, lr}
    4132:	b087      	sub	sp, #28
    4134:	af02      	add	r7, sp, #8
    4136:	6078      	str	r0, [r7, #4]
    4138:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    413a:	f107 0308 	add.w	r3, r7, #8
    413e:	4618      	mov	r0, r3
    4140:	f7fc fdc1 	bl	cc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4144:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4148:	e9cd 3400 	strd	r3, r4, [sp]
    414c:	683a      	ldr	r2, [r7, #0]
    414e:	6879      	ldr	r1, [r7, #4]
    4150:	4803      	ldr	r0, [pc, #12]	; (4160 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)+0x30>)
    4152:	f7ff ff4f 	bl	3ff4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    4156:	683b      	ldr	r3, [r7, #0]
}
    4158:	4618      	mov	r0, r3
    415a:	3714      	adds	r7, #20
    415c:	46bd      	mov	sp, r7
    415e:	bd90      	pop	{r4, r7, pc}
    4160:	2007c0a8 	.word	0x2007c0a8

00004164 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    4164:	b580      	push	{r7, lr}
    4166:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    4168:	4802      	ldr	r0, [pc, #8]	; (4174 <ThreadRuntimeCounter+0x10>)
    416a:	f7fe fb45 	bl	27f8 <sjsu::cortex::DwtCounter::GetCount()>
    416e:	4603      	mov	r3, r0
}
    4170:	4618      	mov	r0, r3
    4172:	bd80      	pop	{r7, pc}
    4174:	2007c2fc 	.word	0x2007c2fc

00004178 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    4178:	b580      	push	{r7, lr}
    417a:	b082      	sub	sp, #8
    417c:	af00      	add	r7, sp, #0
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    417e:	4b1c      	ldr	r3, [pc, #112]	; (41f0 <sjsu::InitializePlatform()+0x78>)
    4180:	6819      	ldr	r1, [r3, #0]
    4182:	481c      	ldr	r0, [pc, #112]	; (41f4 <sjsu::InitializePlatform()+0x7c>)
    4184:	f7fe fe72 	bl	2e6c <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  system_controller.SetPeripheralClockDivider(
    4188:	2201      	movs	r2, #1
    418a:	491b      	ldr	r1, [pc, #108]	; (41f8 <sjsu::InitializePlatform()+0x80>)
    418c:	4819      	ldr	r0, [pc, #100]	; (41f4 <sjsu::InitializePlatform()+0x7c>)
    418e:	f7fe ff4f 	bl	3030 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
      sjsu::lpc17xx::SystemController::Peripherals::kUart0, 1);
  uart0.Initialize(config::kBaudRate);
    4192:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    4196:	4819      	ldr	r0, [pc, #100]	; (41fc <sjsu::InitializePlatform()+0x84>)
    4198:	f7ff fe34 	bl	3e04 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>

  sjsu::newlib::SetStdout(Lpc17xxStdOut);
    419c:	4818      	ldr	r0, [pc, #96]	; (4200 <sjsu::InitializePlatform()+0x88>)
    419e:	f000 fbc1 	bl	4924 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc17xxStdIn);
    41a2:	4818      	ldr	r0, [pc, #96]	; (4204 <sjsu::InitializePlatform()+0x8c>)
    41a4:	f000 fbcc 	bl	4940 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    41a8:	4b17      	ldr	r3, [pc, #92]	; (4208 <sjsu::InitializePlatform()+0x90>)
    41aa:	6819      	ldr	r1, [r3, #0]
    41ac:	4817      	ldr	r0, [pc, #92]	; (420c <sjsu::InitializePlatform()+0x94>)
    41ae:	f7fe fd93 	bl	2cd8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    41b2:	4816      	ldr	r0, [pc, #88]	; (420c <sjsu::InitializePlatform()+0x94>)
    41b4:	f7fe fcbc 	bl	2b30 <sjsu::cortex::SystemTimer::StartTimer() const>
    41b8:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    41ba:	687b      	ldr	r3, [r7, #4]
    41bc:	2b00      	cmp	r3, #0
    41be:	d00d      	beq.n	41dc <sjsu::InitializePlatform()+0x64>
    41c0:	23c6      	movs	r3, #198	; 0xc6
    41c2:	4a13      	ldr	r2, [pc, #76]	; (4210 <sjsu::InitializePlatform()+0x98>)
    41c4:	4913      	ldr	r1, [pc, #76]	; (4214 <sjsu::InitializePlatform()+0x9c>)
    41c6:	4814      	ldr	r0, [pc, #80]	; (4218 <sjsu::InitializePlatform()+0xa0>)
    41c8:	f7fe fa48 	bl	265c <printf>
    41cc:	4813      	ldr	r0, [pc, #76]	; (421c <sjsu::InitializePlatform()+0xa4>)
    41ce:	f7fd f91b 	bl	1408 <puts>
    41d2:	2100      	movs	r1, #0
    41d4:	2001      	movs	r0, #1
    41d6:	f7fc feb5 	bl	f44 <sjsu::debug::PrintBacktrace(bool, void*)>
    41da:	e7fe      	b.n	41da <sjsu::InitializePlatform()+0x62>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    41dc:	4810      	ldr	r0, [pc, #64]	; (4220 <sjsu::InitializePlatform()+0xa8>)
    41de:	f7fe fae9 	bl	27b4 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    41e2:	4810      	ldr	r0, [pc, #64]	; (4224 <sjsu::InitializePlatform()+0xac>)
    41e4:	f7fe fbea 	bl	29bc <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    41e8:	bf00      	nop
    41ea:	3708      	adds	r7, #8
    41ec:	46bd      	mov	sp, r7
    41ee:	bd80      	pop	{r7, pc}
    41f0:	000073f0 	.word	0x000073f0
    41f4:	2007c0a4 	.word	0x2007c0a4
    41f8:	00007d78 	.word	0x00007d78
    41fc:	2007c0a8 	.word	0x2007c0a8
    4200:	0000410d 	.word	0x0000410d
    4204:	00004131 	.word	0x00004131
    4208:	000073f4 	.word	0x000073f4
    420c:	2007c0b4 	.word	0x2007c0b4
    4210:	0000812c 	.word	0x0000812c
    4214:	00007ecc 	.word	0x00007ecc
    4218:	00007ca4 	.word	0x00007ca4
    421c:	0000765c 	.word	0x0000765c
    4220:	2007c2fc 	.word	0x2007c2fc
    4224:	00002add 	.word	0x00002add

00004228 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    4228:	b590      	push	{r4, r7, lr}
    422a:	b085      	sub	sp, #20
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
    4230:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	4618      	mov	r0, r3
    4236:	f7fe fcc5 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    423a:	4604      	mov	r4, r0
    423c:	6838      	ldr	r0, [r7, #0]
    423e:	f000 fca9 	bl	4b94 <__aeabi_ui2f>
    4242:	4603      	mov	r3, r0
    4244:	4619      	mov	r1, r3
    4246:	4620      	mov	r0, r4
    4248:	f000 fdb0 	bl	4dac <__aeabi_fdiv>
    424c:	4603      	mov	r3, r0
    424e:	461a      	mov	r2, r3
    4250:	f107 030c 	add.w	r3, r7, #12
    4254:	4611      	mov	r1, r2
    4256:	4618      	mov	r0, r3
    4258:	f7fe fb15 	bl	2886 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    425c:	68fb      	ldr	r3, [r7, #12]
	}
    425e:	4618      	mov	r0, r3
    4260:	3714      	adds	r7, #20
    4262:	46bd      	mov	sp, r7
    4264:	bd90      	pop	{r4, r7, pc}

00004266 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4266:	b5f0      	push	{r4, r5, r6, r7, lr}
    4268:	b083      	sub	sp, #12
    426a:	af00      	add	r7, sp, #0
    426c:	6078      	str	r0, [r7, #4]
    426e:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4270:	6838      	ldr	r0, [r7, #0]
    4272:	f7fc fbb1 	bl	9d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4276:	460a      	mov	r2, r1
    4278:	4601      	mov	r1, r0
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	e9d3 5600 	ldrd	r5, r6, [r3]
    4280:	186b      	adds	r3, r5, r1
    4282:	eb46 0402 	adc.w	r4, r6, r2
    4286:	687a      	ldr	r2, [r7, #4]
    4288:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    428c:	687b      	ldr	r3, [r7, #4]
	}
    428e:	4618      	mov	r0, r3
    4290:	370c      	adds	r7, #12
    4292:	46bd      	mov	sp, r7
    4294:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004296 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    4296:	b580      	push	{r7, lr}
    4298:	b084      	sub	sp, #16
    429a:	af00      	add	r7, sp, #0
    429c:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	4618      	mov	r0, r3
    42a2:	f7fe fc8f 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    42a6:	4603      	mov	r3, r0
    42a8:	60fb      	str	r3, [r7, #12]
    42aa:	f107 030c 	add.w	r3, r7, #12
    42ae:	4618      	mov	r0, r3
    42b0:	f000 f903 	bl	44ba <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    42b4:	4603      	mov	r3, r0
    42b6:	4618      	mov	r0, r3
    42b8:	f000 feb0 	bl	501c <__aeabi_f2uiz>
    42bc:	4603      	mov	r3, r0
		}
    42be:	4618      	mov	r0, r3
    42c0:	3710      	adds	r7, #16
    42c2:	46bd      	mov	sp, r7
    42c4:	bd80      	pop	{r7, pc}

000042c6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    42c6:	b480      	push	{r7}
    42c8:	b083      	sub	sp, #12
    42ca:	af00      	add	r7, sp, #0
    42cc:	6078      	str	r0, [r7, #4]
    42ce:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    42d0:	2201      	movs	r2, #1
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	fa02 f303 	lsl.w	r3, r2, r3
    42d8:	43db      	mvns	r3, r3
    42da:	461a      	mov	r2, r3
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	4013      	ands	r3, r2
}
    42e0:	4618      	mov	r0, r3
    42e2:	370c      	adds	r7, #12
    42e4:	46bd      	mov	sp, r7
    42e6:	bc80      	pop	{r7}
    42e8:	4770      	bx	lr

000042ea <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    42ea:	b580      	push	{r7, lr}
    42ec:	b084      	sub	sp, #16
    42ee:	af00      	add	r7, sp, #0
    42f0:	60f8      	str	r0, [r7, #12]
    42f2:	460b      	mov	r3, r1
    42f4:	80ba      	strh	r2, [r7, #4]
    42f6:	817b      	strh	r3, [r7, #10]
  return Insert(target, value, bitmask.position, bitmask.width);
    42f8:	793b      	ldrb	r3, [r7, #4]
    42fa:	461a      	mov	r2, r3
    42fc:	797b      	ldrb	r3, [r7, #5]
    42fe:	8979      	ldrh	r1, [r7, #10]
    4300:	68f8      	ldr	r0, [r7, #12]
    4302:	f000 f8e6 	bl	44d2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>
    4306:	4603      	mov	r3, r0
}
    4308:	4618      	mov	r0, r3
    430a:	3710      	adds	r7, #16
    430c:	46bd      	mov	sp, r7
    430e:	bd80      	pop	{r7, pc}

00004310 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    4310:	b580      	push	{r7, lr}
    4312:	b084      	sub	sp, #16
    4314:	af00      	add	r7, sp, #0
    4316:	60f8      	str	r0, [r7, #12]
    4318:	460b      	mov	r3, r1
    431a:	80ba      	strh	r2, [r7, #4]
    431c:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    431e:	793b      	ldrb	r3, [r7, #4]
    4320:	461a      	mov	r2, r3
    4322:	797b      	ldrb	r3, [r7, #5]
    4324:	7af9      	ldrb	r1, [r7, #11]
    4326:	68f8      	ldr	r0, [r7, #12]
    4328:	f000 f8ff 	bl	452a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    432c:	4603      	mov	r3, r0
}
    432e:	4618      	mov	r0, r3
    4330:	3710      	adds	r7, #16
    4332:	46bd      	mov	sp, r7
    4334:	bd80      	pop	{r7, pc}

00004336 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    4336:	b480      	push	{r7}
    4338:	b083      	sub	sp, #12
    433a:	af00      	add	r7, sp, #0
    433c:	6078      	str	r0, [r7, #4]
    433e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    4340:	2201      	movs	r2, #1
    4342:	683b      	ldr	r3, [r7, #0]
    4344:	fa02 f303 	lsl.w	r3, r2, r3
    4348:	461a      	mov	r2, r3
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	4313      	orrs	r3, r2
}
    434e:	4618      	mov	r0, r3
    4350:	370c      	adds	r7, #12
    4352:	46bd      	mov	sp, r7
    4354:	bc80      	pop	{r7}
    4356:	4770      	bx	lr

00004358 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
    4360:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    4362:	683b      	ldr	r3, [r7, #0]
    4364:	4618      	mov	r0, r3
    4366:	f7fe fd36 	bl	2dd6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    436a:	4602      	mov	r2, r0
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	601a      	str	r2, [r3, #0]
			return *this;
    4370:	687b      	ldr	r3, [r7, #4]
		}
    4372:	4618      	mov	r0, r3
    4374:	3708      	adds	r7, #8
    4376:	46bd      	mov	sp, r7
    4378:	bd80      	pop	{r7, pc}

0000437a <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    437a:	b580      	push	{r7, lr}
    437c:	b082      	sub	sp, #8
    437e:	af00      	add	r7, sp, #0
    4380:	6078      	str	r0, [r7, #4]
    4382:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    4384:	783b      	ldrb	r3, [r7, #0]
    4386:	4619      	mov	r1, r3
    4388:	787b      	ldrb	r3, [r7, #1]
    438a:	461a      	mov	r2, r3
    438c:	6878      	ldr	r0, [r7, #4]
    438e:	f000 f8f8 	bl	4582 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    4392:	4603      	mov	r3, r0
}
    4394:	4618      	mov	r0, r3
    4396:	3708      	adds	r7, #8
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}

0000439c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    439c:	b480      	push	{r7}
    439e:	b083      	sub	sp, #12
    43a0:	af00      	add	r7, sp, #0
    43a2:	6078      	str	r0, [r7, #4]
    43a4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    43a6:	2201      	movs	r2, #1
    43a8:	683b      	ldr	r3, [r7, #0]
    43aa:	fa02 f303 	lsl.w	r3, r2, r3
    43ae:	461a      	mov	r2, r3
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	4013      	ands	r3, r2
    43b4:	2b00      	cmp	r3, #0
    43b6:	bf14      	ite	ne
    43b8:	2301      	movne	r3, #1
    43ba:	2300      	moveq	r3, #0
    43bc:	b2db      	uxtb	r3, r3
}
    43be:	4618      	mov	r0, r3
    43c0:	370c      	adds	r7, #12
    43c2:	46bd      	mov	sp, r7
    43c4:	bc80      	pop	{r7}
    43c6:	4770      	bx	lr

000043c8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    43c8:	b580      	push	{r7, lr}
    43ca:	b084      	sub	sp, #16
    43cc:	af00      	add	r7, sp, #0
    43ce:	60f8      	str	r0, [r7, #12]
    43d0:	60b9      	str	r1, [r7, #8]
    43d2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    43d4:	793b      	ldrb	r3, [r7, #4]
    43d6:	461a      	mov	r2, r3
    43d8:	797b      	ldrb	r3, [r7, #5]
    43da:	68b9      	ldr	r1, [r7, #8]
    43dc:	68f8      	ldr	r0, [r7, #12]
    43de:	f000 f8ed 	bl	45bc <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    43e2:	4603      	mov	r3, r0
}
    43e4:	4618      	mov	r0, r3
    43e6:	3710      	adds	r7, #16
    43e8:	46bd      	mov	sp, r7
    43ea:	bd80      	pop	{r7, pc}

000043ec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr UnitTypeRhs operator*(T lhs, const UnitTypeRhs& rhs) noexcept
    43ec:	b590      	push	{r4, r7, lr}
    43ee:	b085      	sub	sp, #20
    43f0:	af00      	add	r7, sp, #0
    43f2:	6078      	str	r0, [r7, #4]
    43f4:	6039      	str	r1, [r7, #0]
		return UnitTypeRhs(lhs * rhs());
    43f6:	6878      	ldr	r0, [r7, #4]
    43f8:	f000 fbd0 	bl	4b9c <__aeabi_i2f>
    43fc:	4604      	mov	r4, r0
    43fe:	683b      	ldr	r3, [r7, #0]
    4400:	4618      	mov	r0, r3
    4402:	f7fe fbdf 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    4406:	4603      	mov	r3, r0
    4408:	4619      	mov	r1, r3
    440a:	4620      	mov	r0, r4
    440c:	f000 fc1a 	bl	4c44 <__aeabi_fmul>
    4410:	4603      	mov	r3, r0
    4412:	461a      	mov	r2, r3
    4414:	f107 030c 	add.w	r3, r7, #12
    4418:	4611      	mov	r1, r2
    441a:	4618      	mov	r0, r3
    441c:	f7fe fa33 	bl	2886 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4420:	68fb      	ldr	r3, [r7, #12]
	}
    4422:	4618      	mov	r0, r3
    4424:	3714      	adds	r7, #20
    4426:	46bd      	mov	sp, r7
    4428:	bd90      	pop	{r4, r7, pc}

0000442a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    442a:	b590      	push	{r4, r7, lr}
    442c:	b085      	sub	sp, #20
    442e:	af00      	add	r7, sp, #0
    4430:	6078      	str	r0, [r7, #4]
    4432:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	4618      	mov	r0, r3
    4438:	f7fe fbc4 	bl	2bc4 <units::linear_scale<float>::operator()() const>
    443c:	4604      	mov	r4, r0
    443e:	6838      	ldr	r0, [r7, #0]
    4440:	f000 fbac 	bl	4b9c <__aeabi_i2f>
    4444:	4603      	mov	r3, r0
    4446:	4619      	mov	r1, r3
    4448:	4620      	mov	r0, r4
    444a:	f000 fcaf 	bl	4dac <__aeabi_fdiv>
    444e:	4603      	mov	r3, r0
    4450:	461a      	mov	r2, r3
    4452:	f107 030c 	add.w	r3, r7, #12
    4456:	4611      	mov	r1, r2
    4458:	4618      	mov	r0, r3
    445a:	f7fe fa14 	bl	2886 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    445e:	68fb      	ldr	r3, [r7, #12]
	}
    4460:	4618      	mov	r0, r3
    4462:	3714      	adds	r7, #20
    4464:	46bd      	mov	sp, r7
    4466:	bd90      	pop	{r4, r7, pc}

00004468 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    4468:	b580      	push	{r7, lr}
    446a:	b084      	sub	sp, #16
    446c:	af00      	add	r7, sp, #0
    446e:	60f8      	str	r0, [r7, #12]
    4470:	460b      	mov	r3, r1
    4472:	80ba      	strh	r2, [r7, #4]
    4474:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    4476:	793b      	ldrb	r3, [r7, #4]
    4478:	461a      	mov	r2, r3
    447a:	797b      	ldrb	r3, [r7, #5]
    447c:	7af9      	ldrb	r1, [r7, #11]
    447e:	68f8      	ldr	r0, [r7, #12]
    4480:	f000 f8c7 	bl	4612 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    4484:	4603      	mov	r3, r0
}
    4486:	4618      	mov	r0, r3
    4488:	3710      	adds	r7, #16
    448a:	46bd      	mov	sp, r7
    448c:	bd80      	pop	{r7, pc}

0000448e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    448e:	b480      	push	{r7}
    4490:	b083      	sub	sp, #12
    4492:	af00      	add	r7, sp, #0
    4494:	4603      	mov	r3, r0
    4496:	6039      	str	r1, [r7, #0]
    4498:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    449a:	79fa      	ldrb	r2, [r7, #7]
    449c:	683b      	ldr	r3, [r7, #0]
    449e:	fa42 f303 	asr.w	r3, r2, r3
    44a2:	f003 0301 	and.w	r3, r3, #1
    44a6:	2b00      	cmp	r3, #0
    44a8:	bf14      	ite	ne
    44aa:	2301      	movne	r3, #1
    44ac:	2300      	moveq	r3, #0
    44ae:	b2db      	uxtb	r3, r3
}
    44b0:	4618      	mov	r0, r3
    44b2:	370c      	adds	r7, #12
    44b4:	46bd      	mov	sp, r7
    44b6:	bc80      	pop	{r7}
    44b8:	4770      	bx	lr

000044ba <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    44ba:	b580      	push	{r7, lr}
    44bc:	b086      	sub	sp, #24
    44be:	af00      	add	r7, sp, #0
    44c0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    44c2:	6878      	ldr	r0, [r7, #4]
    44c4:	f000 f8d1 	bl	466a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    44c8:	4603      	mov	r3, r0
	}
    44ca:	4618      	mov	r0, r3
    44cc:	3718      	adds	r7, #24
    44ce:	46bd      	mov	sp, r7
    44d0:	bd80      	pop	{r7, pc}

000044d2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    44d2:	b480      	push	{r7}
    44d4:	b089      	sub	sp, #36	; 0x24
    44d6:	af00      	add	r7, sp, #0
    44d8:	60f8      	str	r0, [r7, #12]
    44da:	607a      	str	r2, [r7, #4]
    44dc:	603b      	str	r3, [r7, #0]
    44de:	460b      	mov	r3, r1
    44e0:	817b      	strh	r3, [r7, #10]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    44e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44e6:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    44e8:	2320      	movs	r3, #32
    44ea:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    44ec:	683b      	ldr	r3, [r7, #0]
    44ee:	f1c3 0320 	rsb	r3, r3, #32
    44f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    44f6:	fa22 f303 	lsr.w	r3, r2, r3
    44fa:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    44fc:	697a      	ldr	r2, [r7, #20]
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	fa02 f303 	lsl.w	r3, r2, r3
    4504:	43db      	mvns	r3, r3
    4506:	68fa      	ldr	r2, [r7, #12]
    4508:	4013      	ands	r3, r2
    450a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    450c:	897a      	ldrh	r2, [r7, #10]
    450e:	697b      	ldr	r3, [r7, #20]
    4510:	401a      	ands	r2, r3
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	fa02 f303 	lsl.w	r3, r2, r3
    4518:	68fa      	ldr	r2, [r7, #12]
    451a:	4313      	orrs	r3, r2
    451c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    451e:	68fb      	ldr	r3, [r7, #12]
}
    4520:	4618      	mov	r0, r3
    4522:	3724      	adds	r7, #36	; 0x24
    4524:	46bd      	mov	sp, r7
    4526:	bc80      	pop	{r7}
    4528:	4770      	bx	lr

0000452a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    452a:	b480      	push	{r7}
    452c:	b089      	sub	sp, #36	; 0x24
    452e:	af00      	add	r7, sp, #0
    4530:	60f8      	str	r0, [r7, #12]
    4532:	607a      	str	r2, [r7, #4]
    4534:	603b      	str	r3, [r7, #0]
    4536:	460b      	mov	r3, r1
    4538:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    453a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    453e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4540:	2320      	movs	r3, #32
    4542:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4544:	683b      	ldr	r3, [r7, #0]
    4546:	f1c3 0320 	rsb	r3, r3, #32
    454a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    454e:	fa22 f303 	lsr.w	r3, r2, r3
    4552:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4554:	697a      	ldr	r2, [r7, #20]
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	fa02 f303 	lsl.w	r3, r2, r3
    455c:	43db      	mvns	r3, r3
    455e:	68fa      	ldr	r2, [r7, #12]
    4560:	4013      	ands	r3, r2
    4562:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4564:	7afa      	ldrb	r2, [r7, #11]
    4566:	697b      	ldr	r3, [r7, #20]
    4568:	401a      	ands	r2, r3
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	fa02 f303 	lsl.w	r3, r2, r3
    4570:	68fa      	ldr	r2, [r7, #12]
    4572:	4313      	orrs	r3, r2
    4574:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4576:	68fb      	ldr	r3, [r7, #12]
}
    4578:	4618      	mov	r0, r3
    457a:	3724      	adds	r7, #36	; 0x24
    457c:	46bd      	mov	sp, r7
    457e:	bc80      	pop	{r7}
    4580:	4770      	bx	lr

00004582 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    4582:	b480      	push	{r7}
    4584:	b089      	sub	sp, #36	; 0x24
    4586:	af00      	add	r7, sp, #0
    4588:	60f8      	str	r0, [r7, #12]
    458a:	60b9      	str	r1, [r7, #8]
    458c:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    458e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4592:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4594:	2320      	movs	r3, #32
    4596:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	f1c3 0320 	rsb	r3, r3, #32
    459e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45a2:	fa22 f303 	lsr.w	r3, r2, r3
    45a6:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    45a8:	68fa      	ldr	r2, [r7, #12]
    45aa:	68bb      	ldr	r3, [r7, #8]
    45ac:	40da      	lsrs	r2, r3
    45ae:	697b      	ldr	r3, [r7, #20]
    45b0:	4013      	ands	r3, r2
}
    45b2:	4618      	mov	r0, r3
    45b4:	3724      	adds	r7, #36	; 0x24
    45b6:	46bd      	mov	sp, r7
    45b8:	bc80      	pop	{r7}
    45ba:	4770      	bx	lr

000045bc <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    45bc:	b480      	push	{r7}
    45be:	b089      	sub	sp, #36	; 0x24
    45c0:	af00      	add	r7, sp, #0
    45c2:	60f8      	str	r0, [r7, #12]
    45c4:	60b9      	str	r1, [r7, #8]
    45c6:	607a      	str	r2, [r7, #4]
    45c8:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    45ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45ce:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    45d0:	2320      	movs	r3, #32
    45d2:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    45d4:	683b      	ldr	r3, [r7, #0]
    45d6:	f1c3 0320 	rsb	r3, r3, #32
    45da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45de:	fa22 f303 	lsr.w	r3, r2, r3
    45e2:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    45e4:	697a      	ldr	r2, [r7, #20]
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	fa02 f303 	lsl.w	r3, r2, r3
    45ec:	43db      	mvns	r3, r3
    45ee:	68fa      	ldr	r2, [r7, #12]
    45f0:	4013      	ands	r3, r2
    45f2:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    45f4:	68ba      	ldr	r2, [r7, #8]
    45f6:	697b      	ldr	r3, [r7, #20]
    45f8:	401a      	ands	r2, r3
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	fa02 f303 	lsl.w	r3, r2, r3
    4600:	68fa      	ldr	r2, [r7, #12]
    4602:	4313      	orrs	r3, r2
    4604:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4606:	68fb      	ldr	r3, [r7, #12]
}
    4608:	4618      	mov	r0, r3
    460a:	3724      	adds	r7, #36	; 0x24
    460c:	46bd      	mov	sp, r7
    460e:	bc80      	pop	{r7}
    4610:	4770      	bx	lr

00004612 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    4612:	b480      	push	{r7}
    4614:	b089      	sub	sp, #36	; 0x24
    4616:	af00      	add	r7, sp, #0
    4618:	60f8      	str	r0, [r7, #12]
    461a:	607a      	str	r2, [r7, #4]
    461c:	603b      	str	r3, [r7, #0]
    461e:	460b      	mov	r3, r1
    4620:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    4622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4626:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4628:	2320      	movs	r3, #32
    462a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    462c:	683b      	ldr	r3, [r7, #0]
    462e:	f1c3 0320 	rsb	r3, r3, #32
    4632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4636:	fa22 f303 	lsr.w	r3, r2, r3
    463a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    463c:	697a      	ldr	r2, [r7, #20]
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	fa02 f303 	lsl.w	r3, r2, r3
    4644:	43db      	mvns	r3, r3
    4646:	68fa      	ldr	r2, [r7, #12]
    4648:	4013      	ands	r3, r2
    464a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    464c:	7afa      	ldrb	r2, [r7, #11]
    464e:	697b      	ldr	r3, [r7, #20]
    4650:	401a      	ands	r2, r3
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	fa02 f303 	lsl.w	r3, r2, r3
    4658:	68fa      	ldr	r2, [r7, #12]
    465a:	4313      	orrs	r3, r2
    465c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    465e:	68fb      	ldr	r3, [r7, #12]
}
    4660:	4618      	mov	r0, r3
    4662:	3724      	adds	r7, #36	; 0x24
    4664:	46bd      	mov	sp, r7
    4666:	bc80      	pop	{r7}
    4668:	4770      	bx	lr

0000466a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    466a:	b480      	push	{r7}
    466c:	b085      	sub	sp, #20
    466e:	af00      	add	r7, sp, #0
    4670:	60f8      	str	r0, [r7, #12]
    4672:	7239      	strb	r1, [r7, #8]
    4674:	713a      	strb	r2, [r7, #4]
    4676:	703b      	strb	r3, [r7, #0]
			return value;
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	681b      	ldr	r3, [r3, #0]
		}
    467c:	4618      	mov	r0, r3
    467e:	3714      	adds	r7, #20
    4680:	46bd      	mov	sp, r7
    4682:	bc80      	pop	{r7}
    4684:	4770      	bx	lr
    4686:	Address 0x0000000000004686 is out of bounds.


00004688 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
    4690:	6039      	str	r1, [r7, #0]
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	2b01      	cmp	r3, #1
    4696:	f040 80a6 	bne.w	47e6 <__static_initialization_and_destruction_0(int, int)+0x15e>
    469a:	683b      	ldr	r3, [r7, #0]
    469c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    46a0:	4293      	cmp	r3, r2
    46a2:	f040 80a0 	bne.w	47e6 <__static_initialization_and_destruction_0(int, int)+0x15e>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    46a6:	4b52      	ldr	r3, [pc, #328]	; (47f0 <__static_initialization_and_destruction_0(int, int)+0x168>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	f003 0301 	and.w	r3, r3, #1
    46ae:	2b00      	cmp	r3, #0
    46b0:	d106      	bne.n	46c0 <__static_initialization_and_destruction_0(int, int)+0x38>
    46b2:	4b4f      	ldr	r3, [pc, #316]	; (47f0 <__static_initialization_and_destruction_0(int, int)+0x168>)
    46b4:	2201      	movs	r2, #1
    46b6:	601a      	str	r2, [r3, #0]
    46b8:	4b4e      	ldr	r3, [pc, #312]	; (47f4 <__static_initialization_and_destruction_0(int, int)+0x16c>)
    46ba:	4618      	mov	r0, r3
    46bc:	f7fc f85c 	bl	778 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    46c0:	4b4d      	ldr	r3, [pc, #308]	; (47f8 <__static_initialization_and_destruction_0(int, int)+0x170>)
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	f003 0301 	and.w	r3, r3, #1
    46c8:	2b00      	cmp	r3, #0
    46ca:	d105      	bne.n	46d8 <__static_initialization_and_destruction_0(int, int)+0x50>
    46cc:	4b4a      	ldr	r3, [pc, #296]	; (47f8 <__static_initialization_and_destruction_0(int, int)+0x170>)
    46ce:	2201      	movs	r2, #1
    46d0:	601a      	str	r2, [r3, #0]
    46d2:	4a4a      	ldr	r2, [pc, #296]	; (47fc <__static_initialization_and_destruction_0(int, int)+0x174>)
    46d4:	4b4a      	ldr	r3, [pc, #296]	; (4800 <__static_initialization_and_destruction_0(int, int)+0x178>)
    46d6:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * function_map =
    46d8:	4b4a      	ldr	r3, [pc, #296]	; (4804 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    46da:	681b      	ldr	r3, [r3, #0]
    46dc:	f003 0301 	and.w	r3, r3, #1
    46e0:	2b00      	cmp	r3, #0
    46e2:	d106      	bne.n	46f2 <__static_initialization_and_destruction_0(int, int)+0x6a>
    46e4:	4b47      	ldr	r3, [pc, #284]	; (4804 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    46e6:	2201      	movs	r2, #1
    46e8:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    46ea:	4b47      	ldr	r3, [pc, #284]	; (4808 <__static_initialization_and_destruction_0(int, int)+0x180>)
    46ec:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    46ee:	4b47      	ldr	r3, [pc, #284]	; (480c <__static_initialization_and_destruction_0(int, int)+0x184>)
    46f0:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    46f2:	4b47      	ldr	r3, [pc, #284]	; (4810 <__static_initialization_and_destruction_0(int, int)+0x188>)
    46f4:	681b      	ldr	r3, [r3, #0]
    46f6:	f003 0301 	and.w	r3, r3, #1
    46fa:	2b00      	cmp	r3, #0
    46fc:	d106      	bne.n	470c <__static_initialization_and_destruction_0(int, int)+0x84>
    46fe:	4b44      	ldr	r3, [pc, #272]	; (4810 <__static_initialization_and_destruction_0(int, int)+0x188>)
    4700:	2201      	movs	r2, #1
    4702:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    4704:	4b40      	ldr	r3, [pc, #256]	; (4808 <__static_initialization_and_destruction_0(int, int)+0x180>)
    4706:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    4708:	4a42      	ldr	r2, [pc, #264]	; (4814 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    470a:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    470c:	4b42      	ldr	r3, [pc, #264]	; (4818 <__static_initialization_and_destruction_0(int, int)+0x190>)
    470e:	681b      	ldr	r3, [r3, #0]
    4710:	f003 0301 	and.w	r3, r3, #1
    4714:	2b00      	cmp	r3, #0
    4716:	d106      	bne.n	4726 <__static_initialization_and_destruction_0(int, int)+0x9e>
    4718:	4b3f      	ldr	r3, [pc, #252]	; (4818 <__static_initialization_and_destruction_0(int, int)+0x190>)
    471a:	2201      	movs	r2, #1
    471c:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    471e:	4b3a      	ldr	r3, [pc, #232]	; (4808 <__static_initialization_and_destruction_0(int, int)+0x180>)
    4720:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    4722:	4a3e      	ldr	r2, [pc, #248]	; (481c <__static_initialization_and_destruction_0(int, int)+0x194>)
    4724:	6013      	str	r3, [r2, #0]
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    4726:	4b3e      	ldr	r3, [pc, #248]	; (4820 <__static_initialization_and_destruction_0(int, int)+0x198>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	f003 0301 	and.w	r3, r3, #1
    472e:	2b00      	cmp	r3, #0
    4730:	d105      	bne.n	473e <__static_initialization_and_destruction_0(int, int)+0xb6>
    4732:	4b3b      	ldr	r3, [pc, #236]	; (4820 <__static_initialization_and_destruction_0(int, int)+0x198>)
    4734:	2201      	movs	r2, #1
    4736:	601a      	str	r2, [r3, #0]
    4738:	4a30      	ldr	r2, [pc, #192]	; (47fc <__static_initialization_and_destruction_0(int, int)+0x174>)
    473a:	4b3a      	ldr	r3, [pc, #232]	; (4824 <__static_initialization_and_destruction_0(int, int)+0x19c>)
    473c:	601a      	str	r2, [r3, #0]
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    473e:	4b3a      	ldr	r3, [pc, #232]	; (4828 <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	f003 0301 	and.w	r3, r3, #1
    4746:	2b00      	cmp	r3, #0
    4748:	d105      	bne.n	4756 <__static_initialization_and_destruction_0(int, int)+0xce>
    474a:	4b37      	ldr	r3, [pc, #220]	; (4828 <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    474c:	2201      	movs	r2, #1
    474e:	601a      	str	r2, [r3, #0]
    4750:	4a2d      	ldr	r2, [pc, #180]	; (4808 <__static_initialization_and_destruction_0(int, int)+0x180>)
    4752:	4b36      	ldr	r3, [pc, #216]	; (482c <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    4754:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    4756:	4b36      	ldr	r3, [pc, #216]	; (4830 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	f003 0301 	and.w	r3, r3, #1
    475e:	2b00      	cmp	r3, #0
    4760:	d105      	bne.n	476e <__static_initialization_and_destruction_0(int, int)+0xe6>
    4762:	4b33      	ldr	r3, [pc, #204]	; (4830 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    4764:	2201      	movs	r2, #1
    4766:	601a      	str	r2, [r3, #0]
    };
    4768:	4a32      	ldr	r2, [pc, #200]	; (4834 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    476a:	4b33      	ldr	r3, [pc, #204]	; (4838 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    476c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    476e:	4b33      	ldr	r3, [pc, #204]	; (483c <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    4770:	681b      	ldr	r3, [r3, #0]
    4772:	f003 0301 	and.w	r3, r3, #1
    4776:	2b00      	cmp	r3, #0
    4778:	d105      	bne.n	4786 <__static_initialization_and_destruction_0(int, int)+0xfe>
    477a:	4b30      	ldr	r3, [pc, #192]	; (483c <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    477c:	2201      	movs	r2, #1
    477e:	601a      	str	r2, [r3, #0]
    };
    4780:	4a2f      	ldr	r2, [pc, #188]	; (4840 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    4782:	4b30      	ldr	r3, [pc, #192]	; (4844 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    4784:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    4786:	4b30      	ldr	r3, [pc, #192]	; (4848 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    4788:	681b      	ldr	r3, [r3, #0]
    478a:	f003 0301 	and.w	r3, r3, #1
    478e:	2b00      	cmp	r3, #0
    4790:	d105      	bne.n	479e <__static_initialization_and_destruction_0(int, int)+0x116>
    4792:	4b2d      	ldr	r3, [pc, #180]	; (4848 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    4794:	2201      	movs	r2, #1
    4796:	601a      	str	r2, [r3, #0]
    };
    4798:	4a2c      	ldr	r2, [pc, #176]	; (484c <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    479a:	4b2d      	ldr	r3, [pc, #180]	; (4850 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    479c:	601a      	str	r2, [r3, #0]
  inline static const Pin kUart3Tx = Pin(4, 28);
  inline static const Pin kUart3Rx = Pin(4, 29);

 public:
  /// Definition for uart port 0 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart0 = {
    479e:	4b2d      	ldr	r3, [pc, #180]	; (4854 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	f003 0301 	and.w	r3, r3, #1
    47a6:	2b00      	cmp	r3, #0
    47a8:	d105      	bne.n	47b6 <__static_initialization_and_destruction_0(int, int)+0x12e>
    47aa:	4b2a      	ldr	r3, [pc, #168]	; (4854 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    47ac:	2201      	movs	r2, #1
    47ae:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart0,
    .tx             = kUart0Tx,
    .rx             = kUart0Rx,
    .tx_function_id = 0b01,
    .rx_function_id = 0b01,
  };
    47b0:	4a29      	ldr	r2, [pc, #164]	; (4858 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    47b2:	4b2a      	ldr	r3, [pc, #168]	; (485c <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    47b4:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 1 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart2 = {
    47b6:	4b2a      	ldr	r3, [pc, #168]	; (4860 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	f003 0301 	and.w	r3, r3, #1
    47be:	2b00      	cmp	r3, #0
    47c0:	d105      	bne.n	47ce <__static_initialization_and_destruction_0(int, int)+0x146>
    47c2:	4b27      	ldr	r3, [pc, #156]	; (4860 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    47c4:	2201      	movs	r2, #1
    47c6:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart2,
    .tx             = kUart2Tx,
    .rx             = kUart2Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    47c8:	4a1a      	ldr	r2, [pc, #104]	; (4834 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    47ca:	4b26      	ldr	r3, [pc, #152]	; (4864 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    47cc:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 2 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart3 = {
    47ce:	4b26      	ldr	r3, [pc, #152]	; (4868 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	f003 0301 	and.w	r3, r3, #1
    47d6:	2b00      	cmp	r3, #0
    47d8:	d105      	bne.n	47e6 <__static_initialization_and_destruction_0(int, int)+0x15e>
    47da:	4b23      	ldr	r3, [pc, #140]	; (4868 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    47dc:	2201      	movs	r2, #1
    47de:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart3,
    .tx             = kUart3Tx,
    .rx             = kUart3Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    47e0:	4a17      	ldr	r2, [pc, #92]	; (4840 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    47e2:	4b22      	ldr	r3, [pc, #136]	; (486c <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    47e4:	601a      	str	r2, [r3, #0]
    47e6:	bf00      	nop
    47e8:	3708      	adds	r7, #8
    47ea:	46bd      	mov	sp, r7
    47ec:	bd80      	pop	{r7, pc}
    47ee:	bf00      	nop
    47f0:	2007c258 	.word	0x2007c258
    47f4:	2007c158 	.word	0x2007c158
    47f8:	2007c300 	.word	0x2007c300
    47fc:	400fc000 	.word	0x400fc000
    4800:	2007c2e8 	.word	0x2007c2e8
    4804:	2007c304 	.word	0x2007c304
    4808:	4002c000 	.word	0x4002c000
    480c:	2007c2ec 	.word	0x2007c2ec
    4810:	2007c308 	.word	0x2007c308
    4814:	2007c2f0 	.word	0x2007c2f0
    4818:	2007c30c 	.word	0x2007c30c
    481c:	2007c2f4 	.word	0x2007c2f4
    4820:	2007c310 	.word	0x2007c310
    4824:	2007c2f8 	.word	0x2007c2f8
    4828:	2007c148 	.word	0x2007c148
    482c:	2007c144 	.word	0x2007c144
    4830:	2007c314 	.word	0x2007c314
    4834:	40098000 	.word	0x40098000
    4838:	2007c02c 	.word	0x2007c02c
    483c:	2007c318 	.word	0x2007c318
    4840:	4009c000 	.word	0x4009c000
    4844:	2007c040 	.word	0x2007c040
    4848:	2007c31c 	.word	0x2007c31c
    484c:	400a4000 	.word	0x400a4000
    4850:	2007c054 	.word	0x2007c054
    4854:	2007c320 	.word	0x2007c320
    4858:	4000c000 	.word	0x4000c000
    485c:	2007c068 	.word	0x2007c068
    4860:	2007c324 	.word	0x2007c324
    4864:	2007c07c 	.word	0x2007c07c
    4868:	2007c328 	.word	0x2007c328
    486c:	2007c090 	.word	0x2007c090

00004870 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    4870:	b580      	push	{r7, lr}
    4872:	af00      	add	r7, sp, #0
    4874:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4878:	2001      	movs	r0, #1
    487a:	f7ff ff05 	bl	4688 <__static_initialization_and_destruction_0(int, int)>
    487e:	bd80      	pop	{r7, pc}

00004880 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4880:	4b07      	ldr	r3, [pc, #28]	; (48a0 <pxCurrentTCBConst2>)
    4882:	6819      	ldr	r1, [r3, #0]
    4884:	6808      	ldr	r0, [r1, #0]
    4886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    488a:	f380 8809 	msr	PSP, r0
    488e:	f3bf 8f6f 	isb	sy
    4892:	f04f 0000 	mov.w	r0, #0
    4896:	f380 8811 	msr	BASEPRI, r0
    489a:	f04e 0e0d 	orr.w	lr, lr, #13
    489e:	4770      	bx	lr

000048a0 <pxCurrentTCBConst2>:
    48a0:	2007c25c 	.word	0x2007c25c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    48a4:	bf00      	nop
    48a6:	bf00      	nop
    48a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    48ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000048b0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    48b0:	f3ef 8009 	mrs	r0, PSP
    48b4:	f3bf 8f6f 	isb	sy
    48b8:	4b0d      	ldr	r3, [pc, #52]	; (48f0 <pxCurrentTCBConst>)
    48ba:	681a      	ldr	r2, [r3, #0]
    48bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    48c0:	6010      	str	r0, [r2, #0]
    48c2:	e92d 4008 	stmdb	sp!, {r3, lr}
    48c6:	f04f 0028 	mov.w	r0, #40	; 0x28
    48ca:	f380 8811 	msr	BASEPRI, r0
    48ce:	f7fc fcc7 	bl	1260 <vTaskSwitchContext>
    48d2:	f04f 0000 	mov.w	r0, #0
    48d6:	f380 8811 	msr	BASEPRI, r0
    48da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48de:	6819      	ldr	r1, [r3, #0]
    48e0:	6808      	ldr	r0, [r1, #0]
    48e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    48e6:	f380 8809 	msr	PSP, r0
    48ea:	f3bf 8f6f 	isb	sy
    48ee:	4770      	bx	lr

000048f0 <pxCurrentTCBConst>:
    48f0:	2007c25c 	.word	0x2007c25c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    48f4:	bf00      	nop
    48f6:	bf00      	nop

000048f8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    48f8:	b480      	push	{r7}
    48fa:	b083      	sub	sp, #12
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	6039      	str	r1, [r7, #0]
  return 1;
    4902:	2301      	movs	r3, #1
}
    4904:	4618      	mov	r0, r3
    4906:	370c      	adds	r7, #12
    4908:	46bd      	mov	sp, r7
    490a:	bc80      	pop	{r7}
    490c:	4770      	bx	lr

0000490e <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    490e:	b480      	push	{r7}
    4910:	b083      	sub	sp, #12
    4912:	af00      	add	r7, sp, #0
    4914:	6078      	str	r0, [r7, #4]
    4916:	6039      	str	r1, [r7, #0]
  return 0;
    4918:	2300      	movs	r3, #0
}
    491a:	4618      	mov	r0, r3
    491c:	370c      	adds	r7, #12
    491e:	46bd      	mov	sp, r7
    4920:	bc80      	pop	{r7}
    4922:	4770      	bx	lr

00004924 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4924:	b480      	push	{r7}
    4926:	b083      	sub	sp, #12
    4928:	af00      	add	r7, sp, #0
    492a:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    492c:	4a03      	ldr	r2, [pc, #12]	; (493c <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x18>)
    492e:	687b      	ldr	r3, [r7, #4]
    4930:	6013      	str	r3, [r2, #0]
}
    4932:	bf00      	nop
    4934:	370c      	adds	r7, #12
    4936:	46bd      	mov	sp, r7
    4938:	bc80      	pop	{r7}
    493a:	4770      	bx	lr
    493c:	2007c00c 	.word	0x2007c00c

00004940 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4940:	b480      	push	{r7}
    4942:	b083      	sub	sp, #12
    4944:	af00      	add	r7, sp, #0
    4946:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    4948:	4a03      	ldr	r2, [pc, #12]	; (4958 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x18>)
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	6013      	str	r3, [r2, #0]
}
    494e:	bf00      	nop
    4950:	370c      	adds	r7, #12
    4952:	46bd      	mov	sp, r7
    4954:	bc80      	pop	{r7}
    4956:	4770      	bx	lr
    4958:	2007c010 	.word	0x2007c010

0000495c <__cxa_pure_virtual>:
    495c:	b508      	push	{r3, lr}
    495e:	f000 f80d 	bl	497c <std::terminate()>

00004962 <__cxxabiv1::__terminate(void (*)())>:
    4962:	b508      	push	{r3, lr}
    4964:	4780      	blx	r0
    4966:	f001 fc8d 	bl	6284 <abort>
    496a:	Address 0x000000000000496a is out of bounds.


0000496c <std::get_terminate()>:
    496c:	4b02      	ldr	r3, [pc, #8]	; (4978 <std::get_terminate()+0xc>)
    496e:	6818      	ldr	r0, [r3, #0]
    4970:	f3bf 8f5b 	dmb	ish
    4974:	4770      	bx	lr
    4976:	bf00      	nop
    4978:	2007c0c0 	.word	0x2007c0c0

0000497c <std::terminate()>:
    497c:	b508      	push	{r3, lr}
    497e:	f7ff fff5 	bl	496c <std::get_terminate()>
    4982:	f7ff ffee 	bl	4962 <__cxxabiv1::__terminate(void (*)())>
    4986:	Address 0x0000000000004986 is out of bounds.


00004988 <__aeabi_d2f>:
    4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
    498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4990:	bf24      	itt	cs
    4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    499a:	d90d      	bls.n	49b8 <__aeabi_d2f+0x30>
    499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    49b0:	bf08      	it	eq
    49b2:	f020 0001 	biceq.w	r0, r0, #1
    49b6:	4770      	bx	lr
    49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    49bc:	d121      	bne.n	4a02 <__aeabi_d2f+0x7a>
    49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    49c2:	bfbc      	itt	lt
    49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    49c8:	4770      	bxlt	lr
    49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
    49d2:	f1c2 0218 	rsb	r2, r2, #24
    49d6:	f1c2 0c20 	rsb	ip, r2, #32
    49da:	fa10 f30c 	lsls.w	r3, r0, ip
    49de:	fa20 f002 	lsr.w	r0, r0, r2
    49e2:	bf18      	it	ne
    49e4:	f040 0001 	orrne.w	r0, r0, #1
    49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
    49f4:	ea40 000c 	orr.w	r0, r0, ip
    49f8:	fa23 f302 	lsr.w	r3, r3, r2
    49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4a00:	e7cc      	b.n	499c <__aeabi_d2f+0x14>
    4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4a06:	d107      	bne.n	4a18 <__aeabi_d2f+0x90>
    4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4a0c:	bf1e      	ittt	ne
    4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4a16:	4770      	bxne	lr
    4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop

00004a28 <__aeabi_frsub>:
    4a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4a2c:	e002      	b.n	4a34 <__addsf3>
    4a2e:	bf00      	nop

00004a30 <__aeabi_fsub>:
    4a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004a34 <__addsf3>:
    4a34:	0042      	lsls	r2, r0, #1
    4a36:	bf1f      	itttt	ne
    4a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4a3c:	ea92 0f03 	teqne	r2, r3
    4a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4a48:	d06a      	beq.n	4b20 <__addsf3+0xec>
    4a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4a52:	bfc1      	itttt	gt
    4a54:	18d2      	addgt	r2, r2, r3
    4a56:	4041      	eorgt	r1, r0
    4a58:	4048      	eorgt	r0, r1
    4a5a:	4041      	eorgt	r1, r0
    4a5c:	bfb8      	it	lt
    4a5e:	425b      	neglt	r3, r3
    4a60:	2b19      	cmp	r3, #25
    4a62:	bf88      	it	hi
    4a64:	4770      	bxhi	lr
    4a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4a72:	bf18      	it	ne
    4a74:	4240      	negne	r0, r0
    4a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4a82:	bf18      	it	ne
    4a84:	4249      	negne	r1, r1
    4a86:	ea92 0f03 	teq	r2, r3
    4a8a:	d03f      	beq.n	4b0c <__addsf3+0xd8>
    4a8c:	f1a2 0201 	sub.w	r2, r2, #1
    4a90:	fa41 fc03 	asr.w	ip, r1, r3
    4a94:	eb10 000c 	adds.w	r0, r0, ip
    4a98:	f1c3 0320 	rsb	r3, r3, #32
    4a9c:	fa01 f103 	lsl.w	r1, r1, r3
    4aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4aa4:	d502      	bpl.n	4aac <__addsf3+0x78>
    4aa6:	4249      	negs	r1, r1
    4aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4ab0:	d313      	bcc.n	4ada <__addsf3+0xa6>
    4ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4ab6:	d306      	bcc.n	4ac6 <__addsf3+0x92>
    4ab8:	0840      	lsrs	r0, r0, #1
    4aba:	ea4f 0131 	mov.w	r1, r1, rrx
    4abe:	f102 0201 	add.w	r2, r2, #1
    4ac2:	2afe      	cmp	r2, #254	; 0xfe
    4ac4:	d251      	bcs.n	4b6a <__addsf3+0x136>
    4ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4ace:	bf08      	it	eq
    4ad0:	f020 0001 	biceq.w	r0, r0, #1
    4ad4:	ea40 0003 	orr.w	r0, r0, r3
    4ad8:	4770      	bx	lr
    4ada:	0049      	lsls	r1, r1, #1
    4adc:	eb40 0000 	adc.w	r0, r0, r0
    4ae0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4ae4:	f1a2 0201 	sub.w	r2, r2, #1
    4ae8:	d1ed      	bne.n	4ac6 <__addsf3+0x92>
    4aea:	fab0 fc80 	clz	ip, r0
    4aee:	f1ac 0c08 	sub.w	ip, ip, #8
    4af2:	ebb2 020c 	subs.w	r2, r2, ip
    4af6:	fa00 f00c 	lsl.w	r0, r0, ip
    4afa:	bfaa      	itet	ge
    4afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4b00:	4252      	neglt	r2, r2
    4b02:	4318      	orrge	r0, r3
    4b04:	bfbc      	itt	lt
    4b06:	40d0      	lsrlt	r0, r2
    4b08:	4318      	orrlt	r0, r3
    4b0a:	4770      	bx	lr
    4b0c:	f092 0f00 	teq	r2, #0
    4b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4b14:	bf06      	itte	eq
    4b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4b1a:	3201      	addeq	r2, #1
    4b1c:	3b01      	subne	r3, #1
    4b1e:	e7b5      	b.n	4a8c <__addsf3+0x58>
    4b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4b28:	bf18      	it	ne
    4b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4b2e:	d021      	beq.n	4b74 <__addsf3+0x140>
    4b30:	ea92 0f03 	teq	r2, r3
    4b34:	d004      	beq.n	4b40 <__addsf3+0x10c>
    4b36:	f092 0f00 	teq	r2, #0
    4b3a:	bf08      	it	eq
    4b3c:	4608      	moveq	r0, r1
    4b3e:	4770      	bx	lr
    4b40:	ea90 0f01 	teq	r0, r1
    4b44:	bf1c      	itt	ne
    4b46:	2000      	movne	r0, #0
    4b48:	4770      	bxne	lr
    4b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4b4e:	d104      	bne.n	4b5a <__addsf3+0x126>
    4b50:	0040      	lsls	r0, r0, #1
    4b52:	bf28      	it	cs
    4b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4b58:	4770      	bx	lr
    4b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4b5e:	bf3c      	itt	cc
    4b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4b64:	4770      	bxcc	lr
    4b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b72:	4770      	bx	lr
    4b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4b78:	bf16      	itet	ne
    4b7a:	4608      	movne	r0, r1
    4b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4b80:	4601      	movne	r1, r0
    4b82:	0242      	lsls	r2, r0, #9
    4b84:	bf06      	itte	eq
    4b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4b8a:	ea90 0f01 	teqeq	r0, r1
    4b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4b92:	4770      	bx	lr

00004b94 <__aeabi_ui2f>:
    4b94:	f04f 0300 	mov.w	r3, #0
    4b98:	e004      	b.n	4ba4 <__aeabi_i2f+0x8>
    4b9a:	bf00      	nop

00004b9c <__aeabi_i2f>:
    4b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4ba0:	bf48      	it	mi
    4ba2:	4240      	negmi	r0, r0
    4ba4:	ea5f 0c00 	movs.w	ip, r0
    4ba8:	bf08      	it	eq
    4baa:	4770      	bxeq	lr
    4bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4bb0:	4601      	mov	r1, r0
    4bb2:	f04f 0000 	mov.w	r0, #0
    4bb6:	e01c      	b.n	4bf2 <__aeabi_l2f+0x2a>

00004bb8 <__aeabi_ul2f>:
    4bb8:	ea50 0201 	orrs.w	r2, r0, r1
    4bbc:	bf08      	it	eq
    4bbe:	4770      	bxeq	lr
    4bc0:	f04f 0300 	mov.w	r3, #0
    4bc4:	e00a      	b.n	4bdc <__aeabi_l2f+0x14>
    4bc6:	bf00      	nop

00004bc8 <__aeabi_l2f>:
    4bc8:	ea50 0201 	orrs.w	r2, r0, r1
    4bcc:	bf08      	it	eq
    4bce:	4770      	bxeq	lr
    4bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4bd4:	d502      	bpl.n	4bdc <__aeabi_l2f+0x14>
    4bd6:	4240      	negs	r0, r0
    4bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4bdc:	ea5f 0c01 	movs.w	ip, r1
    4be0:	bf02      	ittt	eq
    4be2:	4684      	moveq	ip, r0
    4be4:	4601      	moveq	r1, r0
    4be6:	2000      	moveq	r0, #0
    4be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4bec:	bf08      	it	eq
    4bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4bf6:	fabc f28c 	clz	r2, ip
    4bfa:	3a08      	subs	r2, #8
    4bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4c00:	db10      	blt.n	4c24 <__aeabi_l2f+0x5c>
    4c02:	fa01 fc02 	lsl.w	ip, r1, r2
    4c06:	4463      	add	r3, ip
    4c08:	fa00 fc02 	lsl.w	ip, r0, r2
    4c0c:	f1c2 0220 	rsb	r2, r2, #32
    4c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4c14:	fa20 f202 	lsr.w	r2, r0, r2
    4c18:	eb43 0002 	adc.w	r0, r3, r2
    4c1c:	bf08      	it	eq
    4c1e:	f020 0001 	biceq.w	r0, r0, #1
    4c22:	4770      	bx	lr
    4c24:	f102 0220 	add.w	r2, r2, #32
    4c28:	fa01 fc02 	lsl.w	ip, r1, r2
    4c2c:	f1c2 0220 	rsb	r2, r2, #32
    4c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4c34:	fa21 f202 	lsr.w	r2, r1, r2
    4c38:	eb43 0002 	adc.w	r0, r3, r2
    4c3c:	bf08      	it	eq
    4c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4c42:	4770      	bx	lr

00004c44 <__aeabi_fmul>:
    4c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4c4c:	bf1e      	ittt	ne
    4c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4c52:	ea92 0f0c 	teqne	r2, ip
    4c56:	ea93 0f0c 	teqne	r3, ip
    4c5a:	d06f      	beq.n	4d3c <__aeabi_fmul+0xf8>
    4c5c:	441a      	add	r2, r3
    4c5e:	ea80 0c01 	eor.w	ip, r0, r1
    4c62:	0240      	lsls	r0, r0, #9
    4c64:	bf18      	it	ne
    4c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    4c6a:	d01e      	beq.n	4caa <__aeabi_fmul+0x66>
    4c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    4c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    4c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    4c78:	fba0 3101 	umull	r3, r1, r0, r1
    4c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    4c84:	bf3e      	ittt	cc
    4c86:	0049      	lslcc	r1, r1, #1
    4c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    4c8c:	005b      	lslcc	r3, r3, #1
    4c8e:	ea40 0001 	orr.w	r0, r0, r1
    4c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    4c96:	2afd      	cmp	r2, #253	; 0xfd
    4c98:	d81d      	bhi.n	4cd6 <__aeabi_fmul+0x92>
    4c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4ca2:	bf08      	it	eq
    4ca4:	f020 0001 	biceq.w	r0, r0, #1
    4ca8:	4770      	bx	lr
    4caa:	f090 0f00 	teq	r0, #0
    4cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4cb2:	bf08      	it	eq
    4cb4:	0249      	lsleq	r1, r1, #9
    4cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    4cbe:	3a7f      	subs	r2, #127	; 0x7f
    4cc0:	bfc2      	ittt	gt
    4cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4cca:	4770      	bxgt	lr
    4ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4cd0:	f04f 0300 	mov.w	r3, #0
    4cd4:	3a01      	subs	r2, #1
    4cd6:	dc5d      	bgt.n	4d94 <__aeabi_fmul+0x150>
    4cd8:	f112 0f19 	cmn.w	r2, #25
    4cdc:	bfdc      	itt	le
    4cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    4ce2:	4770      	bxle	lr
    4ce4:	f1c2 0200 	rsb	r2, r2, #0
    4ce8:	0041      	lsls	r1, r0, #1
    4cea:	fa21 f102 	lsr.w	r1, r1, r2
    4cee:	f1c2 0220 	rsb	r2, r2, #32
    4cf2:	fa00 fc02 	lsl.w	ip, r0, r2
    4cf6:	ea5f 0031 	movs.w	r0, r1, rrx
    4cfa:	f140 0000 	adc.w	r0, r0, #0
    4cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    4d02:	bf08      	it	eq
    4d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4d08:	4770      	bx	lr
    4d0a:	f092 0f00 	teq	r2, #0
    4d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4d12:	bf02      	ittt	eq
    4d14:	0040      	lsleq	r0, r0, #1
    4d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4d1a:	3a01      	subeq	r2, #1
    4d1c:	d0f9      	beq.n	4d12 <__aeabi_fmul+0xce>
    4d1e:	ea40 000c 	orr.w	r0, r0, ip
    4d22:	f093 0f00 	teq	r3, #0
    4d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4d2a:	bf02      	ittt	eq
    4d2c:	0049      	lsleq	r1, r1, #1
    4d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4d32:	3b01      	subeq	r3, #1
    4d34:	d0f9      	beq.n	4d2a <__aeabi_fmul+0xe6>
    4d36:	ea41 010c 	orr.w	r1, r1, ip
    4d3a:	e78f      	b.n	4c5c <__aeabi_fmul+0x18>
    4d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4d40:	ea92 0f0c 	teq	r2, ip
    4d44:	bf18      	it	ne
    4d46:	ea93 0f0c 	teqne	r3, ip
    4d4a:	d00a      	beq.n	4d62 <__aeabi_fmul+0x11e>
    4d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4d50:	bf18      	it	ne
    4d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4d56:	d1d8      	bne.n	4d0a <__aeabi_fmul+0xc6>
    4d58:	ea80 0001 	eor.w	r0, r0, r1
    4d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4d60:	4770      	bx	lr
    4d62:	f090 0f00 	teq	r0, #0
    4d66:	bf17      	itett	ne
    4d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    4d6c:	4608      	moveq	r0, r1
    4d6e:	f091 0f00 	teqne	r1, #0
    4d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    4d76:	d014      	beq.n	4da2 <__aeabi_fmul+0x15e>
    4d78:	ea92 0f0c 	teq	r2, ip
    4d7c:	d101      	bne.n	4d82 <__aeabi_fmul+0x13e>
    4d7e:	0242      	lsls	r2, r0, #9
    4d80:	d10f      	bne.n	4da2 <__aeabi_fmul+0x15e>
    4d82:	ea93 0f0c 	teq	r3, ip
    4d86:	d103      	bne.n	4d90 <__aeabi_fmul+0x14c>
    4d88:	024b      	lsls	r3, r1, #9
    4d8a:	bf18      	it	ne
    4d8c:	4608      	movne	r0, r1
    4d8e:	d108      	bne.n	4da2 <__aeabi_fmul+0x15e>
    4d90:	ea80 0001 	eor.w	r0, r0, r1
    4d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4da0:	4770      	bx	lr
    4da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    4daa:	4770      	bx	lr

00004dac <__aeabi_fdiv>:
    4dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4db4:	bf1e      	ittt	ne
    4db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4dba:	ea92 0f0c 	teqne	r2, ip
    4dbe:	ea93 0f0c 	teqne	r3, ip
    4dc2:	d069      	beq.n	4e98 <__aeabi_fdiv+0xec>
    4dc4:	eba2 0203 	sub.w	r2, r2, r3
    4dc8:	ea80 0c01 	eor.w	ip, r0, r1
    4dcc:	0249      	lsls	r1, r1, #9
    4dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
    4dd2:	d037      	beq.n	4e44 <__aeabi_fdiv+0x98>
    4dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    4ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    4de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4de4:	428b      	cmp	r3, r1
    4de6:	bf38      	it	cc
    4de8:	005b      	lslcc	r3, r3, #1
    4dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    4dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    4df2:	428b      	cmp	r3, r1
    4df4:	bf24      	itt	cs
    4df6:	1a5b      	subcs	r3, r3, r1
    4df8:	ea40 000c 	orrcs.w	r0, r0, ip
    4dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    4e00:	bf24      	itt	cs
    4e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    4e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    4e0e:	bf24      	itt	cs
    4e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    4e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4e1c:	bf24      	itt	cs
    4e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    4e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4e26:	011b      	lsls	r3, r3, #4
    4e28:	bf18      	it	ne
    4e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    4e2e:	d1e0      	bne.n	4df2 <__aeabi_fdiv+0x46>
    4e30:	2afd      	cmp	r2, #253	; 0xfd
    4e32:	f63f af50 	bhi.w	4cd6 <__aeabi_fmul+0x92>
    4e36:	428b      	cmp	r3, r1
    4e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4e3c:	bf08      	it	eq
    4e3e:	f020 0001 	biceq.w	r0, r0, #1
    4e42:	4770      	bx	lr
    4e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4e4c:	327f      	adds	r2, #127	; 0x7f
    4e4e:	bfc2      	ittt	gt
    4e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4e58:	4770      	bxgt	lr
    4e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4e5e:	f04f 0300 	mov.w	r3, #0
    4e62:	3a01      	subs	r2, #1
    4e64:	e737      	b.n	4cd6 <__aeabi_fmul+0x92>
    4e66:	f092 0f00 	teq	r2, #0
    4e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4e6e:	bf02      	ittt	eq
    4e70:	0040      	lsleq	r0, r0, #1
    4e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4e76:	3a01      	subeq	r2, #1
    4e78:	d0f9      	beq.n	4e6e <__aeabi_fdiv+0xc2>
    4e7a:	ea40 000c 	orr.w	r0, r0, ip
    4e7e:	f093 0f00 	teq	r3, #0
    4e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4e86:	bf02      	ittt	eq
    4e88:	0049      	lsleq	r1, r1, #1
    4e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4e8e:	3b01      	subeq	r3, #1
    4e90:	d0f9      	beq.n	4e86 <__aeabi_fdiv+0xda>
    4e92:	ea41 010c 	orr.w	r1, r1, ip
    4e96:	e795      	b.n	4dc4 <__aeabi_fdiv+0x18>
    4e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4e9c:	ea92 0f0c 	teq	r2, ip
    4ea0:	d108      	bne.n	4eb4 <__aeabi_fdiv+0x108>
    4ea2:	0242      	lsls	r2, r0, #9
    4ea4:	f47f af7d 	bne.w	4da2 <__aeabi_fmul+0x15e>
    4ea8:	ea93 0f0c 	teq	r3, ip
    4eac:	f47f af70 	bne.w	4d90 <__aeabi_fmul+0x14c>
    4eb0:	4608      	mov	r0, r1
    4eb2:	e776      	b.n	4da2 <__aeabi_fmul+0x15e>
    4eb4:	ea93 0f0c 	teq	r3, ip
    4eb8:	d104      	bne.n	4ec4 <__aeabi_fdiv+0x118>
    4eba:	024b      	lsls	r3, r1, #9
    4ebc:	f43f af4c 	beq.w	4d58 <__aeabi_fmul+0x114>
    4ec0:	4608      	mov	r0, r1
    4ec2:	e76e      	b.n	4da2 <__aeabi_fmul+0x15e>
    4ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4ec8:	bf18      	it	ne
    4eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4ece:	d1ca      	bne.n	4e66 <__aeabi_fdiv+0xba>
    4ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    4ed4:	f47f af5c 	bne.w	4d90 <__aeabi_fmul+0x14c>
    4ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    4edc:	f47f af3c 	bne.w	4d58 <__aeabi_fmul+0x114>
    4ee0:	e75f      	b.n	4da2 <__aeabi_fmul+0x15e>
    4ee2:	bf00      	nop

00004ee4 <__gesf2>:
    4ee4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4ee8:	e006      	b.n	4ef8 <__cmpsf2+0x4>
    4eea:	bf00      	nop

00004eec <__lesf2>:
    4eec:	f04f 0c01 	mov.w	ip, #1
    4ef0:	e002      	b.n	4ef8 <__cmpsf2+0x4>
    4ef2:	bf00      	nop

00004ef4 <__cmpsf2>:
    4ef4:	f04f 0c01 	mov.w	ip, #1
    4ef8:	f84d cd04 	str.w	ip, [sp, #-4]!
    4efc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4f00:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4f04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4f08:	bf18      	it	ne
    4f0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4f0e:	d011      	beq.n	4f34 <__cmpsf2+0x40>
    4f10:	b001      	add	sp, #4
    4f12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    4f16:	bf18      	it	ne
    4f18:	ea90 0f01 	teqne	r0, r1
    4f1c:	bf58      	it	pl
    4f1e:	ebb2 0003 	subspl.w	r0, r2, r3
    4f22:	bf88      	it	hi
    4f24:	17c8      	asrhi	r0, r1, #31
    4f26:	bf38      	it	cc
    4f28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    4f2c:	bf18      	it	ne
    4f2e:	f040 0001 	orrne.w	r0, r0, #1
    4f32:	4770      	bx	lr
    4f34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4f38:	d102      	bne.n	4f40 <__cmpsf2+0x4c>
    4f3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    4f3e:	d105      	bne.n	4f4c <__cmpsf2+0x58>
    4f40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    4f44:	d1e4      	bne.n	4f10 <__cmpsf2+0x1c>
    4f46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    4f4a:	d0e1      	beq.n	4f10 <__cmpsf2+0x1c>
    4f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
    4f50:	4770      	bx	lr
    4f52:	bf00      	nop

00004f54 <__aeabi_cfrcmple>:
    4f54:	4684      	mov	ip, r0
    4f56:	4608      	mov	r0, r1
    4f58:	4661      	mov	r1, ip
    4f5a:	e7ff      	b.n	4f5c <__aeabi_cfcmpeq>

00004f5c <__aeabi_cfcmpeq>:
    4f5c:	b50f      	push	{r0, r1, r2, r3, lr}
    4f5e:	f7ff ffc9 	bl	4ef4 <__cmpsf2>
    4f62:	2800      	cmp	r0, #0
    4f64:	bf48      	it	mi
    4f66:	f110 0f00 	cmnmi.w	r0, #0
    4f6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

00004f6c <__aeabi_fcmpeq>:
    4f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f70:	f7ff fff4 	bl	4f5c <__aeabi_cfcmpeq>
    4f74:	bf0c      	ite	eq
    4f76:	2001      	moveq	r0, #1
    4f78:	2000      	movne	r0, #0
    4f7a:	f85d fb08 	ldr.w	pc, [sp], #8
    4f7e:	bf00      	nop

00004f80 <__aeabi_fcmplt>:
    4f80:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f84:	f7ff ffea 	bl	4f5c <__aeabi_cfcmpeq>
    4f88:	bf34      	ite	cc
    4f8a:	2001      	movcc	r0, #1
    4f8c:	2000      	movcs	r0, #0
    4f8e:	f85d fb08 	ldr.w	pc, [sp], #8
    4f92:	bf00      	nop

00004f94 <__aeabi_fcmple>:
    4f94:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f98:	f7ff ffe0 	bl	4f5c <__aeabi_cfcmpeq>
    4f9c:	bf94      	ite	ls
    4f9e:	2001      	movls	r0, #1
    4fa0:	2000      	movhi	r0, #0
    4fa2:	f85d fb08 	ldr.w	pc, [sp], #8
    4fa6:	bf00      	nop

00004fa8 <__aeabi_fcmpge>:
    4fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
    4fac:	f7ff ffd2 	bl	4f54 <__aeabi_cfrcmple>
    4fb0:	bf94      	ite	ls
    4fb2:	2001      	movls	r0, #1
    4fb4:	2000      	movhi	r0, #0
    4fb6:	f85d fb08 	ldr.w	pc, [sp], #8
    4fba:	bf00      	nop

00004fbc <__aeabi_fcmpgt>:
    4fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
    4fc0:	f7ff ffc8 	bl	4f54 <__aeabi_cfrcmple>
    4fc4:	bf34      	ite	cc
    4fc6:	2001      	movcc	r0, #1
    4fc8:	2000      	movcs	r0, #0
    4fca:	f85d fb08 	ldr.w	pc, [sp], #8
    4fce:	bf00      	nop

00004fd0 <__aeabi_f2iz>:
    4fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4fd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    4fd8:	d30f      	bcc.n	4ffa <__aeabi_f2iz+0x2a>
    4fda:	f04f 039e 	mov.w	r3, #158	; 0x9e
    4fde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    4fe2:	d90d      	bls.n	5000 <__aeabi_f2iz+0x30>
    4fe4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    4fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4fec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4ff0:	fa23 f002 	lsr.w	r0, r3, r2
    4ff4:	bf18      	it	ne
    4ff6:	4240      	negne	r0, r0
    4ff8:	4770      	bx	lr
    4ffa:	f04f 0000 	mov.w	r0, #0
    4ffe:	4770      	bx	lr
    5000:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5004:	d101      	bne.n	500a <__aeabi_f2iz+0x3a>
    5006:	0242      	lsls	r2, r0, #9
    5008:	d105      	bne.n	5016 <__aeabi_f2iz+0x46>
    500a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    500e:	bf08      	it	eq
    5010:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    5014:	4770      	bx	lr
    5016:	f04f 0000 	mov.w	r0, #0
    501a:	4770      	bx	lr

0000501c <__aeabi_f2uiz>:
    501c:	0042      	lsls	r2, r0, #1
    501e:	d20e      	bcs.n	503e <__aeabi_f2uiz+0x22>
    5020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    5024:	d30b      	bcc.n	503e <__aeabi_f2uiz+0x22>
    5026:	f04f 039e 	mov.w	r3, #158	; 0x9e
    502a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    502e:	d409      	bmi.n	5044 <__aeabi_f2uiz+0x28>
    5030:	ea4f 2300 	mov.w	r3, r0, lsl #8
    5034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5038:	fa23 f002 	lsr.w	r0, r3, r2
    503c:	4770      	bx	lr
    503e:	f04f 0000 	mov.w	r0, #0
    5042:	4770      	bx	lr
    5044:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5048:	d101      	bne.n	504e <__aeabi_f2uiz+0x32>
    504a:	0242      	lsls	r2, r0, #9
    504c:	d102      	bne.n	5054 <__aeabi_f2uiz+0x38>
    504e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5052:	4770      	bx	lr
    5054:	f04f 0000 	mov.w	r0, #0
    5058:	4770      	bx	lr
    505a:	bf00      	nop

0000505c <__aeabi_uldivmod>:
    505c:	b953      	cbnz	r3, 5074 <__aeabi_uldivmod+0x18>
    505e:	b94a      	cbnz	r2, 5074 <__aeabi_uldivmod+0x18>
    5060:	2900      	cmp	r1, #0
    5062:	bf08      	it	eq
    5064:	2800      	cmpeq	r0, #0
    5066:	bf1c      	itt	ne
    5068:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    506c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    5070:	f001 b906 	b.w	6280 <__aeabi_idiv0>
    5074:	f1ad 0c08 	sub.w	ip, sp, #8
    5078:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    507c:	f000 f806 	bl	508c <__udivmoddi4>
    5080:	f8dd e004 	ldr.w	lr, [sp, #4]
    5084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5088:	b004      	add	sp, #16
    508a:	4770      	bx	lr

0000508c <__udivmoddi4>:
    508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5090:	468c      	mov	ip, r1
    5092:	4604      	mov	r4, r0
    5094:	9e08      	ldr	r6, [sp, #32]
    5096:	2b00      	cmp	r3, #0
    5098:	d14b      	bne.n	5132 <__udivmoddi4+0xa6>
    509a:	428a      	cmp	r2, r1
    509c:	4615      	mov	r5, r2
    509e:	d967      	bls.n	5170 <__udivmoddi4+0xe4>
    50a0:	fab2 f282 	clz	r2, r2
    50a4:	b14a      	cbz	r2, 50ba <__udivmoddi4+0x2e>
    50a6:	f1c2 0720 	rsb	r7, r2, #32
    50aa:	fa01 f302 	lsl.w	r3, r1, r2
    50ae:	fa20 f707 	lsr.w	r7, r0, r7
    50b2:	4095      	lsls	r5, r2
    50b4:	ea47 0c03 	orr.w	ip, r7, r3
    50b8:	4094      	lsls	r4, r2
    50ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    50be:	fbbc f7fe 	udiv	r7, ip, lr
    50c2:	fa1f f885 	uxth.w	r8, r5
    50c6:	fb0e c317 	mls	r3, lr, r7, ip
    50ca:	fb07 f908 	mul.w	r9, r7, r8
    50ce:	0c21      	lsrs	r1, r4, #16
    50d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    50d4:	4599      	cmp	r9, r3
    50d6:	d909      	bls.n	50ec <__udivmoddi4+0x60>
    50d8:	18eb      	adds	r3, r5, r3
    50da:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
    50de:	f080 811c 	bcs.w	531a <__udivmoddi4+0x28e>
    50e2:	4599      	cmp	r9, r3
    50e4:	f240 8119 	bls.w	531a <__udivmoddi4+0x28e>
    50e8:	3f02      	subs	r7, #2
    50ea:	442b      	add	r3, r5
    50ec:	eba3 0309 	sub.w	r3, r3, r9
    50f0:	fbb3 f0fe 	udiv	r0, r3, lr
    50f4:	fb0e 3310 	mls	r3, lr, r0, r3
    50f8:	fb00 f108 	mul.w	r1, r0, r8
    50fc:	b2a4      	uxth	r4, r4
    50fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    5102:	42a1      	cmp	r1, r4
    5104:	d909      	bls.n	511a <__udivmoddi4+0x8e>
    5106:	192c      	adds	r4, r5, r4
    5108:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    510c:	f080 8107 	bcs.w	531e <__udivmoddi4+0x292>
    5110:	42a1      	cmp	r1, r4
    5112:	f240 8104 	bls.w	531e <__udivmoddi4+0x292>
    5116:	3802      	subs	r0, #2
    5118:	442c      	add	r4, r5
    511a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    511e:	2700      	movs	r7, #0
    5120:	1a64      	subs	r4, r4, r1
    5122:	b11e      	cbz	r6, 512c <__udivmoddi4+0xa0>
    5124:	2300      	movs	r3, #0
    5126:	40d4      	lsrs	r4, r2
    5128:	e9c6 4300 	strd	r4, r3, [r6]
    512c:	4639      	mov	r1, r7
    512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5132:	428b      	cmp	r3, r1
    5134:	d909      	bls.n	514a <__udivmoddi4+0xbe>
    5136:	2e00      	cmp	r6, #0
    5138:	f000 80ec 	beq.w	5314 <__udivmoddi4+0x288>
    513c:	2700      	movs	r7, #0
    513e:	e9c6 0100 	strd	r0, r1, [r6]
    5142:	4638      	mov	r0, r7
    5144:	4639      	mov	r1, r7
    5146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    514a:	fab3 f783 	clz	r7, r3
    514e:	2f00      	cmp	r7, #0
    5150:	d148      	bne.n	51e4 <__udivmoddi4+0x158>
    5152:	428b      	cmp	r3, r1
    5154:	d302      	bcc.n	515c <__udivmoddi4+0xd0>
    5156:	4282      	cmp	r2, r0
    5158:	f200 80fb 	bhi.w	5352 <__udivmoddi4+0x2c6>
    515c:	1a84      	subs	r4, r0, r2
    515e:	eb61 0303 	sbc.w	r3, r1, r3
    5162:	2001      	movs	r0, #1
    5164:	469c      	mov	ip, r3
    5166:	2e00      	cmp	r6, #0
    5168:	d0e0      	beq.n	512c <__udivmoddi4+0xa0>
    516a:	e9c6 4c00 	strd	r4, ip, [r6]
    516e:	e7dd      	b.n	512c <__udivmoddi4+0xa0>
    5170:	b902      	cbnz	r2, 5174 <__udivmoddi4+0xe8>
    5172:	deff      	udf	#255	; 0xff
    5174:	fab2 f282 	clz	r2, r2
    5178:	2a00      	cmp	r2, #0
    517a:	f040 808f 	bne.w	529c <__udivmoddi4+0x210>
    517e:	2701      	movs	r7, #1
    5180:	1b49      	subs	r1, r1, r5
    5182:	ea4f 4815 	mov.w	r8, r5, lsr #16
    5186:	fa1f f985 	uxth.w	r9, r5
    518a:	fbb1 fef8 	udiv	lr, r1, r8
    518e:	fb08 111e 	mls	r1, r8, lr, r1
    5192:	fb09 f00e 	mul.w	r0, r9, lr
    5196:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    519a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
    519e:	4298      	cmp	r0, r3
    51a0:	d907      	bls.n	51b2 <__udivmoddi4+0x126>
    51a2:	18eb      	adds	r3, r5, r3
    51a4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    51a8:	d202      	bcs.n	51b0 <__udivmoddi4+0x124>
    51aa:	4298      	cmp	r0, r3
    51ac:	f200 80cd 	bhi.w	534a <__udivmoddi4+0x2be>
    51b0:	468e      	mov	lr, r1
    51b2:	1a1b      	subs	r3, r3, r0
    51b4:	fbb3 f0f8 	udiv	r0, r3, r8
    51b8:	fb08 3310 	mls	r3, r8, r0, r3
    51bc:	fb09 f900 	mul.w	r9, r9, r0
    51c0:	b2a4      	uxth	r4, r4
    51c2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    51c6:	45a1      	cmp	r9, r4
    51c8:	d907      	bls.n	51da <__udivmoddi4+0x14e>
    51ca:	192c      	adds	r4, r5, r4
    51cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    51d0:	d202      	bcs.n	51d8 <__udivmoddi4+0x14c>
    51d2:	45a1      	cmp	r9, r4
    51d4:	f200 80b6 	bhi.w	5344 <__udivmoddi4+0x2b8>
    51d8:	4618      	mov	r0, r3
    51da:	eba4 0409 	sub.w	r4, r4, r9
    51de:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    51e2:	e79e      	b.n	5122 <__udivmoddi4+0x96>
    51e4:	f1c7 0520 	rsb	r5, r7, #32
    51e8:	40bb      	lsls	r3, r7
    51ea:	fa22 fc05 	lsr.w	ip, r2, r5
    51ee:	ea4c 0c03 	orr.w	ip, ip, r3
    51f2:	fa21 f405 	lsr.w	r4, r1, r5
    51f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    51fa:	fbb4 f9fe 	udiv	r9, r4, lr
    51fe:	fa1f f88c 	uxth.w	r8, ip
    5202:	fb0e 4419 	mls	r4, lr, r9, r4
    5206:	fa20 f305 	lsr.w	r3, r0, r5
    520a:	40b9      	lsls	r1, r7
    520c:	fb09 fa08 	mul.w	sl, r9, r8
    5210:	4319      	orrs	r1, r3
    5212:	0c0b      	lsrs	r3, r1, #16
    5214:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    5218:	45a2      	cmp	sl, r4
    521a:	fa02 f207 	lsl.w	r2, r2, r7
    521e:	fa00 f307 	lsl.w	r3, r0, r7
    5222:	d90b      	bls.n	523c <__udivmoddi4+0x1b0>
    5224:	eb1c 0404 	adds.w	r4, ip, r4
    5228:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    522c:	f080 8088 	bcs.w	5340 <__udivmoddi4+0x2b4>
    5230:	45a2      	cmp	sl, r4
    5232:	f240 8085 	bls.w	5340 <__udivmoddi4+0x2b4>
    5236:	f1a9 0902 	sub.w	r9, r9, #2
    523a:	4464      	add	r4, ip
    523c:	eba4 040a 	sub.w	r4, r4, sl
    5240:	fbb4 f0fe 	udiv	r0, r4, lr
    5244:	fb0e 4410 	mls	r4, lr, r0, r4
    5248:	fb00 fa08 	mul.w	sl, r0, r8
    524c:	b289      	uxth	r1, r1
    524e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
    5252:	45a2      	cmp	sl, r4
    5254:	d908      	bls.n	5268 <__udivmoddi4+0x1dc>
    5256:	eb1c 0404 	adds.w	r4, ip, r4
    525a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    525e:	d26b      	bcs.n	5338 <__udivmoddi4+0x2ac>
    5260:	45a2      	cmp	sl, r4
    5262:	d969      	bls.n	5338 <__udivmoddi4+0x2ac>
    5264:	3802      	subs	r0, #2
    5266:	4464      	add	r4, ip
    5268:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    526c:	fba0 8902 	umull	r8, r9, r0, r2
    5270:	eba4 040a 	sub.w	r4, r4, sl
    5274:	454c      	cmp	r4, r9
    5276:	4641      	mov	r1, r8
    5278:	46ce      	mov	lr, r9
    527a:	d354      	bcc.n	5326 <__udivmoddi4+0x29a>
    527c:	d051      	beq.n	5322 <__udivmoddi4+0x296>
    527e:	2e00      	cmp	r6, #0
    5280:	d069      	beq.n	5356 <__udivmoddi4+0x2ca>
    5282:	1a5a      	subs	r2, r3, r1
    5284:	eb64 040e 	sbc.w	r4, r4, lr
    5288:	fa04 f505 	lsl.w	r5, r4, r5
    528c:	fa22 f307 	lsr.w	r3, r2, r7
    5290:	40fc      	lsrs	r4, r7
    5292:	431d      	orrs	r5, r3
    5294:	e9c6 5400 	strd	r5, r4, [r6]
    5298:	2700      	movs	r7, #0
    529a:	e747      	b.n	512c <__udivmoddi4+0xa0>
    529c:	4095      	lsls	r5, r2
    529e:	f1c2 0320 	rsb	r3, r2, #32
    52a2:	fa21 f003 	lsr.w	r0, r1, r3
    52a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
    52aa:	fbb0 f7f8 	udiv	r7, r0, r8
    52ae:	fa1f f985 	uxth.w	r9, r5
    52b2:	fb08 0017 	mls	r0, r8, r7, r0
    52b6:	fa24 f303 	lsr.w	r3, r4, r3
    52ba:	4091      	lsls	r1, r2
    52bc:	fb07 fc09 	mul.w	ip, r7, r9
    52c0:	430b      	orrs	r3, r1
    52c2:	0c19      	lsrs	r1, r3, #16
    52c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    52c8:	458c      	cmp	ip, r1
    52ca:	fa04 f402 	lsl.w	r4, r4, r2
    52ce:	d907      	bls.n	52e0 <__udivmoddi4+0x254>
    52d0:	1869      	adds	r1, r5, r1
    52d2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    52d6:	d231      	bcs.n	533c <__udivmoddi4+0x2b0>
    52d8:	458c      	cmp	ip, r1
    52da:	d92f      	bls.n	533c <__udivmoddi4+0x2b0>
    52dc:	3f02      	subs	r7, #2
    52de:	4429      	add	r1, r5
    52e0:	eba1 010c 	sub.w	r1, r1, ip
    52e4:	fbb1 f0f8 	udiv	r0, r1, r8
    52e8:	fb08 1c10 	mls	ip, r8, r0, r1
    52ec:	fb00 fe09 	mul.w	lr, r0, r9
    52f0:	b299      	uxth	r1, r3
    52f2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    52f6:	458e      	cmp	lr, r1
    52f8:	d907      	bls.n	530a <__udivmoddi4+0x27e>
    52fa:	1869      	adds	r1, r5, r1
    52fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5300:	d218      	bcs.n	5334 <__udivmoddi4+0x2a8>
    5302:	458e      	cmp	lr, r1
    5304:	d916      	bls.n	5334 <__udivmoddi4+0x2a8>
    5306:	3802      	subs	r0, #2
    5308:	4429      	add	r1, r5
    530a:	eba1 010e 	sub.w	r1, r1, lr
    530e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    5312:	e73a      	b.n	518a <__udivmoddi4+0xfe>
    5314:	4637      	mov	r7, r6
    5316:	4630      	mov	r0, r6
    5318:	e708      	b.n	512c <__udivmoddi4+0xa0>
    531a:	460f      	mov	r7, r1
    531c:	e6e6      	b.n	50ec <__udivmoddi4+0x60>
    531e:	4618      	mov	r0, r3
    5320:	e6fb      	b.n	511a <__udivmoddi4+0x8e>
    5322:	4543      	cmp	r3, r8
    5324:	d2ab      	bcs.n	527e <__udivmoddi4+0x1f2>
    5326:	ebb8 0102 	subs.w	r1, r8, r2
    532a:	eb69 020c 	sbc.w	r2, r9, ip
    532e:	3801      	subs	r0, #1
    5330:	4696      	mov	lr, r2
    5332:	e7a4      	b.n	527e <__udivmoddi4+0x1f2>
    5334:	4618      	mov	r0, r3
    5336:	e7e8      	b.n	530a <__udivmoddi4+0x27e>
    5338:	4608      	mov	r0, r1
    533a:	e795      	b.n	5268 <__udivmoddi4+0x1dc>
    533c:	4607      	mov	r7, r0
    533e:	e7cf      	b.n	52e0 <__udivmoddi4+0x254>
    5340:	4681      	mov	r9, r0
    5342:	e77b      	b.n	523c <__udivmoddi4+0x1b0>
    5344:	3802      	subs	r0, #2
    5346:	442c      	add	r4, r5
    5348:	e747      	b.n	51da <__udivmoddi4+0x14e>
    534a:	f1ae 0e02 	sub.w	lr, lr, #2
    534e:	442b      	add	r3, r5
    5350:	e72f      	b.n	51b2 <__udivmoddi4+0x126>
    5352:	4638      	mov	r0, r7
    5354:	e707      	b.n	5166 <__udivmoddi4+0xda>
    5356:	4637      	mov	r7, r6
    5358:	e6e8      	b.n	512c <__udivmoddi4+0xa0>
    535a:	bf00      	nop

0000535c <selfrel_offset31>:
    535c:	6803      	ldr	r3, [r0, #0]
    535e:	005a      	lsls	r2, r3, #1
    5360:	bf4c      	ite	mi
    5362:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    5366:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    536a:	4418      	add	r0, r3
    536c:	4770      	bx	lr
    536e:	bf00      	nop

00005370 <search_EIT_table>:
    5370:	b361      	cbz	r1, 53cc <search_EIT_table+0x5c>
    5372:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5376:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    537a:	4690      	mov	r8, r2
    537c:	4606      	mov	r6, r0
    537e:	46d1      	mov	r9, sl
    5380:	2700      	movs	r7, #0
    5382:	eb07 0409 	add.w	r4, r7, r9
    5386:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    538a:	1064      	asrs	r4, r4, #1
    538c:	00e5      	lsls	r5, r4, #3
    538e:	1971      	adds	r1, r6, r5
    5390:	4608      	mov	r0, r1
    5392:	f7ff ffe3 	bl	535c <selfrel_offset31>
    5396:	45a2      	cmp	sl, r4
    5398:	4683      	mov	fp, r0
    539a:	f105 0008 	add.w	r0, r5, #8
    539e:	4430      	add	r0, r6
    53a0:	d009      	beq.n	53b6 <search_EIT_table+0x46>
    53a2:	f7ff ffdb 	bl	535c <selfrel_offset31>
    53a6:	45c3      	cmp	fp, r8
    53a8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    53ac:	d805      	bhi.n	53ba <search_EIT_table+0x4a>
    53ae:	4540      	cmp	r0, r8
    53b0:	d209      	bcs.n	53c6 <search_EIT_table+0x56>
    53b2:	1c67      	adds	r7, r4, #1
    53b4:	e7e5      	b.n	5382 <search_EIT_table+0x12>
    53b6:	45c3      	cmp	fp, r8
    53b8:	d905      	bls.n	53c6 <search_EIT_table+0x56>
    53ba:	42a7      	cmp	r7, r4
    53bc:	d002      	beq.n	53c4 <search_EIT_table+0x54>
    53be:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    53c2:	e7de      	b.n	5382 <search_EIT_table+0x12>
    53c4:	2100      	movs	r1, #0
    53c6:	4608      	mov	r0, r1
    53c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53cc:	4608      	mov	r0, r1
    53ce:	4770      	bx	lr

000053d0 <__gnu_unwind_get_pr_addr>:
    53d0:	2801      	cmp	r0, #1
    53d2:	d007      	beq.n	53e4 <__gnu_unwind_get_pr_addr+0x14>
    53d4:	2802      	cmp	r0, #2
    53d6:	d007      	beq.n	53e8 <__gnu_unwind_get_pr_addr+0x18>
    53d8:	4b04      	ldr	r3, [pc, #16]	; (53ec <__gnu_unwind_get_pr_addr+0x1c>)
    53da:	2800      	cmp	r0, #0
    53dc:	bf0c      	ite	eq
    53de:	4618      	moveq	r0, r3
    53e0:	2000      	movne	r0, #0
    53e2:	4770      	bx	lr
    53e4:	4802      	ldr	r0, [pc, #8]	; (53f0 <__gnu_unwind_get_pr_addr+0x20>)
    53e6:	4770      	bx	lr
    53e8:	4802      	ldr	r0, [pc, #8]	; (53f4 <__gnu_unwind_get_pr_addr+0x24>)
    53ea:	4770      	bx	lr
    53ec:	00005acd 	.word	0x00005acd
    53f0:	00005ad1 	.word	0x00005ad1
    53f4:	00005ad5 	.word	0x00005ad5

000053f8 <get_eit_entry>:
    53f8:	b530      	push	{r4, r5, lr}
    53fa:	4b26      	ldr	r3, [pc, #152]	; (5494 <get_eit_entry+0x9c>)
    53fc:	b083      	sub	sp, #12
    53fe:	4604      	mov	r4, r0
    5400:	1e8d      	subs	r5, r1, #2
    5402:	b34b      	cbz	r3, 5458 <get_eit_entry+0x60>
    5404:	a901      	add	r1, sp, #4
    5406:	4628      	mov	r0, r5
    5408:	f3af 8000 	nop.w
    540c:	b1f0      	cbz	r0, 544c <get_eit_entry+0x54>
    540e:	9901      	ldr	r1, [sp, #4]
    5410:	462a      	mov	r2, r5
    5412:	f7ff ffad 	bl	5370 <search_EIT_table>
    5416:	4601      	mov	r1, r0
    5418:	b1c0      	cbz	r0, 544c <get_eit_entry+0x54>
    541a:	f7ff ff9f 	bl	535c <selfrel_offset31>
    541e:	684b      	ldr	r3, [r1, #4]
    5420:	64a0      	str	r0, [r4, #72]	; 0x48
    5422:	2b01      	cmp	r3, #1
    5424:	d02f      	beq.n	5486 <get_eit_entry+0x8e>
    5426:	2b00      	cmp	r3, #0
    5428:	f101 0004 	add.w	r0, r1, #4
    542c:	db27      	blt.n	547e <get_eit_entry+0x86>
    542e:	f7ff ff95 	bl	535c <selfrel_offset31>
    5432:	2300      	movs	r3, #0
    5434:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5438:	6803      	ldr	r3, [r0, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	db13      	blt.n	5466 <get_eit_entry+0x6e>
    543e:	f7ff ff8d 	bl	535c <selfrel_offset31>
    5442:	2300      	movs	r3, #0
    5444:	6120      	str	r0, [r4, #16]
    5446:	4618      	mov	r0, r3
    5448:	b003      	add	sp, #12
    544a:	bd30      	pop	{r4, r5, pc}
    544c:	2309      	movs	r3, #9
    544e:	2200      	movs	r2, #0
    5450:	4618      	mov	r0, r3
    5452:	6122      	str	r2, [r4, #16]
    5454:	b003      	add	sp, #12
    5456:	bd30      	pop	{r4, r5, pc}
    5458:	4b0f      	ldr	r3, [pc, #60]	; (5498 <get_eit_entry+0xa0>)
    545a:	4910      	ldr	r1, [pc, #64]	; (549c <get_eit_entry+0xa4>)
    545c:	4618      	mov	r0, r3
    545e:	1ac9      	subs	r1, r1, r3
    5460:	10c9      	asrs	r1, r1, #3
    5462:	9101      	str	r1, [sp, #4]
    5464:	e7d4      	b.n	5410 <get_eit_entry+0x18>
    5466:	f3c3 6003 	ubfx	r0, r3, #24, #4
    546a:	f7ff ffb1 	bl	53d0 <__gnu_unwind_get_pr_addr>
    546e:	2800      	cmp	r0, #0
    5470:	bf14      	ite	ne
    5472:	2300      	movne	r3, #0
    5474:	2309      	moveq	r3, #9
    5476:	6120      	str	r0, [r4, #16]
    5478:	4618      	mov	r0, r3
    547a:	b003      	add	sp, #12
    547c:	bd30      	pop	{r4, r5, pc}
    547e:	2301      	movs	r3, #1
    5480:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5484:	e7d8      	b.n	5438 <get_eit_entry+0x40>
    5486:	2305      	movs	r3, #5
    5488:	2200      	movs	r2, #0
    548a:	4618      	mov	r0, r3
    548c:	6122      	str	r2, [r4, #16]
    548e:	b003      	add	sp, #12
    5490:	bd30      	pop	{r4, r5, pc}
    5492:	bf00      	nop
    5494:	00000000 	.word	0x00000000
    5498:	000081f4 	.word	0x000081f4
    549c:	000082ac 	.word	0x000082ac

000054a0 <restore_non_core_regs>:
    54a0:	6803      	ldr	r3, [r0, #0]
    54a2:	b510      	push	{r4, lr}
    54a4:	07da      	lsls	r2, r3, #31
    54a6:	4604      	mov	r4, r0
    54a8:	d406      	bmi.n	54b8 <restore_non_core_regs+0x18>
    54aa:	079b      	lsls	r3, r3, #30
    54ac:	f100 0048 	add.w	r0, r0, #72	; 0x48
    54b0:	d509      	bpl.n	54c6 <restore_non_core_regs+0x26>
    54b2:	f000 fc67 	bl	5d84 <__gnu_Unwind_Restore_VFP_D>
    54b6:	6823      	ldr	r3, [r4, #0]
    54b8:	0759      	lsls	r1, r3, #29
    54ba:	d509      	bpl.n	54d0 <restore_non_core_regs+0x30>
    54bc:	071a      	lsls	r2, r3, #28
    54be:	d50e      	bpl.n	54de <restore_non_core_regs+0x3e>
    54c0:	06db      	lsls	r3, r3, #27
    54c2:	d513      	bpl.n	54ec <restore_non_core_regs+0x4c>
    54c4:	bd10      	pop	{r4, pc}
    54c6:	f000 fc55 	bl	5d74 <__gnu_Unwind_Restore_VFP>
    54ca:	6823      	ldr	r3, [r4, #0]
    54cc:	0759      	lsls	r1, r3, #29
    54ce:	d4f5      	bmi.n	54bc <restore_non_core_regs+0x1c>
    54d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    54d4:	f000 fc5e 	bl	5d94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    54d8:	6823      	ldr	r3, [r4, #0]
    54da:	071a      	lsls	r2, r3, #28
    54dc:	d4f0      	bmi.n	54c0 <restore_non_core_regs+0x20>
    54de:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    54e2:	f000 fc5f 	bl	5da4 <__gnu_Unwind_Restore_WMMXD>
    54e6:	6823      	ldr	r3, [r4, #0]
    54e8:	06db      	lsls	r3, r3, #27
    54ea:	d4eb      	bmi.n	54c4 <restore_non_core_regs+0x24>
    54ec:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54f4:	f000 bc9a 	b.w	5e2c <__gnu_Unwind_Restore_WMMXC>

000054f8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    54f8:	6803      	ldr	r3, [r0, #0]
    54fa:	b103      	cbz	r3, 54fe <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    54fc:	4403      	add	r3, r0
    54fe:	4618      	mov	r0, r3
    5500:	4770      	bx	lr
    5502:	bf00      	nop

00005504 <__gnu_unwind_24bit.isra.1>:
    5504:	2009      	movs	r0, #9
    5506:	4770      	bx	lr

00005508 <_Unwind_DebugHook>:
    5508:	4770      	bx	lr
    550a:	bf00      	nop

0000550c <unwind_phase2>:
    550c:	b570      	push	{r4, r5, r6, lr}
    550e:	4604      	mov	r4, r0
    5510:	460d      	mov	r5, r1
    5512:	e008      	b.n	5526 <unwind_phase2+0x1a>
    5514:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    5516:	6923      	ldr	r3, [r4, #16]
    5518:	6162      	str	r2, [r4, #20]
    551a:	4621      	mov	r1, r4
    551c:	462a      	mov	r2, r5
    551e:	2001      	movs	r0, #1
    5520:	4798      	blx	r3
    5522:	2808      	cmp	r0, #8
    5524:	d108      	bne.n	5538 <unwind_phase2+0x2c>
    5526:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5528:	4620      	mov	r0, r4
    552a:	f7ff ff65 	bl	53f8 <get_eit_entry>
    552e:	4606      	mov	r6, r0
    5530:	2800      	cmp	r0, #0
    5532:	d0ef      	beq.n	5514 <unwind_phase2+0x8>
    5534:	f000 fea6 	bl	6284 <abort>
    5538:	2807      	cmp	r0, #7
    553a:	d1fb      	bne.n	5534 <unwind_phase2+0x28>
    553c:	4630      	mov	r0, r6
    553e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5540:	f7ff ffe2 	bl	5508 <_Unwind_DebugHook>
    5544:	1d28      	adds	r0, r5, #4
    5546:	f000 fc09 	bl	5d5c <__restore_core_regs>
    554a:	bf00      	nop

0000554c <unwind_phase2_forced>:
    554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5550:	4605      	mov	r5, r0
    5552:	f04f 0c00 	mov.w	ip, #0
    5556:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    555a:	ac03      	add	r4, sp, #12
    555c:	1d0e      	adds	r6, r1, #4
    555e:	4617      	mov	r7, r2
    5560:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5564:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5568:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    556a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    556c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    5570:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5574:	f8d5 9018 	ldr.w	r9, [r5, #24]
    5578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    557c:	ac02      	add	r4, sp, #8
    557e:	f8c4 c000 	str.w	ip, [r4]
    5582:	e021      	b.n	55c8 <unwind_phase2_forced+0x7c>
    5584:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5586:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    558a:	616b      	str	r3, [r5, #20]
    558c:	4621      	mov	r1, r4
    558e:	a87a      	add	r0, sp, #488	; 0x1e8
    5590:	f001 f830 	bl	65f4 <memcpy>
    5594:	692b      	ldr	r3, [r5, #16]
    5596:	aa7a      	add	r2, sp, #488	; 0x1e8
    5598:	4629      	mov	r1, r5
    559a:	4630      	mov	r0, r6
    559c:	4798      	blx	r3
    559e:	9b88      	ldr	r3, [sp, #544]	; 0x220
    55a0:	e9cd 4900 	strd	r4, r9, [sp]
    55a4:	4682      	mov	sl, r0
    55a6:	6463      	str	r3, [r4, #68]	; 0x44
    55a8:	4631      	mov	r1, r6
    55aa:	462b      	mov	r3, r5
    55ac:	462a      	mov	r2, r5
    55ae:	2001      	movs	r0, #1
    55b0:	47c0      	blx	r8
    55b2:	4607      	mov	r7, r0
    55b4:	b9f8      	cbnz	r0, 55f6 <unwind_phase2_forced+0xaa>
    55b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    55ba:	a97a      	add	r1, sp, #488	; 0x1e8
    55bc:	4620      	mov	r0, r4
    55be:	f001 f819 	bl	65f4 <memcpy>
    55c2:	f1ba 0f08 	cmp.w	sl, #8
    55c6:	d11c      	bne.n	5602 <unwind_phase2_forced+0xb6>
    55c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    55ca:	4628      	mov	r0, r5
    55cc:	f7ff ff14 	bl	53f8 <get_eit_entry>
    55d0:	2f00      	cmp	r7, #0
    55d2:	bf08      	it	eq
    55d4:	2609      	moveq	r6, #9
    55d6:	4607      	mov	r7, r0
    55d8:	bf18      	it	ne
    55da:	260a      	movne	r6, #10
    55dc:	2800      	cmp	r0, #0
    55de:	d0d1      	beq.n	5584 <unwind_phase2_forced+0x38>
    55e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    55e2:	f046 0110 	orr.w	r1, r6, #16
    55e6:	e9cd 4900 	strd	r4, r9, [sp]
    55ea:	462a      	mov	r2, r5
    55ec:	6463      	str	r3, [r4, #68]	; 0x44
    55ee:	2001      	movs	r0, #1
    55f0:	462b      	mov	r3, r5
    55f2:	47c0      	blx	r8
    55f4:	b100      	cbz	r0, 55f8 <unwind_phase2_forced+0xac>
    55f6:	2709      	movs	r7, #9
    55f8:	4638      	mov	r0, r7
    55fa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    55fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5602:	f1ba 0f07 	cmp.w	sl, #7
    5606:	d1f6      	bne.n	55f6 <unwind_phase2_forced+0xaa>
    5608:	4638      	mov	r0, r7
    560a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    560c:	f7ff ff7c 	bl	5508 <_Unwind_DebugHook>
    5610:	a803      	add	r0, sp, #12
    5612:	f000 fba3 	bl	5d5c <__restore_core_regs>
    5616:	bf00      	nop

00005618 <_Unwind_GetCFA>:
    5618:	6c40      	ldr	r0, [r0, #68]	; 0x44
    561a:	4770      	bx	lr

0000561c <__gnu_Unwind_RaiseException>:
    561c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5620:	b5f0      	push	{r4, r5, r6, r7, lr}
    5622:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5624:	b0f9      	sub	sp, #484	; 0x1e4
    5626:	640b      	str	r3, [r1, #64]	; 0x40
    5628:	1d0d      	adds	r5, r1, #4
    562a:	ac01      	add	r4, sp, #4
    562c:	460f      	mov	r7, r1
    562e:	4606      	mov	r6, r0
    5630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    563a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    563c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5644:	f8cd c000 	str.w	ip, [sp]
    5648:	e006      	b.n	5658 <__gnu_Unwind_RaiseException+0x3c>
    564a:	6933      	ldr	r3, [r6, #16]
    564c:	466a      	mov	r2, sp
    564e:	4631      	mov	r1, r6
    5650:	4798      	blx	r3
    5652:	2808      	cmp	r0, #8
    5654:	4604      	mov	r4, r0
    5656:	d108      	bne.n	566a <__gnu_Unwind_RaiseException+0x4e>
    5658:	9910      	ldr	r1, [sp, #64]	; 0x40
    565a:	4630      	mov	r0, r6
    565c:	f7ff fecc 	bl	53f8 <get_eit_entry>
    5660:	2800      	cmp	r0, #0
    5662:	d0f2      	beq.n	564a <__gnu_Unwind_RaiseException+0x2e>
    5664:	2009      	movs	r0, #9
    5666:	b079      	add	sp, #484	; 0x1e4
    5668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    566a:	4668      	mov	r0, sp
    566c:	f7ff ff18 	bl	54a0 <restore_non_core_regs>
    5670:	2c06      	cmp	r4, #6
    5672:	d1f7      	bne.n	5664 <__gnu_Unwind_RaiseException+0x48>
    5674:	4639      	mov	r1, r7
    5676:	4630      	mov	r0, r6
    5678:	f7ff ff48 	bl	550c <unwind_phase2>

0000567c <__gnu_Unwind_ForcedUnwind>:
    567c:	b430      	push	{r4, r5}
    567e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5680:	60c1      	str	r1, [r0, #12]
    5682:	6182      	str	r2, [r0, #24]
    5684:	4619      	mov	r1, r3
    5686:	641d      	str	r5, [r3, #64]	; 0x40
    5688:	2200      	movs	r2, #0
    568a:	bc30      	pop	{r4, r5}
    568c:	e75e      	b.n	554c <unwind_phase2_forced>
    568e:	bf00      	nop

00005690 <__gnu_Unwind_Resume>:
    5690:	b570      	push	{r4, r5, r6, lr}
    5692:	6943      	ldr	r3, [r0, #20]
    5694:	68c6      	ldr	r6, [r0, #12]
    5696:	640b      	str	r3, [r1, #64]	; 0x40
    5698:	b9be      	cbnz	r6, 56ca <__gnu_Unwind_Resume+0x3a>
    569a:	6903      	ldr	r3, [r0, #16]
    569c:	460a      	mov	r2, r1
    569e:	4604      	mov	r4, r0
    56a0:	460d      	mov	r5, r1
    56a2:	4601      	mov	r1, r0
    56a4:	2002      	movs	r0, #2
    56a6:	4798      	blx	r3
    56a8:	2807      	cmp	r0, #7
    56aa:	d007      	beq.n	56bc <__gnu_Unwind_Resume+0x2c>
    56ac:	2808      	cmp	r0, #8
    56ae:	d103      	bne.n	56b8 <__gnu_Unwind_Resume+0x28>
    56b0:	4629      	mov	r1, r5
    56b2:	4620      	mov	r0, r4
    56b4:	f7ff ff2a 	bl	550c <unwind_phase2>
    56b8:	f000 fde4 	bl	6284 <abort>
    56bc:	4630      	mov	r0, r6
    56be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    56c0:	f7ff ff22 	bl	5508 <_Unwind_DebugHook>
    56c4:	1d28      	adds	r0, r5, #4
    56c6:	f000 fb49 	bl	5d5c <__restore_core_regs>
    56ca:	2201      	movs	r2, #1
    56cc:	f7ff ff3e 	bl	554c <unwind_phase2_forced>
    56d0:	f000 fdd8 	bl	6284 <abort>

000056d4 <__gnu_Unwind_Resume_or_Rethrow>:
    56d4:	68c2      	ldr	r2, [r0, #12]
    56d6:	b12a      	cbz	r2, 56e4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
    56d8:	b410      	push	{r4}
    56da:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    56dc:	2200      	movs	r2, #0
    56de:	640c      	str	r4, [r1, #64]	; 0x40
    56e0:	bc10      	pop	{r4}
    56e2:	e733      	b.n	554c <unwind_phase2_forced>
    56e4:	e79a      	b.n	561c <__gnu_Unwind_RaiseException>
    56e6:	bf00      	nop

000056e8 <_Unwind_Complete>:
    56e8:	4770      	bx	lr
    56ea:	bf00      	nop

000056ec <_Unwind_DeleteException>:
    56ec:	6883      	ldr	r3, [r0, #8]
    56ee:	b113      	cbz	r3, 56f6 <_Unwind_DeleteException+0xa>
    56f0:	4601      	mov	r1, r0
    56f2:	2001      	movs	r0, #1
    56f4:	4718      	bx	r3
    56f6:	4770      	bx	lr

000056f8 <_Unwind_VRS_Get>:
    56f8:	2904      	cmp	r1, #4
    56fa:	d807      	bhi.n	570c <_Unwind_VRS_Get+0x14>
    56fc:	e8df f001 	tbb	[pc, r1]
    5700:	08060803 	.word	0x08060803
    5704:	08          	.byte	0x08
    5705:	00          	.byte	0x00
    5706:	b90b      	cbnz	r3, 570c <_Unwind_VRS_Get+0x14>
    5708:	2a0f      	cmp	r2, #15
    570a:	d903      	bls.n	5714 <_Unwind_VRS_Get+0x1c>
    570c:	2002      	movs	r0, #2
    570e:	4770      	bx	lr
    5710:	2001      	movs	r0, #1
    5712:	4770      	bx	lr
    5714:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    5718:	6842      	ldr	r2, [r0, #4]
    571a:	4618      	mov	r0, r3
    571c:	9b00      	ldr	r3, [sp, #0]
    571e:	601a      	str	r2, [r3, #0]
    5720:	4770      	bx	lr
    5722:	bf00      	nop

00005724 <_Unwind_GetGR>:
    5724:	2300      	movs	r3, #0
    5726:	b510      	push	{r4, lr}
    5728:	b084      	sub	sp, #16
    572a:	ac03      	add	r4, sp, #12
    572c:	460a      	mov	r2, r1
    572e:	9400      	str	r4, [sp, #0]
    5730:	4619      	mov	r1, r3
    5732:	f7ff ffe1 	bl	56f8 <_Unwind_VRS_Get>
    5736:	9803      	ldr	r0, [sp, #12]
    5738:	b004      	add	sp, #16
    573a:	bd10      	pop	{r4, pc}

0000573c <_Unwind_VRS_Set>:
    573c:	2904      	cmp	r1, #4
    573e:	d807      	bhi.n	5750 <_Unwind_VRS_Set+0x14>
    5740:	e8df f001 	tbb	[pc, r1]
    5744:	08060803 	.word	0x08060803
    5748:	08          	.byte	0x08
    5749:	00          	.byte	0x00
    574a:	b90b      	cbnz	r3, 5750 <_Unwind_VRS_Set+0x14>
    574c:	2a0f      	cmp	r2, #15
    574e:	d903      	bls.n	5758 <_Unwind_VRS_Set+0x1c>
    5750:	2002      	movs	r0, #2
    5752:	4770      	bx	lr
    5754:	2001      	movs	r0, #1
    5756:	4770      	bx	lr
    5758:	9900      	ldr	r1, [sp, #0]
    575a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    575e:	6809      	ldr	r1, [r1, #0]
    5760:	4618      	mov	r0, r3
    5762:	6051      	str	r1, [r2, #4]
    5764:	4770      	bx	lr
    5766:	bf00      	nop

00005768 <_Unwind_SetGR>:
    5768:	2300      	movs	r3, #0
    576a:	b510      	push	{r4, lr}
    576c:	b084      	sub	sp, #16
    576e:	ac04      	add	r4, sp, #16
    5770:	f844 2d04 	str.w	r2, [r4, #-4]!
    5774:	9400      	str	r4, [sp, #0]
    5776:	460a      	mov	r2, r1
    5778:	4619      	mov	r1, r3
    577a:	f7ff ffdf 	bl	573c <_Unwind_VRS_Set>
    577e:	b004      	add	sp, #16
    5780:	bd10      	pop	{r4, pc}
    5782:	bf00      	nop

00005784 <__gnu_Unwind_Backtrace>:
    5784:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5788:	b5f0      	push	{r4, r5, r6, r7, lr}
    578a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    578c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5790:	6413      	str	r3, [r2, #64]	; 0x40
    5792:	1d15      	adds	r5, r2, #4
    5794:	ac17      	add	r4, sp, #92	; 0x5c
    5796:	4607      	mov	r7, r0
    5798:	460e      	mov	r6, r1
    579a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    579c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    579e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    57a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    57a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    57a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    57a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    57aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    57ae:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
    57b2:	e012      	b.n	57da <__gnu_Unwind_Backtrace+0x56>
    57b4:	210c      	movs	r1, #12
    57b6:	a816      	add	r0, sp, #88	; 0x58
    57b8:	466a      	mov	r2, sp
    57ba:	f7ff ffd5 	bl	5768 <_Unwind_SetGR>
    57be:	4631      	mov	r1, r6
    57c0:	a816      	add	r0, sp, #88	; 0x58
    57c2:	47b8      	blx	r7
    57c4:	b978      	cbnz	r0, 57e6 <__gnu_Unwind_Backtrace+0x62>
    57c6:	9b04      	ldr	r3, [sp, #16]
    57c8:	aa16      	add	r2, sp, #88	; 0x58
    57ca:	4669      	mov	r1, sp
    57cc:	2008      	movs	r0, #8
    57ce:	4798      	blx	r3
    57d0:	2805      	cmp	r0, #5
    57d2:	4604      	mov	r4, r0
    57d4:	d008      	beq.n	57e8 <__gnu_Unwind_Backtrace+0x64>
    57d6:	2809      	cmp	r0, #9
    57d8:	d005      	beq.n	57e6 <__gnu_Unwind_Backtrace+0x62>
    57da:	9926      	ldr	r1, [sp, #152]	; 0x98
    57dc:	4668      	mov	r0, sp
    57de:	f7ff fe0b 	bl	53f8 <get_eit_entry>
    57e2:	2800      	cmp	r0, #0
    57e4:	d0e6      	beq.n	57b4 <__gnu_Unwind_Backtrace+0x30>
    57e6:	2409      	movs	r4, #9
    57e8:	a816      	add	r0, sp, #88	; 0x58
    57ea:	f7ff fe59 	bl	54a0 <restore_non_core_regs>
    57ee:	4620      	mov	r0, r4
    57f0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    57f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57f6:	bf00      	nop

000057f8 <__gnu_unwind_pr_common>:
    57f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57fc:	460d      	mov	r5, r1
    57fe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    5800:	b089      	sub	sp, #36	; 0x24
    5802:	1d0c      	adds	r4, r1, #4
    5804:	4616      	mov	r6, r2
    5806:	f000 0b03 	and.w	fp, r0, #3
    580a:	680a      	ldr	r2, [r1, #0]
    580c:	461f      	mov	r7, r3
    580e:	9406      	str	r4, [sp, #24]
    5810:	2b00      	cmp	r3, #0
    5812:	d068      	beq.n	58e6 <__gnu_unwind_pr_common+0xee>
    5814:	2102      	movs	r1, #2
    5816:	0c13      	lsrs	r3, r2, #16
    5818:	f88d 301d 	strb.w	r3, [sp, #29]
    581c:	0412      	lsls	r2, r2, #16
    581e:	b2db      	uxtb	r3, r3
    5820:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5824:	9205      	str	r2, [sp, #20]
    5826:	f88d 101c 	strb.w	r1, [sp, #28]
    582a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    582c:	f1bb 0f02 	cmp.w	fp, #2
    5830:	bf08      	it	eq
    5832:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5834:	f013 0301 	ands.w	r3, r3, #1
    5838:	d146      	bne.n	58c8 <__gnu_unwind_pr_common+0xd0>
    583a:	9301      	str	r3, [sp, #4]
    583c:	f000 0308 	and.w	r3, r0, #8
    5840:	9300      	str	r3, [sp, #0]
    5842:	f8d4 9000 	ldr.w	r9, [r4]
    5846:	f1b9 0f00 	cmp.w	r9, #0
    584a:	f000 80f3 	beq.w	5a34 <__gnu_unwind_pr_common+0x23c>
    584e:	2f02      	cmp	r7, #2
    5850:	d045      	beq.n	58de <__gnu_unwind_pr_common+0xe6>
    5852:	f8b4 9000 	ldrh.w	r9, [r4]
    5856:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    585a:	3404      	adds	r4, #4
    585c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    585e:	f028 0a01 	bic.w	sl, r8, #1
    5862:	210f      	movs	r1, #15
    5864:	4630      	mov	r0, r6
    5866:	449a      	add	sl, r3
    5868:	f7ff ff5c 	bl	5724 <_Unwind_GetGR>
    586c:	4582      	cmp	sl, r0
    586e:	d834      	bhi.n	58da <__gnu_unwind_pr_common+0xe2>
    5870:	f029 0301 	bic.w	r3, r9, #1
    5874:	4453      	add	r3, sl
    5876:	4283      	cmp	r3, r0
    5878:	bf94      	ite	ls
    587a:	2000      	movls	r0, #0
    587c:	2001      	movhi	r0, #1
    587e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5882:	f008 0802 	and.w	r8, r8, #2
    5886:	f009 0901 	and.w	r9, r9, #1
    588a:	ea48 0809 	orr.w	r8, r8, r9
    588e:	f1b8 0f01 	cmp.w	r8, #1
    5892:	d03a      	beq.n	590a <__gnu_unwind_pr_common+0x112>
    5894:	d331      	bcc.n	58fa <__gnu_unwind_pr_common+0x102>
    5896:	f1b8 0f02 	cmp.w	r8, #2
    589a:	d11a      	bne.n	58d2 <__gnu_unwind_pr_common+0xda>
    589c:	6823      	ldr	r3, [r4, #0]
    589e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    58a2:	f1bb 0f00 	cmp.w	fp, #0
    58a6:	d166      	bne.n	5976 <__gnu_unwind_pr_common+0x17e>
    58a8:	b130      	cbz	r0, 58b8 <__gnu_unwind_pr_common+0xc0>
    58aa:	9a00      	ldr	r2, [sp, #0]
    58ac:	2a00      	cmp	r2, #0
    58ae:	d06c      	beq.n	598a <__gnu_unwind_pr_common+0x192>
    58b0:	f1ba 0f00 	cmp.w	sl, #0
    58b4:	f000 8090 	beq.w	59d8 <__gnu_unwind_pr_common+0x1e0>
    58b8:	2b00      	cmp	r3, #0
    58ba:	da00      	bge.n	58be <__gnu_unwind_pr_common+0xc6>
    58bc:	3404      	adds	r4, #4
    58be:	f10a 0301 	add.w	r3, sl, #1
    58c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    58c6:	e7bc      	b.n	5842 <__gnu_unwind_pr_common+0x4a>
    58c8:	4630      	mov	r0, r6
    58ca:	a905      	add	r1, sp, #20
    58cc:	f000 fb48 	bl	5f60 <__gnu_unwind_execute>
    58d0:	b178      	cbz	r0, 58f2 <__gnu_unwind_pr_common+0xfa>
    58d2:	2009      	movs	r0, #9
    58d4:	b009      	add	sp, #36	; 0x24
    58d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58da:	2000      	movs	r0, #0
    58dc:	e7cf      	b.n	587e <__gnu_unwind_pr_common+0x86>
    58de:	f8d4 8004 	ldr.w	r8, [r4, #4]
    58e2:	3408      	adds	r4, #8
    58e4:	e7ba      	b.n	585c <__gnu_unwind_pr_common+0x64>
    58e6:	2303      	movs	r3, #3
    58e8:	0212      	lsls	r2, r2, #8
    58ea:	9205      	str	r2, [sp, #20]
    58ec:	f8ad 301c 	strh.w	r3, [sp, #28]
    58f0:	e79b      	b.n	582a <__gnu_unwind_pr_common+0x32>
    58f2:	2008      	movs	r0, #8
    58f4:	b009      	add	sp, #36	; 0x24
    58f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58fa:	f1bb 0f00 	cmp.w	fp, #0
    58fe:	d002      	beq.n	5906 <__gnu_unwind_pr_common+0x10e>
    5900:	2800      	cmp	r0, #0
    5902:	f040 80b4 	bne.w	5a6e <__gnu_unwind_pr_common+0x276>
    5906:	3404      	adds	r4, #4
    5908:	e79b      	b.n	5842 <__gnu_unwind_pr_common+0x4a>
    590a:	f1bb 0f00 	cmp.w	fp, #0
    590e:	d118      	bne.n	5942 <__gnu_unwind_pr_common+0x14a>
    5910:	b1a8      	cbz	r0, 593e <__gnu_unwind_pr_common+0x146>
    5912:	e9d4 2300 	ldrd	r2, r3, [r4]
    5916:	1c99      	adds	r1, r3, #2
    5918:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    591c:	d0d9      	beq.n	58d2 <__gnu_unwind_pr_common+0xda>
    591e:	f105 0158 	add.w	r1, r5, #88	; 0x58
    5922:	3301      	adds	r3, #1
    5924:	9104      	str	r1, [sp, #16]
    5926:	f000 80b5 	beq.w	5a94 <__gnu_unwind_pr_common+0x29c>
    592a:	1d20      	adds	r0, r4, #4
    592c:	f7ff fde4 	bl	54f8 <_Unwind_decode_typeinfo_ptr.isra.0>
    5930:	ab04      	add	r3, sp, #16
    5932:	4601      	mov	r1, r0
    5934:	4628      	mov	r0, r5
    5936:	f3af 8000 	nop.w
    593a:	2800      	cmp	r0, #0
    593c:	d167      	bne.n	5a0e <__gnu_unwind_pr_common+0x216>
    593e:	3408      	adds	r4, #8
    5940:	e77f      	b.n	5842 <__gnu_unwind_pr_common+0x4a>
    5942:	210d      	movs	r1, #13
    5944:	4630      	mov	r0, r6
    5946:	f8d5 8020 	ldr.w	r8, [r5, #32]
    594a:	f7ff feeb 	bl	5724 <_Unwind_GetGR>
    594e:	4580      	cmp	r8, r0
    5950:	d1f5      	bne.n	593e <__gnu_unwind_pr_common+0x146>
    5952:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5954:	429c      	cmp	r4, r3
    5956:	d1f2      	bne.n	593e <__gnu_unwind_pr_common+0x146>
    5958:	4620      	mov	r0, r4
    595a:	f7ff fcff 	bl	535c <selfrel_offset31>
    595e:	210f      	movs	r1, #15
    5960:	4602      	mov	r2, r0
    5962:	4630      	mov	r0, r6
    5964:	f7ff ff00 	bl	5768 <_Unwind_SetGR>
    5968:	4630      	mov	r0, r6
    596a:	462a      	mov	r2, r5
    596c:	2100      	movs	r1, #0
    596e:	f7ff fefb 	bl	5768 <_Unwind_SetGR>
    5972:	2007      	movs	r0, #7
    5974:	e7ae      	b.n	58d4 <__gnu_unwind_pr_common+0xdc>
    5976:	210d      	movs	r1, #13
    5978:	4630      	mov	r0, r6
    597a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    597e:	f7ff fed1 	bl	5724 <_Unwind_GetGR>
    5982:	4580      	cmp	r8, r0
    5984:	d032      	beq.n	59ec <__gnu_unwind_pr_common+0x1f4>
    5986:	6823      	ldr	r3, [r4, #0]
    5988:	e796      	b.n	58b8 <__gnu_unwind_pr_common+0xc0>
    598a:	f1ba 0f00 	cmp.w	sl, #0
    598e:	d023      	beq.n	59d8 <__gnu_unwind_pr_common+0x1e0>
    5990:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5994:	f104 0804 	add.w	r8, r4, #4
    5998:	f8cd b008 	str.w	fp, [sp, #8]
    599c:	f8dd 9000 	ldr.w	r9, [sp]
    59a0:	46a3      	mov	fp, r4
    59a2:	9703      	str	r7, [sp, #12]
    59a4:	461c      	mov	r4, r3
    59a6:	e002      	b.n	59ae <__gnu_unwind_pr_common+0x1b6>
    59a8:	4557      	cmp	r7, sl
    59aa:	46b9      	mov	r9, r7
    59ac:	d040      	beq.n	5a30 <__gnu_unwind_pr_common+0x238>
    59ae:	4640      	mov	r0, r8
    59b0:	9404      	str	r4, [sp, #16]
    59b2:	f7ff fda1 	bl	54f8 <_Unwind_decode_typeinfo_ptr.isra.0>
    59b6:	ab04      	add	r3, sp, #16
    59b8:	4601      	mov	r1, r0
    59ba:	2200      	movs	r2, #0
    59bc:	4628      	mov	r0, r5
    59be:	f3af 8000 	nop.w
    59c2:	f109 0701 	add.w	r7, r9, #1
    59c6:	f108 0804 	add.w	r8, r8, #4
    59ca:	2800      	cmp	r0, #0
    59cc:	d0ec      	beq.n	59a8 <__gnu_unwind_pr_common+0x1b0>
    59ce:	45d1      	cmp	r9, sl
    59d0:	465c      	mov	r4, fp
    59d2:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    59d6:	d1d6      	bne.n	5986 <__gnu_unwind_pr_common+0x18e>
    59d8:	4630      	mov	r0, r6
    59da:	210d      	movs	r1, #13
    59dc:	f7ff fea2 	bl	5724 <_Unwind_GetGR>
    59e0:	9b04      	ldr	r3, [sp, #16]
    59e2:	6228      	str	r0, [r5, #32]
    59e4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    59e8:	2006      	movs	r0, #6
    59ea:	e773      	b.n	58d4 <__gnu_unwind_pr_common+0xdc>
    59ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    59ee:	429c      	cmp	r4, r3
    59f0:	d1c9      	bne.n	5986 <__gnu_unwind_pr_common+0x18e>
    59f2:	2204      	movs	r2, #4
    59f4:	f04f 0800 	mov.w	r8, #0
    59f8:	18a3      	adds	r3, r4, r2
    59fa:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    59fe:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    5a02:	6823      	ldr	r3, [r4, #0]
    5a04:	4543      	cmp	r3, r8
    5a06:	db4d      	blt.n	5aa4 <__gnu_unwind_pr_common+0x2ac>
    5a08:	2301      	movs	r3, #1
    5a0a:	9301      	str	r3, [sp, #4]
    5a0c:	e757      	b.n	58be <__gnu_unwind_pr_common+0xc6>
    5a0e:	4680      	mov	r8, r0
    5a10:	210d      	movs	r1, #13
    5a12:	4630      	mov	r0, r6
    5a14:	f7ff fe86 	bl	5724 <_Unwind_GetGR>
    5a18:	f1b8 0f02 	cmp.w	r8, #2
    5a1c:	6228      	str	r0, [r5, #32]
    5a1e:	d13e      	bne.n	5a9e <__gnu_unwind_pr_common+0x2a6>
    5a20:	462b      	mov	r3, r5
    5a22:	9a04      	ldr	r2, [sp, #16]
    5a24:	f843 2f2c 	str.w	r2, [r3, #44]!
    5a28:	626b      	str	r3, [r5, #36]	; 0x24
    5a2a:	62ac      	str	r4, [r5, #40]	; 0x28
    5a2c:	2006      	movs	r0, #6
    5a2e:	e751      	b.n	58d4 <__gnu_unwind_pr_common+0xdc>
    5a30:	465c      	mov	r4, fp
    5a32:	e7d1      	b.n	59d8 <__gnu_unwind_pr_common+0x1e0>
    5a34:	a905      	add	r1, sp, #20
    5a36:	4630      	mov	r0, r6
    5a38:	f000 fa92 	bl	5f60 <__gnu_unwind_execute>
    5a3c:	2800      	cmp	r0, #0
    5a3e:	f47f af48 	bne.w	58d2 <__gnu_unwind_pr_common+0xda>
    5a42:	9b01      	ldr	r3, [sp, #4]
    5a44:	2b00      	cmp	r3, #0
    5a46:	f43f af54 	beq.w	58f2 <__gnu_unwind_pr_common+0xfa>
    5a4a:	210f      	movs	r1, #15
    5a4c:	4630      	mov	r0, r6
    5a4e:	f7ff fe69 	bl	5724 <_Unwind_GetGR>
    5a52:	210e      	movs	r1, #14
    5a54:	4602      	mov	r2, r0
    5a56:	4630      	mov	r0, r6
    5a58:	f7ff fe86 	bl	5768 <_Unwind_SetGR>
    5a5c:	4630      	mov	r0, r6
    5a5e:	4a1a      	ldr	r2, [pc, #104]	; (5ac8 <__gnu_unwind_pr_common+0x2d0>)
    5a60:	210f      	movs	r1, #15
    5a62:	f7ff fe81 	bl	5768 <_Unwind_SetGR>
    5a66:	2007      	movs	r0, #7
    5a68:	b009      	add	sp, #36	; 0x24
    5a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a6e:	4620      	mov	r0, r4
    5a70:	f7ff fc74 	bl	535c <selfrel_offset31>
    5a74:	3404      	adds	r4, #4
    5a76:	4607      	mov	r7, r0
    5a78:	63ac      	str	r4, [r5, #56]	; 0x38
    5a7a:	4628      	mov	r0, r5
    5a7c:	f3af 8000 	nop.w
    5a80:	2800      	cmp	r0, #0
    5a82:	f43f af26 	beq.w	58d2 <__gnu_unwind_pr_common+0xda>
    5a86:	4630      	mov	r0, r6
    5a88:	463a      	mov	r2, r7
    5a8a:	210f      	movs	r1, #15
    5a8c:	f7ff fe6c 	bl	5768 <_Unwind_SetGR>
    5a90:	2007      	movs	r0, #7
    5a92:	e71f      	b.n	58d4 <__gnu_unwind_pr_common+0xdc>
    5a94:	4630      	mov	r0, r6
    5a96:	210d      	movs	r1, #13
    5a98:	f7ff fe44 	bl	5724 <_Unwind_GetGR>
    5a9c:	6228      	str	r0, [r5, #32]
    5a9e:	9b04      	ldr	r3, [sp, #16]
    5aa0:	626b      	str	r3, [r5, #36]	; 0x24
    5aa2:	e7c2      	b.n	5a2a <__gnu_unwind_pr_common+0x232>
    5aa4:	f10a 0001 	add.w	r0, sl, #1
    5aa8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5aac:	f7ff fc56 	bl	535c <selfrel_offset31>
    5ab0:	210f      	movs	r1, #15
    5ab2:	4602      	mov	r2, r0
    5ab4:	4630      	mov	r0, r6
    5ab6:	f7ff fe57 	bl	5768 <_Unwind_SetGR>
    5aba:	4630      	mov	r0, r6
    5abc:	462a      	mov	r2, r5
    5abe:	4641      	mov	r1, r8
    5ac0:	f7ff fe52 	bl	5768 <_Unwind_SetGR>
    5ac4:	2007      	movs	r0, #7
    5ac6:	e705      	b.n	58d4 <__gnu_unwind_pr_common+0xdc>
    5ac8:	00000000 	.word	0x00000000

00005acc <__aeabi_unwind_cpp_pr0>:
    5acc:	2300      	movs	r3, #0
    5ace:	e693      	b.n	57f8 <__gnu_unwind_pr_common>

00005ad0 <__aeabi_unwind_cpp_pr1>:
    5ad0:	2301      	movs	r3, #1
    5ad2:	e691      	b.n	57f8 <__gnu_unwind_pr_common>

00005ad4 <__aeabi_unwind_cpp_pr2>:
    5ad4:	2302      	movs	r3, #2
    5ad6:	e68f      	b.n	57f8 <__gnu_unwind_pr_common>

00005ad8 <_Unwind_VRS_Pop>:
    5ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5adc:	4605      	mov	r5, r0
    5ade:	b0c4      	sub	sp, #272	; 0x110
    5ae0:	2904      	cmp	r1, #4
    5ae2:	d806      	bhi.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5ae4:	e8df f001 	tbb	[pc, r1]
    5ae8:	03052b4d 	.word	0x03052b4d
    5aec:	09          	.byte	0x09
    5aed:	00          	.byte	0x00
    5aee:	2b03      	cmp	r3, #3
    5af0:	d05f      	beq.n	5bb2 <_Unwind_VRS_Pop+0xda>
    5af2:	2002      	movs	r0, #2
    5af4:	b044      	add	sp, #272	; 0x110
    5af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5afa:	2b00      	cmp	r3, #0
    5afc:	d1f9      	bne.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5afe:	2a10      	cmp	r2, #16
    5b00:	d8f7      	bhi.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5b02:	682b      	ldr	r3, [r5, #0]
    5b04:	06dc      	lsls	r4, r3, #27
    5b06:	f100 80f6 	bmi.w	5cf6 <_Unwind_VRS_Pop+0x21e>
    5b0a:	ac22      	add	r4, sp, #136	; 0x88
    5b0c:	4620      	mov	r0, r4
    5b0e:	9201      	str	r2, [sp, #4]
    5b10:	2601      	movs	r6, #1
    5b12:	f000 f995 	bl	5e40 <__gnu_Unwind_Save_WMMXC>
    5b16:	2300      	movs	r3, #0
    5b18:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5b1a:	9a01      	ldr	r2, [sp, #4]
    5b1c:	fa06 f103 	lsl.w	r1, r6, r3
    5b20:	4211      	tst	r1, r2
    5b22:	d003      	beq.n	5b2c <_Unwind_VRS_Pop+0x54>
    5b24:	6801      	ldr	r1, [r0, #0]
    5b26:	3004      	adds	r0, #4
    5b28:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    5b2c:	3301      	adds	r3, #1
    5b2e:	2b04      	cmp	r3, #4
    5b30:	d1f4      	bne.n	5b1c <_Unwind_VRS_Pop+0x44>
    5b32:	63a8      	str	r0, [r5, #56]	; 0x38
    5b34:	4620      	mov	r0, r4
    5b36:	f000 f979 	bl	5e2c <__gnu_Unwind_Restore_WMMXC>
    5b3a:	2000      	movs	r0, #0
    5b3c:	e7da      	b.n	5af4 <_Unwind_VRS_Pop+0x1c>
    5b3e:	2b01      	cmp	r3, #1
    5b40:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5b44:	b297      	uxth	r7, r2
    5b46:	d054      	beq.n	5bf2 <_Unwind_VRS_Pop+0x11a>
    5b48:	2b05      	cmp	r3, #5
    5b4a:	d1d2      	bne.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5b4c:	eb06 0807 	add.w	r8, r6, r7
    5b50:	f1b8 0f20 	cmp.w	r8, #32
    5b54:	d8cd      	bhi.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5b56:	2e0f      	cmp	r6, #15
    5b58:	f240 809b 	bls.w	5c92 <_Unwind_VRS_Pop+0x1ba>
    5b5c:	46b8      	mov	r8, r7
    5b5e:	2f00      	cmp	r7, #0
    5b60:	f040 80dd 	bne.w	5d1e <_Unwind_VRS_Pop+0x246>
    5b64:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5b66:	2e0f      	cmp	r6, #15
    5b68:	63aa      	str	r2, [r5, #56]	; 0x38
    5b6a:	f240 80c0 	bls.w	5cee <_Unwind_VRS_Pop+0x216>
    5b6e:	f1b8 0f00 	cmp.w	r8, #0
    5b72:	d002      	beq.n	5b7a <_Unwind_VRS_Pop+0xa2>
    5b74:	a802      	add	r0, sp, #8
    5b76:	f000 f90d 	bl	5d94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5b7a:	2000      	movs	r0, #0
    5b7c:	b044      	add	sp, #272	; 0x110
    5b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b82:	2b00      	cmp	r3, #0
    5b84:	d1b5      	bne.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5b86:	2701      	movs	r7, #1
    5b88:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5b8a:	b296      	uxth	r6, r2
    5b8c:	1d28      	adds	r0, r5, #4
    5b8e:	fa07 f103 	lsl.w	r1, r7, r3
    5b92:	4231      	tst	r1, r6
    5b94:	f103 0301 	add.w	r3, r3, #1
    5b98:	d002      	beq.n	5ba0 <_Unwind_VRS_Pop+0xc8>
    5b9a:	6821      	ldr	r1, [r4, #0]
    5b9c:	3404      	adds	r4, #4
    5b9e:	6001      	str	r1, [r0, #0]
    5ba0:	2b10      	cmp	r3, #16
    5ba2:	f100 0004 	add.w	r0, r0, #4
    5ba6:	d1f2      	bne.n	5b8e <_Unwind_VRS_Pop+0xb6>
    5ba8:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5bac:	d1e5      	bne.n	5b7a <_Unwind_VRS_Pop+0xa2>
    5bae:	63ac      	str	r4, [r5, #56]	; 0x38
    5bb0:	e7a0      	b.n	5af4 <_Unwind_VRS_Pop+0x1c>
    5bb2:	0c16      	lsrs	r6, r2, #16
    5bb4:	b297      	uxth	r7, r2
    5bb6:	19f3      	adds	r3, r6, r7
    5bb8:	2b10      	cmp	r3, #16
    5bba:	d89a      	bhi.n	5af2 <_Unwind_VRS_Pop+0x1a>
    5bbc:	682b      	ldr	r3, [r5, #0]
    5bbe:	071a      	lsls	r2, r3, #28
    5bc0:	d45f      	bmi.n	5c82 <_Unwind_VRS_Pop+0x1aa>
    5bc2:	ac22      	add	r4, sp, #136	; 0x88
    5bc4:	4620      	mov	r0, r4
    5bc6:	f000 f90f 	bl	5de8 <__gnu_Unwind_Save_WMMXD>
    5bca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5bce:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5bd0:	b14f      	cbz	r7, 5be6 <_Unwind_VRS_Pop+0x10e>
    5bd2:	4603      	mov	r3, r0
    5bd4:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    5bd8:	681a      	ldr	r2, [r3, #0]
    5bda:	3304      	adds	r3, #4
    5bdc:	4283      	cmp	r3, r0
    5bde:	f841 2b04 	str.w	r2, [r1], #4
    5be2:	d1f9      	bne.n	5bd8 <_Unwind_VRS_Pop+0x100>
    5be4:	4618      	mov	r0, r3
    5be6:	63a8      	str	r0, [r5, #56]	; 0x38
    5be8:	4620      	mov	r0, r4
    5bea:	f000 f8db 	bl	5da4 <__gnu_Unwind_Restore_WMMXD>
    5bee:	2000      	movs	r0, #0
    5bf0:	e780      	b.n	5af4 <_Unwind_VRS_Pop+0x1c>
    5bf2:	19f2      	adds	r2, r6, r7
    5bf4:	2a10      	cmp	r2, #16
    5bf6:	f63f af7c 	bhi.w	5af2 <_Unwind_VRS_Pop+0x1a>
    5bfa:	2e0f      	cmp	r6, #15
    5bfc:	f63f af79 	bhi.w	5af2 <_Unwind_VRS_Pop+0x1a>
    5c00:	682a      	ldr	r2, [r5, #0]
    5c02:	07d1      	lsls	r1, r2, #31
    5c04:	d508      	bpl.n	5c18 <_Unwind_VRS_Pop+0x140>
    5c06:	4628      	mov	r0, r5
    5c08:	f022 0203 	bic.w	r2, r2, #3
    5c0c:	f840 2b48 	str.w	r2, [r0], #72
    5c10:	9301      	str	r3, [sp, #4]
    5c12:	f000 f8b3 	bl	5d7c <__gnu_Unwind_Save_VFP>
    5c16:	9b01      	ldr	r3, [sp, #4]
    5c18:	ac22      	add	r4, sp, #136	; 0x88
    5c1a:	4620      	mov	r0, r4
    5c1c:	9301      	str	r3, [sp, #4]
    5c1e:	f000 f8ad 	bl	5d7c <__gnu_Unwind_Save_VFP>
    5c22:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5c24:	9b01      	ldr	r3, [sp, #4]
    5c26:	2f00      	cmp	r7, #0
    5c28:	f000 8095 	beq.w	5d56 <_Unwind_VRS_Pop+0x27e>
    5c2c:	f04f 0800 	mov.w	r8, #0
    5c30:	007a      	lsls	r2, r7, #1
    5c32:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5c36:	3c04      	subs	r4, #4
    5c38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5c3c:	f851 0b04 	ldr.w	r0, [r1], #4
    5c40:	4291      	cmp	r1, r2
    5c42:	f844 0f04 	str.w	r0, [r4, #4]!
    5c46:	d1f9      	bne.n	5c3c <_Unwind_VRS_Pop+0x164>
    5c48:	f1b8 0f00 	cmp.w	r8, #0
    5c4c:	d00f      	beq.n	5c6e <_Unwind_VRS_Pop+0x196>
    5c4e:	ac02      	add	r4, sp, #8
    5c50:	2e10      	cmp	r6, #16
    5c52:	4631      	mov	r1, r6
    5c54:	bf38      	it	cc
    5c56:	2110      	movcc	r1, #16
    5c58:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5c5c:	3984      	subs	r1, #132	; 0x84
    5c5e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    5c62:	f852 0b04 	ldr.w	r0, [r2], #4
    5c66:	4294      	cmp	r4, r2
    5c68:	f841 0f04 	str.w	r0, [r1, #4]!
    5c6c:	d1f9      	bne.n	5c62 <_Unwind_VRS_Pop+0x18a>
    5c6e:	2b01      	cmp	r3, #1
    5c70:	f47f af79 	bne.w	5b66 <_Unwind_VRS_Pop+0x8e>
    5c74:	ac22      	add	r4, sp, #136	; 0x88
    5c76:	3204      	adds	r2, #4
    5c78:	63aa      	str	r2, [r5, #56]	; 0x38
    5c7a:	4620      	mov	r0, r4
    5c7c:	f000 f87a 	bl	5d74 <__gnu_Unwind_Restore_VFP>
    5c80:	e77b      	b.n	5b7a <_Unwind_VRS_Pop+0xa2>
    5c82:	f023 0308 	bic.w	r3, r3, #8
    5c86:	602b      	str	r3, [r5, #0]
    5c88:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5c8c:	f000 f8ac 	bl	5de8 <__gnu_Unwind_Save_WMMXD>
    5c90:	e797      	b.n	5bc2 <_Unwind_VRS_Pop+0xea>
    5c92:	f1b8 0f10 	cmp.w	r8, #16
    5c96:	682a      	ldr	r2, [r5, #0]
    5c98:	d943      	bls.n	5d22 <_Unwind_VRS_Pop+0x24a>
    5c9a:	07d0      	lsls	r0, r2, #31
    5c9c:	f1a8 0810 	sub.w	r8, r8, #16
    5ca0:	d50b      	bpl.n	5cba <_Unwind_VRS_Pop+0x1e2>
    5ca2:	4628      	mov	r0, r5
    5ca4:	f022 0201 	bic.w	r2, r2, #1
    5ca8:	f042 0202 	orr.w	r2, r2, #2
    5cac:	f840 2b48 	str.w	r2, [r0], #72
    5cb0:	9301      	str	r3, [sp, #4]
    5cb2:	f000 f86b 	bl	5d8c <__gnu_Unwind_Save_VFP_D>
    5cb6:	682a      	ldr	r2, [r5, #0]
    5cb8:	9b01      	ldr	r3, [sp, #4]
    5cba:	0751      	lsls	r1, r2, #29
    5cbc:	d425      	bmi.n	5d0a <_Unwind_VRS_Pop+0x232>
    5cbe:	2e0f      	cmp	r6, #15
    5cc0:	d804      	bhi.n	5ccc <_Unwind_VRS_Pop+0x1f4>
    5cc2:	a822      	add	r0, sp, #136	; 0x88
    5cc4:	9301      	str	r3, [sp, #4]
    5cc6:	f000 f861 	bl	5d8c <__gnu_Unwind_Save_VFP_D>
    5cca:	9b01      	ldr	r3, [sp, #4]
    5ccc:	ac02      	add	r4, sp, #8
    5cce:	4620      	mov	r0, r4
    5cd0:	9301      	str	r3, [sp, #4]
    5cd2:	f000 f863 	bl	5d9c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5cd6:	f1c6 0010 	rsb	r0, r6, #16
    5cda:	2800      	cmp	r0, #0
    5cdc:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5cde:	9b01      	ldr	r3, [sp, #4]
    5ce0:	ddb6      	ble.n	5c50 <_Unwind_VRS_Pop+0x178>
    5ce2:	ac22      	add	r4, sp, #136	; 0x88
    5ce4:	4611      	mov	r1, r2
    5ce6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5cea:	0042      	lsls	r2, r0, #1
    5cec:	e7a3      	b.n	5c36 <_Unwind_VRS_Pop+0x15e>
    5cee:	a822      	add	r0, sp, #136	; 0x88
    5cf0:	f000 f848 	bl	5d84 <__gnu_Unwind_Restore_VFP_D>
    5cf4:	e73b      	b.n	5b6e <_Unwind_VRS_Pop+0x96>
    5cf6:	f023 0310 	bic.w	r3, r3, #16
    5cfa:	602b      	str	r3, [r5, #0]
    5cfc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5d00:	9201      	str	r2, [sp, #4]
    5d02:	f000 f89d 	bl	5e40 <__gnu_Unwind_Save_WMMXC>
    5d06:	9a01      	ldr	r2, [sp, #4]
    5d08:	e6ff      	b.n	5b0a <_Unwind_VRS_Pop+0x32>
    5d0a:	4628      	mov	r0, r5
    5d0c:	f022 0204 	bic.w	r2, r2, #4
    5d10:	f840 2bd0 	str.w	r2, [r0], #208
    5d14:	9301      	str	r3, [sp, #4]
    5d16:	f000 f841 	bl	5d9c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5d1a:	9b01      	ldr	r3, [sp, #4]
    5d1c:	e7cf      	b.n	5cbe <_Unwind_VRS_Pop+0x1e6>
    5d1e:	682a      	ldr	r2, [r5, #0]
    5d20:	e7cb      	b.n	5cba <_Unwind_VRS_Pop+0x1e2>
    5d22:	07d0      	lsls	r0, r2, #31
    5d24:	d50a      	bpl.n	5d3c <_Unwind_VRS_Pop+0x264>
    5d26:	4628      	mov	r0, r5
    5d28:	f022 0201 	bic.w	r2, r2, #1
    5d2c:	f042 0202 	orr.w	r2, r2, #2
    5d30:	f840 2b48 	str.w	r2, [r0], #72
    5d34:	9301      	str	r3, [sp, #4]
    5d36:	f000 f829 	bl	5d8c <__gnu_Unwind_Save_VFP_D>
    5d3a:	9b01      	ldr	r3, [sp, #4]
    5d3c:	ac22      	add	r4, sp, #136	; 0x88
    5d3e:	4620      	mov	r0, r4
    5d40:	9301      	str	r3, [sp, #4]
    5d42:	46b8      	mov	r8, r7
    5d44:	f000 f822 	bl	5d8c <__gnu_Unwind_Save_VFP_D>
    5d48:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5d4a:	9b01      	ldr	r3, [sp, #4]
    5d4c:	2f00      	cmp	r7, #0
    5d4e:	f47f af6d 	bne.w	5c2c <_Unwind_VRS_Pop+0x154>
    5d52:	460a      	mov	r2, r1
    5d54:	e707      	b.n	5b66 <_Unwind_VRS_Pop+0x8e>
    5d56:	460a      	mov	r2, r1
    5d58:	e78d      	b.n	5c76 <_Unwind_VRS_Pop+0x19e>
    5d5a:	bf00      	nop

00005d5c <__restore_core_regs>:
    5d5c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5d60:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5d64:	469c      	mov	ip, r3
    5d66:	46a6      	mov	lr, r4
    5d68:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5d6c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5d70:	46e5      	mov	sp, ip
    5d72:	bd00      	pop	{pc}

00005d74 <__gnu_Unwind_Restore_VFP>:
    5d74:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5d78:	4770      	bx	lr
    5d7a:	bf00      	nop

00005d7c <__gnu_Unwind_Save_VFP>:
    5d7c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5d80:	4770      	bx	lr
    5d82:	bf00      	nop

00005d84 <__gnu_Unwind_Restore_VFP_D>:
    5d84:	ec90 0b20 	vldmia	r0, {d0-d15}
    5d88:	4770      	bx	lr
    5d8a:	bf00      	nop

00005d8c <__gnu_Unwind_Save_VFP_D>:
    5d8c:	ec80 0b20 	vstmia	r0, {d0-d15}
    5d90:	4770      	bx	lr
    5d92:	bf00      	nop

00005d94 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5d94:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5d98:	4770      	bx	lr
    5d9a:	bf00      	nop

00005d9c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5d9c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5da0:	4770      	bx	lr
    5da2:	bf00      	nop

00005da4 <__gnu_Unwind_Restore_WMMXD>:
    5da4:	ecf0 0102 	ldfe	f0, [r0], #8
    5da8:	ecf0 1102 	ldfe	f1, [r0], #8
    5dac:	ecf0 2102 	ldfe	f2, [r0], #8
    5db0:	ecf0 3102 	ldfe	f3, [r0], #8
    5db4:	ecf0 4102 	ldfe	f4, [r0], #8
    5db8:	ecf0 5102 	ldfe	f5, [r0], #8
    5dbc:	ecf0 6102 	ldfe	f6, [r0], #8
    5dc0:	ecf0 7102 	ldfe	f7, [r0], #8
    5dc4:	ecf0 8102 	ldfp	f0, [r0], #8
    5dc8:	ecf0 9102 	ldfp	f1, [r0], #8
    5dcc:	ecf0 a102 	ldfp	f2, [r0], #8
    5dd0:	ecf0 b102 	ldfp	f3, [r0], #8
    5dd4:	ecf0 c102 	ldfp	f4, [r0], #8
    5dd8:	ecf0 d102 	ldfp	f5, [r0], #8
    5ddc:	ecf0 e102 	ldfp	f6, [r0], #8
    5de0:	ecf0 f102 	ldfp	f7, [r0], #8
    5de4:	4770      	bx	lr
    5de6:	bf00      	nop

00005de8 <__gnu_Unwind_Save_WMMXD>:
    5de8:	ece0 0102 	stfe	f0, [r0], #8
    5dec:	ece0 1102 	stfe	f1, [r0], #8
    5df0:	ece0 2102 	stfe	f2, [r0], #8
    5df4:	ece0 3102 	stfe	f3, [r0], #8
    5df8:	ece0 4102 	stfe	f4, [r0], #8
    5dfc:	ece0 5102 	stfe	f5, [r0], #8
    5e00:	ece0 6102 	stfe	f6, [r0], #8
    5e04:	ece0 7102 	stfe	f7, [r0], #8
    5e08:	ece0 8102 	stfp	f0, [r0], #8
    5e0c:	ece0 9102 	stfp	f1, [r0], #8
    5e10:	ece0 a102 	stfp	f2, [r0], #8
    5e14:	ece0 b102 	stfp	f3, [r0], #8
    5e18:	ece0 c102 	stfp	f4, [r0], #8
    5e1c:	ece0 d102 	stfp	f5, [r0], #8
    5e20:	ece0 e102 	stfp	f6, [r0], #8
    5e24:	ece0 f102 	stfp	f7, [r0], #8
    5e28:	4770      	bx	lr
    5e2a:	bf00      	nop

00005e2c <__gnu_Unwind_Restore_WMMXC>:
    5e2c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5e30:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5e34:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5e38:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5e3c:	4770      	bx	lr
    5e3e:	bf00      	nop

00005e40 <__gnu_Unwind_Save_WMMXC>:
    5e40:	fca0 8101 	stc2	1, cr8, [r0], #4
    5e44:	fca0 9101 	stc2	1, cr9, [r0], #4
    5e48:	fca0 a101 	stc2	1, cr10, [r0], #4
    5e4c:	fca0 b101 	stc2	1, cr11, [r0], #4
    5e50:	4770      	bx	lr
    5e52:	bf00      	nop

00005e54 <_Unwind_RaiseException>:
    5e54:	46ec      	mov	ip, sp
    5e56:	b500      	push	{lr}
    5e58:	e92d 5000 	stmdb	sp!, {ip, lr}
    5e5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5e60:	f04f 0300 	mov.w	r3, #0
    5e64:	e92d 000c 	stmdb	sp!, {r2, r3}
    5e68:	a901      	add	r1, sp, #4
    5e6a:	f7ff fbd7 	bl	561c <__gnu_Unwind_RaiseException>
    5e6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5e72:	b012      	add	sp, #72	; 0x48
    5e74:	4770      	bx	lr
    5e76:	bf00      	nop

00005e78 <_Unwind_Resume>:
    5e78:	46ec      	mov	ip, sp
    5e7a:	b500      	push	{lr}
    5e7c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5e80:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5e84:	f04f 0300 	mov.w	r3, #0
    5e88:	e92d 000c 	stmdb	sp!, {r2, r3}
    5e8c:	a901      	add	r1, sp, #4
    5e8e:	f7ff fbff 	bl	5690 <__gnu_Unwind_Resume>
    5e92:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5e96:	b012      	add	sp, #72	; 0x48
    5e98:	4770      	bx	lr
    5e9a:	bf00      	nop

00005e9c <_Unwind_Resume_or_Rethrow>:
    5e9c:	46ec      	mov	ip, sp
    5e9e:	b500      	push	{lr}
    5ea0:	e92d 5000 	stmdb	sp!, {ip, lr}
    5ea4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5ea8:	f04f 0300 	mov.w	r3, #0
    5eac:	e92d 000c 	stmdb	sp!, {r2, r3}
    5eb0:	a901      	add	r1, sp, #4
    5eb2:	f7ff fc0f 	bl	56d4 <__gnu_Unwind_Resume_or_Rethrow>
    5eb6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5eba:	b012      	add	sp, #72	; 0x48
    5ebc:	4770      	bx	lr
    5ebe:	bf00      	nop

00005ec0 <_Unwind_ForcedUnwind>:
    5ec0:	46ec      	mov	ip, sp
    5ec2:	b500      	push	{lr}
    5ec4:	e92d 5000 	stmdb	sp!, {ip, lr}
    5ec8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5ecc:	f04f 0300 	mov.w	r3, #0
    5ed0:	e92d 000c 	stmdb	sp!, {r2, r3}
    5ed4:	ab01      	add	r3, sp, #4
    5ed6:	f7ff fbd1 	bl	567c <__gnu_Unwind_ForcedUnwind>
    5eda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5ede:	b012      	add	sp, #72	; 0x48
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop

00005ee4 <_Unwind_Backtrace>:
    5ee4:	46ec      	mov	ip, sp
    5ee6:	b500      	push	{lr}
    5ee8:	e92d 5000 	stmdb	sp!, {ip, lr}
    5eec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5ef0:	f04f 0300 	mov.w	r3, #0
    5ef4:	e92d 000c 	stmdb	sp!, {r2, r3}
    5ef8:	aa01      	add	r2, sp, #4
    5efa:	f7ff fc43 	bl	5784 <__gnu_Unwind_Backtrace>
    5efe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5f02:	b012      	add	sp, #72	; 0x48
    5f04:	4770      	bx	lr
    5f06:	bf00      	nop

00005f08 <next_unwind_byte>:
    5f08:	7a02      	ldrb	r2, [r0, #8]
    5f0a:	b97a      	cbnz	r2, 5f2c <next_unwind_byte+0x24>
    5f0c:	7a43      	ldrb	r3, [r0, #9]
    5f0e:	b1a3      	cbz	r3, 5f3a <next_unwind_byte+0x32>
    5f10:	2103      	movs	r1, #3
    5f12:	6842      	ldr	r2, [r0, #4]
    5f14:	3b01      	subs	r3, #1
    5f16:	b410      	push	{r4}
    5f18:	7243      	strb	r3, [r0, #9]
    5f1a:	6813      	ldr	r3, [r2, #0]
    5f1c:	1d14      	adds	r4, r2, #4
    5f1e:	7201      	strb	r1, [r0, #8]
    5f20:	021a      	lsls	r2, r3, #8
    5f22:	6044      	str	r4, [r0, #4]
    5f24:	6002      	str	r2, [r0, #0]
    5f26:	bc10      	pop	{r4}
    5f28:	0e18      	lsrs	r0, r3, #24
    5f2a:	4770      	bx	lr
    5f2c:	6803      	ldr	r3, [r0, #0]
    5f2e:	3a01      	subs	r2, #1
    5f30:	7202      	strb	r2, [r0, #8]
    5f32:	021a      	lsls	r2, r3, #8
    5f34:	6002      	str	r2, [r0, #0]
    5f36:	0e18      	lsrs	r0, r3, #24
    5f38:	4770      	bx	lr
    5f3a:	20b0      	movs	r0, #176	; 0xb0
    5f3c:	4770      	bx	lr
    5f3e:	bf00      	nop

00005f40 <_Unwind_GetGR.constprop.0>:
    5f40:	2300      	movs	r3, #0
    5f42:	b500      	push	{lr}
    5f44:	b085      	sub	sp, #20
    5f46:	aa03      	add	r2, sp, #12
    5f48:	9200      	str	r2, [sp, #0]
    5f4a:	4619      	mov	r1, r3
    5f4c:	220c      	movs	r2, #12
    5f4e:	f7ff fbd3 	bl	56f8 <_Unwind_VRS_Get>
    5f52:	9803      	ldr	r0, [sp, #12]
    5f54:	b005      	add	sp, #20
    5f56:	f85d fb04 	ldr.w	pc, [sp], #4
    5f5a:	bf00      	nop

00005f5c <unwind_UCB_from_context>:
    5f5c:	e7f0      	b.n	5f40 <_Unwind_GetGR.constprop.0>
    5f5e:	bf00      	nop

00005f60 <__gnu_unwind_execute>:
    5f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f64:	4605      	mov	r5, r0
    5f66:	460e      	mov	r6, r1
    5f68:	f04f 0800 	mov.w	r8, #0
    5f6c:	b085      	sub	sp, #20
    5f6e:	4630      	mov	r0, r6
    5f70:	f7ff ffca 	bl	5f08 <next_unwind_byte>
    5f74:	28b0      	cmp	r0, #176	; 0xb0
    5f76:	4604      	mov	r4, r0
    5f78:	f000 80b0 	beq.w	60dc <__gnu_unwind_execute+0x17c>
    5f7c:	0607      	lsls	r7, r0, #24
    5f7e:	d520      	bpl.n	5fc2 <__gnu_unwind_execute+0x62>
    5f80:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5f84:	2b80      	cmp	r3, #128	; 0x80
    5f86:	d065      	beq.n	6054 <__gnu_unwind_execute+0xf4>
    5f88:	2b90      	cmp	r3, #144	; 0x90
    5f8a:	d036      	beq.n	5ffa <__gnu_unwind_execute+0x9a>
    5f8c:	2ba0      	cmp	r3, #160	; 0xa0
    5f8e:	d078      	beq.n	6082 <__gnu_unwind_execute+0x122>
    5f90:	2bb0      	cmp	r3, #176	; 0xb0
    5f92:	d047      	beq.n	6024 <__gnu_unwind_execute+0xc4>
    5f94:	2bc0      	cmp	r3, #192	; 0xc0
    5f96:	f000 8089 	beq.w	60ac <__gnu_unwind_execute+0x14c>
    5f9a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5f9e:	2bd0      	cmp	r3, #208	; 0xd0
    5fa0:	d10b      	bne.n	5fba <__gnu_unwind_execute+0x5a>
    5fa2:	f000 0207 	and.w	r2, r0, #7
    5fa6:	3201      	adds	r2, #1
    5fa8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5fac:	2305      	movs	r3, #5
    5fae:	2101      	movs	r1, #1
    5fb0:	4628      	mov	r0, r5
    5fb2:	f7ff fd91 	bl	5ad8 <_Unwind_VRS_Pop>
    5fb6:	2800      	cmp	r0, #0
    5fb8:	d0d9      	beq.n	5f6e <__gnu_unwind_execute+0xe>
    5fba:	2009      	movs	r0, #9
    5fbc:	b005      	add	sp, #20
    5fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5fc2:	2300      	movs	r3, #0
    5fc4:	f10d 090c 	add.w	r9, sp, #12
    5fc8:	4619      	mov	r1, r3
    5fca:	0087      	lsls	r7, r0, #2
    5fcc:	f8cd 9000 	str.w	r9, [sp]
    5fd0:	220d      	movs	r2, #13
    5fd2:	4628      	mov	r0, r5
    5fd4:	f7ff fb90 	bl	56f8 <_Unwind_VRS_Get>
    5fd8:	b2ff      	uxtb	r7, r7
    5fda:	9b03      	ldr	r3, [sp, #12]
    5fdc:	3704      	adds	r7, #4
    5fde:	0660      	lsls	r0, r4, #25
    5fe0:	bf4c      	ite	mi
    5fe2:	1bdf      	submi	r7, r3, r7
    5fe4:	18ff      	addpl	r7, r7, r3
    5fe6:	2300      	movs	r3, #0
    5fe8:	f8cd 9000 	str.w	r9, [sp]
    5fec:	4619      	mov	r1, r3
    5fee:	220d      	movs	r2, #13
    5ff0:	4628      	mov	r0, r5
    5ff2:	9703      	str	r7, [sp, #12]
    5ff4:	f7ff fba2 	bl	573c <_Unwind_VRS_Set>
    5ff8:	e7b9      	b.n	5f6e <__gnu_unwind_execute+0xe>
    5ffa:	f000 030d 	and.w	r3, r0, #13
    5ffe:	2b0d      	cmp	r3, #13
    6000:	d0db      	beq.n	5fba <__gnu_unwind_execute+0x5a>
    6002:	2300      	movs	r3, #0
    6004:	af03      	add	r7, sp, #12
    6006:	f000 020f 	and.w	r2, r0, #15
    600a:	4619      	mov	r1, r3
    600c:	9700      	str	r7, [sp, #0]
    600e:	4628      	mov	r0, r5
    6010:	f7ff fb72 	bl	56f8 <_Unwind_VRS_Get>
    6014:	2300      	movs	r3, #0
    6016:	9700      	str	r7, [sp, #0]
    6018:	4619      	mov	r1, r3
    601a:	220d      	movs	r2, #13
    601c:	4628      	mov	r0, r5
    601e:	f7ff fb8d 	bl	573c <_Unwind_VRS_Set>
    6022:	e7a4      	b.n	5f6e <__gnu_unwind_execute+0xe>
    6024:	28b1      	cmp	r0, #177	; 0xb1
    6026:	d05e      	beq.n	60e6 <__gnu_unwind_execute+0x186>
    6028:	28b2      	cmp	r0, #178	; 0xb2
    602a:	f000 80cb 	beq.w	61c4 <__gnu_unwind_execute+0x264>
    602e:	28b3      	cmp	r0, #179	; 0xb3
    6030:	d07d      	beq.n	612e <__gnu_unwind_execute+0x1ce>
    6032:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    6036:	2bb4      	cmp	r3, #180	; 0xb4
    6038:	d0bf      	beq.n	5fba <__gnu_unwind_execute+0x5a>
    603a:	2301      	movs	r3, #1
    603c:	f000 0207 	and.w	r2, r0, #7
    6040:	441a      	add	r2, r3
    6042:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    6046:	4619      	mov	r1, r3
    6048:	4628      	mov	r0, r5
    604a:	f7ff fd45 	bl	5ad8 <_Unwind_VRS_Pop>
    604e:	2800      	cmp	r0, #0
    6050:	d08d      	beq.n	5f6e <__gnu_unwind_execute+0xe>
    6052:	e7b2      	b.n	5fba <__gnu_unwind_execute+0x5a>
    6054:	4630      	mov	r0, r6
    6056:	f7ff ff57 	bl	5f08 <next_unwind_byte>
    605a:	0224      	lsls	r4, r4, #8
    605c:	4304      	orrs	r4, r0
    605e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    6062:	d0aa      	beq.n	5fba <__gnu_unwind_execute+0x5a>
    6064:	2300      	movs	r3, #0
    6066:	0124      	lsls	r4, r4, #4
    6068:	b2a2      	uxth	r2, r4
    606a:	4619      	mov	r1, r3
    606c:	4628      	mov	r0, r5
    606e:	f7ff fd33 	bl	5ad8 <_Unwind_VRS_Pop>
    6072:	2800      	cmp	r0, #0
    6074:	d1a1      	bne.n	5fba <__gnu_unwind_execute+0x5a>
    6076:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    607a:	bf18      	it	ne
    607c:	f04f 0801 	movne.w	r8, #1
    6080:	e775      	b.n	5f6e <__gnu_unwind_execute+0xe>
    6082:	43c3      	mvns	r3, r0
    6084:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    6088:	f003 0307 	and.w	r3, r3, #7
    608c:	411a      	asrs	r2, r3
    608e:	2300      	movs	r3, #0
    6090:	0701      	lsls	r1, r0, #28
    6092:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    6096:	bf48      	it	mi
    6098:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    609c:	4619      	mov	r1, r3
    609e:	4628      	mov	r0, r5
    60a0:	f7ff fd1a 	bl	5ad8 <_Unwind_VRS_Pop>
    60a4:	2800      	cmp	r0, #0
    60a6:	f43f af62 	beq.w	5f6e <__gnu_unwind_execute+0xe>
    60aa:	e786      	b.n	5fba <__gnu_unwind_execute+0x5a>
    60ac:	28c6      	cmp	r0, #198	; 0xc6
    60ae:	d051      	beq.n	6154 <__gnu_unwind_execute+0x1f4>
    60b0:	28c7      	cmp	r0, #199	; 0xc7
    60b2:	d05a      	beq.n	616a <__gnu_unwind_execute+0x20a>
    60b4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    60b8:	2bc0      	cmp	r3, #192	; 0xc0
    60ba:	d069      	beq.n	6190 <__gnu_unwind_execute+0x230>
    60bc:	28c8      	cmp	r0, #200	; 0xc8
    60be:	d075      	beq.n	61ac <__gnu_unwind_execute+0x24c>
    60c0:	28c9      	cmp	r0, #201	; 0xc9
    60c2:	f47f af7a 	bne.w	5fba <__gnu_unwind_execute+0x5a>
    60c6:	4630      	mov	r0, r6
    60c8:	f7ff ff1e 	bl	5f08 <next_unwind_byte>
    60cc:	0302      	lsls	r2, r0, #12
    60ce:	f000 000f 	and.w	r0, r0, #15
    60d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    60d6:	3001      	adds	r0, #1
    60d8:	4302      	orrs	r2, r0
    60da:	e767      	b.n	5fac <__gnu_unwind_execute+0x4c>
    60dc:	f1b8 0f00 	cmp.w	r8, #0
    60e0:	d014      	beq.n	610c <__gnu_unwind_execute+0x1ac>
    60e2:	2000      	movs	r0, #0
    60e4:	e76a      	b.n	5fbc <__gnu_unwind_execute+0x5c>
    60e6:	4630      	mov	r0, r6
    60e8:	f7ff ff0e 	bl	5f08 <next_unwind_byte>
    60ec:	2800      	cmp	r0, #0
    60ee:	f43f af64 	beq.w	5fba <__gnu_unwind_execute+0x5a>
    60f2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    60f6:	f47f af60 	bne.w	5fba <__gnu_unwind_execute+0x5a>
    60fa:	4602      	mov	r2, r0
    60fc:	4619      	mov	r1, r3
    60fe:	4628      	mov	r0, r5
    6100:	f7ff fcea 	bl	5ad8 <_Unwind_VRS_Pop>
    6104:	2800      	cmp	r0, #0
    6106:	f43f af32 	beq.w	5f6e <__gnu_unwind_execute+0xe>
    610a:	e756      	b.n	5fba <__gnu_unwind_execute+0x5a>
    610c:	ac03      	add	r4, sp, #12
    610e:	4643      	mov	r3, r8
    6110:	220e      	movs	r2, #14
    6112:	4641      	mov	r1, r8
    6114:	9400      	str	r4, [sp, #0]
    6116:	4628      	mov	r0, r5
    6118:	f7ff faee 	bl	56f8 <_Unwind_VRS_Get>
    611c:	9400      	str	r4, [sp, #0]
    611e:	4628      	mov	r0, r5
    6120:	4643      	mov	r3, r8
    6122:	220f      	movs	r2, #15
    6124:	4641      	mov	r1, r8
    6126:	f7ff fb09 	bl	573c <_Unwind_VRS_Set>
    612a:	4640      	mov	r0, r8
    612c:	e746      	b.n	5fbc <__gnu_unwind_execute+0x5c>
    612e:	4630      	mov	r0, r6
    6130:	f7ff feea 	bl	5f08 <next_unwind_byte>
    6134:	2301      	movs	r3, #1
    6136:	0301      	lsls	r1, r0, #12
    6138:	f000 000f 	and.w	r0, r0, #15
    613c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6140:	18c2      	adds	r2, r0, r3
    6142:	430a      	orrs	r2, r1
    6144:	4628      	mov	r0, r5
    6146:	4619      	mov	r1, r3
    6148:	f7ff fcc6 	bl	5ad8 <_Unwind_VRS_Pop>
    614c:	2800      	cmp	r0, #0
    614e:	f43f af0e 	beq.w	5f6e <__gnu_unwind_execute+0xe>
    6152:	e732      	b.n	5fba <__gnu_unwind_execute+0x5a>
    6154:	4630      	mov	r0, r6
    6156:	f7ff fed7 	bl	5f08 <next_unwind_byte>
    615a:	0301      	lsls	r1, r0, #12
    615c:	f000 000f 	and.w	r0, r0, #15
    6160:	2303      	movs	r3, #3
    6162:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6166:	1c42      	adds	r2, r0, #1
    6168:	e7eb      	b.n	6142 <__gnu_unwind_execute+0x1e2>
    616a:	4630      	mov	r0, r6
    616c:	f7ff fecc 	bl	5f08 <next_unwind_byte>
    6170:	4602      	mov	r2, r0
    6172:	2800      	cmp	r0, #0
    6174:	f43f af21 	beq.w	5fba <__gnu_unwind_execute+0x5a>
    6178:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    617c:	f47f af1d 	bne.w	5fba <__gnu_unwind_execute+0x5a>
    6180:	2104      	movs	r1, #4
    6182:	4628      	mov	r0, r5
    6184:	f7ff fca8 	bl	5ad8 <_Unwind_VRS_Pop>
    6188:	2800      	cmp	r0, #0
    618a:	f43f aef0 	beq.w	5f6e <__gnu_unwind_execute+0xe>
    618e:	e714      	b.n	5fba <__gnu_unwind_execute+0x5a>
    6190:	2303      	movs	r3, #3
    6192:	f000 020f 	and.w	r2, r0, #15
    6196:	3201      	adds	r2, #1
    6198:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    619c:	4619      	mov	r1, r3
    619e:	4628      	mov	r0, r5
    61a0:	f7ff fc9a 	bl	5ad8 <_Unwind_VRS_Pop>
    61a4:	2800      	cmp	r0, #0
    61a6:	f43f aee2 	beq.w	5f6e <__gnu_unwind_execute+0xe>
    61aa:	e706      	b.n	5fba <__gnu_unwind_execute+0x5a>
    61ac:	4630      	mov	r0, r6
    61ae:	f7ff feab 	bl	5f08 <next_unwind_byte>
    61b2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    61b6:	f000 030f 	and.w	r3, r0, #15
    61ba:	3210      	adds	r2, #16
    61bc:	3301      	adds	r3, #1
    61be:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    61c2:	e6f3      	b.n	5fac <__gnu_unwind_execute+0x4c>
    61c4:	2300      	movs	r3, #0
    61c6:	f10d 090c 	add.w	r9, sp, #12
    61ca:	220d      	movs	r2, #13
    61cc:	4619      	mov	r1, r3
    61ce:	f8cd 9000 	str.w	r9, [sp]
    61d2:	4628      	mov	r0, r5
    61d4:	f7ff fa90 	bl	56f8 <_Unwind_VRS_Get>
    61d8:	4630      	mov	r0, r6
    61da:	f7ff fe95 	bl	5f08 <next_unwind_byte>
    61de:	0602      	lsls	r2, r0, #24
    61e0:	f04f 0702 	mov.w	r7, #2
    61e4:	d50c      	bpl.n	6200 <__gnu_unwind_execute+0x2a0>
    61e6:	9b03      	ldr	r3, [sp, #12]
    61e8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    61ec:	40b8      	lsls	r0, r7
    61ee:	4403      	add	r3, r0
    61f0:	4630      	mov	r0, r6
    61f2:	9303      	str	r3, [sp, #12]
    61f4:	f7ff fe88 	bl	5f08 <next_unwind_byte>
    61f8:	0603      	lsls	r3, r0, #24
    61fa:	f107 0707 	add.w	r7, r7, #7
    61fe:	d4f2      	bmi.n	61e6 <__gnu_unwind_execute+0x286>
    6200:	2300      	movs	r3, #0
    6202:	9a03      	ldr	r2, [sp, #12]
    6204:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    6208:	40bc      	lsls	r4, r7
    620a:	f502 7201 	add.w	r2, r2, #516	; 0x204
    620e:	4414      	add	r4, r2
    6210:	f8cd 9000 	str.w	r9, [sp]
    6214:	4619      	mov	r1, r3
    6216:	220d      	movs	r2, #13
    6218:	4628      	mov	r0, r5
    621a:	9403      	str	r4, [sp, #12]
    621c:	f7ff fa8e 	bl	573c <_Unwind_VRS_Set>
    6220:	e6a5      	b.n	5f6e <__gnu_unwind_execute+0xe>
    6222:	bf00      	nop

00006224 <__gnu_unwind_frame>:
    6224:	b530      	push	{r4, r5, lr}
    6226:	2403      	movs	r4, #3
    6228:	460d      	mov	r5, r1
    622a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    622c:	b085      	sub	sp, #20
    622e:	685a      	ldr	r2, [r3, #4]
    6230:	f88d 400c 	strb.w	r4, [sp, #12]
    6234:	79dc      	ldrb	r4, [r3, #7]
    6236:	0212      	lsls	r2, r2, #8
    6238:	3308      	adds	r3, #8
    623a:	a901      	add	r1, sp, #4
    623c:	4628      	mov	r0, r5
    623e:	9201      	str	r2, [sp, #4]
    6240:	f88d 400d 	strb.w	r4, [sp, #13]
    6244:	9302      	str	r3, [sp, #8]
    6246:	f7ff fe8b 	bl	5f60 <__gnu_unwind_execute>
    624a:	b005      	add	sp, #20
    624c:	bd30      	pop	{r4, r5, pc}
    624e:	bf00      	nop

00006250 <_Unwind_GetRegionStart>:
    6250:	b508      	push	{r3, lr}
    6252:	f7ff fe83 	bl	5f5c <unwind_UCB_from_context>
    6256:	6c80      	ldr	r0, [r0, #72]	; 0x48
    6258:	bd08      	pop	{r3, pc}
    625a:	bf00      	nop

0000625c <_Unwind_GetLanguageSpecificData>:
    625c:	b508      	push	{r3, lr}
    625e:	f7ff fe7d 	bl	5f5c <unwind_UCB_from_context>
    6262:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6264:	79c3      	ldrb	r3, [r0, #7]
    6266:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    626a:	3008      	adds	r0, #8
    626c:	bd08      	pop	{r3, pc}
    626e:	bf00      	nop

00006270 <_Unwind_GetDataRelBase>:
    6270:	b508      	push	{r3, lr}
    6272:	f000 f807 	bl	6284 <abort>
    6276:	bf00      	nop

00006278 <_Unwind_GetTextRelBase>:
    6278:	b508      	push	{r3, lr}
    627a:	f7ff fff9 	bl	6270 <_Unwind_GetDataRelBase>
    627e:	bf00      	nop

00006280 <__aeabi_idiv0>:
    6280:	4770      	bx	lr
    6282:	bf00      	nop

00006284 <abort>:
    6284:	b508      	push	{r3, lr}
    6286:	2006      	movs	r0, #6
    6288:	f000 faa6 	bl	67d8 <raise>
    628c:	2001      	movs	r0, #1
    628e:	f7fb f8df 	bl	1450 <_exit>
    6292:	Address 0x0000000000006292 is out of bounds.


00006294 <__sflush_r>:
    6294:	898a      	ldrh	r2, [r1, #12]
    6296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    629a:	4605      	mov	r5, r0
    629c:	0710      	lsls	r0, r2, #28
    629e:	460c      	mov	r4, r1
    62a0:	d458      	bmi.n	6354 <__sflush_r+0xc0>
    62a2:	684b      	ldr	r3, [r1, #4]
    62a4:	2b00      	cmp	r3, #0
    62a6:	dc05      	bgt.n	62b4 <__sflush_r+0x20>
    62a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    62aa:	2b00      	cmp	r3, #0
    62ac:	dc02      	bgt.n	62b4 <__sflush_r+0x20>
    62ae:	2000      	movs	r0, #0
    62b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    62b6:	2e00      	cmp	r6, #0
    62b8:	d0f9      	beq.n	62ae <__sflush_r+0x1a>
    62ba:	2300      	movs	r3, #0
    62bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    62c0:	682f      	ldr	r7, [r5, #0]
    62c2:	6a21      	ldr	r1, [r4, #32]
    62c4:	602b      	str	r3, [r5, #0]
    62c6:	d032      	beq.n	632e <__sflush_r+0x9a>
    62c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    62ca:	89a3      	ldrh	r3, [r4, #12]
    62cc:	075a      	lsls	r2, r3, #29
    62ce:	d505      	bpl.n	62dc <__sflush_r+0x48>
    62d0:	6863      	ldr	r3, [r4, #4]
    62d2:	1ac0      	subs	r0, r0, r3
    62d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    62d6:	b10b      	cbz	r3, 62dc <__sflush_r+0x48>
    62d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    62da:	1ac0      	subs	r0, r0, r3
    62dc:	2300      	movs	r3, #0
    62de:	4602      	mov	r2, r0
    62e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    62e2:	6a21      	ldr	r1, [r4, #32]
    62e4:	4628      	mov	r0, r5
    62e6:	47b0      	blx	r6
    62e8:	1c43      	adds	r3, r0, #1
    62ea:	89a3      	ldrh	r3, [r4, #12]
    62ec:	d106      	bne.n	62fc <__sflush_r+0x68>
    62ee:	6829      	ldr	r1, [r5, #0]
    62f0:	291d      	cmp	r1, #29
    62f2:	d848      	bhi.n	6386 <__sflush_r+0xf2>
    62f4:	4a29      	ldr	r2, [pc, #164]	; (639c <__sflush_r+0x108>)
    62f6:	40ca      	lsrs	r2, r1
    62f8:	07d6      	lsls	r6, r2, #31
    62fa:	d544      	bpl.n	6386 <__sflush_r+0xf2>
    62fc:	2200      	movs	r2, #0
    62fe:	6062      	str	r2, [r4, #4]
    6300:	6922      	ldr	r2, [r4, #16]
    6302:	04d9      	lsls	r1, r3, #19
    6304:	6022      	str	r2, [r4, #0]
    6306:	d504      	bpl.n	6312 <__sflush_r+0x7e>
    6308:	1c42      	adds	r2, r0, #1
    630a:	d101      	bne.n	6310 <__sflush_r+0x7c>
    630c:	682b      	ldr	r3, [r5, #0]
    630e:	b903      	cbnz	r3, 6312 <__sflush_r+0x7e>
    6310:	6560      	str	r0, [r4, #84]	; 0x54
    6312:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6314:	602f      	str	r7, [r5, #0]
    6316:	2900      	cmp	r1, #0
    6318:	d0c9      	beq.n	62ae <__sflush_r+0x1a>
    631a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    631e:	4299      	cmp	r1, r3
    6320:	d002      	beq.n	6328 <__sflush_r+0x94>
    6322:	4628      	mov	r0, r5
    6324:	f000 f97a 	bl	661c <_free_r>
    6328:	2000      	movs	r0, #0
    632a:	6360      	str	r0, [r4, #52]	; 0x34
    632c:	e7c0      	b.n	62b0 <__sflush_r+0x1c>
    632e:	2301      	movs	r3, #1
    6330:	4628      	mov	r0, r5
    6332:	47b0      	blx	r6
    6334:	1c41      	adds	r1, r0, #1
    6336:	d1c8      	bne.n	62ca <__sflush_r+0x36>
    6338:	682b      	ldr	r3, [r5, #0]
    633a:	2b00      	cmp	r3, #0
    633c:	d0c5      	beq.n	62ca <__sflush_r+0x36>
    633e:	2b1d      	cmp	r3, #29
    6340:	d001      	beq.n	6346 <__sflush_r+0xb2>
    6342:	2b16      	cmp	r3, #22
    6344:	d101      	bne.n	634a <__sflush_r+0xb6>
    6346:	602f      	str	r7, [r5, #0]
    6348:	e7b1      	b.n	62ae <__sflush_r+0x1a>
    634a:	89a3      	ldrh	r3, [r4, #12]
    634c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6350:	81a3      	strh	r3, [r4, #12]
    6352:	e7ad      	b.n	62b0 <__sflush_r+0x1c>
    6354:	690f      	ldr	r7, [r1, #16]
    6356:	2f00      	cmp	r7, #0
    6358:	d0a9      	beq.n	62ae <__sflush_r+0x1a>
    635a:	0793      	lsls	r3, r2, #30
    635c:	bf18      	it	ne
    635e:	2300      	movne	r3, #0
    6360:	680e      	ldr	r6, [r1, #0]
    6362:	bf08      	it	eq
    6364:	694b      	ldreq	r3, [r1, #20]
    6366:	eba6 0807 	sub.w	r8, r6, r7
    636a:	600f      	str	r7, [r1, #0]
    636c:	608b      	str	r3, [r1, #8]
    636e:	f1b8 0f00 	cmp.w	r8, #0
    6372:	dd9c      	ble.n	62ae <__sflush_r+0x1a>
    6374:	4643      	mov	r3, r8
    6376:	463a      	mov	r2, r7
    6378:	6a21      	ldr	r1, [r4, #32]
    637a:	4628      	mov	r0, r5
    637c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    637e:	47b0      	blx	r6
    6380:	2800      	cmp	r0, #0
    6382:	dc06      	bgt.n	6392 <__sflush_r+0xfe>
    6384:	89a3      	ldrh	r3, [r4, #12]
    6386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    638a:	81a3      	strh	r3, [r4, #12]
    638c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6390:	e78e      	b.n	62b0 <__sflush_r+0x1c>
    6392:	4407      	add	r7, r0
    6394:	eba8 0800 	sub.w	r8, r8, r0
    6398:	e7e9      	b.n	636e <__sflush_r+0xda>
    639a:	bf00      	nop
    639c:	20400001 	.word	0x20400001

000063a0 <_fflush_r>:
    63a0:	b538      	push	{r3, r4, r5, lr}
    63a2:	690b      	ldr	r3, [r1, #16]
    63a4:	4605      	mov	r5, r0
    63a6:	460c      	mov	r4, r1
    63a8:	b1db      	cbz	r3, 63e2 <_fflush_r+0x42>
    63aa:	b118      	cbz	r0, 63b4 <_fflush_r+0x14>
    63ac:	6983      	ldr	r3, [r0, #24]
    63ae:	b90b      	cbnz	r3, 63b4 <_fflush_r+0x14>
    63b0:	f000 f872 	bl	6498 <__sinit>
    63b4:	4b0c      	ldr	r3, [pc, #48]	; (63e8 <_fflush_r+0x48>)
    63b6:	429c      	cmp	r4, r3
    63b8:	d109      	bne.n	63ce <_fflush_r+0x2e>
    63ba:	686c      	ldr	r4, [r5, #4]
    63bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    63c0:	b17b      	cbz	r3, 63e2 <_fflush_r+0x42>
    63c2:	4621      	mov	r1, r4
    63c4:	4628      	mov	r0, r5
    63c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63ca:	f7ff bf63 	b.w	6294 <__sflush_r>
    63ce:	4b07      	ldr	r3, [pc, #28]	; (63ec <_fflush_r+0x4c>)
    63d0:	429c      	cmp	r4, r3
    63d2:	d101      	bne.n	63d8 <_fflush_r+0x38>
    63d4:	68ac      	ldr	r4, [r5, #8]
    63d6:	e7f1      	b.n	63bc <_fflush_r+0x1c>
    63d8:	4b05      	ldr	r3, [pc, #20]	; (63f0 <_fflush_r+0x50>)
    63da:	429c      	cmp	r4, r3
    63dc:	bf08      	it	eq
    63de:	68ec      	ldreq	r4, [r5, #12]
    63e0:	e7ec      	b.n	63bc <_fflush_r+0x1c>
    63e2:	2000      	movs	r0, #0
    63e4:	bd38      	pop	{r3, r4, r5, pc}
    63e6:	bf00      	nop
    63e8:	0000816c 	.word	0x0000816c
    63ec:	0000818c 	.word	0x0000818c
    63f0:	0000814c 	.word	0x0000814c

000063f4 <fflush>:
    63f4:	4601      	mov	r1, r0
    63f6:	b920      	cbnz	r0, 6402 <fflush+0xe>
    63f8:	4b04      	ldr	r3, [pc, #16]	; (640c <fflush+0x18>)
    63fa:	4905      	ldr	r1, [pc, #20]	; (6410 <fflush+0x1c>)
    63fc:	6818      	ldr	r0, [r3, #0]
    63fe:	f000 b8b7 	b.w	6570 <_fwalk_reent>
    6402:	4b04      	ldr	r3, [pc, #16]	; (6414 <fflush+0x20>)
    6404:	6818      	ldr	r0, [r3, #0]
    6406:	f7ff bfcb 	b.w	63a0 <_fflush_r>
    640a:	bf00      	nop
    640c:	000081ac 	.word	0x000081ac
    6410:	000063a1 	.word	0x000063a1
    6414:	2007c0c4 	.word	0x2007c0c4

00006418 <std>:
    6418:	2300      	movs	r3, #0
    641a:	b510      	push	{r4, lr}
    641c:	4604      	mov	r4, r0
    641e:	e9c0 3300 	strd	r3, r3, [r0]
    6422:	6083      	str	r3, [r0, #8]
    6424:	8181      	strh	r1, [r0, #12]
    6426:	6643      	str	r3, [r0, #100]	; 0x64
    6428:	81c2      	strh	r2, [r0, #14]
    642a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    642e:	6183      	str	r3, [r0, #24]
    6430:	4619      	mov	r1, r3
    6432:	2208      	movs	r2, #8
    6434:	305c      	adds	r0, #92	; 0x5c
    6436:	f000 f8e8 	bl	660a <memset>
    643a:	4b05      	ldr	r3, [pc, #20]	; (6450 <std+0x38>)
    643c:	6224      	str	r4, [r4, #32]
    643e:	6263      	str	r3, [r4, #36]	; 0x24
    6440:	4b04      	ldr	r3, [pc, #16]	; (6454 <std+0x3c>)
    6442:	62a3      	str	r3, [r4, #40]	; 0x28
    6444:	4b04      	ldr	r3, [pc, #16]	; (6458 <std+0x40>)
    6446:	62e3      	str	r3, [r4, #44]	; 0x2c
    6448:	4b04      	ldr	r3, [pc, #16]	; (645c <std+0x44>)
    644a:	6323      	str	r3, [r4, #48]	; 0x30
    644c:	bd10      	pop	{r4, pc}
    644e:	bf00      	nop
    6450:	00006811 	.word	0x00006811
    6454:	00006833 	.word	0x00006833
    6458:	0000686b 	.word	0x0000686b
    645c:	0000688f 	.word	0x0000688f

00006460 <_cleanup_r>:
    6460:	4901      	ldr	r1, [pc, #4]	; (6468 <_cleanup_r+0x8>)
    6462:	f000 b885 	b.w	6570 <_fwalk_reent>
    6466:	bf00      	nop
    6468:	000063a1 	.word	0x000063a1

0000646c <__sfmoreglue>:
    646c:	b570      	push	{r4, r5, r6, lr}
    646e:	2568      	movs	r5, #104	; 0x68
    6470:	1e4a      	subs	r2, r1, #1
    6472:	4355      	muls	r5, r2
    6474:	460e      	mov	r6, r1
    6476:	f105 0174 	add.w	r1, r5, #116	; 0x74
    647a:	f000 f91b 	bl	66b4 <_malloc_r>
    647e:	4604      	mov	r4, r0
    6480:	b140      	cbz	r0, 6494 <__sfmoreglue+0x28>
    6482:	2100      	movs	r1, #0
    6484:	e9c0 1600 	strd	r1, r6, [r0]
    6488:	300c      	adds	r0, #12
    648a:	60a0      	str	r0, [r4, #8]
    648c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    6490:	f000 f8bb 	bl	660a <memset>
    6494:	4620      	mov	r0, r4
    6496:	bd70      	pop	{r4, r5, r6, pc}

00006498 <__sinit>:
    6498:	6983      	ldr	r3, [r0, #24]
    649a:	b510      	push	{r4, lr}
    649c:	4604      	mov	r4, r0
    649e:	bb33      	cbnz	r3, 64ee <__sinit+0x56>
    64a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    64a4:	6503      	str	r3, [r0, #80]	; 0x50
    64a6:	4b12      	ldr	r3, [pc, #72]	; (64f0 <__sinit+0x58>)
    64a8:	4a12      	ldr	r2, [pc, #72]	; (64f4 <__sinit+0x5c>)
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	6282      	str	r2, [r0, #40]	; 0x28
    64ae:	4298      	cmp	r0, r3
    64b0:	bf04      	itt	eq
    64b2:	2301      	moveq	r3, #1
    64b4:	6183      	streq	r3, [r0, #24]
    64b6:	f000 f81f 	bl	64f8 <__sfp>
    64ba:	6060      	str	r0, [r4, #4]
    64bc:	4620      	mov	r0, r4
    64be:	f000 f81b 	bl	64f8 <__sfp>
    64c2:	60a0      	str	r0, [r4, #8]
    64c4:	4620      	mov	r0, r4
    64c6:	f000 f817 	bl	64f8 <__sfp>
    64ca:	2200      	movs	r2, #0
    64cc:	60e0      	str	r0, [r4, #12]
    64ce:	2104      	movs	r1, #4
    64d0:	6860      	ldr	r0, [r4, #4]
    64d2:	f7ff ffa1 	bl	6418 <std>
    64d6:	2201      	movs	r2, #1
    64d8:	2109      	movs	r1, #9
    64da:	68a0      	ldr	r0, [r4, #8]
    64dc:	f7ff ff9c 	bl	6418 <std>
    64e0:	2202      	movs	r2, #2
    64e2:	2112      	movs	r1, #18
    64e4:	68e0      	ldr	r0, [r4, #12]
    64e6:	f7ff ff97 	bl	6418 <std>
    64ea:	2301      	movs	r3, #1
    64ec:	61a3      	str	r3, [r4, #24]
    64ee:	bd10      	pop	{r4, pc}
    64f0:	000081ac 	.word	0x000081ac
    64f4:	00006461 	.word	0x00006461

000064f8 <__sfp>:
    64f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64fa:	4b1b      	ldr	r3, [pc, #108]	; (6568 <__sfp+0x70>)
    64fc:	4607      	mov	r7, r0
    64fe:	681e      	ldr	r6, [r3, #0]
    6500:	69b3      	ldr	r3, [r6, #24]
    6502:	b913      	cbnz	r3, 650a <__sfp+0x12>
    6504:	4630      	mov	r0, r6
    6506:	f7ff ffc7 	bl	6498 <__sinit>
    650a:	3648      	adds	r6, #72	; 0x48
    650c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    6510:	3b01      	subs	r3, #1
    6512:	d503      	bpl.n	651c <__sfp+0x24>
    6514:	6833      	ldr	r3, [r6, #0]
    6516:	b133      	cbz	r3, 6526 <__sfp+0x2e>
    6518:	6836      	ldr	r6, [r6, #0]
    651a:	e7f7      	b.n	650c <__sfp+0x14>
    651c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    6520:	b16d      	cbz	r5, 653e <__sfp+0x46>
    6522:	3468      	adds	r4, #104	; 0x68
    6524:	e7f4      	b.n	6510 <__sfp+0x18>
    6526:	2104      	movs	r1, #4
    6528:	4638      	mov	r0, r7
    652a:	f7ff ff9f 	bl	646c <__sfmoreglue>
    652e:	6030      	str	r0, [r6, #0]
    6530:	2800      	cmp	r0, #0
    6532:	d1f1      	bne.n	6518 <__sfp+0x20>
    6534:	230c      	movs	r3, #12
    6536:	4604      	mov	r4, r0
    6538:	603b      	str	r3, [r7, #0]
    653a:	4620      	mov	r0, r4
    653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    653e:	4b0b      	ldr	r3, [pc, #44]	; (656c <__sfp+0x74>)
    6540:	6665      	str	r5, [r4, #100]	; 0x64
    6542:	e9c4 5500 	strd	r5, r5, [r4]
    6546:	60a5      	str	r5, [r4, #8]
    6548:	e9c4 3503 	strd	r3, r5, [r4, #12]
    654c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    6550:	2208      	movs	r2, #8
    6552:	4629      	mov	r1, r5
    6554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6558:	f000 f857 	bl	660a <memset>
    655c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    6560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    6564:	e7e9      	b.n	653a <__sfp+0x42>
    6566:	bf00      	nop
    6568:	000081ac 	.word	0x000081ac
    656c:	ffff0001 	.word	0xffff0001

00006570 <_fwalk_reent>:
    6570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6574:	4680      	mov	r8, r0
    6576:	4689      	mov	r9, r1
    6578:	2600      	movs	r6, #0
    657a:	f100 0448 	add.w	r4, r0, #72	; 0x48
    657e:	b914      	cbnz	r4, 6586 <_fwalk_reent+0x16>
    6580:	4630      	mov	r0, r6
    6582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6586:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    658a:	3f01      	subs	r7, #1
    658c:	d501      	bpl.n	6592 <_fwalk_reent+0x22>
    658e:	6824      	ldr	r4, [r4, #0]
    6590:	e7f5      	b.n	657e <_fwalk_reent+0xe>
    6592:	89ab      	ldrh	r3, [r5, #12]
    6594:	2b01      	cmp	r3, #1
    6596:	d907      	bls.n	65a8 <_fwalk_reent+0x38>
    6598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    659c:	3301      	adds	r3, #1
    659e:	d003      	beq.n	65a8 <_fwalk_reent+0x38>
    65a0:	4629      	mov	r1, r5
    65a2:	4640      	mov	r0, r8
    65a4:	47c8      	blx	r9
    65a6:	4306      	orrs	r6, r0
    65a8:	3568      	adds	r5, #104	; 0x68
    65aa:	e7ee      	b.n	658a <_fwalk_reent+0x1a>

000065ac <__libc_init_array>:
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	2500      	movs	r5, #0
    65b0:	4e0c      	ldr	r6, [pc, #48]	; (65e4 <__libc_init_array+0x38>)
    65b2:	4c0d      	ldr	r4, [pc, #52]	; (65e8 <__libc_init_array+0x3c>)
    65b4:	1ba4      	subs	r4, r4, r6
    65b6:	10a4      	asrs	r4, r4, #2
    65b8:	42a5      	cmp	r5, r4
    65ba:	d109      	bne.n	65d0 <__libc_init_array+0x24>
    65bc:	f001 fdf8 	bl	81b0 <_init>
    65c0:	2500      	movs	r5, #0
    65c2:	4e0a      	ldr	r6, [pc, #40]	; (65ec <__libc_init_array+0x40>)
    65c4:	4c0a      	ldr	r4, [pc, #40]	; (65f0 <__libc_init_array+0x44>)
    65c6:	1ba4      	subs	r4, r4, r6
    65c8:	10a4      	asrs	r4, r4, #2
    65ca:	42a5      	cmp	r5, r4
    65cc:	d105      	bne.n	65da <__libc_init_array+0x2e>
    65ce:	bd70      	pop	{r4, r5, r6, pc}
    65d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    65d4:	4798      	blx	r3
    65d6:	3501      	adds	r5, #1
    65d8:	e7ee      	b.n	65b8 <__libc_init_array+0xc>
    65da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    65de:	4798      	blx	r3
    65e0:	3501      	adds	r5, #1
    65e2:	e7f2      	b.n	65ca <__libc_init_array+0x1e>
    65e4:	000081bc 	.word	0x000081bc
    65e8:	000081bc 	.word	0x000081bc
    65ec:	000081bc 	.word	0x000081bc
    65f0:	000081d0 	.word	0x000081d0

000065f4 <memcpy>:
    65f4:	b510      	push	{r4, lr}
    65f6:	1e43      	subs	r3, r0, #1
    65f8:	440a      	add	r2, r1
    65fa:	4291      	cmp	r1, r2
    65fc:	d100      	bne.n	6600 <memcpy+0xc>
    65fe:	bd10      	pop	{r4, pc}
    6600:	f811 4b01 	ldrb.w	r4, [r1], #1
    6604:	f803 4f01 	strb.w	r4, [r3, #1]!
    6608:	e7f7      	b.n	65fa <memcpy+0x6>

0000660a <memset>:
    660a:	4603      	mov	r3, r0
    660c:	4402      	add	r2, r0
    660e:	4293      	cmp	r3, r2
    6610:	d100      	bne.n	6614 <memset+0xa>
    6612:	4770      	bx	lr
    6614:	f803 1b01 	strb.w	r1, [r3], #1
    6618:	e7f9      	b.n	660e <memset+0x4>
    661a:	Address 0x000000000000661a is out of bounds.


0000661c <_free_r>:
    661c:	b538      	push	{r3, r4, r5, lr}
    661e:	4605      	mov	r5, r0
    6620:	2900      	cmp	r1, #0
    6622:	d043      	beq.n	66ac <_free_r+0x90>
    6624:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6628:	1f0c      	subs	r4, r1, #4
    662a:	2b00      	cmp	r3, #0
    662c:	bfb8      	it	lt
    662e:	18e4      	addlt	r4, r4, r3
    6630:	f000 f96e 	bl	6910 <__malloc_lock>
    6634:	4a1e      	ldr	r2, [pc, #120]	; (66b0 <_free_r+0x94>)
    6636:	6813      	ldr	r3, [r2, #0]
    6638:	4610      	mov	r0, r2
    663a:	b933      	cbnz	r3, 664a <_free_r+0x2e>
    663c:	6063      	str	r3, [r4, #4]
    663e:	6014      	str	r4, [r2, #0]
    6640:	4628      	mov	r0, r5
    6642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6646:	f000 b964 	b.w	6912 <__malloc_unlock>
    664a:	42a3      	cmp	r3, r4
    664c:	d90b      	bls.n	6666 <_free_r+0x4a>
    664e:	6821      	ldr	r1, [r4, #0]
    6650:	1862      	adds	r2, r4, r1
    6652:	4293      	cmp	r3, r2
    6654:	bf01      	itttt	eq
    6656:	681a      	ldreq	r2, [r3, #0]
    6658:	685b      	ldreq	r3, [r3, #4]
    665a:	1852      	addeq	r2, r2, r1
    665c:	6022      	streq	r2, [r4, #0]
    665e:	6063      	str	r3, [r4, #4]
    6660:	6004      	str	r4, [r0, #0]
    6662:	e7ed      	b.n	6640 <_free_r+0x24>
    6664:	4613      	mov	r3, r2
    6666:	685a      	ldr	r2, [r3, #4]
    6668:	b10a      	cbz	r2, 666e <_free_r+0x52>
    666a:	42a2      	cmp	r2, r4
    666c:	d9fa      	bls.n	6664 <_free_r+0x48>
    666e:	6819      	ldr	r1, [r3, #0]
    6670:	1858      	adds	r0, r3, r1
    6672:	42a0      	cmp	r0, r4
    6674:	d10b      	bne.n	668e <_free_r+0x72>
    6676:	6820      	ldr	r0, [r4, #0]
    6678:	4401      	add	r1, r0
    667a:	1858      	adds	r0, r3, r1
    667c:	4282      	cmp	r2, r0
    667e:	6019      	str	r1, [r3, #0]
    6680:	d1de      	bne.n	6640 <_free_r+0x24>
    6682:	6810      	ldr	r0, [r2, #0]
    6684:	6852      	ldr	r2, [r2, #4]
    6686:	4401      	add	r1, r0
    6688:	6019      	str	r1, [r3, #0]
    668a:	605a      	str	r2, [r3, #4]
    668c:	e7d8      	b.n	6640 <_free_r+0x24>
    668e:	d902      	bls.n	6696 <_free_r+0x7a>
    6690:	230c      	movs	r3, #12
    6692:	602b      	str	r3, [r5, #0]
    6694:	e7d4      	b.n	6640 <_free_r+0x24>
    6696:	6820      	ldr	r0, [r4, #0]
    6698:	1821      	adds	r1, r4, r0
    669a:	428a      	cmp	r2, r1
    669c:	bf01      	itttt	eq
    669e:	6811      	ldreq	r1, [r2, #0]
    66a0:	6852      	ldreq	r2, [r2, #4]
    66a2:	1809      	addeq	r1, r1, r0
    66a4:	6021      	streq	r1, [r4, #0]
    66a6:	6062      	str	r2, [r4, #4]
    66a8:	605c      	str	r4, [r3, #4]
    66aa:	e7c9      	b.n	6640 <_free_r+0x24>
    66ac:	bd38      	pop	{r3, r4, r5, pc}
    66ae:	bf00      	nop
    66b0:	2007c32c 	.word	0x2007c32c

000066b4 <_malloc_r>:
    66b4:	b570      	push	{r4, r5, r6, lr}
    66b6:	1ccd      	adds	r5, r1, #3
    66b8:	f025 0503 	bic.w	r5, r5, #3
    66bc:	3508      	adds	r5, #8
    66be:	2d0c      	cmp	r5, #12
    66c0:	bf38      	it	cc
    66c2:	250c      	movcc	r5, #12
    66c4:	2d00      	cmp	r5, #0
    66c6:	4606      	mov	r6, r0
    66c8:	db01      	blt.n	66ce <_malloc_r+0x1a>
    66ca:	42a9      	cmp	r1, r5
    66cc:	d903      	bls.n	66d6 <_malloc_r+0x22>
    66ce:	230c      	movs	r3, #12
    66d0:	6033      	str	r3, [r6, #0]
    66d2:	2000      	movs	r0, #0
    66d4:	bd70      	pop	{r4, r5, r6, pc}
    66d6:	f000 f91b 	bl	6910 <__malloc_lock>
    66da:	4a21      	ldr	r2, [pc, #132]	; (6760 <_malloc_r+0xac>)
    66dc:	6814      	ldr	r4, [r2, #0]
    66de:	4621      	mov	r1, r4
    66e0:	b991      	cbnz	r1, 6708 <_malloc_r+0x54>
    66e2:	4c20      	ldr	r4, [pc, #128]	; (6764 <_malloc_r+0xb0>)
    66e4:	6823      	ldr	r3, [r4, #0]
    66e6:	b91b      	cbnz	r3, 66f0 <_malloc_r+0x3c>
    66e8:	4630      	mov	r0, r6
    66ea:	f000 f83d 	bl	6768 <_sbrk_r>
    66ee:	6020      	str	r0, [r4, #0]
    66f0:	4629      	mov	r1, r5
    66f2:	4630      	mov	r0, r6
    66f4:	f000 f838 	bl	6768 <_sbrk_r>
    66f8:	1c43      	adds	r3, r0, #1
    66fa:	d124      	bne.n	6746 <_malloc_r+0x92>
    66fc:	230c      	movs	r3, #12
    66fe:	4630      	mov	r0, r6
    6700:	6033      	str	r3, [r6, #0]
    6702:	f000 f906 	bl	6912 <__malloc_unlock>
    6706:	e7e4      	b.n	66d2 <_malloc_r+0x1e>
    6708:	680b      	ldr	r3, [r1, #0]
    670a:	1b5b      	subs	r3, r3, r5
    670c:	d418      	bmi.n	6740 <_malloc_r+0x8c>
    670e:	2b0b      	cmp	r3, #11
    6710:	d90f      	bls.n	6732 <_malloc_r+0x7e>
    6712:	600b      	str	r3, [r1, #0]
    6714:	18cc      	adds	r4, r1, r3
    6716:	50cd      	str	r5, [r1, r3]
    6718:	4630      	mov	r0, r6
    671a:	f000 f8fa 	bl	6912 <__malloc_unlock>
    671e:	f104 000b 	add.w	r0, r4, #11
    6722:	1d23      	adds	r3, r4, #4
    6724:	f020 0007 	bic.w	r0, r0, #7
    6728:	1ac3      	subs	r3, r0, r3
    672a:	d0d3      	beq.n	66d4 <_malloc_r+0x20>
    672c:	425a      	negs	r2, r3
    672e:	50e2      	str	r2, [r4, r3]
    6730:	e7d0      	b.n	66d4 <_malloc_r+0x20>
    6732:	684b      	ldr	r3, [r1, #4]
    6734:	428c      	cmp	r4, r1
    6736:	bf16      	itet	ne
    6738:	6063      	strne	r3, [r4, #4]
    673a:	6013      	streq	r3, [r2, #0]
    673c:	460c      	movne	r4, r1
    673e:	e7eb      	b.n	6718 <_malloc_r+0x64>
    6740:	460c      	mov	r4, r1
    6742:	6849      	ldr	r1, [r1, #4]
    6744:	e7cc      	b.n	66e0 <_malloc_r+0x2c>
    6746:	1cc4      	adds	r4, r0, #3
    6748:	f024 0403 	bic.w	r4, r4, #3
    674c:	42a0      	cmp	r0, r4
    674e:	d005      	beq.n	675c <_malloc_r+0xa8>
    6750:	1a21      	subs	r1, r4, r0
    6752:	4630      	mov	r0, r6
    6754:	f000 f808 	bl	6768 <_sbrk_r>
    6758:	3001      	adds	r0, #1
    675a:	d0cf      	beq.n	66fc <_malloc_r+0x48>
    675c:	6025      	str	r5, [r4, #0]
    675e:	e7db      	b.n	6718 <_malloc_r+0x64>
    6760:	2007c32c 	.word	0x2007c32c
    6764:	2007c330 	.word	0x2007c330

00006768 <_sbrk_r>:
    6768:	b538      	push	{r3, r4, r5, lr}
    676a:	2300      	movs	r3, #0
    676c:	4c05      	ldr	r4, [pc, #20]	; (6784 <_sbrk_r+0x1c>)
    676e:	4605      	mov	r5, r0
    6770:	4608      	mov	r0, r1
    6772:	6023      	str	r3, [r4, #0]
    6774:	f7fa fdea 	bl	134c <_sbrk>
    6778:	1c43      	adds	r3, r0, #1
    677a:	d102      	bne.n	6782 <_sbrk_r+0x1a>
    677c:	6823      	ldr	r3, [r4, #0]
    677e:	b103      	cbz	r3, 6782 <_sbrk_r+0x1a>
    6780:	602b      	str	r3, [r5, #0]
    6782:	bd38      	pop	{r3, r4, r5, pc}
    6784:	2007c3d4 	.word	0x2007c3d4

00006788 <_raise_r>:
    6788:	291f      	cmp	r1, #31
    678a:	b538      	push	{r3, r4, r5, lr}
    678c:	4604      	mov	r4, r0
    678e:	460d      	mov	r5, r1
    6790:	d904      	bls.n	679c <_raise_r+0x14>
    6792:	2316      	movs	r3, #22
    6794:	6003      	str	r3, [r0, #0]
    6796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    679a:	bd38      	pop	{r3, r4, r5, pc}
    679c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    679e:	b112      	cbz	r2, 67a6 <_raise_r+0x1e>
    67a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    67a4:	b94b      	cbnz	r3, 67ba <_raise_r+0x32>
    67a6:	4620      	mov	r0, r4
    67a8:	f000 f830 	bl	680c <_getpid_r>
    67ac:	462a      	mov	r2, r5
    67ae:	4601      	mov	r1, r0
    67b0:	4620      	mov	r0, r4
    67b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    67b6:	f000 b817 	b.w	67e8 <_kill_r>
    67ba:	2b01      	cmp	r3, #1
    67bc:	d00a      	beq.n	67d4 <_raise_r+0x4c>
    67be:	1c59      	adds	r1, r3, #1
    67c0:	d103      	bne.n	67ca <_raise_r+0x42>
    67c2:	2316      	movs	r3, #22
    67c4:	6003      	str	r3, [r0, #0]
    67c6:	2001      	movs	r0, #1
    67c8:	e7e7      	b.n	679a <_raise_r+0x12>
    67ca:	2400      	movs	r4, #0
    67cc:	4628      	mov	r0, r5
    67ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    67d2:	4798      	blx	r3
    67d4:	2000      	movs	r0, #0
    67d6:	e7e0      	b.n	679a <_raise_r+0x12>

000067d8 <raise>:
    67d8:	4b02      	ldr	r3, [pc, #8]	; (67e4 <raise+0xc>)
    67da:	4601      	mov	r1, r0
    67dc:	6818      	ldr	r0, [r3, #0]
    67de:	f7ff bfd3 	b.w	6788 <_raise_r>
    67e2:	bf00      	nop
    67e4:	2007c0c4 	.word	0x2007c0c4

000067e8 <_kill_r>:
    67e8:	b538      	push	{r3, r4, r5, lr}
    67ea:	2300      	movs	r3, #0
    67ec:	4c06      	ldr	r4, [pc, #24]	; (6808 <_kill_r+0x20>)
    67ee:	4605      	mov	r5, r0
    67f0:	4608      	mov	r0, r1
    67f2:	4611      	mov	r1, r2
    67f4:	6023      	str	r3, [r4, #0]
    67f6:	f7fa fd9c 	bl	1332 <_kill>
    67fa:	1c43      	adds	r3, r0, #1
    67fc:	d102      	bne.n	6804 <_kill_r+0x1c>
    67fe:	6823      	ldr	r3, [r4, #0]
    6800:	b103      	cbz	r3, 6804 <_kill_r+0x1c>
    6802:	602b      	str	r3, [r5, #0]
    6804:	bd38      	pop	{r3, r4, r5, pc}
    6806:	bf00      	nop
    6808:	2007c3d4 	.word	0x2007c3d4

0000680c <_getpid_r>:
    680c:	f7fa bd8a 	b.w	1324 <_getpid>

00006810 <__sread>:
    6810:	b510      	push	{r4, lr}
    6812:	460c      	mov	r4, r1
    6814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6818:	f000 f87c 	bl	6914 <_read_r>
    681c:	2800      	cmp	r0, #0
    681e:	bfab      	itete	ge
    6820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    6822:	89a3      	ldrhlt	r3, [r4, #12]
    6824:	181b      	addge	r3, r3, r0
    6826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    682a:	bfac      	ite	ge
    682c:	6563      	strge	r3, [r4, #84]	; 0x54
    682e:	81a3      	strhlt	r3, [r4, #12]
    6830:	bd10      	pop	{r4, pc}

00006832 <__swrite>:
    6832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6836:	461f      	mov	r7, r3
    6838:	898b      	ldrh	r3, [r1, #12]
    683a:	4605      	mov	r5, r0
    683c:	05db      	lsls	r3, r3, #23
    683e:	460c      	mov	r4, r1
    6840:	4616      	mov	r6, r2
    6842:	d505      	bpl.n	6850 <__swrite+0x1e>
    6844:	2302      	movs	r3, #2
    6846:	2200      	movs	r2, #0
    6848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    684c:	f000 f84e 	bl	68ec <_lseek_r>
    6850:	89a3      	ldrh	r3, [r4, #12]
    6852:	4632      	mov	r2, r6
    6854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6858:	81a3      	strh	r3, [r4, #12]
    685a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    685e:	463b      	mov	r3, r7
    6860:	4628      	mov	r0, r5
    6862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6866:	f000 b81f 	b.w	68a8 <_write_r>

0000686a <__sseek>:
    686a:	b510      	push	{r4, lr}
    686c:	460c      	mov	r4, r1
    686e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6872:	f000 f83b 	bl	68ec <_lseek_r>
    6876:	1c43      	adds	r3, r0, #1
    6878:	89a3      	ldrh	r3, [r4, #12]
    687a:	bf15      	itete	ne
    687c:	6560      	strne	r0, [r4, #84]	; 0x54
    687e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    6882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    6886:	81a3      	strheq	r3, [r4, #12]
    6888:	bf18      	it	ne
    688a:	81a3      	strhne	r3, [r4, #12]
    688c:	bd10      	pop	{r4, pc}

0000688e <__sclose>:
    688e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6892:	f000 b81b 	b.w	68cc <_close_r>

00006896 <strlen>:
    6896:	4603      	mov	r3, r0
    6898:	f813 2b01 	ldrb.w	r2, [r3], #1
    689c:	2a00      	cmp	r2, #0
    689e:	d1fb      	bne.n	6898 <strlen+0x2>
    68a0:	1a18      	subs	r0, r3, r0
    68a2:	3801      	subs	r0, #1
    68a4:	4770      	bx	lr
    68a6:	Address 0x00000000000068a6 is out of bounds.


000068a8 <_write_r>:
    68a8:	b538      	push	{r3, r4, r5, lr}
    68aa:	4605      	mov	r5, r0
    68ac:	4608      	mov	r0, r1
    68ae:	4611      	mov	r1, r2
    68b0:	2200      	movs	r2, #0
    68b2:	4c05      	ldr	r4, [pc, #20]	; (68c8 <_write_r+0x20>)
    68b4:	6022      	str	r2, [r4, #0]
    68b6:	461a      	mov	r2, r3
    68b8:	f7fa fd68 	bl	138c <_write>
    68bc:	1c43      	adds	r3, r0, #1
    68be:	d102      	bne.n	68c6 <_write_r+0x1e>
    68c0:	6823      	ldr	r3, [r4, #0]
    68c2:	b103      	cbz	r3, 68c6 <_write_r+0x1e>
    68c4:	602b      	str	r3, [r5, #0]
    68c6:	bd38      	pop	{r3, r4, r5, pc}
    68c8:	2007c3d4 	.word	0x2007c3d4

000068cc <_close_r>:
    68cc:	b538      	push	{r3, r4, r5, lr}
    68ce:	2300      	movs	r3, #0
    68d0:	4c05      	ldr	r4, [pc, #20]	; (68e8 <_close_r+0x1c>)
    68d2:	4605      	mov	r5, r0
    68d4:	4608      	mov	r0, r1
    68d6:	6023      	str	r3, [r4, #0]
    68d8:	f000 f8a6 	bl	6a28 <_close>
    68dc:	1c43      	adds	r3, r0, #1
    68de:	d102      	bne.n	68e6 <_close_r+0x1a>
    68e0:	6823      	ldr	r3, [r4, #0]
    68e2:	b103      	cbz	r3, 68e6 <_close_r+0x1a>
    68e4:	602b      	str	r3, [r5, #0]
    68e6:	bd38      	pop	{r3, r4, r5, pc}
    68e8:	2007c3d4 	.word	0x2007c3d4

000068ec <_lseek_r>:
    68ec:	b538      	push	{r3, r4, r5, lr}
    68ee:	4605      	mov	r5, r0
    68f0:	4608      	mov	r0, r1
    68f2:	4611      	mov	r1, r2
    68f4:	2200      	movs	r2, #0
    68f6:	4c05      	ldr	r4, [pc, #20]	; (690c <_lseek_r+0x20>)
    68f8:	6022      	str	r2, [r4, #0]
    68fa:	461a      	mov	r2, r3
    68fc:	f000 f883 	bl	6a06 <_lseek>
    6900:	1c43      	adds	r3, r0, #1
    6902:	d102      	bne.n	690a <_lseek_r+0x1e>
    6904:	6823      	ldr	r3, [r4, #0]
    6906:	b103      	cbz	r3, 690a <_lseek_r+0x1e>
    6908:	602b      	str	r3, [r5, #0]
    690a:	bd38      	pop	{r3, r4, r5, pc}
    690c:	2007c3d4 	.word	0x2007c3d4

00006910 <__malloc_lock>:
    6910:	4770      	bx	lr

00006912 <__malloc_unlock>:
    6912:	4770      	bx	lr

00006914 <_read_r>:
    6914:	b538      	push	{r3, r4, r5, lr}
    6916:	4605      	mov	r5, r0
    6918:	4608      	mov	r0, r1
    691a:	4611      	mov	r1, r2
    691c:	2200      	movs	r2, #0
    691e:	4c05      	ldr	r4, [pc, #20]	; (6934 <_read_r+0x20>)
    6920:	6022      	str	r2, [r4, #0]
    6922:	461a      	mov	r2, r3
    6924:	f7fa fd4a 	bl	13bc <_read>
    6928:	1c43      	adds	r3, r0, #1
    692a:	d102      	bne.n	6932 <_read_r+0x1e>
    692c:	6823      	ldr	r3, [r4, #0]
    692e:	b103      	cbz	r3, 6932 <_read_r+0x1e>
    6930:	602b      	str	r3, [r5, #0]
    6932:	bd38      	pop	{r3, r4, r5, pc}
    6934:	2007c3d4 	.word	0x2007c3d4

00006938 <findslot>:
    6938:	4b0a      	ldr	r3, [pc, #40]	; (6964 <findslot+0x2c>)
    693a:	b510      	push	{r4, lr}
    693c:	4604      	mov	r4, r0
    693e:	6818      	ldr	r0, [r3, #0]
    6940:	b118      	cbz	r0, 694a <findslot+0x12>
    6942:	6983      	ldr	r3, [r0, #24]
    6944:	b90b      	cbnz	r3, 694a <findslot+0x12>
    6946:	f7ff fda7 	bl	6498 <__sinit>
    694a:	2c13      	cmp	r4, #19
    694c:	d807      	bhi.n	695e <findslot+0x26>
    694e:	4806      	ldr	r0, [pc, #24]	; (6968 <findslot+0x30>)
    6950:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    6954:	3301      	adds	r3, #1
    6956:	d002      	beq.n	695e <findslot+0x26>
    6958:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    695c:	bd10      	pop	{r4, pc}
    695e:	2000      	movs	r0, #0
    6960:	e7fc      	b.n	695c <findslot+0x24>
    6962:	bf00      	nop
    6964:	2007c0c4 	.word	0x2007c0c4
    6968:	2007c334 	.word	0x2007c334

0000696c <checkerror>:
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696e:	1c43      	adds	r3, r0, #1
    6970:	4605      	mov	r5, r0
    6972:	d109      	bne.n	6988 <checkerror+0x1c>
    6974:	f000 f87e 	bl	6a74 <__errno>
    6978:	2413      	movs	r4, #19
    697a:	4606      	mov	r6, r0
    697c:	2700      	movs	r7, #0
    697e:	4620      	mov	r0, r4
    6980:	4639      	mov	r1, r7
    6982:	beab      	bkpt	0x00ab
    6984:	4604      	mov	r4, r0
    6986:	6034      	str	r4, [r6, #0]
    6988:	4628      	mov	r0, r5
    698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000698c <_swilseek>:
    698c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    698e:	460c      	mov	r4, r1
    6990:	4616      	mov	r6, r2
    6992:	f7ff ffd1 	bl	6938 <findslot>
    6996:	4605      	mov	r5, r0
    6998:	b940      	cbnz	r0, 69ac <_swilseek+0x20>
    699a:	f000 f86b 	bl	6a74 <__errno>
    699e:	2309      	movs	r3, #9
    69a0:	6003      	str	r3, [r0, #0]
    69a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    69a6:	4620      	mov	r0, r4
    69a8:	b003      	add	sp, #12
    69aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69ac:	2e02      	cmp	r6, #2
    69ae:	d903      	bls.n	69b8 <_swilseek+0x2c>
    69b0:	f000 f860 	bl	6a74 <__errno>
    69b4:	2316      	movs	r3, #22
    69b6:	e7f3      	b.n	69a0 <_swilseek+0x14>
    69b8:	2e01      	cmp	r6, #1
    69ba:	d112      	bne.n	69e2 <_swilseek+0x56>
    69bc:	6843      	ldr	r3, [r0, #4]
    69be:	18e4      	adds	r4, r4, r3
    69c0:	d4f6      	bmi.n	69b0 <_swilseek+0x24>
    69c2:	682b      	ldr	r3, [r5, #0]
    69c4:	260a      	movs	r6, #10
    69c6:	e9cd 3400 	strd	r3, r4, [sp]
    69ca:	466f      	mov	r7, sp
    69cc:	4630      	mov	r0, r6
    69ce:	4639      	mov	r1, r7
    69d0:	beab      	bkpt	0x00ab
    69d2:	4606      	mov	r6, r0
    69d4:	4630      	mov	r0, r6
    69d6:	f7ff ffc9 	bl	696c <checkerror>
    69da:	2800      	cmp	r0, #0
    69dc:	dbe1      	blt.n	69a2 <_swilseek+0x16>
    69de:	606c      	str	r4, [r5, #4]
    69e0:	e7e1      	b.n	69a6 <_swilseek+0x1a>
    69e2:	2e02      	cmp	r6, #2
    69e4:	d1ed      	bne.n	69c2 <_swilseek+0x36>
    69e6:	6803      	ldr	r3, [r0, #0]
    69e8:	af02      	add	r7, sp, #8
    69ea:	f847 3d08 	str.w	r3, [r7, #-8]!
    69ee:	260c      	movs	r6, #12
    69f0:	4630      	mov	r0, r6
    69f2:	4639      	mov	r1, r7
    69f4:	beab      	bkpt	0x00ab
    69f6:	4606      	mov	r6, r0
    69f8:	4630      	mov	r0, r6
    69fa:	f7ff ffb7 	bl	696c <checkerror>
    69fe:	1c43      	adds	r3, r0, #1
    6a00:	d0cf      	beq.n	69a2 <_swilseek+0x16>
    6a02:	4404      	add	r4, r0
    6a04:	e7dd      	b.n	69c2 <_swilseek+0x36>

00006a06 <_lseek>:
    6a06:	f7ff bfc1 	b.w	698c <_swilseek>

00006a0a <_swiclose>:
    6a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6a0c:	ad02      	add	r5, sp, #8
    6a0e:	f845 0d04 	str.w	r0, [r5, #-4]!
    6a12:	2402      	movs	r4, #2
    6a14:	4620      	mov	r0, r4
    6a16:	4629      	mov	r1, r5
    6a18:	beab      	bkpt	0x00ab
    6a1a:	4604      	mov	r4, r0
    6a1c:	4620      	mov	r0, r4
    6a1e:	f7ff ffa5 	bl	696c <checkerror>
    6a22:	b003      	add	sp, #12
    6a24:	bd30      	pop	{r4, r5, pc}
    6a26:	Address 0x0000000000006a26 is out of bounds.


00006a28 <_close>:
    6a28:	b538      	push	{r3, r4, r5, lr}
    6a2a:	4605      	mov	r5, r0
    6a2c:	f7ff ff84 	bl	6938 <findslot>
    6a30:	4604      	mov	r4, r0
    6a32:	b930      	cbnz	r0, 6a42 <_close+0x1a>
    6a34:	f000 f81e 	bl	6a74 <__errno>
    6a38:	2309      	movs	r3, #9
    6a3a:	6003      	str	r3, [r0, #0]
    6a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a40:	bd38      	pop	{r3, r4, r5, pc}
    6a42:	3d01      	subs	r5, #1
    6a44:	2d01      	cmp	r5, #1
    6a46:	d809      	bhi.n	6a5c <_close+0x34>
    6a48:	4b09      	ldr	r3, [pc, #36]	; (6a70 <_close+0x48>)
    6a4a:	689a      	ldr	r2, [r3, #8]
    6a4c:	691b      	ldr	r3, [r3, #16]
    6a4e:	429a      	cmp	r2, r3
    6a50:	d104      	bne.n	6a5c <_close+0x34>
    6a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a56:	6003      	str	r3, [r0, #0]
    6a58:	2000      	movs	r0, #0
    6a5a:	e7f1      	b.n	6a40 <_close+0x18>
    6a5c:	6820      	ldr	r0, [r4, #0]
    6a5e:	f7ff ffd4 	bl	6a0a <_swiclose>
    6a62:	2800      	cmp	r0, #0
    6a64:	d1ec      	bne.n	6a40 <_close+0x18>
    6a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a6a:	6023      	str	r3, [r4, #0]
    6a6c:	e7e8      	b.n	6a40 <_close+0x18>
    6a6e:	bf00      	nop
    6a70:	2007c334 	.word	0x2007c334

00006a74 <__errno>:
    6a74:	4b01      	ldr	r3, [pc, #4]	; (6a7c <__errno+0x8>)
    6a76:	6818      	ldr	r0, [r3, #0]
    6a78:	4770      	bx	lr
    6a7a:	bf00      	nop
    6a7c:	2007c0c4 	.word	0x2007c0c4

00006a80 <vtable for sjsu::LabGPIO>:
	...
    6a88:	00000179 00000269 00000359 000003e1     y...i...Y.......
    6a98:	0000046d 00000481 000004a1              m...........

00006aa4 <vtable for sjsu::Gpio>:
	...
    6aac:	0000495d 0000495d 0000495d 0000495d     ]I..]I..]I..]I..
    6abc:	0000495d 0000495d 0000495d              ]I..]I..]I..

00006ac8 <std::integral_constant<long long, 1ll>::value>:
    6ac8:	00000001 00000000                       ........

00006ad0 <std::integral_constant<long long, 100ll>::value>:
    6ad0:	00000064 00000000                       d.......

00006ad8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    6ad8:	65746e69 70757272 70682e74 ffff0070     interrupt.hpp...
    6ae8:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
    6af8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    6b08:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    6b18:	6d37333b 69206f4e 7265746e 74707572     ;37mNo interrupt
    6b28:	72657320 65636976 756f7220 656e6974      service routine
    6b38:	756f6620 6620646e 7420726f 76206568      found for the v
    6b48:	6f746365 64252072 69442021 6c626173     ector %d! Disabl
    6b58:	20676e69 1b525349 0a6d305b 00000000     ing ISR.[0m.....
    6b68:	20746f67 65726568 00000030 20746f67     got here0...got 
    6b78:	65726568 00000031 20746f67 65726568     here1...got here
    6b88:	00002032 20746f67 65726568 00002033     2 ..got here3 ..
    6b98:	74736574 6425203a 0000000a 00000015     test: %d........
    6ba8:	00000c29 00000001 00000001 74736574     )...........test
    6bb8:	25203a32 00000a64 74736574 25203a33     2: %d...test3: %
    6bc8:	ff000a64                                d...

00006bcc <vtable for sjsu::cortex::InterruptController>:
	...
    6bd4:	00000829 0000087d                       )...}...

00006bdc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    6bdc:	74617473 76206369 2064696f 75736a73     static void sjsu
    6bec:	6f633a3a 78657472 6e493a3a 72726574     ::cortex::Interr
    6bfc:	43747075 72746e6f 656c6c6f 553a3a72     uptController::U
    6c0c:	6765726e 65747369 49646572 7265746e     nregisteredInter
    6c1c:	74707572 646e6148 2872656c ffff0029     ruptHandler()...
    6c2c:	61766e69 0064696c 6c707061 74616369     invalid.applicat
    6c3c:	006e6f69 74736f68 73657420 00000074     ion.host test...
    6c4c:	64252020 78302029 58383025 0000000a       %d) 0x%08X....
    6c5c:	25783020 00583830 64252020 78302029      0x%08X.  %d) 0x
    6c6c:	000a7025 6e75520a 6874203a 6f662065     %p...Run: the fo
    6c7c:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
    6c8c:	79206e69 2072756f 6a6f7270 20746365     in your project 
    6c9c:	65726964 726f7463 00000079 20200a0a     directory.....  
    6cac:	3b315b1b 006d3733 656b616d 61747320     .[1;37m.make sta
    6cbc:	72746b63 2d656361 54207325 45434152     cktrace-%s TRACE
    6ccc:	00223d53 25783020 00000070 1b0a0a22     S=". 0x%p..."...
    6cdc:	006d305b 73696854 6c697720 6572206c     [0m.This will re
    6cec:	74726f70 65687420 6c696620 6e612065     port the file an
    6cfc:	696c2064 6e20656e 65626d75 68742072     d line number th
    6d0c:	6c207461 74206465 6874206f 66207369     at led to this f
    6d1c:	74636e75 206e6f69 6e696562 61632067     unction being ca
    6d2c:	64656c6c 0000002e 35345b1b 2020206d     lled.....[45m   
    6d3c:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    6d4c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    6d5c:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    6d6c:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    6d7c:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    6d8c:	546b2820 496b7361 7865646e 6b203c20      (kTaskIndex < k
    6d9c:	6b736154 6e756f43 200a2974 20202020     TaskCount).     
    6dac:	20202020 65685420 73617420 6e69206b          The task in
    6dbc:	20786564 756f6873 6e20646c 6520746f     dex should not e
    6dcc:	65656378 68742064 61742065 63206b73     xceed the task c
    6ddc:	746e756f 305b1b2e 305b1b6d 00000a6d     ount..[0m.[0m...
    6dec:	6972500a 6e69746e 74532067 206b6361     .Printing Stack 
    6dfc:	63617254 000a3a65 35345b1b 2020206d     Trace:...[45m   
    6e0c:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    6e1c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    6e2c:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    6e3c:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    6e4c:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    6e5c:	61742820 502e6b73 75526572 2929286e      (task.PreRun())
    6e6c:	2020200a 20202020 50202020 75526572     .          PreRu
    6e7c:	2029286e 6c696166 66206465 7420726f     n() failed for t
    6e8c:	3a6b7361 2c732520 72657420 616e696d     ask: %s, termina
    6e9c:	676e6974 68637320 6c756465 1b217265     ting scheduler!.
    6eac:	1b6d305b 0a6d305b 00000000 33345b1b     [0m.[0m......[43
    6ebc:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
    6ecc:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    6edc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    6eec:	65206e41 726f7272 63636f20 64657275     An error occured
    6efc:	6874202c 6f662065 776f6c6c 20676e69     , the following 
    6f0c:	6b736174 6c697720 6562206c 73757320     task will be sus
    6f1c:	646e6570 203a6465 5b1b7325 5b1b6d30     pended: %s.[0m.[
    6f2c:	000a6d30 35345b1b 2020206d 4f525245     0m...[45m   ERRO
    6f3c:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    6f4c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    6f5c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    6f6c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    6f7c:	6e6f6974 73655420 3a646574 61742820     tion Tested: (ta
    6f8c:	3e2d6b73 48746547 6c646e61 20292865     sk->GetHandle() 
    6f9c:	6e203d21 706c6c75 0a297274 20202020     != nullptr).    
    6fac:	20202020 6e552020 656c6261 206f7420           Unable to 
    6fbc:	61657263 74206574 3a6b7361 1b732520     create task: %s.
    6fcc:	1b6d305b 0a6d305b 00000000 35345b1b     [0m.[0m......[45
    6fdc:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    6fec:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    6ffc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    700c:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    701c:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    702c:	3a646574 61742820 3e2d6b73 75746553     ted: (task->Setu
    703c:	29292870 2020200a 20202020 46202020     p()).          F
    704c:	656c6961 6f742064 6d6f6320 74656c70     ailed to complet
    705c:	65532065 28707574 6f662029 61742072     e Setup() for ta
    706c:	203a6b73 5b1b7325 5b1b6d30 000a6d30     sk: %s.[0m.[0m..
    707c:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    708c:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    709c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    70ac:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    70bc:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    70cc:	73655420 3a646574 72702820 75725f65      Tested: (pre_ru
    70dc:	76655f6e 5f746e65 756f7267 61685f70     n_event_group_ha
    70ec:	656c646e 3d21205f 6c756e20 7274706c     ndle_ != nullptr
    70fc:	20200a29 20202020 20202020 6c696146     ).          Fail
    710c:	74206465 7263206f 65746165 65725020     ed to create Pre
    711c:	206e7552 6e657645 72472074 2170756f     Run Event Group!
    712c:	6d305b1b 6d305b1b ffff000a 61766e69     .[0m.[0m....inva
    713c:	0064696c 6c707061 74616369 006e6f69     lid.application.
    714c:	74736f68 73657420 00000074 64252020     host test...  %d
    715c:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    716c:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    717c:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    718c:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    719c:	2072756f 6a6f7270 20746365 65726964     our project dire
    71ac:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    71bc:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    71cc:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    71dc:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    71ec:	73696854 6c697720 6572206c 74726f70     This will report
    71fc:	65687420 6c696620 6e612065 696c2064      the file and li
    720c:	6e20656e 65626d75 68742072 6c207461     ne number that l
    721c:	74206465 6874206f 66207369 74636e75     ed to this funct
    722c:	206e6f69 6e696562 61632067 64656c6c     ion being called
    723c:	0000002e 33345b1b 4157206d 4e494e52     .....[43m WARNIN
    724c:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
    725c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    726c:	305b1b20 6d37333b 69206f4e 7265746e      .[0;37mNo inter
    727c:	74707572 72657320 65636976 756f7220     rupt service rou
    728c:	656e6974 756f6620 6620646e 7420726f     tine found for t
    729c:	76206568 6f746365 64252072 69442021     he vector %d! Di
    72ac:	6c626173 20676e69 1b525349 0a6d305b     sabling ISR.[0m.
    72bc:	00000000 31345b1b 7261486d 61462064     .....[41mHard Fa
    72cc:	20746c75 65637845 6f697470 634f206e     ult Exception Oc
    72dc:	72727563 0a216465 6d305b1b 00000000     curred!..[0m....
    72ec:	203a3072 30257830 2c586c38 3a317220     r0: 0x%08lX, r1:
    72fc:	25783020 586c3830 3272202c 7830203a      0x%08lX, r2: 0x
    730c:	6c383025 72202c58 30203a33 38302578     %08lX, r3: 0x%08
    731c:	000a586c 3a323172 25783020 586c3830     lX..r12: 0x%08lX
    732c:	726c202c 7830203a 6c383025 70202c58     , lr: 0x%08lX, p
    733c:	30203a63 38302578 202c586c 3a727370     c: 0x%08lX, psr:
    734c:	25783020 586c3830 0000000a 315b1b0a      0x%08lX......[1
    735c:	6d37333b 32345b1b 6f72506d 6d617267     ;37m.[42mProgram
    736c:	74655220 656e7275 78452064 43207469      Returned Exit C
    737c:	3a65646f 646c2520 305b1b0a 0000006d     ode: %ld..[0m...
    738c:	315b1b0a 6d37333b 31345b1b 6f72506d     ..[1;37m.[41mPro
    739c:	6d617267 74655220 656e7275 78452064     gram Returned Ex
    73ac:	43207469 3a65646f 646c2520 305b1b0a     it Code: %ld..[0
    73bc:	ffff006d ffff000a                       m.......

000073c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    73c4:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
    73d4:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
    73e4:	4cbebc20 4e6e6b28 0074743a               ..L(knN:tt.

000073f0 <config::kSystemClockRateMhz>:
    73f0:	42400000                                ..@B

000073f4 <config::kRtosFrequency>:
    73f4:	447a0000 61766e69 0064696c 6c707061     ..zDinvalid.appl
    7404:	74616369 006e6f69 74736f68 73657420     ication.host tes
    7414:	00000074 64252020 78302029 58383025     t...  %d) 0x%08X
    7424:	0000000a 25783020 00583830 64252020     .... 0x%08X.  %d
    7434:	78302029 000a7025 6e75520a 6874203a     ) 0x%p...Run: th
    7444:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
    7454:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
    7464:	20746365 65726964 726f7463 00000079     ect directory...
    7474:	20200a0a 3b315b1b 006d3733 656b616d     ..  .[1;37m.make
    7484:	61747320 72746b63 2d656361 54207325      stacktrace-%s T
    7494:	45434152 00223d53 25783020 00000070     RACES=". 0x%p...
    74a4:	1b0a0a22 006d305b 73696854 6c697720     "...[0m.This wil
    74b4:	6572206c 74726f70 65687420 6c696620     l report the fil
    74c4:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
    74d4:	68742072 6c207461 74206465 6874206f     r that led to th
    74e4:	66207369 74636e75 206e6f69 6e696562     is function bein
    74f4:	61632067 64656c6c 0000002e 33345b1b     g called.....[43
    7504:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
    7514:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    7524:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    7534:	69206f4e 7265746e 74707572 72657320     No interrupt ser
    7544:	65636976 756f7220 656e6974 756f6620     vice routine fou
    7554:	6620646e 7420726f 76206568 6f746365     nd for the vecto
    7564:	64252072 69442021 6c626173 20676e69     r %d! Disabling 
    7574:	1b525349 0a6d305b 00000000 ffffffff     ISR.[0m.........
    7584:	00002a95 00000001 ffffffff 35345b1b     .*...........[45
    7594:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    75a4:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    75b4:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    75c4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    75d4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    75e4:	3a646574 61572820 6f467469 6c6c5072     ted: (WaitForPll
    75f4:	6b636f4c 74617453 50287375 65536c6c     LockStatus(PllSe
    7604:	7463656c 4d6b3a3a 506e6961 29296c6c     lect::kMainPll))
    7614:	2020200a 20202020 50202020 20304c4c     .          PLL0 
    7624:	6b636f6c 756f6320 6e20646c 6220746f     lock could not b
    7634:	73652065 6c626174 65687369 65622064     e established be
    7644:	65726f66 6d697420 74756f65 6d305b1b     fore timeout.[0m
    7654:	6d305b1b 0000000a 6972500a 6e69746e     .[0m.....Printin
    7664:	74532067 206b6361 63617254 000a3a65     g Stack Trace:..
    7674:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    7684:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    7694:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    76a4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    76b4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    76c4:	73655420 3a646574 61572820 6f467469      Tested: (WaitFo
    76d4:	6c6c5072 6e6e6f43 69746365 74536e6f     rPllConnectionSt
    76e4:	73757461 6c6c5028 656c6553 3a3a7463     atus(PllSelect::
    76f4:	69614d6b 6c6c506e 200a2929 20202020     kMainPll)).     
    7704:	20202020 69614620 2064656c 63206f74          Failed to c
    7714:	656e6e6f 50207463 2e304c4c 6d305b1b     onnect PLL0..[0m
    7724:	6d305b1b 0000000a 35345b1b 2020206d     .[0m.....[45m   
    7734:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    7744:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    7754:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    7764:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    7774:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    7784:	496b2820 6e614373 69726550 72656870      (kIsCanPeripher
    7794:	0a296c61 20202020 20202020 68542020     al).          Th
    77a4:	69642065 65646976 61762072 2065756c     e divider value 
    77b4:	3620666f 20736920 796c6e6f 70757320     of 6 is only sup
    77c4:	74726f70 66206465 4320726f 70204e41     ported for CAN p
    77d4:	70697265 61726568 1b2e736c 1b6d305b     eripherals..[0m.
    77e4:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
    77f4:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    7804:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    7814:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    7824:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    7834:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    7844:	6b212820 61437349 7265506e 65687069      (!kIsCanPeriphe
    7854:	296c6172 2020200a 20202020 54202020     ral).          T
    7864:	64206568 64697669 76207265 65756c61     he divider value
    7874:	20666f20 73692038 746f6e20 70757320      of 8 is not sup
    7884:	74726f70 66206465 4320726f 70204e41     ported for CAN p
    7894:	70697265 61726568 1b2e736c 1b6d305b     eripherals..[0m.
    78a4:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
    78b4:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    78c4:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    78d4:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    78e4:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    78f4:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    7904:	61662820 2965736c 2020200a 20202020      (false).       
    7914:	4f202020 20796c6e 20656874 6c6c6f66        Only the foll
    7924:	6e69776f 65702067 68706972 6c617265     owing peripheral
    7934:	76696420 72656469 6c617620 20736575      divider values 
    7944:	20657261 70707573 6574726f 31203a64     are supported: 1
    7954:	2c32202c 202c3420 54202e38 64206568     , 2, 4, 8. The d
    7964:	64697669 76207265 65756c61 20666f20     ivider value of 
    7974:	73692036 70757320 74726f70 66206465     6 is supported f
    7984:	4320726f 70204e41 70697265 61726568     or CAN periphera
    7994:	1b2e736c 1b6d305b 0a6d305b 00000000     ls..[0m.[0m.....
    79a4:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    79b4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    79c4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    79d4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    79e4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    79f4:	73655420 3a646574 6e692820 5f747570      Tested: (input_
    7a04:	71657266 636e6575 203e2079 6e694d6b     frequency > kMin
    7a14:	6d756d69 306c6c50 75706e49 65724674     imumPll0InputFre
    7a24:	6e657571 26207963 6e692026 5f747570     quency && input_
    7a34:	71657266 636e6575 203c2079 78614d6b     frequency < kMax
    7a44:	6d756d69 306c6c50 75706e49 65724674     imumPll0InputFre
    7a54:	6e657571 0a297963 20202020 20202020     quency).        
    7a64:	68542020 6e692065 20747570 304c4c50       The input PLL0
    7a74:	65726620 6e657571 6d207963 20747375      frequency must 
    7a84:	62206562 65777465 33206e65 7a486b32     be between 32kHz
    7a94:	646e6120 4d303520 5b1b7a48 5b1b6d30      and 50MHz.[0m.[
    7aa4:	000a6d30 35345b1b 2020206d 4f525245     0m...[45m   ERRO
    7ab4:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    7ac4:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    7ad4:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    7ae4:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    7af4:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
    7b04:	65726973 70735f64 20646565 4d6b203c     sired_speed < kM
    7b14:	50437861 65705355 0a296465 20202020     axCPUSpeed).    
    7b24:	20202020 68542020 65642065 65726973           The desire
    7b34:	50432064 70732055 20646565 6e6e6163     d CPU speed cann
    7b44:	6520746f 65656378 68742064 616d2065     ot exceed the ma
    7b54:	756d6978 6c61206d 20776f6c 20555043     ximum allow CPU 
    7b64:	65657073 5b1b2e64 5b1b6d30 000a6d30     speed..[0m.[0m..
    7b74:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    7b84:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    7b94:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    7ba4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    7bb4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    7bc4:	73655420 3a646574 61662820 2965736c      Tested: (false)
    7bd4:	2020200a 20202020 46202020 656c6961     .          Faile
    7be4:	6f742064 6c616320 616c7563 74206574     d to calculate t
    7bf4:	50206568 20304c4c 74746573 73676e69     he PLL0 settings
    7c04:	726f6620 65687420 73656420 64657269      for the desired
    7c14:	65726620 6e657571 1b2e7963 1b6d305b      frequency..[0m.
    7c24:	0a6d305b 00000000 010a011a 02080218     [0m.............
    7c34:	33345b1b 4157206d 4e494e52 305b1b47     .[43m WARNING.[0
    7c44:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    7c54:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    7c64:	6d37333b 75736e55 726f7070 20646574     ;37mUnsupported 
    7c74:	7265706f 6f697461 305b1b6e 00000a6d     operation.[0m...
    7c84:	fffffffb 00004881 00000001 ffffffff     .....H..........
    7c94:	fffffffe 000048b1 00000001 ffffffff     .....H..........
    7ca4:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    7cb4:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    7cc4:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    7cd4:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    7ce4:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    7cf4:	73655420 3a646574 69742820 5f72656d      Tested: (timer_
    7d04:	72617473 74735f74 73757461 203d3d20     start_status == 
    7d14:	75736a73 74533a3a 73757461 536b3a3a     sjsu::Status::kS
    7d24:	65636375 0a297373 20202020 20202020     uccess).        
    7d34:	79532020 6d657473 6d695420 28207265       System Timer (
    7d44:	64657375 20796220 65657246 534f5452     used by FreeRTOS
    7d54:	61682029 41462073 44454c49 206f7420     ) has FAILED to 
    7d64:	72617473 5b1b2174 5b1b6d30 000a6d30     start!.[0m.[0m..

00007d74 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    7d74:	00006bd4                                .k..

00007d78 <sjsu::lpc17xx::SystemController::Peripherals::kUart0>:
    7d78:	ffffff03                                ....

00007d7c <sjsu::lpc17xx::SystemController::Oscillator::kSelect>:
    7d7c:	ffff0200                                ....

00007d80 <sjsu::lpc17xx::SystemController::CpuClock::kDivider>:
    7d80:	ffff0800                                ....

00007d84 <sjsu::lpc17xx::SystemController::MainPll::kMultiplier>:
    7d84:	ffff0f00                                ....

00007d88 <sjsu::lpc17xx::SystemController::MainPll::kPreDivider>:
    7d88:	ffff0810                                ....

00007d8c <sjsu::lpc17xx::SystemController::kDefaultIRCFrequency>:
    7d8c:	4a742400                                .$tJ

00007d90 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7d90:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7da0:	70682e72 ffff0070                       r.hpp...

00007da8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7da8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7db8:	70682e72 ffff0070                       r.hpp...

00007dc0 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7dc0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7dd0:	70682e72 ffff0070                       r.hpp...

00007dd8 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7dd8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7de8:	70682e72 ffff0070                       r.hpp...

00007df0 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7df0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7e00:	70682e72 ffff0070                       r.hpp...

00007e08 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7e08:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7e18:	70682e72 ffff0070                       r.hpp...

00007e20 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7e20:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7e30:	70682e72 ffff0070                       r.hpp...

00007e38 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7e38:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    7e48:	70682e72 ffff0070                       r.hpp...

00007e50 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7e50:	01000302                                ....

00007e54 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    7e54:	2e6e6970 00707068                       pin.hpp.

00007e5c <sjsu::lpc40xx::Pin::kFunction>:
    7e5c:	ffff0300                                ....

00007e60 <sjsu::lpc40xx::Pin::kResistor>:
    7e60:	ffff0203                                ....

00007e64 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    7e64:	ffff0107                                ....

00007e68 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7e68:	ffff010a                                ....

00007e6c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7e6c:	00007efc 00000802                       .~......

00007e74 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    7e74:	00007efc 00000902                       .~......

00007e7c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    7e7c:	00007efc 00001c04                       .~......

00007e84 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    7e84:	00007efc 00001d04                       .~......

00007e8c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    7e8c:	00007efc 00001d01                       .~......

00007e94 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    7e94:	00007efc 00000902                       .~......

00007e9c <sjsu::lpc17xx::UartPort::kUart0Tx>:
    7e9c:	00007f14 02040200                       ........

00007ea4 <sjsu::lpc17xx::UartPort::kUart0Rx>:
    7ea4:	00007f14 02060300                       ........

00007eac <sjsu::lpc17xx::UartPort::kUart2Tx>:
    7eac:	00007f14 02100802                       ........

00007eb4 <sjsu::lpc17xx::UartPort::kUart2Rx>:
    7eb4:	00007f14 02120902                       ........

00007ebc <sjsu::lpc17xx::UartPort::kUart3Tx>:
    7ebc:	00007f14 02181c04                       ........

00007ec4 <sjsu::lpc17xx::UartPort::kUart3Rx>:
    7ec4:	00007f14 021a1d04                       ........

00007ecc <sjsu::InitializePlatform()::file>:
    7ecc:	72617473 2e707574 00707063              startup.cpp.

00007ed8 <vtable for sjsu::lpc40xx::Uart>:
	...
    7ee0:	00003e05 00003ec5 00003f51 00003ff5     .>...>..Q?...?..
    7ef0:	000040c5                                .@..

00007ef4 <vtable for sjsu::lpc40xx::Pin>:
	...
    7efc:	00003939 0000396d 000039dd 000039a1     99..m9...9...9..

00007f0c <vtable for sjsu::lpc17xx::Pin>:
	...
    7f14:	000037d9 00003839 000038c1 00003895     .7..98...8...8..

00007f24 <vtable for sjsu::lpc17xx::SystemController>:
	...
    7f2c:	00002e6d 00003031 00003165 000031e5     m...10..e1...1..
    7f3c:	00003201 0000322d 00003261              .2..-2..a2..

00007f48 <vtable for sjsu::cortex::SystemTimer>:
	...
    7f50:	00002afd 00002b11 00002cd9 00002b31     .*...+...,..1+..

00007f60 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    7f60:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    7f70:	6c3a3a75 37316370 3a3a7878 74737953     u::lpc17xx::Syst
    7f80:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    7f90:	72655074 65687069 436c6172 6b636f6c     tPeripheralClock
    7fa0:	69766944 28726564 736e6f63 6a732074     Divider(const sj
    7fb0:	3a3a7573 74737953 6f436d65 6f72746e     su::SystemContro
    7fc0:	72656c6c 65503a3a 68706972 6c617265     ller::Peripheral
    7fd0:	2c264449 6e697520 745f3874 6f632029     ID&, uint8_t) co
    7fe0:	0074736e                                nst.

00007fe4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7fe4:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    7ff4:	6c3a3a75 37316370 3a3a7878 74737953     u::lpc17xx::Syst
    8004:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    8014:	73795374 436d6574 6b636f6c 71657246     tSystemClockFreq
    8024:	636e6575 6e752879 3a737469 6572663a     uency(units::fre
    8034:	6e657571 3a3a7963 6167656d 74726568     quency::megahert
    8044:	29745f7a 6e6f6320 ff007473              z_t) const..

00008050 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8050:	75736a73 706c3a3a 78373163 533a3a78     sjsu::lpc17xx::S
    8060:	65747379 6e6f436d 6c6f7274 3a72656c     ystemController:
    8070:	6c6c503a 74655330 676e6974 20745f73     :Pll0Settings_t 
    8080:	75736a73 706c3a3a 78373163 533a3a78     sjsu::lpc17xx::S
    8090:	65747379 6e6f436d 6c6f7274 3a72656c     ystemController:
    80a0:	6c61433a 616c7563 6c506574 7528306c     :CalculatePll0(u
    80b0:	7374696e 72663a3a 65757165 3a79636e     nits::frequency:
    80c0:	7265683a 745f7a74 6e75202c 3a737469     :hertz_t, units:
    80d0:	6572663a 6e657571 3a3a7963 74726568     :frequency::hert
    80e0:	29745f7a 6e6f6320 ff007473              z_t) const..

000080ec <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__>:
    80ec:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    80fc:	6c3a3a75 37316370 3a3a7878 3a6e6950     u::lpc17xx::Pin:
    810c:	7465533a 6e417341 676f6c61 65646f4d     :SetAsAnalogMode
    811c:	6f6f6228 6320296c 74736e6f ffffff00     (bool) const....

0000812c <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    812c:	64696f76 736a7320 493a3a75 6974696e     void sjsu::Initi
    813c:	7a696c61 616c5065 726f6674 0029286d     alizePlatform().

0000814c <__sf_fake_stderr>:
	...

0000816c <__sf_fake_stdin>:
	...

0000818c <__sf_fake_stdout>:
	...

000081ac <_global_impure_ptr>:
    81ac:	2007c0c8                                ... 

000081b0 <_init>:
    81b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81b2:	bf00      	nop
    81b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    81b6:	bc08      	pop	{r3}
    81b8:	469e      	mov	lr, r3
    81ba:	4770      	bx	lr

000081bc <__init_array_start>:
    81bc:	00000105 	.word	0x00000105
    81c0:	000004fd 	.word	0x000004fd
    81c4:	00000e45 	.word	0x00000e45
    81c8:	00001251 	.word	0x00001251
    81cc:	00004871 	.word	0x00004871

000081d0 <_fini>:
    81d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81d2:	bf00      	nop
    81d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    81d6:	bc08      	pop	{r3}
    81d8:	469e      	mov	lr, r3
    81da:	4770      	bx	lr
