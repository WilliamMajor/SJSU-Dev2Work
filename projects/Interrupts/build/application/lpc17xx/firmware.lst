
build/application/lpc17xx/firmware.elf:     file format elf32-littlearm
build/application/lpc17xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000010fd

Program Header:
0x70000001 off    0x000179b8 vaddr 0x000079b8 paddr 0x000079b8 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007a70 memsz 0x00007a70 flags r-x
    LOAD off    0x0001c000 vaddr 0x2007c000 paddr 0x00007a70 align 2**16
         filesz 0x00000120 memsz 0x00000328 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .text           000079a0  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data           00000120  2007c000  00007a70  0001c000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .bss            00000208  2007c120  00007b90  0001c120  2**3  ALLOC
  3 .ARM.attributes 00000029  00000000  00000000  0001c120  2**0  CONTENTS, READONLY
  4 .comment        0000007e  00000000  00000000  0001c149  2**0  CONTENTS, READONLY
  5 .ARM.extab      00000018  000079a0  000079a0  000179a0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.exidx      000000b8  000079b8  000079b8  000179b8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info     00091c5d  00000000  00000000  0001c1c7  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev   00005229  00000000  00000000  000ade24  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges  00000b70  00000000  00000000  000b304d  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges   00000ac0  00000000  00000000  000b3bbd  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line     000067cf  00000000  00000000  000b467d  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_str      0002b2f1  00000000  00000000  000bae4c  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame    00003bf8  00000000  00000000  000e6140  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
2007c000 l    d  .data	00000000 .data
2007c120 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
000079a0 l    d  .ARM.extab	00000000 .ARM.extab
000079b8 l    d  .ARM.exidx	00000000 .ARM.exidx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00006bb8 l     O .text	00000004 config::kSystemClockRateMhz
00006bbc l     O .text	00000004 config::kRtosFrequency
00002824 l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000283c l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002caa l     F .text	00000018 float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002cc4 l     F .text	00000028 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000077ac l     O .text	0000006b sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007728 l     O .text	00000084 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00007818 l     O .text	0000009b sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000078b4 l     O .text	0000003d sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__
00003b28 l     F .text	000001b0 sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
2007c09c l     O .data	00000004 (anonymous namespace)::system_controller
2007c2f4 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
2007c0a0 l     O .data	0000000c (anonymous namespace)::uart0
2007c0ac l     O .data	0000000c (anonymous namespace)::system_timer
00003fe0 l     F .text	00000024 (anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)
00004004 l     F .text	00000034 (anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)
00000000 l     O .text	000000cc kInterruptVectorTable
00007694 l     O .text	0000000c sjsu::InitializePlatform()::file
000078f4 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
0000438e l     F .text	00000018 float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000453e l     F .text	0000001c float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000455c l     F .text	000001e8 __static_initialization_and_destruction_0(int, int)
00004744 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 crtstuff.c
000000e0 l     F .text	00000000 __do_global_dtors_aux
2007c120 l       .bss	00000001 completed.8654
00000104 l     F .text	00000000 frame_dummy
2007c124 l       .bss	00000018 object.8659
00007980 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 LabGPIO.cpp
000004b4 l     F .text	00000048 __static_initialization_and_destruction_0(int, int)
000004fc l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh
00000000 l    df *ABS*	00000000 main.cpp
0000050c l     F .text	0000002c NVIC_EnableIRQ
00000538 l     F .text	00000030 NVIC_DisableIRQ
00000568 l     F .text	00000050 NVIC_SetPriority
00006398 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00000d3c l     F .text	00000068 __static_initialization_and_destruction_0(int, int)
00000da4 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00000db4 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 exceptions.cpp
000010f0 l       .text	00000000 handler2_address_const
0000116c l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000011b0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
2007c258 l     O .bss	00000064 pxReadyTasksLists
2007c2bc l     O .bss	00000004 uxTopReadyPriority
2007c2c0 l     O .bss	00000004 xYieldPending
2007c2c4 l     O .bss	00000004 uxSchedulerSuspended
2007c2c8 l     O .bss	00000004 ulTaskSwitchedInTime
2007c2cc l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
000013a0 l     F .text	0000001a _out_null(char, void*, unsigned int, unsigned int)
000013ba l     F .text	0000002c _strlen(char const*)
000013e6 l     F .text	00000026 _is_digit(char)
0000140c l     F .text	00000048 _atoi(char const**)
00001454 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00001696 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00001766 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006b80 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00001848 l     F .text	0000041a _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00001c64 l     F .text	000008ca _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
0000259c l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
2007c2d0 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00004780 l       .text	00000000 pxCurrentTCBConst2
000047d0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_fixsfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
0000523c l     F .text	00000012 selfrel_offset31
00005250 l     F .text	00000060 search_EIT_table
000052b0 l     F .text	00000028 __gnu_unwind_get_pr_addr
000052d8 l     F .text	000000a8 get_eit_entry
00005380 l     F .text	00000058 restore_non_core_regs
000053d8 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000053e4 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000053e8 l     F .text	00000002 _Unwind_DebugHook
000053ec l     F .text	0000003e unwind_phase2
0000542c l     F .text	000000ca unwind_phase2_forced
00005604 l     F .text	00000018 _Unwind_GetGR
00005648 l     F .text	0000001a _Unwind_SetGR
000056d8 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005de8 l     F .text	00000036 next_unwind_byte
00005e20 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005e3c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crti.o
00000000 l    df *ABS*	00000000 /home/will/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7-m/crtn.o
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
2007c0c0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000e18  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005da0 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000054fc g     F .text	00000060 .hidden __gnu_Unwind_RaiseException
00002968  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00000268 g     F .text	000000f0 sjsu::LabGPIO::Set(sjsu::Gpio::State) const
00000fe0  w    F .text	00000068 sjsu::InitializeBssSection()
00001284 g     F .text	0000000e _getpid
00000984  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00007674  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Tx
000029b0  w    F .text	00000020 sjsu::cortex::SystemTimer::GetCount()
00002712  w    F .text	0000002a units::literals::operator"" _Hz(unsigned long long)
000008f4  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00002678  w    F .text	00000010 std::numeric_limits<float>::epsilon()
2007c00c  w    O .data	00000004 sjsu::newlib::in
2007c310  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
000028e4  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006244 g     F .text	00000024 _kill_r
000000e0 g       .text	00000000 bss_section_table_end
00002530 g     F .text	00000044 printf
000036f4  w    F .text	00000016 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
00003220  w    F .text	00000220 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00003134  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
0000422c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004c8c g     F .text	00000136 .hidden __divsf3
00002c70  w    F .text	0000003a sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)
000040fc  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
0000085c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00003768  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
00000ea4  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
2007c000 g       *ABS*	00000000 __base_RAM2
00005c5c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005d7c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00003168  w    F .text	00000048 sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const
00007a70 g       .ARM.exidx	00000000 __exidx_end
00004eb0 g     F .text	0000004c .hidden __fixsfsi
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00007624  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00004038 g     F .text	00000014 ThreadRuntimeCounter
000059ac g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
2007c018  w    O .data	00000004 sjsu::cortex::InterruptController::scb
0000089c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
2007c254 g     O .bss	00000004 pxCurrentTCB
00006130 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005d7c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
2007c324 g     O .bss	00000004 errno
000075b8  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00007a70 g       .ARM.exidx	00000000 _etext
000038b0  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
0000416a  w    F .text	00000030 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005dc4 g     F .text	00000022 .hidden _Unwind_Backtrace
0000753c  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
2007c13c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004914 g     F .text	00000160 .hidden __aeabi_fadd
00007548  w    O .text	00000002 sjsu::lpc17xx::SystemController::CpuClock::kDivider
2007c2d8  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004910 g     F .text	00000164 .hidden __subsf3
00007644  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005c3c g     F .text	00000018 .hidden __restore_core_regs
00005c7c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000044e6  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
00007540  w    O .text	00000001 sjsu::lpc17xx::SystemController::Peripherals::kUart0
000076a0  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00002890  w    F .text	0000001c sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00007628  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
000054f8 g     F .text	00000004 .hidden _Unwind_GetCFA
000061bc g     F .text	00000016 memcpy
00003458  w    F .text	0000005c sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const
000047ee g     F .text	00000016 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000561c g     F .text	0000002a .hidden _Unwind_VRS_Set
00004e9c g     F .text	00000012 .hidden __aeabi_fcmpgt
000041be  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)
00004f3c g     F .text	00000000 .hidden __aeabi_uldivmod
000036ac  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
000012dc g     F .text	00000048 puts
00000610  w    F .text	00000014 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
000037dc  w    F .text	0000002e sjsu::lpc17xx::Pin::PinRegisterLookup() const
00002aae  w    F .text	0000004e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003960  w    F .text	000000cc sjsu::lpc40xx::uart::FindClosestFractional(float)
0000429c  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00002d1e  w    F .text	00000020 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
2007c318  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart0
2007c01c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000061e2 g     F .text	00000050 _raise_r
00004a7c g     F .text	0000001c .hidden __aeabi_i2f
10008000 g       *ABS*	00000000 __top_RAM
00002cec  w    F .text	00000032 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004790 g     F .text	00000046 xPortPendSVHandler
00004dcc g     F .text	00000066 .hidden __lesf2
10000000 g       *ABS*	00000000 __base_RamLoc64
00007684  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Tx
00003874  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00006268 g     F .text	00000004 _getpid_r
000079a0 g       .text	00000000 __symbol_table_end
00000000 g       *ABS*	00000000 __base_MFlash512
00005664 g     F .text	00000072 .hidden __gnu_Unwind_Backtrace
000041e4  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
20083fe0 g       .bss	00000000 StackTop
00004f6c g     F .text	000002ce .hidden __udivmoddi4
000000d8 g       .text	00000000 bss_section_table
0000762c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
2007c2f8  w    O .bss	00000004 guard variable for sjsu::lpc17xx::SystemController::system_controller
00002b5a  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000624  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005c6c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
20084000 g       *ABS*	00000000 __top_RAM2
000059b8 g     F .text	00000282 .hidden _Unwind_VRS_Pop
000059b4  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
00002a04  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
2007c308  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005dc4 g     F .text	00000022 .hidden ___Unwind_Backtrace
000005ce  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00003ec8  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000e60  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
0000765c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
000062a0  w    O .text	00000024 vtable for sjsu::Gpio
00004dd4 g     F .text	0000005e .hidden __nesf2
2007c000 g       *ABS*	00000000 __user_heap_base
2007c2d4  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
000079b8 g       .ARM.extab	00000000 __exidx_start
00006174 g     F .text	00000048 __libc_init_array
00003aa8  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005d34 g     F .text	00000022 .hidden ___Unwind_RaiseException
00002b8a  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00006164 g     F .text	0000000e abort
00005d58 g     F .text	00000022 .hidden ___Unwind_Resume
00002b72  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
2007c04c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
0000768c  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart3Rx
2007c140  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
0000090c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00007974 g     F .text	00000000 _init
000000e0 g       .text	00000000 section_table_end
00003ad4  w    F .text	00000054 sjsu::lpc40xx::uart::IsDecmial(float)
000047d8 g     F .text	00000016 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00007630  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00004456  w    F .text	0000003a unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00003e72  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
0000485c g     F .text	0000000a std::terminate()
000026e8  w    F .text	0000002a units::detail::abs(float)
00004868 g     F .text	0000009e .hidden __aeabi_d2f
00005c84 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000009b8  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004910 g     F .text	00000164 .hidden __aeabi_fsub
00003d98  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
0000420a  w    F .text	00000022 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
2007c314  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000010d8 g     F .text	00000024 ArmHardFaultHandler
000000cc g       .text	00000000 section_table_start
00002afc  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
2007c328 g       .bss	00000000 _ebss
0000766c  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Rx
00003e24  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
0000277a  w    F .text	000000aa bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000358 g     F .text	00000088 sjsu::LabGPIO::Toggle() const
00004e88 g     F .text	00000012 .hidden __aeabi_fcmpge
000029d0  w    F .text	00000012 sjsu::cortex::SystemTimer::Initialize() const
0000275a  w    F .text	00000020 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004aa8 g     F .text	0000007c .hidden __floatdisf
2007c074  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart2
0000105c g     F .text	0000007c GetRegistersFromStack
00004dc4 g     F .text	0000006e .hidden __gtsf2
2007c2fc  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
00004e74 g     F .text	00000012 .hidden __aeabi_fcmple
0000761c  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
00005c54 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
0000404c  w    F .text	000000b0 sjsu::InitializePlatform()
00000be0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00007914 g     O .text	00000020 __sf_fake_stderr
000007cc  w    F .text	00000016 sjsu::cortex::InterruptController::IrqToIndex(int)
0000484c g     F .text	00000010 std::get_terminate()
000076d4  w    O .text	00000018 vtable for sjsu::lpc17xx::Pin
2007c328 g       .bss	00000000 end
00007558  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005d58 g     F .text	00000022 .hidden _Unwind_Resume
000006fa  w    F .text	0000000c sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000055cc g     F .text	0000000c .hidden _Unwind_DeleteException
00006388  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000055c8 g     F .text	00000002 .hidden _Unwind_Complete
00000000 g       *ABS*	00000000 __base_Flash
00001330 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00007710  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00002580 g     F .text	0000001c trace_write
2007c320  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart3
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
0000046c g     F .text	00000014 sjsu::LabGPIO::GetPin() const
10008000 g       *ABS*	00000000 __top_RamLoc64
2007c30c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00000cee  w    F .text	0000004c bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000030b8  w    F .text	0000001c sjsu::lpc17xx::SystemController::GetSystemFrequency() const
2007c120 g       .bss	00000000 _bss
00007544  w    O .text	00000002 sjsu::lpc17xx::SystemController::Oscillator::kSelect
00002574 g     F .text	0000000c trace_initialize
0000370c  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000483c g     F .text	00000006 __cxa_pure_virtual
00004a7c g     F .text	0000001c .hidden __floatsisf
00003038  w    F .text	0000007e sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00007634  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
2007c2f0  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005e40 g     F .text	000002c2 .hidden __gnu_unwind_execute
00003440  w    F .text	00000016 auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)
2007c250  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00005c64 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00003696  w    F .text	00000016 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
000043fe  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000008b8  w    F .text	00000020 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000062c8  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
00004eb0 g     F .text	0000004c .hidden __aeabi_f2iz
00004dd4 g     F .text	0000005e .hidden __eqsf2
2007c150  w    O .bss	00000100 sjsu::cortex::InterruptController::table
000011c0 g     F .text	000000c4 vTaskSwitchContext
000034b4  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00002934  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000062d0  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00002668  w    F .text	00000010 std::numeric_limits<float>::min()
00003100  w    F .text	00000034 sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00005570 g     F .text	00000044 .hidden __gnu_Unwind_Resume
0000294c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00002688  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00004c8c g     F .text	00000136 .hidden __aeabi_fdiv
0000763c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
2007c000 g       *ABS*	00000000 __base_RamPeriph32
00005c74 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00002bac  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007618  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
00003794  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00003638  w    F .text	00000048 sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const
00004a98 g     F .text	0000008c .hidden __floatundisf
2007c2e4  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00005d34 g     F .text	00000022 .hidden _Unwind_RaiseException
00006160  w    F .text	00000002 .hidden __aeabi_ldiv0
000042fe  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
2007c024  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00001048  w    F .text	00000014 sjsu::SystemInitialize()
00004a74 g     F .text	00000024 .hidden __aeabi_ui2f
000000cc g       .text	00000000 data_section_table
2007c148  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000075e8  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
2007c304  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00004804 g     F .text	0000001c sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00007934 g     O .text	00000020 __sf_fake_stdin
00004dd4 g     F .text	0000005e .hidden __cmpsf2
000061d2 g     F .text	00000010 memset
000009d0 g     F .text	00000198 main
000026cc  w    F .text	0000001c sjsu::cortex::DwtCounter::GetCount()
00000708  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00003538  w    F .text	00000084 sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const
00004aa8 g     F .text	0000007c .hidden __aeabi_l2f
00000c14  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00007664  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart0Tx
2007c000 g       *ABS*	00000000 heap
00004dcc g     F .text	00000066 .hidden __ltsf2
00002d40  w    F .text	000001c4 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00000808  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
000075a0  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
000076bc  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004868 g     F .text	0000009e .hidden __truncdfsf2
00007994 g       .text	00000000 __init_array_end
00004760 g     F .text	00000026 vPortSVCHandler
00000b68 g     F .text	00000078 GpioInterruptCallback()
2007c010  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004a98 g     F .text	0000008c .hidden __aeabi_ul2f
00002858  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004e3c g     F .text	00000010 .hidden __aeabi_cfcmple
0000555c g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000008d8  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004b24 g     F .text	00000168 .hidden __mulsf3
000031b0  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000055b4 g     F .text	00000012 .hidden __gnu_Unwind_Resume_or_Rethrow
2007c300  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
2007c008  w    O .data	00000004 sjsu::newlib::out
20084000 g       *ABS*	00000000 heap_end
00006bb0  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
0000754c  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kMultiplier
00004362  w    F .text	0000002c bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00007994 g     F .text	00000000 _fini
00005c3c g     F .text	00000018 .hidden restore_core_regs
00003604  w    F .text	00000034 sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const
00005d20 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00007654  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000d8 g       .text	00000000 data_section_table_end
000029e4  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00000c26  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
00000120  w    F .text	00000020 sjsu::Gpio::Gpio()
00004dc4 g     F .text	0000006e .hidden __gesf2
2007c038  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00000178 g     F .text	000000f0 sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const
00003fbc  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004908 g     F .text	0000016c .hidden __aeabi_frsub
00006158 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
2007c0bc g     O .data	00000004 _impure_ptr
00004e4c g     F .text	00000012 .hidden __aeabi_fcmpeq
00002a98  w    F .text	00000016 units::linear_scale<float>::operator()() const
00004b24 g     F .text	00000168 .hidden __aeabi_fmul
000076ec  w    O .text	00000024 vtable for sjsu::lpc17xx::SystemController
000028ac  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
000042c0  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007980 g       .text	00000000 __preinit_array_end
000043a6  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)
00002f04  w    F .text	00000134 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00000884  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
000038e4  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00004e34 g     F .text	00000018 .hidden __aeabi_cfrcmple
0000767c  w    O .text	00000008 sjsu::lpc17xx::UartPort::kUart2Rx
2007c088  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart3
2007c000 g       .data	00000000 _data
00004270  w    F .text	0000002c bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00002b1c  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
0000613c g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000003e0 g     F .text	0000008c sjsu::LabGPIO::Read() const
000010fc g     F .text	00000070 ArmResetHandler
00004e60 g     F .text	00000012 .hidden __aeabi_fcmplt
000055d8 g     F .text	0000002a .hidden _Unwind_VRS_Get
000007e4  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
2007c0b8 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005d0c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000627c g     O .text	00000024 vtable for sjsu::LabGPIO
00007554  w    O .text	00000004 sjsu::lpc17xx::SystemController::kDefaultIRCFrequency
00000634  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000012ac g     F .text	00000030 _write
00006104 g     F .text	0000002a .hidden __gnu_unwind_frame
00005da0 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
2007c120 g       .data	00000000 _edata
2007c2ec  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
00003f98  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000035bc  w    F .text	00000048 sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const
0000413a  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00004efc g     F .text	0000003e .hidden __aeabi_f2uiz
00000744  w    F .text	00000014 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20084000 g       *ABS*	00000000 __top_RamPeriph32
000031e8  w    F .text	00000038 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
10000000 g       *ABS*	00000000 __base_RAM
000030d4  w    F .text	0000002c sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00004a74 g     F .text	00000024 .hidden __floatunsisf
00007550  w    O .text	00000002 sjsu::lpc17xx::SystemController::MainPll::kPreDivider
00004842 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005cc8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00007600  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001292 g     F .text	00000018 _kill
00000f48  w    F .text	00000098 sjsu::InitializeDataSection()
00004e3c g     F .text	00000010 .hidden __aeabi_cfcmpeq
000005f0  w    F .text	00000020 sjsu::DefaultUptime()
00007954 g     O .text	00000020 __sf_fake_stdout
000005b8  w    F .text	00000016 std::numeric_limits<long long>::max()
00007980 g       .text	00000000 __init_array_start
00006160  w    F .text	00000002 .hidden __aeabi_idiv0
0000419a  w    F .text	00000024 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00004efc g     F .text	0000003e .hidden __fixunssfsi
00000140 g     F .text	00000038 sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)
00007570  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000004a0 g     F .text	00000012 sjsu::LabGPIO::DetachInterrupt() const
00001324 g     F .text	0000000c _exit
0000764c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
00007588  w    O .text	00000016 sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
2007c060  w    O .data	00000014 sjsu::lpc17xx::UartPort::kUart0
0000273c  w    F .text	0000001e units::linear_scale<float>::linear_scale<>(float const&)
00003a2c  w    F .text	0000003e sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000006e0  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00003680  w    F .text	00000016 sjsu::Pin::GetPort() const
0000626c g     F .text	00000010 strlen
0000380c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
2007c000  w    O .data	00000004 sjsu::Uptime
000059b0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00000c98  w    F .text	00000056 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00004820 g     F .text	0000001c sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
2007c2e0  w    O .bss	00000004 sjsu::lpc17xx::SystemController::system_controller
00000ddc  w    F .text	0000003c sjsu::build::Stringify(sjsu::build::Target)
00006150 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000079a0 g       .text	00000000 __symbol_table_start
00003a6a  w    F .text	0000003e sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
2007c004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00004490  w    F .text	00000056 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00003840  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00007980 g       .text	00000000 __preinit_array_start
000075d0  w    O .text	00000016 sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000c4e  w    F .text	0000004a bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000758  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
2007c020  w    O .data	00000004 sjsu::lpc17xx::SystemController::speed_in_hertz
00004914 g     F .text	00000160 .hidden __addsf3
0000424e  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
2007c31c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::UartPort::kUart2
0000433c  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
2007c2e8  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00000480 g     F .text	00000020 sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
00003cd8  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
2007c014  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00006234 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	e0 3f 08 20 fd 10 00 00 ad 28 00 00 d9 10 00 00     .?. .....(......
      10:	ad 28 00 00 ad 28 00 00 ad 28 00 00 00 00 00 00     .(...(...(......
	...
      2c:	ad 28 00 00 ad 28 00 00 00 00 00 00 ad 28 00 00     .(...(.......(..
      3c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      4c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      5c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      6c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      7c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      8c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      9c:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      ac:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..
      bc:	ad 28 00 00 ad 28 00 00 ad 28 00 00 ad 28 00 00     .(...(...(...(..

000000cc <data_section_table>:
      cc:	00007a70 	.word	0x00007a70
      d0:	2007c000 	.word	0x2007c000
      d4:	00000120 	.word	0x00000120

000000d8 <bss_section_table>:
      d8:	2007c120 	.word	0x2007c120
      dc:	00000208 	.word	0x00000208

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
      e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
      ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	2007c120 	.word	0x2007c120
      fc:	00000000 	.word	0x00000000
     100:	000079b8 	.word	0x000079b8

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
     106:	4b03      	ldr	r3, [pc, #12]	; (114 <frame_dummy+0x10>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4903      	ldr	r1, [pc, #12]	; (118 <frame_dummy+0x14>)
     10c:	4803      	ldr	r0, [pc, #12]	; (11c <frame_dummy+0x18>)
     10e:	f3af 8000 	nop.w
     112:	bd08      	pop	{r3, pc}
     114:	00000000 	.word	0x00000000
     118:	2007c124 	.word	0x2007c124
     11c:	000079b8 	.word	0x000079b8

00000120 <sjsu::Gpio::Gpio()>:
#include "utility/status.hpp"

namespace sjsu
{
/// An abstract interface for General Purpose I/O
class Gpio
     120:	b480      	push	{r7}
     122:	b083      	sub	sp, #12
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
     128:	4a04      	ldr	r2, [pc, #16]	; (13c <sjsu::Gpio::Gpio()+0x1c>)
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	601a      	str	r2, [r3, #0]
     12e:	687b      	ldr	r3, [r7, #4]
     130:	4618      	mov	r0, r3
     132:	370c      	adds	r7, #12
     134:	46bd      	mov	sp, r7
     136:	bc80      	pop	{r7}
     138:	4770      	bx	lr
     13a:	bf00      	nop
     13c:	000062a8 	.word	0x000062a8

00000140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "L0_Platform/lpc17xx/LPC17xx.h"

#include <cstdint>
using namespace sjsu;

LabGPIO::LabGPIO(uint8_t port, uint8_t pin)
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
     148:	460b      	mov	r3, r1
     14a:	70fb      	strb	r3, [r7, #3]
     14c:	4613      	mov	r3, r2
     14e:	70bb      	strb	r3, [r7, #2]
     150:	687b      	ldr	r3, [r7, #4]
     152:	4618      	mov	r0, r3
     154:	f7ff ffe4 	bl	120 <sjsu::Gpio::Gpio()>
     158:	4a06      	ldr	r2, [pc, #24]	; (174 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)+0x34>)
     15a:	687b      	ldr	r3, [r7, #4]
     15c:	601a      	str	r2, [r3, #0]
{
    PIN = pin;
     15e:	687b      	ldr	r3, [r7, #4]
     160:	78ba      	ldrb	r2, [r7, #2]
     162:	711a      	strb	r2, [r3, #4]
    PORT = port;
     164:	687b      	ldr	r3, [r7, #4]
     166:	78fa      	ldrb	r2, [r7, #3]
     168:	715a      	strb	r2, [r3, #5]
}
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	4618      	mov	r0, r3
     16e:	3708      	adds	r7, #8
     170:	46bd      	mov	sp, r7
     172:	bd80      	pop	{r7, pc}
     174:	00006284 	.word	0x00006284

00000178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>:

void LabGPIO::SetDirection(Direction direction) const
{
     178:	b480      	push	{r7}
     17a:	b083      	sub	sp, #12
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	460b      	mov	r3, r1
     182:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     184:	687b      	ldr	r3, [r7, #4]
     186:	795b      	ldrb	r3, [r3, #5]
     188:	b2db      	uxtb	r3, r3
     18a:	2b01      	cmp	r3, #1
     18c:	d023      	beq.n	1d6 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x5e>
     18e:	2b02      	cmp	r3, #2
     190:	d040      	beq.n	214 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x9c>
     192:	2b00      	cmp	r3, #0
     194:	d000      	beq.n	198 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     196:	e05c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     198:	78fb      	ldrb	r3, [r7, #3]
     19a:	2b00      	cmp	r3, #0
     19c:	d10d      	bne.n	1ba <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x42>
                lpc17xx::LPC_GPIO0->FIODIR &= ~(1 << PIN);
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	791b      	ldrb	r3, [r3, #4]
     1a2:	b2db      	uxtb	r3, r3
     1a4:	461a      	mov	r2, r3
     1a6:	2301      	movs	r3, #1
     1a8:	4093      	lsls	r3, r2
     1aa:	43da      	mvns	r2, r3
     1ac:	4b2b      	ldr	r3, [pc, #172]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	4611      	mov	r1, r2
     1b2:	4a2a      	ldr	r2, [pc, #168]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1b4:	400b      	ands	r3, r1
     1b6:	6013      	str	r3, [r2, #0]
            break;
     1b8:	e04b      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO0->FIODIR |= (1 << PIN);
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	791b      	ldrb	r3, [r3, #4]
     1be:	b2db      	uxtb	r3, r3
     1c0:	461a      	mov	r2, r3
     1c2:	2301      	movs	r3, #1
     1c4:	fa03 f202 	lsl.w	r2, r3, r2
     1c8:	4b24      	ldr	r3, [pc, #144]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	4611      	mov	r1, r2
     1ce:	4a23      	ldr	r2, [pc, #140]	; (25c <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe4>)
     1d0:	430b      	orrs	r3, r1
     1d2:	6013      	str	r3, [r2, #0]
            break;
     1d4:	e03d      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     1d6:	78fb      	ldrb	r3, [r7, #3]
     1d8:	2b00      	cmp	r3, #0
     1da:	d10d      	bne.n	1f8 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0x80>
                lpc17xx::LPC_GPIO1->FIODIR &= ~(1 << PIN);
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	791b      	ldrb	r3, [r3, #4]
     1e0:	b2db      	uxtb	r3, r3
     1e2:	461a      	mov	r2, r3
     1e4:	2301      	movs	r3, #1
     1e6:	4093      	lsls	r3, r2
     1e8:	43da      	mvns	r2, r3
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	4611      	mov	r1, r2
     1f0:	4a1b      	ldr	r2, [pc, #108]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     1f2:	400b      	ands	r3, r1
     1f4:	6013      	str	r3, [r2, #0]
            break;
     1f6:	e02c      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
                lpc17xx::LPC_GPIO1->FIODIR |= (1 << PIN);
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	791b      	ldrb	r3, [r3, #4]
     1fc:	b2db      	uxtb	r3, r3
     1fe:	461a      	mov	r2, r3
     200:	2301      	movs	r3, #1
     202:	fa03 f202 	lsl.w	r2, r3, r2
     206:	4b16      	ldr	r3, [pc, #88]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     208:	681b      	ldr	r3, [r3, #0]
     20a:	4611      	mov	r1, r2
     20c:	4a14      	ldr	r2, [pc, #80]	; (260 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xe8>)
     20e:	430b      	orrs	r3, r1
     210:	6013      	str	r3, [r2, #0]
            break;
     212:	e01e      	b.n	252 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xda>
            if(direction == sjsu::Gpio::kInput)
     214:	78fb      	ldrb	r3, [r7, #3]
     216:	2b00      	cmp	r3, #0
     218:	d10d      	bne.n	236 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xbe>
                lpc17xx::LPC_GPIO2->FIODIR &= ~(1 << PIN);
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	791b      	ldrb	r3, [r3, #4]
     21e:	b2db      	uxtb	r3, r3
     220:	461a      	mov	r2, r3
     222:	2301      	movs	r3, #1
     224:	4093      	lsls	r3, r2
     226:	43da      	mvns	r2, r3
     228:	4b0e      	ldr	r3, [pc, #56]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	4611      	mov	r1, r2
     22e:	4a0d      	ldr	r2, [pc, #52]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     230:	400b      	ands	r3, r1
     232:	6013      	str	r3, [r2, #0]
            break;
     234:	e00c      	b.n	250 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xd8>
                lpc17xx::LPC_GPIO2->FIODIR |= (1 << PIN);
     236:	687b      	ldr	r3, [r7, #4]
     238:	791b      	ldrb	r3, [r3, #4]
     23a:	b2db      	uxtb	r3, r3
     23c:	461a      	mov	r2, r3
     23e:	2301      	movs	r3, #1
     240:	fa03 f202 	lsl.w	r2, r3, r2
     244:	4b07      	ldr	r3, [pc, #28]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     246:	681b      	ldr	r3, [r3, #0]
     248:	4611      	mov	r1, r2
     24a:	4a06      	ldr	r2, [pc, #24]	; (264 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const+0xec>)
     24c:	430b      	orrs	r3, r1
     24e:	6013      	str	r3, [r2, #0]
            break;
     250:	bf00      	nop
        }


    }
}
     252:	bf00      	nop
     254:	370c      	adds	r7, #12
     256:	46bd      	mov	sp, r7
     258:	bc80      	pop	{r7}
     25a:	4770      	bx	lr
     25c:	2009c000 	.word	0x2009c000
     260:	2009c020 	.word	0x2009c020
     264:	2009c040 	.word	0x2009c040

00000268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>:

void LabGPIO::Set(State output) const
{
     268:	b480      	push	{r7}
     26a:	b083      	sub	sp, #12
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
     270:	460b      	mov	r3, r1
     272:	70fb      	strb	r3, [r7, #3]
    switch(PORT)
     274:	687b      	ldr	r3, [r7, #4]
     276:	795b      	ldrb	r3, [r3, #5]
     278:	b2db      	uxtb	r3, r3
     27a:	2b01      	cmp	r3, #1
     27c:	d023      	beq.n	2c6 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x5e>
     27e:	2b02      	cmp	r3, #2
     280:	d040      	beq.n	304 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x9c>
     282:	2b00      	cmp	r3, #0
     284:	d000      	beq.n	288 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x20>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     286:	e05c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     288:	78fb      	ldrb	r3, [r7, #3]
     28a:	2b00      	cmp	r3, #0
     28c:	d10d      	bne.n	2aa <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x42>
                lpc17xx::LPC_GPIO0->FIOPIN &= ~(1 << PIN);
     28e:	687b      	ldr	r3, [r7, #4]
     290:	791b      	ldrb	r3, [r3, #4]
     292:	b2db      	uxtb	r3, r3
     294:	461a      	mov	r2, r3
     296:	2301      	movs	r3, #1
     298:	4093      	lsls	r3, r2
     29a:	43da      	mvns	r2, r3
     29c:	4b2b      	ldr	r3, [pc, #172]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     29e:	695b      	ldr	r3, [r3, #20]
     2a0:	4611      	mov	r1, r2
     2a2:	4a2a      	ldr	r2, [pc, #168]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2a4:	400b      	ands	r3, r1
     2a6:	6153      	str	r3, [r2, #20]
            break;
     2a8:	e04b      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO0->FIOPIN |= (1 << PIN);
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	791b      	ldrb	r3, [r3, #4]
     2ae:	b2db      	uxtb	r3, r3
     2b0:	461a      	mov	r2, r3
     2b2:	2301      	movs	r3, #1
     2b4:	fa03 f202 	lsl.w	r2, r3, r2
     2b8:	4b24      	ldr	r3, [pc, #144]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2ba:	695b      	ldr	r3, [r3, #20]
     2bc:	4611      	mov	r1, r2
     2be:	4a23      	ldr	r2, [pc, #140]	; (34c <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe4>)
     2c0:	430b      	orrs	r3, r1
     2c2:	6153      	str	r3, [r2, #20]
            break;
     2c4:	e03d      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     2c6:	78fb      	ldrb	r3, [r7, #3]
     2c8:	2b00      	cmp	r3, #0
     2ca:	d10d      	bne.n	2e8 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0x80>
                lpc17xx::LPC_GPIO1->FIOPIN &= ~(1 << PIN);
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	791b      	ldrb	r3, [r3, #4]
     2d0:	b2db      	uxtb	r3, r3
     2d2:	461a      	mov	r2, r3
     2d4:	2301      	movs	r3, #1
     2d6:	4093      	lsls	r3, r2
     2d8:	43da      	mvns	r2, r3
     2da:	4b1d      	ldr	r3, [pc, #116]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2dc:	695b      	ldr	r3, [r3, #20]
     2de:	4611      	mov	r1, r2
     2e0:	4a1b      	ldr	r2, [pc, #108]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2e2:	400b      	ands	r3, r1
     2e4:	6153      	str	r3, [r2, #20]
            break;
     2e6:	e02c      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
                lpc17xx::LPC_GPIO1->FIOPIN |= (1 << PIN);;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	791b      	ldrb	r3, [r3, #4]
     2ec:	b2db      	uxtb	r3, r3
     2ee:	461a      	mov	r2, r3
     2f0:	2301      	movs	r3, #1
     2f2:	fa03 f202 	lsl.w	r2, r3, r2
     2f6:	4b16      	ldr	r3, [pc, #88]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2f8:	695b      	ldr	r3, [r3, #20]
     2fa:	4611      	mov	r1, r2
     2fc:	4a14      	ldr	r2, [pc, #80]	; (350 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xe8>)
     2fe:	430b      	orrs	r3, r1
     300:	6153      	str	r3, [r2, #20]
            break;
     302:	e01e      	b.n	342 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xda>
            if(output == sjsu::Gpio::kLow)
     304:	78fb      	ldrb	r3, [r7, #3]
     306:	2b00      	cmp	r3, #0
     308:	d10d      	bne.n	326 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xbe>
                lpc17xx::LPC_GPIO2->FIOPIN &= ~(1 << PIN);
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	791b      	ldrb	r3, [r3, #4]
     30e:	b2db      	uxtb	r3, r3
     310:	461a      	mov	r2, r3
     312:	2301      	movs	r3, #1
     314:	4093      	lsls	r3, r2
     316:	43da      	mvns	r2, r3
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     31a:	695b      	ldr	r3, [r3, #20]
     31c:	4611      	mov	r1, r2
     31e:	4a0d      	ldr	r2, [pc, #52]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     320:	400b      	ands	r3, r1
     322:	6153      	str	r3, [r2, #20]
            break;
     324:	e00c      	b.n	340 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xd8>
                lpc17xx::LPC_GPIO2->FIOPIN |= (1 << PIN);
     326:	687b      	ldr	r3, [r7, #4]
     328:	791b      	ldrb	r3, [r3, #4]
     32a:	b2db      	uxtb	r3, r3
     32c:	461a      	mov	r2, r3
     32e:	2301      	movs	r3, #1
     330:	fa03 f202 	lsl.w	r2, r3, r2
     334:	4b07      	ldr	r3, [pc, #28]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     336:	695b      	ldr	r3, [r3, #20]
     338:	4611      	mov	r1, r2
     33a:	4a06      	ldr	r2, [pc, #24]	; (354 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const+0xec>)
     33c:	430b      	orrs	r3, r1
     33e:	6153      	str	r3, [r2, #20]
            break;
     340:	bf00      	nop
        }
    }
}
     342:	bf00      	nop
     344:	370c      	adds	r7, #12
     346:	46bd      	mov	sp, r7
     348:	bc80      	pop	{r7}
     34a:	4770      	bx	lr
     34c:	2009c000 	.word	0x2009c000
     350:	2009c020 	.word	0x2009c020
     354:	2009c040 	.word	0x2009c040

00000358 <sjsu::LabGPIO::Toggle() const>:

void LabGPIO::Toggle() const
{
     358:	b480      	push	{r7}
     35a:	b083      	sub	sp, #12
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
    switch(PORT)
     360:	687b      	ldr	r3, [r7, #4]
     362:	795b      	ldrb	r3, [r3, #5]
     364:	b2db      	uxtb	r3, r3
     366:	2b01      	cmp	r3, #1
     368:	d012      	beq.n	390 <sjsu::LabGPIO::Toggle() const+0x38>
     36a:	2b02      	cmp	r3, #2
     36c:	d01e      	beq.n	3ac <sjsu::LabGPIO::Toggle() const+0x54>
     36e:	2b00      	cmp	r3, #0
     370:	d000      	beq.n	374 <sjsu::LabGPIO::Toggle() const+0x1c>
        }
        default:
        {
            // printf("Invalide port passed...\n");
            // fflush(stdout);
            break;
     372:	e029      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO0->FIOPIN ^= (1 << PIN);
     374:	687b      	ldr	r3, [r7, #4]
     376:	791b      	ldrb	r3, [r3, #4]
     378:	b2db      	uxtb	r3, r3
     37a:	461a      	mov	r2, r3
     37c:	2301      	movs	r3, #1
     37e:	fa03 f202 	lsl.w	r2, r3, r2
     382:	4b14      	ldr	r3, [pc, #80]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     384:	695b      	ldr	r3, [r3, #20]
     386:	4611      	mov	r1, r2
     388:	4a12      	ldr	r2, [pc, #72]	; (3d4 <sjsu::LabGPIO::Toggle() const+0x7c>)
     38a:	404b      	eors	r3, r1
     38c:	6153      	str	r3, [r2, #20]
            break;
     38e:	e01b      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO1->FIOPIN ^= (1 << PIN);
     390:	687b      	ldr	r3, [r7, #4]
     392:	791b      	ldrb	r3, [r3, #4]
     394:	b2db      	uxtb	r3, r3
     396:	461a      	mov	r2, r3
     398:	2301      	movs	r3, #1
     39a:	fa03 f202 	lsl.w	r2, r3, r2
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a0:	695b      	ldr	r3, [r3, #20]
     3a2:	4611      	mov	r1, r2
     3a4:	4a0c      	ldr	r2, [pc, #48]	; (3d8 <sjsu::LabGPIO::Toggle() const+0x80>)
     3a6:	404b      	eors	r3, r1
     3a8:	6153      	str	r3, [r2, #20]
            break;
     3aa:	e00d      	b.n	3c8 <sjsu::LabGPIO::Toggle() const+0x70>
            lpc17xx::LPC_GPIO2->FIOPIN ^= (1 << PIN);
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	791b      	ldrb	r3, [r3, #4]
     3b0:	b2db      	uxtb	r3, r3
     3b2:	461a      	mov	r2, r3
     3b4:	2301      	movs	r3, #1
     3b6:	fa03 f202 	lsl.w	r2, r3, r2
     3ba:	4b08      	ldr	r3, [pc, #32]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3bc:	695b      	ldr	r3, [r3, #20]
     3be:	4611      	mov	r1, r2
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <sjsu::LabGPIO::Toggle() const+0x84>)
     3c2:	404b      	eors	r3, r1
     3c4:	6153      	str	r3, [r2, #20]
            break;
     3c6:	bf00      	nop
        }
    }
}
     3c8:	bf00      	nop
     3ca:	370c      	adds	r7, #12
     3cc:	46bd      	mov	sp, r7
     3ce:	bc80      	pop	{r7}
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	2009c000 	.word	0x2009c000
     3d8:	2009c020 	.word	0x2009c020
     3dc:	2009c040 	.word	0x2009c040

000003e0 <sjsu::LabGPIO::Read() const>:

bool LabGPIO::Read() const
{
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    switch(PORT)
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	795b      	ldrb	r3, [r3, #5]
     3ec:	b2db      	uxtb	r3, r3
     3ee:	2b01      	cmp	r3, #1
     3f0:	d012      	beq.n	418 <sjsu::LabGPIO::Read() const+0x38>
     3f2:	2b02      	cmp	r3, #2
     3f4:	d01f      	beq.n	436 <sjsu::LabGPIO::Read() const+0x56>
     3f6:	2b00      	cmp	r3, #0
     3f8:	d12c      	bne.n	454 <sjsu::LabGPIO::Read() const+0x74>
    {
        case 0:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO0->FIOPIN & (1 << PIN)));
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <sjsu::LabGPIO::Read() const+0x80>)
     3fc:	695b      	ldr	r3, [r3, #20]
     3fe:	687a      	ldr	r2, [r7, #4]
     400:	7912      	ldrb	r2, [r2, #4]
     402:	b2d2      	uxtb	r2, r2
     404:	4611      	mov	r1, r2
     406:	2201      	movs	r2, #1
     408:	408a      	lsls	r2, r1
     40a:	4013      	ands	r3, r2
     40c:	2b00      	cmp	r3, #0
     40e:	bf14      	ite	ne
     410:	2301      	movne	r3, #1
     412:	2300      	moveq	r3, #0
     414:	b2db      	uxtb	r3, r3
     416:	e01e      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }
        case 1:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO1->FIOPIN & (1 << PIN)));
     418:	4b12      	ldr	r3, [pc, #72]	; (464 <sjsu::LabGPIO::Read() const+0x84>)
     41a:	695b      	ldr	r3, [r3, #20]
     41c:	687a      	ldr	r2, [r7, #4]
     41e:	7912      	ldrb	r2, [r2, #4]
     420:	b2d2      	uxtb	r2, r2
     422:	4611      	mov	r1, r2
     424:	2201      	movs	r2, #1
     426:	408a      	lsls	r2, r1
     428:	4013      	ands	r3, r2
     42a:	2b00      	cmp	r3, #0
     42c:	bf14      	ite	ne
     42e:	2301      	movne	r3, #1
     430:	2300      	moveq	r3, #0
     432:	b2db      	uxtb	r3, r3
     434:	e00f      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }   
        case 2:
        {
            return(static_cast<bool>(lpc17xx::LPC_GPIO2->FIOPIN & (1 << PIN)));
     436:	4b0c      	ldr	r3, [pc, #48]	; (468 <sjsu::LabGPIO::Read() const+0x88>)
     438:	695b      	ldr	r3, [r3, #20]
     43a:	687a      	ldr	r2, [r7, #4]
     43c:	7912      	ldrb	r2, [r2, #4]
     43e:	b2d2      	uxtb	r2, r2
     440:	4611      	mov	r1, r2
     442:	2201      	movs	r2, #1
     444:	408a      	lsls	r2, r1
     446:	4013      	ands	r3, r2
     448:	2b00      	cmp	r3, #0
     44a:	bf14      	ite	ne
     44c:	2301      	movne	r3, #1
     44e:	2300      	moveq	r3, #0
     450:	b2db      	uxtb	r3, r3
     452:	e000      	b.n	456 <sjsu::LabGPIO::Read() const+0x76>
            break;
        }
    }
    return false;
     454:	2300      	movs	r3, #0
}
     456:	4618      	mov	r0, r3
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	bc80      	pop	{r7}
     45e:	4770      	bx	lr
     460:	2009c000 	.word	0x2009c000
     464:	2009c020 	.word	0x2009c020
     468:	2009c040 	.word	0x2009c040

0000046c <sjsu::LabGPIO::GetPin() const>:

const sjsu::Pin & LabGPIO::GetPin() const
{
     46c:	b480      	push	{r7}
     46e:	b083      	sub	sp, #12
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     474:	bf00      	nop
     476:	4618      	mov	r0, r3
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <sjsu::LabGPIO::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:

void LabGPIO::AttachInterrupt(IsrPointer function, Edge edge) const
{
     480:	b480      	push	{r7}
     482:	b087      	sub	sp, #28
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	60b9      	str	r1, [r7, #8]
     48a:	4613      	mov	r3, r2
     48c:	71fb      	strb	r3, [r7, #7]
    IsrPointer test = function;
     48e:	68bb      	ldr	r3, [r7, #8]
     490:	617b      	str	r3, [r7, #20]
    Edge testedge = edge;
     492:	79fb      	ldrb	r3, [r7, #7]
     494:	74fb      	strb	r3, [r7, #19]
    test = test;
    testedge = testedge;
}
     496:	bf00      	nop
     498:	371c      	adds	r7, #28
     49a:	46bd      	mov	sp, r7
     49c:	bc80      	pop	{r7}
     49e:	4770      	bx	lr

000004a0 <sjsu::LabGPIO::DetachInterrupt() const>:

void LabGPIO::DetachInterrupt() const
{   
     4a0:	b480      	push	{r7}
     4a2:	b083      	sub	sp, #12
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
    //Not implemented yet
}
     4a8:	bf00      	nop
     4aa:	370c      	adds	r7, #12
     4ac:	46bd      	mov	sp, r7
     4ae:	bc80      	pop	{r7}
     4b0:	4770      	bx	lr
     4b2:	Address 0x00000000000004b2 is out of bounds.


000004b4 <__static_initialization_and_destruction_0(int, int)>:
     4b4:	b480      	push	{r7}
     4b6:	b083      	sub	sp, #12
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	6039      	str	r1, [r7, #0]
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	2b01      	cmp	r3, #1
     4c2:	d110      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
     4c4:	683b      	ldr	r3, [r7, #0]
     4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4ca:	4293      	cmp	r3, r2
     4cc:	d10b      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
  };
  /// A pointer holding the address to the LPC40xx PIN peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
     4ce:	4b08      	ldr	r3, [pc, #32]	; (4f0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	f003 0301 	and.w	r3, r3, #1
     4d6:	2b00      	cmp	r3, #0
     4d8:	d105      	bne.n	4e6 <__static_initialization_and_destruction_0(int, int)+0x32>
     4da:	4b05      	ldr	r3, [pc, #20]	; (4f0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
     4dc:	2201      	movs	r2, #1
     4de:	601a      	str	r2, [r3, #0]
     4e0:	4a04      	ldr	r2, [pc, #16]	; (4f4 <__static_initialization_and_destruction_0(int, int)+0x40>)
     4e2:	4b05      	ldr	r3, [pc, #20]	; (4f8 <__static_initialization_and_destruction_0(int, int)+0x44>)
     4e4:	601a      	str	r2, [r3, #0]
     4e6:	bf00      	nop
     4e8:	370c      	adds	r7, #12
     4ea:	46bd      	mov	sp, r7
     4ec:	bc80      	pop	{r7}
     4ee:	4770      	bx	lr
     4f0:	2007c140 	.word	0x2007c140
     4f4:	4002c000 	.word	0x4002c000
     4f8:	2007c13c 	.word	0x2007c13c

000004fc <_GLOBAL__sub_I__ZN4sjsu7LabGPIOC2Ehh>:
     4fc:	b580      	push	{r7, lr}
     4fe:	af00      	add	r7, sp, #0
     500:	f64f 71ff 	movw	r1, #65535	; 0xffff
     504:	2001      	movs	r0, #1
     506:	f7ff ffd5 	bl	4b4 <__static_initialization_and_destruction_0(int, int)>
     50a:	bd80      	pop	{r7, pc}

0000050c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     50c:	b480      	push	{r7}
     50e:	b083      	sub	sp, #12
     510:	af00      	add	r7, sp, #0
     512:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     514:	687b      	ldr	r3, [r7, #4]
     516:	f003 021f 	and.w	r2, r3, #31
     51a:	4906      	ldr	r1, [pc, #24]	; (534 <NVIC_EnableIRQ+0x28>)
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	095b      	lsrs	r3, r3, #5
     520:	2001      	movs	r0, #1
     522:	fa00 f202 	lsl.w	r2, r0, r2
     526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     52a:	bf00      	nop
     52c:	370c      	adds	r7, #12
     52e:	46bd      	mov	sp, r7
     530:	bc80      	pop	{r7}
     532:	4770      	bx	lr
     534:	e000e100 	.word	0xe000e100

00000538 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     538:	b480      	push	{r7}
     53a:	b083      	sub	sp, #12
     53c:	af00      	add	r7, sp, #0
     53e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     540:	687b      	ldr	r3, [r7, #4]
     542:	f003 021f 	and.w	r2, r3, #31
     546:	4907      	ldr	r1, [pc, #28]	; (564 <NVIC_DisableIRQ+0x2c>)
     548:	687b      	ldr	r3, [r7, #4]
     54a:	095b      	lsrs	r3, r3, #5
     54c:	2001      	movs	r0, #1
     54e:	fa00 f202 	lsl.w	r2, r0, r2
     552:	3320      	adds	r3, #32
     554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     558:	bf00      	nop
     55a:	370c      	adds	r7, #12
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	e000e100 	.word	0xe000e100

00000568 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     568:	b480      	push	{r7}
     56a:	b083      	sub	sp, #12
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
     570:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     572:	687b      	ldr	r3, [r7, #4]
     574:	2b00      	cmp	r3, #0
     576:	da0b      	bge.n	590 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     578:	683b      	ldr	r3, [r7, #0]
     57a:	b2da      	uxtb	r2, r3
     57c:	490c      	ldr	r1, [pc, #48]	; (5b0 <NVIC_SetPriority+0x48>)
     57e:	687b      	ldr	r3, [r7, #4]
     580:	f003 030f 	and.w	r3, r3, #15
     584:	3b04      	subs	r3, #4
     586:	0152      	lsls	r2, r2, #5
     588:	b2d2      	uxtb	r2, r2
     58a:	440b      	add	r3, r1
     58c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     58e:	e00a      	b.n	5a6 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     590:	683b      	ldr	r3, [r7, #0]
     592:	b2db      	uxtb	r3, r3
     594:	4a07      	ldr	r2, [pc, #28]	; (5b4 <NVIC_SetPriority+0x4c>)
     596:	6879      	ldr	r1, [r7, #4]
     598:	4608      	mov	r0, r1
     59a:	015b      	lsls	r3, r3, #5
     59c:	b2d9      	uxtb	r1, r3
     59e:	1813      	adds	r3, r2, r0
     5a0:	460a      	mov	r2, r1
     5a2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     5a6:	bf00      	nop
     5a8:	370c      	adds	r7, #12
     5aa:	46bd      	mov	sp, r7
     5ac:	bc80      	pop	{r7}
     5ae:	4770      	bx	lr
     5b0:	e000ed00 	.word	0xe000ed00
     5b4:	e000e100 	.word	0xe000e100

000005b8 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     5b8:	b490      	push	{r4, r7}
     5ba:	af00      	add	r7, sp, #0
     5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     5c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     5c4:	4618      	mov	r0, r3
     5c6:	4621      	mov	r1, r4
     5c8:	46bd      	mov	sp, r7
     5ca:	bc90      	pop	{r4, r7}
     5cc:	4770      	bx	lr

000005ce <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     5ce:	b490      	push	{r4, r7}
     5d0:	b082      	sub	sp, #8
     5d2:	af00      	add	r7, sp, #0
     5d4:	6078      	str	r0, [r7, #4]
     5d6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	cb18      	ldmia	r3, {r3, r4}
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	e9c2 3400 	strd	r3, r4, [r2]
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	4618      	mov	r0, r3
     5e6:	3708      	adds	r7, #8
     5e8:	46bd      	mov	sp, r7
     5ea:	bc90      	pop	{r4, r7}
     5ec:	4770      	bx	lr
     5ee:	Address 0x00000000000005ee is out of bounds.


000005f0 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	2200      	movs	r2, #0
     5fc:	4903      	ldr	r1, [pc, #12]	; (60c <sjsu::DefaultUptime()+0x1c>)
     5fe:	4618      	mov	r0, r3
     600:	f000 faee 	bl	be0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     604:	6878      	ldr	r0, [r7, #4]
     606:	3708      	adds	r7, #8
     608:	46bd      	mov	sp, r7
     60a:	bd80      	pop	{r7, pc}
     60c:	2007c148 	.word	0x2007c148

00000610 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     610:	b480      	push	{r7}
     612:	b083      	sub	sp, #12
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
     618:	2300      	movs	r3, #0
     61a:	4618      	mov	r0, r3
     61c:	370c      	adds	r7, #12
     61e:	46bd      	mov	sp, r7
     620:	bc80      	pop	{r7}
     622:	4770      	bx	lr

00000624 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     624:	b580      	push	{r7, lr}
     626:	af00      	add	r7, sp, #0
     628:	2000      	movs	r0, #0
     62a:	f7ff fff1 	bl	610 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     62e:	4603      	mov	r3, r0
     630:	4618      	mov	r0, r3
     632:	bd80      	pop	{r7, pc}

00000634 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     634:	b590      	push	{r4, r7, lr}
     636:	b093      	sub	sp, #76	; 0x4c
     638:	af00      	add	r7, sp, #0
     63a:	e9c7 0102 	strd	r0, r1, [r7, #8]
     63e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     642:	e9c7 3406 	strd	r3, r4, [r7, #24]
     646:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     64a:	f107 0338 	add.w	r3, r7, #56	; 0x38
     64e:	4618      	mov	r0, r3
     650:	f000 fae9 	bl	c26 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     654:	f107 0238 	add.w	r2, r7, #56	; 0x38
     658:	f107 0318 	add.w	r3, r7, #24
     65c:	4611      	mov	r1, r2
     65e:	4618      	mov	r0, r3
     660:	f000 faf5 	bl	c4e <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     664:	4603      	mov	r3, r0
     666:	2b00      	cmp	r3, #0
     668:	d004      	beq.n	674 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     66a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     66e:	e9c7 3404 	strd	r3, r4, [r7, #16]
     672:	e011      	b.n	698 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     674:	4b19      	ldr	r3, [pc, #100]	; (6dc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	f107 0230 	add.w	r2, r7, #48	; 0x30
     67c:	4610      	mov	r0, r2
     67e:	4798      	blx	r3
     680:	463b      	mov	r3, r7
     682:	f107 0218 	add.w	r2, r7, #24
     686:	f107 0130 	add.w	r1, r7, #48	; 0x30
     68a:	4618      	mov	r0, r3
     68c:	f000 fb04 	bl	c98 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     690:	e9d7 3400 	ldrd	r3, r4, [r7]
     694:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     698:	2301      	movs	r3, #1
     69a:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     69c:	4b0f      	ldr	r3, [pc, #60]	; (6dc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     69e:	681b      	ldr	r3, [r3, #0]
     6a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
     6a4:	4610      	mov	r0, r2
     6a6:	4798      	blx	r3
     6a8:	f107 0210 	add.w	r2, r7, #16
     6ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
     6b0:	4611      	mov	r1, r2
     6b2:	4618      	mov	r0, r3
     6b4:	f000 fb1b 	bl	cee <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6b8:	4603      	mov	r3, r0
     6ba:	2b00      	cmp	r3, #0
     6bc:	d009      	beq.n	6d2 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     6be:	f107 0324 	add.w	r3, r7, #36	; 0x24
     6c2:	4618      	mov	r0, r3
     6c4:	f7ff ffa4 	bl	610 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     6c8:	4603      	mov	r3, r0
     6ca:	2b00      	cmp	r3, #0
     6cc:	d0e6      	beq.n	69c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     6ce:	2300      	movs	r3, #0
     6d0:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     6d4:	4618      	mov	r0, r3
     6d6:	374c      	adds	r7, #76	; 0x4c
     6d8:	46bd      	mov	sp, r7
     6da:	bd90      	pop	{r4, r7, pc}
     6dc:	2007c000 	.word	0x2007c000

000006e0 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b082      	sub	sp, #8
     6e4:	af00      	add	r7, sp, #0
     6e6:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     6ea:	e9d7 0100 	ldrd	r0, r1, [r7]
     6ee:	f7ff ffa1 	bl	634 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     6f2:	bf00      	nop
     6f4:	3708      	adds	r7, #8
     6f6:	46bd      	mov	sp, r7
     6f8:	bd80      	pop	{r7, pc}

000006fa <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     6fa:	b480      	push	{r7}
     6fc:	af00      	add	r7, sp, #0
     6fe:	bf00      	nop
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	Address 0x0000000000000706 is out of bounds.


00000708 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     708:	b580      	push	{r7, lr}
     70a:	b082      	sub	sp, #8
     70c:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     70e:	4b09      	ldr	r3, [pc, #36]	; (734 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	9300      	str	r3, [sp, #0]
     714:	231d      	movs	r3, #29
     716:	4a08      	ldr	r2, [pc, #32]	; (738 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     718:	4908      	ldr	r1, [pc, #32]	; (73c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     71a:	4809      	ldr	r0, [pc, #36]	; (740 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     71c:	f001 ff08 	bl	2530 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     720:	4b04      	ldr	r3, [pc, #16]	; (734 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     722:	681b      	ldr	r3, [r3, #0]
     724:	3b10      	subs	r3, #16
     726:	4618      	mov	r0, r3
     728:	f7ff ff06 	bl	538 <NVIC_DisableIRQ>
  }
     72c:	bf00      	nop
     72e:	46bd      	mov	sp, r7
     730:	bd80      	pop	{r7, pc}
     732:	bf00      	nop
     734:	2007c004 	.word	0x2007c004
     738:	00006398 	.word	0x00006398
     73c:	000062d0 	.word	0x000062d0
     740:	000062e0 	.word	0x000062e0

00000744 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     744:	b480      	push	{r7}
     746:	b083      	sub	sp, #12
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     74c:	2340      	movs	r3, #64	; 0x40
     74e:	4618      	mov	r0, r3
     750:	370c      	adds	r7, #12
     752:	46bd      	mov	sp, r7
     754:	bc80      	pop	{r7}
     756:	4770      	bx	lr

00000758 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     758:	b580      	push	{r7, lr}
     75a:	b084      	sub	sp, #16
     75c:	af00      	add	r7, sp, #0
     75e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     760:	687b      	ldr	r3, [r7, #4]
     762:	4618      	mov	r0, r3
     764:	f44f 7380 	mov.w	r3, #256	; 0x100
     768:	461a      	mov	r2, r3
     76a:	2100      	movs	r1, #0
     76c:	f005 fd31 	bl	61d2 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     770:	2300      	movs	r3, #0
     772:	60fb      	str	r3, [r7, #12]
     774:	68fb      	ldr	r3, [r7, #12]
     776:	2b0f      	cmp	r3, #15
     778:	d808      	bhi.n	78c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	68fa      	ldr	r2, [r7, #12]
     77e:	4911      	ldr	r1, [pc, #68]	; (7c4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     784:	68fb      	ldr	r3, [r7, #12]
     786:	3301      	adds	r3, #1
     788:	60fb      	str	r3, [r7, #12]
     78a:	e7f3      	b.n	774 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     78c:	2310      	movs	r3, #16
     78e:	60bb      	str	r3, [r7, #8]
     790:	6878      	ldr	r0, [r7, #4]
     792:	f7ff ffd7 	bl	744 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     796:	4602      	mov	r2, r0
     798:	68bb      	ldr	r3, [r7, #8]
     79a:	4293      	cmp	r3, r2
     79c:	bf34      	ite	cc
     79e:	2301      	movcc	r3, #1
     7a0:	2300      	movcs	r3, #0
     7a2:	b2db      	uxtb	r3, r3
     7a4:	2b00      	cmp	r3, #0
     7a6:	d008      	beq.n	7ba <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	68ba      	ldr	r2, [r7, #8]
     7ac:	4906      	ldr	r1, [pc, #24]	; (7c8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     7ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     7b2:	68bb      	ldr	r3, [r7, #8]
     7b4:	3301      	adds	r3, #1
     7b6:	60bb      	str	r3, [r7, #8]
     7b8:	e7ea      	b.n	790 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     7ba:	bf00      	nop
    }
     7bc:	6878      	ldr	r0, [r7, #4]
     7be:	3710      	adds	r7, #16
     7c0:	46bd      	mov	sp, r7
     7c2:	bd80      	pop	{r7, pc}
     7c4:	000006fb 	.word	0x000006fb
     7c8:	00000709 	.word	0x00000709

000007cc <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     7cc:	b480      	push	{r7}
     7ce:	b083      	sub	sp, #12
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	3310      	adds	r3, #16
  }
     7d8:	4618      	mov	r0, r3
     7da:	370c      	adds	r7, #12
     7dc:	46bd      	mov	sp, r7
     7de:	bc80      	pop	{r7}
     7e0:	4770      	bx	lr
     7e2:	Address 0x00000000000007e2 is out of bounds.


000007e4 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     7e4:	b580      	push	{r7, lr}
     7e6:	b082      	sub	sp, #8
     7e8:	af00      	add	r7, sp, #0
     7ea:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     7ec:	6878      	ldr	r0, [r7, #4]
     7ee:	f7ff ffed 	bl	7cc <sjsu::cortex::InterruptController::IrqToIndex(int)>
     7f2:	4603      	mov	r3, r0
     7f4:	009b      	lsls	r3, r3, #2
     7f6:	4a03      	ldr	r2, [pc, #12]	; (804 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     7f8:	4413      	add	r3, r2
  }
     7fa:	4618      	mov	r0, r3
     7fc:	3708      	adds	r7, #8
     7fe:	46bd      	mov	sp, r7
     800:	bd80      	pop	{r7, pc}
     802:	bf00      	nop
     804:	2007c150 	.word	0x2007c150

00000808 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     808:	b084      	sub	sp, #16
     80a:	b590      	push	{r4, r7, lr}
     80c:	b085      	sub	sp, #20
     80e:	af00      	add	r7, sp, #0
     810:	6078      	str	r0, [r7, #4]
     812:	f107 0024 	add.w	r0, r7, #36	; 0x24
     816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     81c:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     81e:	6abc      	ldr	r4, [r7, #40]	; 0x28
     820:	68f8      	ldr	r0, [r7, #12]
     822:	f7ff ffdf 	bl	7e4 <sjsu::cortex::InterruptController::GetVector(int)>
     826:	4603      	mov	r3, r0
     828:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     82a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     82e:	2b00      	cmp	r3, #0
     830:	d005      	beq.n	83e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     832:	68fb      	ldr	r3, [r7, #12]
     834:	2b00      	cmp	r3, #0
     836:	db02      	blt.n	83e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     838:	68f8      	ldr	r0, [r7, #12]
     83a:	f7ff fe67 	bl	50c <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     840:	2b00      	cmp	r3, #0
     842:	db04      	blt.n	84e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     846:	4619      	mov	r1, r3
     848:	68f8      	ldr	r0, [r7, #12]
     84a:	f7ff fe8d 	bl	568 <NVIC_SetPriority>
    }
  }
     84e:	bf00      	nop
     850:	3714      	adds	r7, #20
     852:	46bd      	mov	sp, r7
     854:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     858:	b004      	add	sp, #16
     85a:	4770      	bx	lr

0000085c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     866:	6838      	ldr	r0, [r7, #0]
     868:	f7ff fe66 	bl	538 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     86c:	6838      	ldr	r0, [r7, #0]
     86e:	f7ff ffb9 	bl	7e4 <sjsu::cortex::InterruptController::GetVector(int)>
     872:	4602      	mov	r2, r0
     874:	4b02      	ldr	r3, [pc, #8]	; (880 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     876:	6013      	str	r3, [r2, #0]
  }
     878:	bf00      	nop
     87a:	3708      	adds	r7, #8
     87c:	46bd      	mov	sp, r7
     87e:	bd80      	pop	{r7, pc}
     880:	00000709 	.word	0x00000709

00000884 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
     884:	b580      	push	{r7, lr}
     886:	b082      	sub	sp, #8
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	4618      	mov	r0, r3
     890:	f000 f804 	bl	89c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
     894:	6878      	ldr	r0, [r7, #4]
     896:	3708      	adds	r7, #8
     898:	46bd      	mov	sp, r7
     89a:	bd80      	pop	{r7, pc}

0000089c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
     89c:	b580      	push	{r7, lr}
     89e:	b082      	sub	sp, #8
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     8a4:	4903      	ldr	r1, [pc, #12]	; (8b4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
     8a6:	6878      	ldr	r0, [r7, #4]
     8a8:	f000 f806 	bl	8b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
     8ac:	6878      	ldr	r0, [r7, #4]
     8ae:	3708      	adds	r7, #8
     8b0:	46bd      	mov	sp, r7
     8b2:	bd80      	pop	{r7, pc}
     8b4:	000062c8 	.word	0x000062c8

000008b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     8b8:	b490      	push	{r4, r7}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     8c2:	683b      	ldr	r3, [r7, #0]
     8c4:	cb18      	ldmia	r3, {r3, r4}
     8c6:	687a      	ldr	r2, [r7, #4]
     8c8:	e9c2 3400 	strd	r3, r4, [r2]
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	4618      	mov	r0, r3
     8d0:	3708      	adds	r7, #8
     8d2:	46bd      	mov	sp, r7
     8d4:	bc90      	pop	{r4, r7}
     8d6:	4770      	bx	lr

000008d8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
     8e0:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	6839      	ldr	r1, [r7, #0]
     8e6:	4618      	mov	r0, r3
     8e8:	f000 f810 	bl	90c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
     8ec:	6878      	ldr	r0, [r7, #4]
     8ee:	3708      	adds	r7, #8
     8f0:	46bd      	mov	sp, r7
     8f2:	bd80      	pop	{r7, pc}

000008f4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
     8f4:	b490      	push	{r4, r7}
     8f6:	b082      	sub	sp, #8
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
	{ return __r; }
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	cb18      	ldmia	r3, {r3, r4}
     900:	4618      	mov	r0, r3
     902:	4621      	mov	r1, r4
     904:	3708      	adds	r7, #8
     906:	46bd      	mov	sp, r7
     908:	bc90      	pop	{r4, r7}
     90a:	4770      	bx	lr

0000090c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	b085      	sub	sp, #20
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     916:	6838      	ldr	r0, [r7, #0]
     918:	f7ff ffec 	bl	8f4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
     91c:	4605      	mov	r5, r0
     91e:	460e      	mov	r6, r1
     920:	462b      	mov	r3, r5
     922:	4634      	mov	r4, r6
     924:	f04f 0100 	mov.w	r1, #0
     928:	f04f 0200 	mov.w	r2, #0
     92c:	0162      	lsls	r2, r4, #5
     92e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     932:	0159      	lsls	r1, r3, #5
     934:	460b      	mov	r3, r1
     936:	4614      	mov	r4, r2
     938:	1b5b      	subs	r3, r3, r5
     93a:	eb64 0406 	sbc.w	r4, r4, r6
     93e:	f04f 0100 	mov.w	r1, #0
     942:	f04f 0200 	mov.w	r2, #0
     946:	00a2      	lsls	r2, r4, #2
     948:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     94c:	0099      	lsls	r1, r3, #2
     94e:	460b      	mov	r3, r1
     950:	4614      	mov	r4, r2
     952:	195b      	adds	r3, r3, r5
     954:	eb44 0406 	adc.w	r4, r4, r6
     958:	f04f 0100 	mov.w	r1, #0
     95c:	f04f 0200 	mov.w	r2, #0
     960:	00e2      	lsls	r2, r4, #3
     962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
     966:	00d9      	lsls	r1, r3, #3
     968:	460b      	mov	r3, r1
     96a:	4614      	mov	r4, r2
     96c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     970:	f107 0308 	add.w	r3, r7, #8
     974:	4619      	mov	r1, r3
     976:	6878      	ldr	r0, [r7, #4]
     978:	f7ff fe29 	bl	5ce <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     97c:	6878      	ldr	r0, [r7, #4]
     97e:	3714      	adds	r7, #20
     980:	46bd      	mov	sp, r7
     982:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000984 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     984:	b590      	push	{r4, r7, lr}
     986:	b085      	sub	sp, #20
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
     98c:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     98e:	f107 0308 	add.w	r3, r7, #8
     992:	6839      	ldr	r1, [r7, #0]
     994:	4618      	mov	r0, r3
     996:	f7ff ff9f 	bl	8d8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     99a:	f107 0308 	add.w	r3, r7, #8
     99e:	4618      	mov	r0, r3
     9a0:	f000 f80a 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     9a4:	4603      	mov	r3, r0
     9a6:	460c      	mov	r4, r1
     9a8:	687a      	ldr	r2, [r7, #4]
     9aa:	e9c2 3400 	strd	r3, r4, [r2]
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	4618      	mov	r0, r3
     9b2:	3714      	adds	r7, #20
     9b4:	46bd      	mov	sp, r7
     9b6:	bd90      	pop	{r4, r7, pc}

000009b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
     9b8:	b490      	push	{r4, r7}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
	{ return __r; }
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	cb18      	ldmia	r3, {r3, r4}
     9c4:	4618      	mov	r0, r3
     9c6:	4621      	mov	r1, r4
     9c8:	3708      	adds	r7, #8
     9ca:	46bd      	mov	sp, r7
     9cc:	bc90      	pop	{r4, r7}
     9ce:	4770      	bx	lr

000009d0 <main>:


void GpioInterruptCallback();

int main(void)
{
     9d0:	b590      	push	{r4, r7, lr}
     9d2:	b09f      	sub	sp, #124	; 0x7c
     9d4:	af02      	add	r7, sp, #8

  uint8_t testPin = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t testPort = 0;
     9dc:	2300      	movs	r3, #0
     9de:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  //Setup Gpio on LED Port 0. Pin 0
  LabGPIO gpioTest0(testPort, testPin);
     9e2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
     9e6:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
     9ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
     9ee:	4618      	mov	r0, r3
     9f0:	f7ff fba6 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO gpioTest1(1, 0);
     9f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
     9f8:	2200      	movs	r2, #0
     9fa:	2101      	movs	r1, #1
     9fc:	4618      	mov	r0, r3
     9fe:	f7ff fb9f 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO gpioTest2(2,0);
     a02:	f107 0320 	add.w	r3, r7, #32
     a06:	2200      	movs	r2, #0
     a08:	2102      	movs	r1, #2
     a0a:	4618      	mov	r0, r3
     a0c:	f7ff fb98 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  LabGPIO gpioTest3(1,1);
     a10:	f107 0318 	add.w	r3, r7, #24
     a14:	2201      	movs	r2, #1
     a16:	2101      	movs	r1, #1
     a18:	4618      	mov	r0, r3
     a1a:	f7ff fb91 	bl	140 <sjsu::LabGPIO::LabGPIO(unsigned char, unsigned char)>
  
  //Set Direction of GPIO to be output
  gpioTest0.SetDirection(sjsu::Gpio::kOutput);
     a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
     a22:	2101      	movs	r1, #1
     a24:	4618      	mov	r0, r3
     a26:	f7ff fba7 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  gpioTest1.SetDirection(sjsu::Gpio::kOutput);
     a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
     a2e:	2101      	movs	r1, #1
     a30:	4618      	mov	r0, r3
     a32:	f7ff fba1 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  gpioTest2.SetDirection(sjsu::Gpio::kOutput);
     a36:	f107 0320 	add.w	r3, r7, #32
     a3a:	2101      	movs	r1, #1
     a3c:	4618      	mov	r0, r3
     a3e:	f7ff fb9b 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  gpioTest3.SetDirection(sjsu::Gpio::kOutput);
     a42:	f107 0318 	add.w	r3, r7, #24
     a46:	2101      	movs	r1, #1
     a48:	4618      	mov	r0, r3
     a4a:	f7ff fb95 	bl	178 <sjsu::LabGPIO::SetDirection(sjsu::Gpio::Direction) const>
  //Set Pin 0 to a low state
  gpioTest0.Set(sjsu::Gpio::kLow);
     a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
     a52:	2100      	movs	r1, #0
     a54:	4618      	mov	r0, r3
     a56:	f7ff fc07 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  gpioTest1.Set(sjsu::Gpio::kLow);
     a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
     a5e:	2100      	movs	r1, #0
     a60:	4618      	mov	r0, r3
     a62:	f7ff fc01 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  gpioTest2.Set(sjsu::Gpio::kLow);
     a66:	f107 0320 	add.w	r3, r7, #32
     a6a:	2100      	movs	r1, #0
     a6c:	4618      	mov	r0, r3
     a6e:	f7ff fbfb 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  gpioTest3.Set(sjsu::Gpio::kLow);
     a72:	f107 0318 	add.w	r3, r7, #24
     a76:	2100      	movs	r1, #0
     a78:	4618      	mov	r0, r3
     a7a:	f7ff fbf5 	bl	268 <sjsu::LabGPIO::Set(sjsu::Gpio::State) const>
  sjsu::Delay(100ms);
     a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
     a82:	4618      	mov	r0, r3
     a84:	f7ff fefe 	bl	884 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     a88:	f107 0240 	add.w	r2, r7, #64	; 0x40
     a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
     a90:	4611      	mov	r1, r2
     a92:	4618      	mov	r0, r3
     a94:	f7ff ff76 	bl	984 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     a98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
     a9c:	f7ff fe20 	bl	6e0 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  
  //create Interrupt controller
  sjsu::cortex::InterruptController IntCont;
     aa0:	4b2c      	ldr	r3, [pc, #176]	; (b54 <main+0x184>)
     aa2:	617b      	str	r3, [r7, #20]

  //initialize struct for registering interrupt
  InterruptController::RegistrationInfo_t gpioInterrupt = {
     aa4:	4b2c      	ldr	r3, [pc, #176]	; (b58 <main+0x188>)
     aa6:	1d3c      	adds	r4, r7, #4
     aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GpioInterruptCallback,
    true,
   -1,
  };
  //enable interrupt on and falling edge...
  lpc17xx::LPC_GPIOINT->IO0IntEnR |= 0x1;
     aae:	4b2b      	ldr	r3, [pc, #172]	; (b5c <main+0x18c>)
     ab0:	691b      	ldr	r3, [r3, #16]
     ab2:	4a2a      	ldr	r2, [pc, #168]	; (b5c <main+0x18c>)
     ab4:	f043 0301 	orr.w	r3, r3, #1
     ab8:	6113      	str	r3, [r2, #16]
  lpc17xx::LPC_GPIOINT->IO0IntEnF |= 0x1;
     aba:	4b28      	ldr	r3, [pc, #160]	; (b5c <main+0x18c>)
     abc:	695b      	ldr	r3, [r3, #20]
     abe:	4a27      	ldr	r2, [pc, #156]	; (b5c <main+0x18c>)
     ac0:	f043 0301 	orr.w	r3, r3, #1
     ac4:	6153      	str	r3, [r2, #20]
  lpc17xx::LPC_GPIOINT->IO2IntEnR |= 0x1;
     ac6:	4b25      	ldr	r3, [pc, #148]	; (b5c <main+0x18c>)
     ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     aca:	4a24      	ldr	r2, [pc, #144]	; (b5c <main+0x18c>)
     acc:	f043 0301 	orr.w	r3, r3, #1
     ad0:	6313      	str	r3, [r2, #48]	; 0x30
  lpc17xx::LPC_GPIOINT->IO2IntEnF |= 0x1;
     ad2:	4b22      	ldr	r3, [pc, #136]	; (b5c <main+0x18c>)
     ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ad6:	4a21      	ldr	r2, [pc, #132]	; (b5c <main+0x18c>)
     ad8:	f043 0301 	orr.w	r3, r3, #1
     adc:	6353      	str	r3, [r2, #52]	; 0x34

  //Register Interrupt
  IntCont.Register(gpioInterrupt);
     ade:	f107 0014 	add.w	r0, r7, #20
     ae2:	693b      	ldr	r3, [r7, #16]
     ae4:	9300      	str	r3, [sp, #0]
     ae6:	1d3b      	adds	r3, r7, #4
     ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
     aea:	f7ff fe8d 	bl	808 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
  


  while(true)
  {
    printf("toggling 1\n");
     aee:	481c      	ldr	r0, [pc, #112]	; (b60 <main+0x190>)
     af0:	f000 fbf4 	bl	12dc <puts>
    gpioTest0.Toggle();
     af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
     af8:	4618      	mov	r0, r3
     afa:	f7ff fc2d 	bl	358 <sjsu::LabGPIO::Toggle() const>
    sjsu::Delay(100ms);
     afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
     b02:	4618      	mov	r0, r3
     b04:	f7ff febe 	bl	884 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     b08:	f107 0250 	add.w	r2, r7, #80	; 0x50
     b0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
     b10:	4611      	mov	r1, r2
     b12:	4618      	mov	r0, r3
     b14:	f7ff ff36 	bl	984 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     b18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
     b1c:	f7ff fde0 	bl	6e0 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
    printf("toggling 2\n");
     b20:	4810      	ldr	r0, [pc, #64]	; (b64 <main+0x194>)
     b22:	f000 fbdb 	bl	12dc <puts>
    gpioTest2.Toggle();
     b26:	f107 0320 	add.w	r3, r7, #32
     b2a:	4618      	mov	r0, r3
     b2c:	f7ff fc14 	bl	358 <sjsu::LabGPIO::Toggle() const>
    sjsu::Delay(100ms);
     b30:	f107 0360 	add.w	r3, r7, #96	; 0x60
     b34:	4618      	mov	r0, r3
     b36:	f7ff fea5 	bl	884 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
     b3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
     b3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
     b42:	4611      	mov	r1, r2
     b44:	4618      	mov	r0, r3
     b46:	f7ff ff1d 	bl	984 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
     b4e:	f7ff fdc7 	bl	6e0 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
    printf("toggling 1\n");
     b52:	e7cc      	b.n	aee <main+0x11e>
     b54:	00006390 	.word	0x00006390
     b58:	00006378 	.word	0x00006378
     b5c:	40028080 	.word	0x40028080
     b60:	00006360 	.word	0x00006360
     b64:	0000636c 	.word	0x0000636c

00000b68 <GpioInterruptCallback()>:
    
  }
  return 0;
}
void GpioInterruptCallback()
{
     b68:	b480      	push	{r7}
     b6a:	af00      	add	r7, sp, #0
  // printf("Test... Rising: 0x%08x, Falling: 0x%08x\n", lpc17xx::LPC_GPIOINT->IO0IntStatR, lpc17xx::LPC_GPIOINT->IO0IntStatF);
  // printf("Test... Rising: 0x%08x, Falling: 0x%08x\n", lpc17xx::LPC_GPIOINT->IO2IntStatR, lpc17xx::LPC_GPIOINT->IO2IntStatF);
  if(lpc17xx::LPC_GPIOINT->IO0IntStatR || lpc17xx::LPC_GPIOINT->IO0IntStatF)
     b6c:	4b1a      	ldr	r3, [pc, #104]	; (bd8 <GpioInterruptCallback()+0x70>)
     b6e:	685b      	ldr	r3, [r3, #4]
     b70:	2b00      	cmp	r3, #0
     b72:	d103      	bne.n	b7c <GpioInterruptCallback()+0x14>
     b74:	4b18      	ldr	r3, [pc, #96]	; (bd8 <GpioInterruptCallback()+0x70>)
     b76:	689b      	ldr	r3, [r3, #8]
     b78:	2b00      	cmp	r3, #0
     b7a:	d001      	beq.n	b80 <GpioInterruptCallback()+0x18>
     b7c:	2301      	movs	r3, #1
     b7e:	e000      	b.n	b82 <GpioInterruptCallback()+0x1a>
     b80:	2300      	movs	r3, #0
     b82:	2b00      	cmp	r3, #0
     b84:	d00b      	beq.n	b9e <GpioInterruptCallback()+0x36>
  {
    lpc17xx::LPC_GPIO1->FIOPIN ^= (1 << 0);
     b86:	4b15      	ldr	r3, [pc, #84]	; (bdc <GpioInterruptCallback()+0x74>)
     b88:	695b      	ldr	r3, [r3, #20]
     b8a:	4a14      	ldr	r2, [pc, #80]	; (bdc <GpioInterruptCallback()+0x74>)
     b8c:	f083 0301 	eor.w	r3, r3, #1
     b90:	6153      	str	r3, [r2, #20]
    lpc17xx::LPC_GPIOINT->IO0IntClr |= 1;
     b92:	4b11      	ldr	r3, [pc, #68]	; (bd8 <GpioInterruptCallback()+0x70>)
     b94:	68db      	ldr	r3, [r3, #12]
     b96:	4a10      	ldr	r2, [pc, #64]	; (bd8 <GpioInterruptCallback()+0x70>)
     b98:	f043 0301 	orr.w	r3, r3, #1
     b9c:	60d3      	str	r3, [r2, #12]
  }
  if(lpc17xx::LPC_GPIOINT->IO2IntStatF || lpc17xx::LPC_GPIOINT->IO2IntStatR)
     b9e:	4b0e      	ldr	r3, [pc, #56]	; (bd8 <GpioInterruptCallback()+0x70>)
     ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ba2:	2b00      	cmp	r3, #0
     ba4:	d103      	bne.n	bae <GpioInterruptCallback()+0x46>
     ba6:	4b0c      	ldr	r3, [pc, #48]	; (bd8 <GpioInterruptCallback()+0x70>)
     ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     baa:	2b00      	cmp	r3, #0
     bac:	d001      	beq.n	bb2 <GpioInterruptCallback()+0x4a>
     bae:	2301      	movs	r3, #1
     bb0:	e000      	b.n	bb4 <GpioInterruptCallback()+0x4c>
     bb2:	2300      	movs	r3, #0
     bb4:	2b00      	cmp	r3, #0
     bb6:	d00b      	beq.n	bd0 <GpioInterruptCallback()+0x68>
  {
    lpc17xx::LPC_GPIO1->FIOPIN ^= (1 << 1);
     bb8:	4b08      	ldr	r3, [pc, #32]	; (bdc <GpioInterruptCallback()+0x74>)
     bba:	695b      	ldr	r3, [r3, #20]
     bbc:	4a07      	ldr	r2, [pc, #28]	; (bdc <GpioInterruptCallback()+0x74>)
     bbe:	f083 0302 	eor.w	r3, r3, #2
     bc2:	6153      	str	r3, [r2, #20]
    lpc17xx::LPC_GPIOINT->IO2IntClr |= 1;
     bc4:	4b04      	ldr	r3, [pc, #16]	; (bd8 <GpioInterruptCallback()+0x70>)
     bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     bc8:	4a03      	ldr	r2, [pc, #12]	; (bd8 <GpioInterruptCallback()+0x70>)
     bca:	f043 0301 	orr.w	r3, r3, #1
     bce:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  
  
}
     bd0:	bf00      	nop
     bd2:	46bd      	mov	sp, r7
     bd4:	bc80      	pop	{r7}
     bd6:	4770      	bx	lr
     bd8:	40028080 	.word	0x40028080
     bdc:	2009c020 	.word	0x2009c020

00000be0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
     be0:	b590      	push	{r4, r7, lr}
     be2:	b087      	sub	sp, #28
     be4:	af00      	add	r7, sp, #0
     be6:	60f8      	str	r0, [r7, #12]
     be8:	60b9      	str	r1, [r7, #8]
     bea:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	cb18      	ldmia	r3, {r3, r4}
     bf0:	1c59      	adds	r1, r3, #1
     bf2:	f144 0200 	adc.w	r2, r4, #0
     bf6:	68b8      	ldr	r0, [r7, #8]
     bf8:	e9c0 1200 	strd	r1, r2, [r0]
     bfc:	e9c7 3404 	strd	r3, r4, [r7, #16]
     c00:	f107 0310 	add.w	r3, r7, #16
     c04:	4619      	mov	r1, r3
     c06:	68f8      	ldr	r0, [r7, #12]
     c08:	f7ff fce1 	bl	5ce <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     c0c:	68f8      	ldr	r0, [r7, #12]
     c0e:	371c      	adds	r7, #28
     c10:	46bd      	mov	sp, r7
     c12:	bd90      	pop	{r4, r7, pc}

00000c14 <std::chrono::duration_values<long long>::max()>:
	max()
     c14:	b598      	push	{r3, r4, r7, lr}
     c16:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
     c18:	f7ff fcce 	bl	5b8 <std::numeric_limits<long long>::max()>
     c1c:	4603      	mov	r3, r0
     c1e:	460c      	mov	r4, r1
     c20:	4618      	mov	r0, r3
     c22:	4621      	mov	r1, r4
     c24:	bd98      	pop	{r3, r4, r7, pc}

00000c26 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
     c26:	b590      	push	{r4, r7, lr}
     c28:	b085      	sub	sp, #20
     c2a:	af00      	add	r7, sp, #0
     c2c:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
     c2e:	f7ff fff1 	bl	c14 <std::chrono::duration_values<long long>::max()>
     c32:	4603      	mov	r3, r0
     c34:	460c      	mov	r4, r1
     c36:	e9c7 3402 	strd	r3, r4, [r7, #8]
     c3a:	f107 0308 	add.w	r3, r7, #8
     c3e:	4619      	mov	r1, r3
     c40:	6878      	ldr	r0, [r7, #4]
     c42:	f7ff fcc4 	bl	5ce <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
     c46:	6878      	ldr	r0, [r7, #4]
     c48:	3714      	adds	r7, #20
     c4a:	46bd      	mov	sp, r7
     c4c:	bd90      	pop	{r4, r7, pc}

00000c4e <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
     c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
     c50:	b087      	sub	sp, #28
     c52:	af00      	add	r7, sp, #0
     c54:	6078      	str	r0, [r7, #4]
     c56:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	cb18      	ldmia	r3, {r3, r4}
     c5c:	e9c7 3402 	strd	r3, r4, [r7, #8]
     c60:	f107 0308 	add.w	r3, r7, #8
     c64:	4618      	mov	r0, r3
     c66:	f7ff fea7 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     c6a:	4605      	mov	r5, r0
     c6c:	460e      	mov	r6, r1
     c6e:	683b      	ldr	r3, [r7, #0]
     c70:	cb18      	ldmia	r3, {r3, r4}
     c72:	e9c7 3404 	strd	r3, r4, [r7, #16]
     c76:	f107 0310 	add.w	r3, r7, #16
     c7a:	4618      	mov	r0, r3
     c7c:	f7ff fe9c 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     c80:	4603      	mov	r3, r0
     c82:	460c      	mov	r4, r1
     c84:	42a6      	cmp	r6, r4
     c86:	bf06      	itte	eq
     c88:	429d      	cmpeq	r5, r3
     c8a:	2301      	moveq	r3, #1
     c8c:	2300      	movne	r3, #0
     c8e:	b2db      	uxtb	r3, r3
      }
     c90:	4618      	mov	r0, r3
     c92:	371c      	adds	r7, #28
     c94:	46bd      	mov	sp, r7
     c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c98 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	b08b      	sub	sp, #44	; 0x2c
     c9c:	af00      	add	r7, sp, #0
     c9e:	60f8      	str	r0, [r7, #12]
     ca0:	60b9      	str	r1, [r7, #8]
     ca2:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
     ca4:	68bb      	ldr	r3, [r7, #8]
     ca6:	cb18      	ldmia	r3, {r3, r4}
     ca8:	e9c7 3406 	strd	r3, r4, [r7, #24]
     cac:	f107 0318 	add.w	r3, r7, #24
     cb0:	4618      	mov	r0, r3
     cb2:	f7ff fe81 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     cb6:	4605      	mov	r5, r0
     cb8:	460e      	mov	r6, r1
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	cb18      	ldmia	r3, {r3, r4}
     cbe:	e9c7 3408 	strd	r3, r4, [r7, #32]
     cc2:	f107 0320 	add.w	r3, r7, #32
     cc6:	4618      	mov	r0, r3
     cc8:	f7ff fe76 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     ccc:	460a      	mov	r2, r1
     cce:	4601      	mov	r1, r0
     cd0:	194b      	adds	r3, r1, r5
     cd2:	eb42 0406 	adc.w	r4, r2, r6
     cd6:	e9c7 3404 	strd	r3, r4, [r7, #16]
     cda:	f107 0310 	add.w	r3, r7, #16
     cde:	4619      	mov	r1, r3
     ce0:	68f8      	ldr	r0, [r7, #12]
     ce2:	f7ff fc74 	bl	5ce <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
     ce6:	68f8      	ldr	r0, [r7, #12]
     ce8:	372c      	adds	r7, #44	; 0x2c
     cea:	46bd      	mov	sp, r7
     cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cee <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
     cee:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf0:	b087      	sub	sp, #28
     cf2:	af00      	add	r7, sp, #0
     cf4:	6078      	str	r0, [r7, #4]
     cf6:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	cb18      	ldmia	r3, {r3, r4}
     cfc:	e9c7 3402 	strd	r3, r4, [r7, #8]
     d00:	f107 0308 	add.w	r3, r7, #8
     d04:	4618      	mov	r0, r3
     d06:	f7ff fe57 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d0a:	4605      	mov	r5, r0
     d0c:	460e      	mov	r6, r1
     d0e:	683b      	ldr	r3, [r7, #0]
     d10:	cb18      	ldmia	r3, {r3, r4}
     d12:	e9c7 3404 	strd	r3, r4, [r7, #16]
     d16:	f107 0310 	add.w	r3, r7, #16
     d1a:	4618      	mov	r0, r3
     d1c:	f7ff fe4c 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     d20:	4603      	mov	r3, r0
     d22:	460c      	mov	r4, r1
     d24:	429d      	cmp	r5, r3
     d26:	eb76 0304 	sbcs.w	r3, r6, r4
     d2a:	bfb4      	ite	lt
     d2c:	2301      	movlt	r3, #1
     d2e:	2300      	movge	r3, #0
     d30:	b2db      	uxtb	r3, r3
      }
     d32:	4618      	mov	r0, r3
     d34:	371c      	adds	r7, #28
     d36:	46bd      	mov	sp, r7
     d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3a:	Address 0x0000000000000d3a is out of bounds.


00000d3c <__static_initialization_and_destruction_0(int, int)>:
     d3c:	b580      	push	{r7, lr}
     d3e:	b082      	sub	sp, #8
     d40:	af00      	add	r7, sp, #0
     d42:	6078      	str	r0, [r7, #4]
     d44:	6039      	str	r1, [r7, #0]
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	2b01      	cmp	r3, #1
     d4a:	d11d      	bne.n	d88 <__static_initialization_and_destruction_0(int, int)+0x4c>
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d52:	4293      	cmp	r3, r2
     d54:	d118      	bne.n	d88 <__static_initialization_and_destruction_0(int, int)+0x4c>
     d56:	4b0e      	ldr	r3, [pc, #56]	; (d90 <__static_initialization_and_destruction_0(int, int)+0x54>)
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	f003 0301 	and.w	r3, r3, #1
     d5e:	2b00      	cmp	r3, #0
     d60:	d105      	bne.n	d6e <__static_initialization_and_destruction_0(int, int)+0x32>
     d62:	4b0b      	ldr	r3, [pc, #44]	; (d90 <__static_initialization_and_destruction_0(int, int)+0x54>)
     d64:	2201      	movs	r2, #1
     d66:	601a      	str	r2, [r3, #0]
     d68:	4a0a      	ldr	r2, [pc, #40]	; (d94 <__static_initialization_and_destruction_0(int, int)+0x58>)
     d6a:	4b0b      	ldr	r3, [pc, #44]	; (d98 <__static_initialization_and_destruction_0(int, int)+0x5c>)
     d6c:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
     d6e:	4b0b      	ldr	r3, [pc, #44]	; (d9c <__static_initialization_and_destruction_0(int, int)+0x60>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	f003 0301 	and.w	r3, r3, #1
     d76:	2b00      	cmp	r3, #0
     d78:	d106      	bne.n	d88 <__static_initialization_and_destruction_0(int, int)+0x4c>
     d7a:	4b08      	ldr	r3, [pc, #32]	; (d9c <__static_initialization_and_destruction_0(int, int)+0x60>)
     d7c:	2201      	movs	r2, #1
     d7e:	601a      	str	r2, [r3, #0]
     d80:	4b07      	ldr	r3, [pc, #28]	; (da0 <__static_initialization_and_destruction_0(int, int)+0x64>)
     d82:	4618      	mov	r0, r3
     d84:	f7ff fce8 	bl	758 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
     d88:	bf00      	nop
     d8a:	3708      	adds	r7, #8
     d8c:	46bd      	mov	sp, r7
     d8e:	bd80      	pop	{r7, pc}
     d90:	2007c140 	.word	0x2007c140
     d94:	4002c000 	.word	0x4002c000
     d98:	2007c13c 	.word	0x2007c13c
     d9c:	2007c250 	.word	0x2007c250
     da0:	2007c150 	.word	0x2007c150

00000da4 <_GLOBAL__sub_I_main>:
     da4:	b580      	push	{r7, lr}
     da6:	af00      	add	r7, sp, #0
     da8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     dac:	2001      	movs	r0, #1
     dae:	f7ff ffc5 	bl	d3c <__static_initialization_and_destruction_0(int, int)>
     db2:	bd80      	pop	{r7, pc}

00000db4 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     db4:	b580      	push	{r7, lr}
     db6:	b086      	sub	sp, #24
     db8:	af02      	add	r7, sp, #8
     dba:	6078      	str	r0, [r7, #4]
     dbc:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     dbe:	683a      	ldr	r2, [r7, #0]
     dc0:	f107 030c 	add.w	r3, r7, #12
     dc4:	9300      	str	r3, [sp, #0]
     dc6:	2300      	movs	r3, #0
     dc8:	2100      	movs	r1, #0
     dca:	6878      	ldr	r0, [r7, #4]
     dcc:	f004 fc04 	bl	55d8 <_Unwind_VRS_Get>
      return val;
     dd0:	68fb      	ldr	r3, [r7, #12]
    }
     dd2:	4618      	mov	r0, r3
     dd4:	3710      	adds	r7, #16
     dd6:	46bd      	mov	sp, r7
     dd8:	bd80      	pop	{r7, pc}
     dda:	Address 0x0000000000000dda is out of bounds.


00000ddc <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     ddc:	b480      	push	{r7}
     dde:	b085      	sub	sp, #20
     de0:	af00      	add	r7, sp, #0
     de2:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     de4:	4b09      	ldr	r3, [pc, #36]	; (e0c <sjsu::build::Stringify(sjsu::build::Target)+0x30>)
     de6:	60fb      	str	r3, [r7, #12]
  switch (target)
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	2b00      	cmp	r3, #0
     dec:	d002      	beq.n	df4 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     dee:	2b01      	cmp	r3, #1
     df0:	d003      	beq.n	dfa <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     df2:	e005      	b.n	e00 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     df4:	4b06      	ldr	r3, [pc, #24]	; (e10 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     df6:	60fb      	str	r3, [r7, #12]
     df8:	e002      	b.n	e00 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     dfa:	4b06      	ldr	r3, [pc, #24]	; (e14 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     dfc:	60fb      	str	r3, [r7, #12]
     dfe:	bf00      	nop
  }
  return result;
     e00:	68fb      	ldr	r3, [r7, #12]
}
     e02:	4618      	mov	r0, r3
     e04:	3714      	adds	r7, #20
     e06:	46bd      	mov	sp, r7
     e08:	bc80      	pop	{r7}
     e0a:	4770      	bx	lr
     e0c:	000063e8 	.word	0x000063e8
     e10:	000063f0 	.word	0x000063f0
     e14:	000063fc 	.word	0x000063fc

00000e18 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     e18:	b580      	push	{r7, lr}
     e1a:	b084      	sub	sp, #16
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
     e20:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     e22:	683b      	ldr	r3, [r7, #0]
     e24:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     e26:	210f      	movs	r1, #15
     e28:	6878      	ldr	r0, [r7, #4]
     e2a:	f7ff ffc3 	bl	db4 <_Unwind_GetGR>
     e2e:	4603      	mov	r3, r0
     e30:	f023 0301 	bic.w	r3, r3, #1
     e34:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	6819      	ldr	r1, [r3, #0]
     e3a:	68bb      	ldr	r3, [r7, #8]
     e3c:	3b04      	subs	r3, #4
     e3e:	461a      	mov	r2, r3
     e40:	4806      	ldr	r0, [pc, #24]	; (e5c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     e42:	f001 fb75 	bl	2530 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	1c5a      	adds	r2, r3, #1
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     e50:	2300      	movs	r3, #0
}
     e52:	4618      	mov	r0, r3
     e54:	3710      	adds	r7, #16
     e56:	46bd      	mov	sp, r7
     e58:	bd80      	pop	{r7, pc}
     e5a:	bf00      	nop
     e5c:	00006408 	.word	0x00006408

00000e60 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     e60:	b580      	push	{r7, lr}
     e62:	b084      	sub	sp, #16
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     e6a:	683b      	ldr	r3, [r7, #0]
     e6c:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     e6e:	210f      	movs	r1, #15
     e70:	6878      	ldr	r0, [r7, #4]
     e72:	f7ff ff9f 	bl	db4 <_Unwind_GetGR>
     e76:	4603      	mov	r3, r0
     e78:	f023 0301 	bic.w	r3, r3, #1
     e7c:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     e7e:	68bb      	ldr	r3, [r7, #8]
     e80:	3b04      	subs	r3, #4
     e82:	4619      	mov	r1, r3
     e84:	4806      	ldr	r0, [pc, #24]	; (ea0 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     e86:	f001 fb53 	bl	2530 <printf>
  (*depth)++;
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	1c5a      	adds	r2, r3, #1
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     e94:	2300      	movs	r3, #0
}
     e96:	4618      	mov	r0, r3
     e98:	3710      	adds	r7, #16
     e9a:	46bd      	mov	sp, r7
     e9c:	bd80      	pop	{r7, pc}
     e9e:	bf00      	nop
     ea0:	00006418 	.word	0x00006418

00000ea4 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b084      	sub	sp, #16
     ea8:	af00      	add	r7, sp, #0
     eaa:	4603      	mov	r3, r0
     eac:	6039      	str	r1, [r7, #0]
     eae:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     eb0:	2300      	movs	r3, #0
     eb2:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     eb4:	f107 030c 	add.w	r3, r7, #12
     eb8:	4619      	mov	r1, r3
     eba:	481a      	ldr	r0, [pc, #104]	; (f24 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     ebc:	f004 ff82 	bl	5dc4 <_Unwind_Backtrace>
    if (final_address)
     ec0:	683b      	ldr	r3, [r7, #0]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d005      	beq.n	ed2 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	683a      	ldr	r2, [r7, #0]
     eca:	4619      	mov	r1, r3
     ecc:	4816      	ldr	r0, [pc, #88]	; (f28 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     ece:	f001 fb2f 	bl	2530 <printf>
    }

    if (show_make_command)
     ed2:	79fb      	ldrb	r3, [r7, #7]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d020      	beq.n	f1a <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     ed8:	4814      	ldr	r0, [pc, #80]	; (f2c <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     eda:	f001 fb29 	bl	2530 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     ede:	4814      	ldr	r0, [pc, #80]	; (f30 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     ee0:	f001 fb26 	bl	2530 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     ee4:	2000      	movs	r0, #0
     ee6:	f7ff ff79 	bl	ddc <sjsu::build::Stringify(sjsu::build::Target)>
     eea:	4603      	mov	r3, r0
     eec:	4619      	mov	r1, r3
     eee:	4811      	ldr	r0, [pc, #68]	; (f34 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     ef0:	f001 fb1e 	bl	2530 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     ef4:	f107 030c 	add.w	r3, r7, #12
     ef8:	4619      	mov	r1, r3
     efa:	480f      	ldr	r0, [pc, #60]	; (f38 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     efc:	f004 ff62 	bl	5dc4 <_Unwind_Backtrace>
      if (final_address)
     f00:	683b      	ldr	r3, [r7, #0]
     f02:	2b00      	cmp	r3, #0
     f04:	d003      	beq.n	f0e <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     f06:	6839      	ldr	r1, [r7, #0]
     f08:	480c      	ldr	r0, [pc, #48]	; (f3c <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     f0a:	f001 fb11 	bl	2530 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     f0e:	480c      	ldr	r0, [pc, #48]	; (f40 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     f10:	f001 fb0e 	bl	2530 <printf>
      printf(
     f14:	480b      	ldr	r0, [pc, #44]	; (f44 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     f16:	f000 f9e1 	bl	12dc <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     f1a:	bf00      	nop
     f1c:	3710      	adds	r7, #16
     f1e:	46bd      	mov	sp, r7
     f20:	bd80      	pop	{r7, pc}
     f22:	bf00      	nop
     f24:	00000e19 	.word	0x00000e19
     f28:	00006420 	.word	0x00006420
     f2c:	0000642c 	.word	0x0000642c
     f30:	00006464 	.word	0x00006464
     f34:	00006470 	.word	0x00006470
     f38:	00000e61 	.word	0x00000e61
     f3c:	0000648c 	.word	0x0000648c
     f40:	00006494 	.word	0x00006494
     f44:	0000649c 	.word	0x0000649c

00000f48 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
     f48:	b480      	push	{r7}
     f4a:	b087      	sub	sp, #28
     f4c:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
     f4e:	2300      	movs	r3, #0
     f50:	617b      	str	r3, [r7, #20]
     f52:	697a      	ldr	r2, [r7, #20]
     f54:	4613      	mov	r3, r2
     f56:	005b      	lsls	r3, r3, #1
     f58:	4413      	add	r3, r2
     f5a:	009b      	lsls	r3, r3, #2
     f5c:	4a1e      	ldr	r2, [pc, #120]	; (fd8 <sjsu::InitializeDataSection()+0x90>)
     f5e:	4413      	add	r3, r2
     f60:	4a1e      	ldr	r2, [pc, #120]	; (fdc <sjsu::InitializeDataSection()+0x94>)
     f62:	4293      	cmp	r3, r2
     f64:	d233      	bcs.n	fce <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
     f66:	491c      	ldr	r1, [pc, #112]	; (fd8 <sjsu::InitializeDataSection()+0x90>)
     f68:	697a      	ldr	r2, [r7, #20]
     f6a:	4613      	mov	r3, r2
     f6c:	005b      	lsls	r3, r3, #1
     f6e:	4413      	add	r3, r2
     f70:	009b      	lsls	r3, r3, #2
     f72:	440b      	add	r3, r1
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
     f78:	4917      	ldr	r1, [pc, #92]	; (fd8 <sjsu::InitializeDataSection()+0x90>)
     f7a:	697a      	ldr	r2, [r7, #20]
     f7c:	4613      	mov	r3, r2
     f7e:	005b      	lsls	r3, r3, #1
     f80:	4413      	add	r3, r2
     f82:	009b      	lsls	r3, r3, #2
     f84:	440b      	add	r3, r1
     f86:	685b      	ldr	r3, [r3, #4]
     f88:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
     f8a:	4913      	ldr	r1, [pc, #76]	; (fd8 <sjsu::InitializeDataSection()+0x90>)
     f8c:	697a      	ldr	r2, [r7, #20]
     f8e:	4613      	mov	r3, r2
     f90:	005b      	lsls	r3, r3, #1
     f92:	4413      	add	r3, r2
     f94:	009b      	lsls	r3, r3, #2
     f96:	440b      	add	r3, r1
     f98:	3308      	adds	r3, #8
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
     f9e:	2300      	movs	r3, #0
     fa0:	613b      	str	r3, [r7, #16]
     fa2:	693a      	ldr	r2, [r7, #16]
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	429a      	cmp	r2, r3
     fa8:	d20d      	bcs.n	fc6 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
     faa:	693b      	ldr	r3, [r7, #16]
     fac:	009b      	lsls	r3, r3, #2
     fae:	68fa      	ldr	r2, [r7, #12]
     fb0:	441a      	add	r2, r3
     fb2:	693b      	ldr	r3, [r7, #16]
     fb4:	009b      	lsls	r3, r3, #2
     fb6:	68b9      	ldr	r1, [r7, #8]
     fb8:	440b      	add	r3, r1
     fba:	6812      	ldr	r2, [r2, #0]
     fbc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
     fbe:	693b      	ldr	r3, [r7, #16]
     fc0:	3301      	adds	r3, #1
     fc2:	613b      	str	r3, [r7, #16]
     fc4:	e7ed      	b.n	fa2 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
     fc6:	697b      	ldr	r3, [r7, #20]
     fc8:	3301      	adds	r3, #1
     fca:	617b      	str	r3, [r7, #20]
     fcc:	e7c1      	b.n	f52 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
     fce:	bf00      	nop
     fd0:	371c      	adds	r7, #28
     fd2:	46bd      	mov	sp, r7
     fd4:	bc80      	pop	{r7}
     fd6:	4770      	bx	lr
     fd8:	000000cc 	.word	0x000000cc
     fdc:	000000d8 	.word	0x000000d8

00000fe0 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
     fe0:	b480      	push	{r7}
     fe2:	b085      	sub	sp, #20
     fe4:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
     fe6:	2300      	movs	r3, #0
     fe8:	60fb      	str	r3, [r7, #12]
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	00db      	lsls	r3, r3, #3
     fee:	4a14      	ldr	r2, [pc, #80]	; (1040 <sjsu::InitializeBssSection()+0x60>)
     ff0:	4413      	add	r3, r2
     ff2:	4a14      	ldr	r2, [pc, #80]	; (1044 <sjsu::InitializeBssSection()+0x64>)
     ff4:	4293      	cmp	r3, r2
     ff6:	d21e      	bcs.n	1036 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
     ff8:	4a11      	ldr	r2, [pc, #68]	; (1040 <sjsu::InitializeBssSection()+0x60>)
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1000:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    1002:	4a0f      	ldr	r2, [pc, #60]	; (1040 <sjsu::InitializeBssSection()+0x60>)
    1004:	68fb      	ldr	r3, [r7, #12]
    1006:	00db      	lsls	r3, r3, #3
    1008:	4413      	add	r3, r2
    100a:	685b      	ldr	r3, [r3, #4]
    100c:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    100e:	2300      	movs	r3, #0
    1010:	60bb      	str	r3, [r7, #8]
    1012:	68ba      	ldr	r2, [r7, #8]
    1014:	683b      	ldr	r3, [r7, #0]
    1016:	429a      	cmp	r2, r3
    1018:	d209      	bcs.n	102e <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    101a:	68bb      	ldr	r3, [r7, #8]
    101c:	009b      	lsls	r3, r3, #2
    101e:	687a      	ldr	r2, [r7, #4]
    1020:	4413      	add	r3, r2
    1022:	2200      	movs	r2, #0
    1024:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1026:	68bb      	ldr	r3, [r7, #8]
    1028:	3301      	adds	r3, #1
    102a:	60bb      	str	r3, [r7, #8]
    102c:	e7f1      	b.n	1012 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	3301      	adds	r3, #1
    1032:	60fb      	str	r3, [r7, #12]
    1034:	e7d9      	b.n	fea <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    1036:	bf00      	nop
    1038:	3714      	adds	r7, #20
    103a:	46bd      	mov	sp, r7
    103c:	bc80      	pop	{r7}
    103e:	4770      	bx	lr
    1040:	000000d8 	.word	0x000000d8
    1044:	000000e0 	.word	0x000000e0

00001048 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    1048:	b580      	push	{r7, lr}
    104a:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    104c:	f7ff ff7c 	bl	f48 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    1050:	f7ff ffc6 	bl	fe0 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    1054:	f005 f88e 	bl	6174 <__libc_init_array>
}
    1058:	bf00      	nop
    105a:	bd80      	pop	{r7, pc}

0000105c <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    105c:	b580      	push	{r7, lr}
    105e:	b08c      	sub	sp, #48	; 0x30
    1060:	af02      	add	r7, sp, #8
    1062:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	685b      	ldr	r3, [r3, #4]
    106e:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	689b      	ldr	r3, [r3, #8]
    1074:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	68db      	ldr	r3, [r3, #12]
    107a:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	691b      	ldr	r3, [r3, #16]
    1080:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	695b      	ldr	r3, [r3, #20]
    1086:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	699b      	ldr	r3, [r3, #24]
    108c:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	69db      	ldr	r3, [r3, #28]
    1092:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    1094:	480d      	ldr	r0, [pc, #52]	; (10cc <GetRegistersFromStack+0x70>)
    1096:	f001 fa4b 	bl	2530 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    109a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    109c:	6a3a      	ldr	r2, [r7, #32]
    109e:	69f8      	ldr	r0, [r7, #28]
    10a0:	69bb      	ldr	r3, [r7, #24]
    10a2:	9300      	str	r3, [sp, #0]
    10a4:	4603      	mov	r3, r0
    10a6:	480a      	ldr	r0, [pc, #40]	; (10d0 <GetRegistersFromStack+0x74>)
    10a8:	f001 fa42 	bl	2530 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    10ac:	6979      	ldr	r1, [r7, #20]
    10ae:	693a      	ldr	r2, [r7, #16]
    10b0:	68f8      	ldr	r0, [r7, #12]
    10b2:	68bb      	ldr	r3, [r7, #8]
    10b4:	9300      	str	r3, [sp, #0]
    10b6:	4603      	mov	r3, r0
    10b8:	4806      	ldr	r0, [pc, #24]	; (10d4 <GetRegistersFromStack+0x78>)
    10ba:	f001 fa39 	bl	2530 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	4619      	mov	r1, r3
    10c2:	2001      	movs	r0, #1
    10c4:	f7ff feee 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    10c8:	e7fe      	b.n	10c8 <GetRegistersFromStack+0x6c>
    10ca:	bf00      	nop
    10cc:	00006a7c 	.word	0x00006a7c
    10d0:	00006aa8 	.word	0x00006aa8
    10d4:	00006adc 	.word	0x00006adc

000010d8 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    10d8:	b480      	push	{r7}
    10da:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    10dc:	f01e 0f04 	tst.w	lr, #4
    10e0:	bf0c      	ite	eq
    10e2:	f3ef 8008 	mrseq	r0, MSP
    10e6:	f3ef 8009 	mrsne	r0, PSP
    10ea:	6981      	ldr	r1, [r0, #24]
    10ec:	4a00      	ldr	r2, [pc, #0]	; (10f0 <handler2_address_const>)
    10ee:	4710      	bx	r2

000010f0 <handler2_address_const>:
    10f0:	0000105d 	.word	0x0000105d
    }
  }
    10f4:	bf00      	nop
    10f6:	46bd      	mov	sp, r7
    10f8:	bc80      	pop	{r7}
    10fa:	4770      	bx	lr

000010fc <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    10fc:	b580      	push	{r7, lr}
    10fe:	b084      	sub	sp, #16
    1100:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    1102:	4b16      	ldr	r3, [pc, #88]	; (115c <ArmResetHandler+0x60>)
    1104:	60fb      	str	r3, [r7, #12]
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    110a:	683b      	ldr	r3, [r7, #0]
    110c:	f383 8809 	msr	PSP, r3
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    111a:	f7ff ff95 	bl	1048 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    111e:	4b10      	ldr	r3, [pc, #64]	; (1160 <ArmResetHandler+0x64>)
    1120:	681b      	ldr	r3, [r3, #0]
    1122:	f003 0301 	and.w	r3, r3, #1
    1126:	2b00      	cmp	r3, #0
    1128:	bf14      	ite	ne
    112a:	2301      	movne	r3, #1
    112c:	2300      	moveq	r3, #0
    112e:	b2db      	uxtb	r3, r3
    1130:	2b00      	cmp	r3, #0
    1132:	d001      	beq.n	1138 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    1134:	f001 fa1e 	bl	2574 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    1138:	f002 ff88 	bl	404c <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    113c:	f7ff fc48 	bl	9d0 <main>
    1140:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    1142:	68bb      	ldr	r3, [r7, #8]
    1144:	2b00      	cmp	r3, #0
    1146:	db04      	blt.n	1152 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    1148:	68b9      	ldr	r1, [r7, #8]
    114a:	4806      	ldr	r0, [pc, #24]	; (1164 <ArmResetHandler+0x68>)
    114c:	f001 f9f0 	bl	2530 <printf>
    1150:	e003      	b.n	115a <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    1152:	68b9      	ldr	r1, [r7, #8]
    1154:	4804      	ldr	r0, [pc, #16]	; (1168 <ArmResetHandler+0x6c>)
    1156:	f001 f9eb 	bl	2530 <printf>
    115a:	e7fe      	b.n	115a <ArmResetHandler+0x5e>
    115c:	20083fe0 	.word	0x20083fe0
    1160:	e000edf0 	.word	0xe000edf0
    1164:	00006b14 	.word	0x00006b14
    1168:	00006b48 	.word	0x00006b48

0000116c <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	6039      	str	r1, [r7, #0]
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	2b01      	cmp	r3, #1
    117a:	d111      	bne.n	11a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    117c:	683b      	ldr	r3, [r7, #0]
    117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1182:	4293      	cmp	r3, r2
    1184:	d10c      	bne.n	11a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    1186:	4b08      	ldr	r3, [pc, #32]	; (11a8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1188:	681b      	ldr	r3, [r3, #0]
    118a:	f003 0301 	and.w	r3, r3, #1
    118e:	2b00      	cmp	r3, #0
    1190:	d106      	bne.n	11a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    1192:	4b05      	ldr	r3, [pc, #20]	; (11a8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1194:	2201      	movs	r2, #1
    1196:	601a      	str	r2, [r3, #0]
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <__static_initialization_and_destruction_0(int, int)+0x40>)
    119a:	4618      	mov	r0, r3
    119c:	f7ff fadc 	bl	758 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    11a0:	bf00      	nop
    11a2:	3708      	adds	r7, #8
    11a4:	46bd      	mov	sp, r7
    11a6:	bd80      	pop	{r7, pc}
    11a8:	2007c250 	.word	0x2007c250
    11ac:	2007c150 	.word	0x2007c150

000011b0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    11b0:	b580      	push	{r7, lr}
    11b2:	af00      	add	r7, sp, #0
    11b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    11b8:	2001      	movs	r0, #1
    11ba:	f7ff ffd7 	bl	116c <__static_initialization_and_destruction_0(int, int)>
    11be:	bd80      	pop	{r7, pc}

000011c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b084      	sub	sp, #16
    11c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    11c6:	4b28      	ldr	r3, [pc, #160]	; (1268 <vTaskSwitchContext+0xa8>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d003      	beq.n	11d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    11ce:	4b27      	ldr	r3, [pc, #156]	; (126c <vTaskSwitchContext+0xac>)
    11d0:	2201      	movs	r2, #1
    11d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    11d4:	e043      	b.n	125e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    11d6:	4b25      	ldr	r3, [pc, #148]	; (126c <vTaskSwitchContext+0xac>)
    11d8:	2200      	movs	r2, #0
    11da:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    11dc:	f002 ff2c 	bl	4038 <ThreadRuntimeCounter>
    11e0:	4602      	mov	r2, r0
    11e2:	4b23      	ldr	r3, [pc, #140]	; (1270 <vTaskSwitchContext+0xb0>)
    11e4:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    11e6:	4b22      	ldr	r3, [pc, #136]	; (1270 <vTaskSwitchContext+0xb0>)
    11e8:	681a      	ldr	r2, [r3, #0]
    11ea:	4b22      	ldr	r3, [pc, #136]	; (1274 <vTaskSwitchContext+0xb4>)
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	429a      	cmp	r2, r3
    11f0:	d909      	bls.n	1206 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    11f2:	4b21      	ldr	r3, [pc, #132]	; (1278 <vTaskSwitchContext+0xb8>)
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
    11f8:	4a1d      	ldr	r2, [pc, #116]	; (1270 <vTaskSwitchContext+0xb0>)
    11fa:	6810      	ldr	r0, [r2, #0]
    11fc:	4a1d      	ldr	r2, [pc, #116]	; (1274 <vTaskSwitchContext+0xb4>)
    11fe:	6812      	ldr	r2, [r2, #0]
    1200:	1a82      	subs	r2, r0, r2
    1202:	440a      	add	r2, r1
    1204:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    1206:	4b1a      	ldr	r3, [pc, #104]	; (1270 <vTaskSwitchContext+0xb0>)
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	4a1a      	ldr	r2, [pc, #104]	; (1274 <vTaskSwitchContext+0xb4>)
    120c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    120e:	4b1b      	ldr	r3, [pc, #108]	; (127c <vTaskSwitchContext+0xbc>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	fab3 f383 	clz	r3, r3
    121a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    121c:	78fb      	ldrb	r3, [r7, #3]
    121e:	f1c3 031f 	rsb	r3, r3, #31
    1222:	60fb      	str	r3, [r7, #12]
    1224:	68fa      	ldr	r2, [r7, #12]
    1226:	4613      	mov	r3, r2
    1228:	009b      	lsls	r3, r3, #2
    122a:	4413      	add	r3, r2
    122c:	009b      	lsls	r3, r3, #2
    122e:	4a14      	ldr	r2, [pc, #80]	; (1280 <vTaskSwitchContext+0xc0>)
    1230:	4413      	add	r3, r2
    1232:	60bb      	str	r3, [r7, #8]
    1234:	68bb      	ldr	r3, [r7, #8]
    1236:	685b      	ldr	r3, [r3, #4]
    1238:	685a      	ldr	r2, [r3, #4]
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	605a      	str	r2, [r3, #4]
    123e:	68bb      	ldr	r3, [r7, #8]
    1240:	685a      	ldr	r2, [r3, #4]
    1242:	68bb      	ldr	r3, [r7, #8]
    1244:	3308      	adds	r3, #8
    1246:	429a      	cmp	r2, r3
    1248:	d104      	bne.n	1254 <vTaskSwitchContext+0x94>
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	685b      	ldr	r3, [r3, #4]
    124e:	685a      	ldr	r2, [r3, #4]
    1250:	68bb      	ldr	r3, [r7, #8]
    1252:	605a      	str	r2, [r3, #4]
    1254:	68bb      	ldr	r3, [r7, #8]
    1256:	685b      	ldr	r3, [r3, #4]
    1258:	68db      	ldr	r3, [r3, #12]
    125a:	4a07      	ldr	r2, [pc, #28]	; (1278 <vTaskSwitchContext+0xb8>)
    125c:	6013      	str	r3, [r2, #0]
}
    125e:	bf00      	nop
    1260:	3710      	adds	r7, #16
    1262:	46bd      	mov	sp, r7
    1264:	bd80      	pop	{r7, pc}
    1266:	bf00      	nop
    1268:	2007c2c4 	.word	0x2007c2c4
    126c:	2007c2c0 	.word	0x2007c2c0
    1270:	2007c2cc 	.word	0x2007c2cc
    1274:	2007c2c8 	.word	0x2007c2c8
    1278:	2007c254 	.word	0x2007c254
    127c:	2007c2bc 	.word	0x2007c2bc
    1280:	2007c258 	.word	0x2007c258

00001284 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    1284:	b480      	push	{r7}
    1286:	af00      	add	r7, sp, #0
    return 1;
    1288:	2301      	movs	r3, #1
  }
    128a:	4618      	mov	r0, r3
    128c:	46bd      	mov	sp, r7
    128e:	bc80      	pop	{r7}
    1290:	4770      	bx	lr

00001292 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    1292:	b480      	push	{r7}
    1294:	b083      	sub	sp, #12
    1296:	af00      	add	r7, sp, #0
    1298:	6078      	str	r0, [r7, #4]
    129a:	6039      	str	r1, [r7, #0]
    return -1;
    129c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    12a0:	4618      	mov	r0, r3
    12a2:	370c      	adds	r7, #12
    12a4:	46bd      	mov	sp, r7
    12a6:	bc80      	pop	{r7}
    12a8:	4770      	bx	lr
    12aa:	Address 0x00000000000012aa is out of bounds.


000012ac <_write>:
    heap_position += increment;
    return previous_heap_position;
  }
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    12ac:	b580      	push	{r7, lr}
    12ae:	b084      	sub	sp, #16
    12b0:	af00      	add	r7, sp, #0
    12b2:	60f8      	str	r0, [r7, #12]
    12b4:	60b9      	str	r1, [r7, #8]
    12b6:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	4619      	mov	r1, r3
    12bc:	68b8      	ldr	r0, [r7, #8]
    12be:	f001 f95f 	bl	2580 <trace_write>
    return sjsu::newlib::out(ptr, length);
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <_write+0x2c>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	687a      	ldr	r2, [r7, #4]
    12c8:	4611      	mov	r1, r2
    12ca:	68b8      	ldr	r0, [r7, #8]
    12cc:	4798      	blx	r3
    12ce:	4603      	mov	r3, r0
  }
    12d0:	4618      	mov	r0, r3
    12d2:	3710      	adds	r7, #16
    12d4:	46bd      	mov	sp, r7
    12d6:	bd80      	pop	{r7, pc}
    12d8:	2007c008 	.word	0x2007c008

000012dc <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    12dc:	b580      	push	{r7, lr}
    12de:	b084      	sub	sp, #16
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    12e4:	6878      	ldr	r0, [r7, #4]
    12e6:	f004 ffc1 	bl	626c <strlen>
    12ea:	4603      	mov	r3, r0
    12ec:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    12ee:	2300      	movs	r3, #0
    12f0:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    12f2:	68fa      	ldr	r2, [r7, #12]
    12f4:	6879      	ldr	r1, [r7, #4]
    12f6:	2000      	movs	r0, #0
    12f8:	f7ff ffd8 	bl	12ac <_write>
    12fc:	4602      	mov	r2, r0
    12fe:	68bb      	ldr	r3, [r7, #8]
    1300:	4413      	add	r3, r2
    1302:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    1304:	2201      	movs	r2, #1
    1306:	4906      	ldr	r1, [pc, #24]	; (1320 <puts+0x44>)
    1308:	2000      	movs	r0, #0
    130a:	f7ff ffcf 	bl	12ac <_write>
    130e:	4602      	mov	r2, r0
    1310:	68bb      	ldr	r3, [r7, #8]
    1312:	4413      	add	r3, r2
    1314:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    1316:	68bb      	ldr	r3, [r7, #8]
  }
    1318:	4618      	mov	r0, r3
    131a:	3710      	adds	r7, #16
    131c:	46bd      	mov	sp, r7
    131e:	bd80      	pop	{r7, pc}
    1320:	00006b7c 	.word	0x00006b7c

00001324 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    1324:	b480      	push	{r7}
    1326:	b083      	sub	sp, #12
    1328:	af00      	add	r7, sp, #0
    132a:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    132c:	bf00      	nop
    while (1)
    132e:	e7fd      	b.n	132c <_exit+0x8>

00001330 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    1330:	b580      	push	{r7, lr}
    1332:	b088      	sub	sp, #32
    1334:	af00      	add	r7, sp, #0
    1336:	60b9      	str	r1, [r7, #8]
    1338:	607a      	str	r2, [r7, #4]
    133a:	603b      	str	r3, [r7, #0]
    133c:	4603      	mov	r3, r0
    133e:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    1340:	23fe      	movs	r3, #254	; 0xfe
    1342:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    1344:	697a      	ldr	r2, [r7, #20]
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	fbb3 f1f2 	udiv	r1, r3, r2
    134c:	fb02 f201 	mul.w	r2, r2, r1
    1350:	1a9b      	subs	r3, r3, r2
    1352:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    1354:	68ba      	ldr	r2, [r7, #8]
    1356:	69fb      	ldr	r3, [r7, #28]
    1358:	4413      	add	r3, r2
    135a:	7bfa      	ldrb	r2, [r7, #15]
    135c:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    135e:	7bfb      	ldrb	r3, [r7, #15]
    1360:	2b00      	cmp	r3, #0
    1362:	d106      	bne.n	1372 <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    1364:	69fb      	ldr	r3, [r7, #28]
    1366:	461a      	mov	r2, r3
    1368:	68b9      	ldr	r1, [r7, #8]
    136a:	2001      	movs	r0, #1
    136c:	f7ff ff9e 	bl	12ac <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    1370:	e012      	b.n	1398 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    1372:	69fb      	ldr	r3, [r7, #28]
    1374:	1c5a      	adds	r2, r3, #1
    1376:	697b      	ldr	r3, [r7, #20]
    1378:	429a      	cmp	r2, r3
    137a:	d10d      	bne.n	1398 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    137c:	697b      	ldr	r3, [r7, #20]
    137e:	3301      	adds	r3, #1
    1380:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    1382:	68ba      	ldr	r2, [r7, #8]
    1384:	69bb      	ldr	r3, [r7, #24]
    1386:	4413      	add	r3, r2
    1388:	2200      	movs	r2, #0
    138a:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    138c:	69bb      	ldr	r3, [r7, #24]
    138e:	461a      	mov	r2, r3
    1390:	68b9      	ldr	r1, [r7, #8]
    1392:	2001      	movs	r0, #1
    1394:	f7ff ff8a 	bl	12ac <_write>
}
    1398:	bf00      	nop
    139a:	3720      	adds	r7, #32
    139c:	46bd      	mov	sp, r7
    139e:	bd80      	pop	{r7, pc}

000013a0 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    13a0:	b480      	push	{r7}
    13a2:	b085      	sub	sp, #20
    13a4:	af00      	add	r7, sp, #0
    13a6:	60b9      	str	r1, [r7, #8]
    13a8:	607a      	str	r2, [r7, #4]
    13aa:	603b      	str	r3, [r7, #0]
    13ac:	4603      	mov	r3, r0
    13ae:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    13b0:	bf00      	nop
    13b2:	3714      	adds	r7, #20
    13b4:	46bd      	mov	sp, r7
    13b6:	bc80      	pop	{r7}
    13b8:	4770      	bx	lr

000013ba <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    13ba:	b480      	push	{r7}
    13bc:	b085      	sub	sp, #20
    13be:	af00      	add	r7, sp, #0
    13c0:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	60fb      	str	r3, [r7, #12]
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d003      	beq.n	13d6 <_strlen(char const*)+0x1c>
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	3301      	adds	r3, #1
    13d2:	60fb      	str	r3, [r7, #12]
    13d4:	e7f7      	b.n	13c6 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    13d6:	68fa      	ldr	r2, [r7, #12]
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	1ad3      	subs	r3, r2, r3
}
    13dc:	4618      	mov	r0, r3
    13de:	3714      	adds	r7, #20
    13e0:	46bd      	mov	sp, r7
    13e2:	bc80      	pop	{r7}
    13e4:	4770      	bx	lr

000013e6 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    13e6:	b480      	push	{r7}
    13e8:	b083      	sub	sp, #12
    13ea:	af00      	add	r7, sp, #0
    13ec:	4603      	mov	r3, r0
    13ee:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    13f0:	79fb      	ldrb	r3, [r7, #7]
    13f2:	2b2f      	cmp	r3, #47	; 0x2f
    13f4:	d904      	bls.n	1400 <_is_digit(char)+0x1a>
    13f6:	79fb      	ldrb	r3, [r7, #7]
    13f8:	2b39      	cmp	r3, #57	; 0x39
    13fa:	d801      	bhi.n	1400 <_is_digit(char)+0x1a>
    13fc:	2301      	movs	r3, #1
    13fe:	e000      	b.n	1402 <_is_digit(char)+0x1c>
    1400:	2300      	movs	r3, #0
}
    1402:	4618      	mov	r0, r3
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	bc80      	pop	{r7}
    140a:	4770      	bx	lr

0000140c <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    140c:	b580      	push	{r7, lr}
    140e:	b084      	sub	sp, #16
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    1414:	2300      	movs	r3, #0
    1416:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	4618      	mov	r0, r3
    1420:	f7ff ffe1 	bl	13e6 <_is_digit(char)>
    1424:	4603      	mov	r3, r0
    1426:	2b00      	cmp	r3, #0
    1428:	d00f      	beq.n	144a <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    142a:	68fa      	ldr	r2, [r7, #12]
    142c:	4613      	mov	r3, r2
    142e:	009b      	lsls	r3, r3, #2
    1430:	4413      	add	r3, r2
    1432:	005b      	lsls	r3, r3, #1
    1434:	4618      	mov	r0, r3
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	1c59      	adds	r1, r3, #1
    143c:	687a      	ldr	r2, [r7, #4]
    143e:	6011      	str	r1, [r2, #0]
    1440:	781b      	ldrb	r3, [r3, #0]
    1442:	4403      	add	r3, r0
    1444:	3b30      	subs	r3, #48	; 0x30
    1446:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1448:	e7e6      	b.n	1418 <_atoi(char const**)+0xc>
  }
  return i;
    144a:	68fb      	ldr	r3, [r7, #12]
}
    144c:	4618      	mov	r0, r3
    144e:	3710      	adds	r7, #16
    1450:	46bd      	mov	sp, r7
    1452:	bd80      	pop	{r7, pc}

00001454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1454:	b590      	push	{r4, r7, lr}
    1456:	b089      	sub	sp, #36	; 0x24
    1458:	af00      	add	r7, sp, #0
    145a:	60f8      	str	r0, [r7, #12]
    145c:	60b9      	str	r1, [r7, #8]
    145e:	607a      	str	r2, [r7, #4]
    1460:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1468:	f003 0302 	and.w	r3, r3, #2
    146c:	2b00      	cmp	r3, #0
    146e:	d10e      	bne.n	148e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1474:	429a      	cmp	r2, r3
    1476:	d20a      	bcs.n	148e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    147a:	2b1f      	cmp	r3, #31
    147c:	d807      	bhi.n	148e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1480:	1c5a      	adds	r2, r3, #1
    1482:	637a      	str	r2, [r7, #52]	; 0x34
    1484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1486:	4413      	add	r3, r2
    1488:	2230      	movs	r2, #48	; 0x30
    148a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    148c:	e7eb      	b.n	1466 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    148e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1490:	f003 0302 	and.w	r3, r3, #2
    1494:	2b00      	cmp	r3, #0
    1496:	d113      	bne.n	14c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    149a:	f003 0301 	and.w	r3, r3, #1
    149e:	2b00      	cmp	r3, #0
    14a0:	d00e      	beq.n	14c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    14a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    14a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    14a6:	429a      	cmp	r2, r3
    14a8:	d20a      	bcs.n	14c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    14aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14ac:	2b1f      	cmp	r3, #31
    14ae:	d807      	bhi.n	14c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    14b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14b2:	1c5a      	adds	r2, r3, #1
    14b4:	637a      	str	r2, [r7, #52]	; 0x34
    14b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    14b8:	4413      	add	r3, r2
    14ba:	2230      	movs	r2, #48	; 0x30
    14bc:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    14be:	e7e6      	b.n	148e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    14c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14c2:	f003 0310 	and.w	r3, r3, #16
    14c6:	2b00      	cmp	r3, #0
    14c8:	d058      	beq.n	157c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    14ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    14d0:	2b00      	cmp	r3, #0
    14d2:	d116      	bne.n	1502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    14d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14d6:	2b00      	cmp	r3, #0
    14d8:	d013      	beq.n	1502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    14da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    14dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    14de:	429a      	cmp	r2, r3
    14e0:	d003      	beq.n	14ea <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    14e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    14e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    14e6:	429a      	cmp	r2, r3
    14e8:	d10b      	bne.n	1502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    14ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14ec:	3b01      	subs	r3, #1
    14ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    14f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14f2:	2b00      	cmp	r3, #0
    14f4:	d005      	beq.n	1502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    14f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14f8:	2b10      	cmp	r3, #16
    14fa:	d102      	bne.n	1502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    14fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14fe:	3b01      	subs	r3, #1
    1500:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1504:	2b10      	cmp	r3, #16
    1506:	d10f      	bne.n	1528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    150a:	f003 0320 	and.w	r3, r3, #32
    150e:	2b00      	cmp	r3, #0
    1510:	d10a      	bne.n	1528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1514:	2b1f      	cmp	r3, #31
    1516:	d807      	bhi.n	1528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    1518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    151a:	1c5a      	adds	r2, r3, #1
    151c:	637a      	str	r2, [r7, #52]	; 0x34
    151e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1520:	4413      	add	r3, r2
    1522:	2278      	movs	r2, #120	; 0x78
    1524:	701a      	strb	r2, [r3, #0]
    1526:	e01f      	b.n	1568 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    152a:	2b10      	cmp	r3, #16
    152c:	d10f      	bne.n	154e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    152e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1530:	f003 0320 	and.w	r3, r3, #32
    1534:	2b00      	cmp	r3, #0
    1536:	d00a      	beq.n	154e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    153a:	2b1f      	cmp	r3, #31
    153c:	d807      	bhi.n	154e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1540:	1c5a      	adds	r2, r3, #1
    1542:	637a      	str	r2, [r7, #52]	; 0x34
    1544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1546:	4413      	add	r3, r2
    1548:	2258      	movs	r2, #88	; 0x58
    154a:	701a      	strb	r2, [r3, #0]
    154c:	e00c      	b.n	1568 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    154e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1550:	2b02      	cmp	r3, #2
    1552:	d109      	bne.n	1568 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    1554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1556:	2b1f      	cmp	r3, #31
    1558:	d806      	bhi.n	1568 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    155c:	1c5a      	adds	r2, r3, #1
    155e:	637a      	str	r2, [r7, #52]	; 0x34
    1560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1562:	4413      	add	r3, r2
    1564:	2262      	movs	r2, #98	; 0x62
    1566:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    156a:	2b1f      	cmp	r3, #31
    156c:	d806      	bhi.n	157c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1570:	1c5a      	adds	r2, r3, #1
    1572:	637a      	str	r2, [r7, #52]	; 0x34
    1574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1576:	4413      	add	r3, r2
    1578:	2230      	movs	r2, #48	; 0x30
    157a:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    157e:	2b00      	cmp	r3, #0
    1580:	d014      	beq.n	15ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    1582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1586:	429a      	cmp	r2, r3
    1588:	d110      	bne.n	15ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    158a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    158e:	2b00      	cmp	r3, #0
    1590:	d109      	bne.n	15a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    1592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1594:	f003 0304 	and.w	r3, r3, #4
    1598:	2b00      	cmp	r3, #0
    159a:	d104      	bne.n	15a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    159c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    159e:	f003 0308 	and.w	r3, r3, #8
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    15a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15a8:	3b01      	subs	r3, #1
    15aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    15ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15ae:	2b1f      	cmp	r3, #31
    15b0:	d824      	bhi.n	15fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    15b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    15b6:	2b00      	cmp	r3, #0
    15b8:	d007      	beq.n	15ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    15ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15bc:	1c5a      	adds	r2, r3, #1
    15be:	637a      	str	r2, [r7, #52]	; 0x34
    15c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15c2:	4413      	add	r3, r2
    15c4:	222d      	movs	r2, #45	; 0x2d
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	e018      	b.n	15fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    15ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15cc:	f003 0304 	and.w	r3, r3, #4
    15d0:	2b00      	cmp	r3, #0
    15d2:	d007      	beq.n	15e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    15d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15d6:	1c5a      	adds	r2, r3, #1
    15d8:	637a      	str	r2, [r7, #52]	; 0x34
    15da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15dc:	4413      	add	r3, r2
    15de:	222b      	movs	r2, #43	; 0x2b
    15e0:	701a      	strb	r2, [r3, #0]
    15e2:	e00b      	b.n	15fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    15e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15e6:	f003 0308 	and.w	r3, r3, #8
    15ea:	2b00      	cmp	r3, #0
    15ec:	d006      	beq.n	15fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    15ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15f0:	1c5a      	adds	r2, r3, #1
    15f2:	637a      	str	r2, [r7, #52]	; 0x34
    15f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15f6:	4413      	add	r3, r2
    15f8:	2220      	movs	r2, #32
    15fa:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    15fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    15fe:	f003 0302 	and.w	r3, r3, #2
    1602:	2b00      	cmp	r3, #0
    1604:	d116      	bne.n	1634 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    1606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1608:	f003 0301 	and.w	r3, r3, #1
    160c:	2b00      	cmp	r3, #0
    160e:	d111      	bne.n	1634 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    1610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1612:	61fb      	str	r3, [r7, #28]
    1614:	69fa      	ldr	r2, [r7, #28]
    1616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1618:	429a      	cmp	r2, r3
    161a:	d20b      	bcs.n	1634 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    161c:	687a      	ldr	r2, [r7, #4]
    161e:	1c53      	adds	r3, r2, #1
    1620:	607b      	str	r3, [r7, #4]
    1622:	68fc      	ldr	r4, [r7, #12]
    1624:	683b      	ldr	r3, [r7, #0]
    1626:	68b9      	ldr	r1, [r7, #8]
    1628:	2020      	movs	r0, #32
    162a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    162c:	69fb      	ldr	r3, [r7, #28]
    162e:	3301      	adds	r3, #1
    1630:	61fb      	str	r3, [r7, #28]
    1632:	e7ef      	b.n	1614 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1634:	2300      	movs	r3, #0
    1636:	61bb      	str	r3, [r7, #24]
    1638:	69ba      	ldr	r2, [r7, #24]
    163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    163c:	429a      	cmp	r2, r3
    163e:	d211      	bcs.n	1664 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1642:	69bb      	ldr	r3, [r7, #24]
    1644:	1ad3      	subs	r3, r2, r3
    1646:	3b01      	subs	r3, #1
    1648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    164a:	4413      	add	r3, r2
    164c:	7818      	ldrb	r0, [r3, #0]
    164e:	687a      	ldr	r2, [r7, #4]
    1650:	1c53      	adds	r3, r2, #1
    1652:	607b      	str	r3, [r7, #4]
    1654:	68fc      	ldr	r4, [r7, #12]
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	68b9      	ldr	r1, [r7, #8]
    165a:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    165c:	69bb      	ldr	r3, [r7, #24]
    165e:	3301      	adds	r3, #1
    1660:	61bb      	str	r3, [r7, #24]
    1662:	e7e9      	b.n	1638 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1666:	f003 0302 	and.w	r3, r3, #2
    166a:	2b00      	cmp	r3, #0
    166c:	d00e      	beq.n	168c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    166e:	687a      	ldr	r2, [r7, #4]
    1670:	697b      	ldr	r3, [r7, #20]
    1672:	1ad3      	subs	r3, r2, r3
    1674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1676:	429a      	cmp	r2, r3
    1678:	d908      	bls.n	168c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    167a:	687a      	ldr	r2, [r7, #4]
    167c:	1c53      	adds	r3, r2, #1
    167e:	607b      	str	r3, [r7, #4]
    1680:	68fc      	ldr	r4, [r7, #12]
    1682:	683b      	ldr	r3, [r7, #0]
    1684:	68b9      	ldr	r1, [r7, #8]
    1686:	2020      	movs	r0, #32
    1688:	47a0      	blx	r4
    while (idx - start_idx < width) {
    168a:	e7f0      	b.n	166e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    168c:	687b      	ldr	r3, [r7, #4]
}
    168e:	4618      	mov	r0, r3
    1690:	3724      	adds	r7, #36	; 0x24
    1692:	46bd      	mov	sp, r7
    1694:	bd90      	pop	{r4, r7, pc}

00001696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1696:	b580      	push	{r7, lr}
    1698:	b096      	sub	sp, #88	; 0x58
    169a:	af08      	add	r7, sp, #32
    169c:	60f8      	str	r0, [r7, #12]
    169e:	60b9      	str	r1, [r7, #8]
    16a0:	607a      	str	r2, [r7, #4]
    16a2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    16a4:	2300      	movs	r3, #0
    16a6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    16a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    16aa:	2b00      	cmp	r3, #0
    16ac:	d103      	bne.n	16b6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    16ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16b0:	f023 0310 	bic.w	r3, r3, #16
    16b4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    16b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    16bc:	2b00      	cmp	r3, #0
    16be:	d002      	beq.n	16c6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    16c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    16c2:	2b00      	cmp	r3, #0
    16c4:	d034      	beq.n	1730 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    16c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    16c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    16ca:	fbb3 f2f2 	udiv	r2, r3, r2
    16ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    16d0:	fb01 f202 	mul.w	r2, r1, r2
    16d4:	1a9b      	subs	r3, r3, r2
    16d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    16da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    16de:	2b09      	cmp	r3, #9
    16e0:	d804      	bhi.n	16ec <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    16e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    16e6:	3330      	adds	r3, #48	; 0x30
    16e8:	b2da      	uxtb	r2, r3
    16ea:	e00d      	b.n	1708 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    16ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16ee:	f003 0320 	and.w	r3, r3, #32
    16f2:	2b00      	cmp	r3, #0
    16f4:	d001      	beq.n	16fa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    16f6:	2241      	movs	r2, #65	; 0x41
    16f8:	e000      	b.n	16fc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    16fa:	2261      	movs	r2, #97	; 0x61
    16fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1700:	4413      	add	r3, r2
    1702:	b2db      	uxtb	r3, r3
    1704:	3b0a      	subs	r3, #10
    1706:	b2da      	uxtb	r2, r3
    1708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    170a:	1c59      	adds	r1, r3, #1
    170c:	6379      	str	r1, [r7, #52]	; 0x34
    170e:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1712:	440b      	add	r3, r1
    1714:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    171a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    171c:	fbb2 f3f3 	udiv	r3, r2, r3
    1720:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1724:	2b00      	cmp	r3, #0
    1726:	d003      	beq.n	1730 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    1728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    172a:	2b1f      	cmp	r3, #31
    172c:	d800      	bhi.n	1730 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    172e:	e7ca      	b.n	16c6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1732:	9306      	str	r3, [sp, #24]
    1734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1736:	9305      	str	r3, [sp, #20]
    1738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    173a:	9304      	str	r3, [sp, #16]
    173c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    173e:	9303      	str	r3, [sp, #12]
    1740:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1744:	9302      	str	r3, [sp, #8]
    1746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1748:	9301      	str	r3, [sp, #4]
    174a:	f107 0310 	add.w	r3, r7, #16
    174e:	9300      	str	r3, [sp, #0]
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	687a      	ldr	r2, [r7, #4]
    1754:	68b9      	ldr	r1, [r7, #8]
    1756:	68f8      	ldr	r0, [r7, #12]
    1758:	f7ff fe7c 	bl	1454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    175c:	4603      	mov	r3, r0
}
    175e:	4618      	mov	r0, r3
    1760:	3738      	adds	r7, #56	; 0x38
    1762:	46bd      	mov	sp, r7
    1764:	bd80      	pop	{r7, pc}

00001766 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1766:	b590      	push	{r4, r7, lr}
    1768:	b097      	sub	sp, #92	; 0x5c
    176a:	af08      	add	r7, sp, #32
    176c:	60f8      	str	r0, [r7, #12]
    176e:	60b9      	str	r1, [r7, #8]
    1770:	607a      	str	r2, [r7, #4]
    1772:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1774:	2300      	movs	r3, #0
    1776:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    1778:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    177c:	4323      	orrs	r3, r4
    177e:	d103      	bne.n	1788 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    1780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1782:	f023 0310 	bic.w	r3, r3, #16
    1786:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    178e:	2b00      	cmp	r3, #0
    1790:	d003      	beq.n	179a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    1792:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1796:	4323      	orrs	r3, r4
    1798:	d03a      	beq.n	1810 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    179a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    179e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    17a2:	f003 fbcb 	bl	4f3c <__aeabi_uldivmod>
    17a6:	461c      	mov	r4, r3
    17a8:	4613      	mov	r3, r2
    17aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    17ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    17b2:	2b09      	cmp	r3, #9
    17b4:	d804      	bhi.n	17c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    17b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    17ba:	3330      	adds	r3, #48	; 0x30
    17bc:	b2da      	uxtb	r2, r3
    17be:	e00d      	b.n	17dc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    17c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    17c2:	f003 0320 	and.w	r3, r3, #32
    17c6:	2b00      	cmp	r3, #0
    17c8:	d001      	beq.n	17ce <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    17ca:	2241      	movs	r2, #65	; 0x41
    17cc:	e000      	b.n	17d0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    17ce:	2261      	movs	r2, #97	; 0x61
    17d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    17d4:	4413      	add	r3, r2
    17d6:	b2db      	uxtb	r3, r3
    17d8:	3b0a      	subs	r3, #10
    17da:	b2da      	uxtb	r2, r3
    17dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17de:	1c59      	adds	r1, r3, #1
    17e0:	6379      	str	r1, [r7, #52]	; 0x34
    17e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
    17e6:	440b      	add	r3, r1
    17e8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    17ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    17f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    17f4:	f003 fba2 	bl	4f3c <__aeabi_uldivmod>
    17f8:	4603      	mov	r3, r0
    17fa:	460c      	mov	r4, r1
    17fc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1800:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1804:	4323      	orrs	r3, r4
    1806:	d003      	beq.n	1810 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    1808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    180a:	2b1f      	cmp	r3, #31
    180c:	d800      	bhi.n	1810 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    180e:	e7c4      	b.n	179a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1812:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1814:	9206      	str	r2, [sp, #24]
    1816:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1818:	9205      	str	r2, [sp, #20]
    181a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    181c:	9204      	str	r2, [sp, #16]
    181e:	9303      	str	r3, [sp, #12]
    1820:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    1824:	9302      	str	r3, [sp, #8]
    1826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1828:	9301      	str	r3, [sp, #4]
    182a:	f107 0310 	add.w	r3, r7, #16
    182e:	9300      	str	r3, [sp, #0]
    1830:	683b      	ldr	r3, [r7, #0]
    1832:	687a      	ldr	r2, [r7, #4]
    1834:	68b9      	ldr	r1, [r7, #8]
    1836:	68f8      	ldr	r0, [r7, #12]
    1838:	f7ff fe0c 	bl	1454 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    183c:	4603      	mov	r3, r0
}
    183e:	4618      	mov	r0, r3
    1840:	373c      	adds	r7, #60	; 0x3c
    1842:	46bd      	mov	sp, r7
    1844:	bd90      	pop	{r4, r7, pc}
    1846:	Address 0x0000000000001846 is out of bounds.


00001848 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    1848:	b590      	push	{r4, r7, lr}
    184a:	b099      	sub	sp, #100	; 0x64
    184c:	af00      	add	r7, sp, #0
    184e:	60f8      	str	r0, [r7, #12]
    1850:	60b9      	str	r1, [r7, #8]
    1852:	607a      	str	r2, [r7, #4]
    1854:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	63fb      	str	r3, [r7, #60]	; 0x3c

  float value = static_cast<float>(value_param);
    185a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
    185e:	f003 f803 	bl	4868 <__aeabi_d2f>
    1862:	4603      	mov	r3, r0
    1864:	65fb      	str	r3, [r7, #92]	; 0x5c

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    1866:	2300      	movs	r3, #0
    1868:	65bb      	str	r3, [r7, #88]	; 0x58
  float diff = 0.0;
    186a:	f04f 0300 	mov.w	r3, #0
    186e:	63bb      	str	r3, [r7, #56]	; 0x38

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    1870:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    1874:	637b      	str	r3, [r7, #52]	; 0x34

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    1876:	2300      	movs	r3, #0
    1878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (value < 0) {
    187c:	f04f 0100 	mov.w	r1, #0
    1880:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1882:	f003 faed 	bl	4e60 <__aeabi_fcmplt>
    1886:	4603      	mov	r3, r0
    1888:	2b00      	cmp	r3, #0
    188a:	d009      	beq.n	18a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x58>
    negative = true;
    188c:	2301      	movs	r3, #1
    188e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    value = 0 - value;
    1892:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    1894:	f04f 0000 	mov.w	r0, #0
    1898:	f003 f83a 	bl	4910 <__aeabi_fsub>
    189c:	4603      	mov	r3, r0
    189e:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    18a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    18a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    18a8:	2b00      	cmp	r3, #0
    18aa:	d101      	bne.n	18b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
    prec = 6U;
    18ac:	2306      	movs	r3, #6
    18ae:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    18b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    18b2:	2b1f      	cmp	r3, #31
    18b4:	d80f      	bhi.n	18d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    18b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    18b8:	2b09      	cmp	r3, #9
    18ba:	d90c      	bls.n	18d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x8e>
    buf[len++] = '0';
    18bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    18be:	1c5a      	adds	r2, r3, #1
    18c0:	65ba      	str	r2, [r7, #88]	; 0x58
    18c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
    18c6:	4413      	add	r3, r2
    18c8:	2230      	movs	r2, #48	; 0x30
    18ca:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    18ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    18d0:	3b01      	subs	r3, #1
    18d2:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    18d4:	e7ec      	b.n	18b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x68>
  }

  int whole = (int)value;
    18d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    18d8:	f003 faea 	bl	4eb0 <__aeabi_f2iz>
    18dc:	4603      	mov	r3, r0
    18de:	653b      	str	r3, [r7, #80]	; 0x50
  float tmp = (value - whole) * pow10[prec];
    18e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    18e2:	f003 f8cb 	bl	4a7c <__aeabi_i2f>
    18e6:	4603      	mov	r3, r0
    18e8:	4619      	mov	r1, r3
    18ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    18ec:	f003 f810 	bl	4910 <__aeabi_fsub>
    18f0:	4603      	mov	r3, r0
    18f2:	4618      	mov	r0, r3
    18f4:	4aa7      	ldr	r2, [pc, #668]	; (1b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    18f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    18f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18fc:	4619      	mov	r1, r3
    18fe:	f003 f911 	bl	4b24 <__aeabi_fmul>
    1902:	4603      	mov	r3, r0
    1904:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
    1906:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1908:	f003 faf8 	bl	4efc <__aeabi_f2uiz>
    190c:	4603      	mov	r3, r0
    190e:	64fb      	str	r3, [r7, #76]	; 0x4c
  diff = tmp - frac;
    1910:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1912:	f003 f8af 	bl	4a74 <__aeabi_ui2f>
    1916:	4603      	mov	r3, r0
    1918:	4619      	mov	r1, r3
    191a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    191c:	f002 fff8 	bl	4910 <__aeabi_fsub>
    1920:	4603      	mov	r3, r0
    1922:	63bb      	str	r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
    1924:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    192a:	f003 fab7 	bl	4e9c <__aeabi_fcmpgt>
    192e:	4603      	mov	r3, r0
    1930:	2b00      	cmp	r3, #0
    1932:	d015      	beq.n	1960 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x118>
    ++frac;
    1934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1936:	3301      	adds	r3, #1
    1938:	64fb      	str	r3, [r7, #76]	; 0x4c
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    193a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    193c:	f003 f89a 	bl	4a74 <__aeabi_ui2f>
    1940:	4a94      	ldr	r2, [pc, #592]	; (1b94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x34c>)
    1942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1948:	4619      	mov	r1, r3
    194a:	f003 fa9d 	bl	4e88 <__aeabi_fcmpge>
    194e:	4603      	mov	r3, r0
    1950:	2b00      	cmp	r3, #0
    1952:	d018      	beq.n	1986 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
      frac = 0;
    1954:	2300      	movs	r3, #0
    1956:	64fb      	str	r3, [r7, #76]	; 0x4c
      ++whole;
    1958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    195a:	3301      	adds	r3, #1
    195c:	653b      	str	r3, [r7, #80]	; 0x50
    195e:	e012      	b.n	1986 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    1960:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1966:	f003 fa71 	bl	4e4c <__aeabi_fcmpeq>
    196a:	4603      	mov	r3, r0
    196c:	2b00      	cmp	r3, #0
    196e:	d00a      	beq.n	1986 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    1970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1972:	2b00      	cmp	r3, #0
    1974:	d004      	beq.n	1980 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x138>
    1976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1978:	f003 0301 	and.w	r3, r3, #1
    197c:	2b00      	cmp	r3, #0
    197e:	d002      	beq.n	1986 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x13e>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    1980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1982:	3301      	adds	r3, #1
    1984:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    1986:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    198a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    198c:	f003 fa86 	bl	4e9c <__aeabi_fcmpgt>
    1990:	4603      	mov	r3, r0
    1992:	2b00      	cmp	r3, #0
    1994:	d001      	beq.n	199a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x152>
    return 0U;
    1996:	2300      	movs	r3, #0
    1998:	e15f      	b.n	1c5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x412>
  }

  if (prec == 0U) {
    199a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    199c:	2b00      	cmp	r3, #0
    199e:	d126      	bne.n	19ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a6>
    diff = value - (float)whole;
    19a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    19a2:	f003 f86b 	bl	4a7c <__aeabi_i2f>
    19a6:	4603      	mov	r3, r0
    19a8:	4619      	mov	r1, r3
    19aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    19ac:	f002 ffb0 	bl	4910 <__aeabi_fsub>
    19b0:	4603      	mov	r3, r0
    19b2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (diff > 0.5) {
    19b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    19b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    19ba:	f003 fa6f 	bl	4e9c <__aeabi_fcmpgt>
    19be:	4603      	mov	r3, r0
    19c0:	2b00      	cmp	r3, #0
    19c2:	d003      	beq.n	19cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x184>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    19c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    19c6:	3301      	adds	r3, #1
    19c8:	653b      	str	r3, [r7, #80]	; 0x50
    19ca:	e061      	b.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    19cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    19d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    19d2:	f003 fa3b 	bl	4e4c <__aeabi_fcmpeq>
    19d6:	4603      	mov	r3, r0
    19d8:	2b00      	cmp	r3, #0
    19da:	d059      	beq.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    19dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    19de:	f003 0301 	and.w	r3, r3, #1
    19e2:	2b00      	cmp	r3, #0
    19e4:	d054      	beq.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    19e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    19e8:	3301      	adds	r3, #1
    19ea:	653b      	str	r3, [r7, #80]	; 0x50
    19ec:	e050      	b.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
    }
  }
  else {
    unsigned int count = prec;
    19ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19f0:	64bb      	str	r3, [r7, #72]	; 0x48
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    19f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    19f4:	2b1f      	cmp	r3, #31
    19f6:	d828      	bhi.n	1a4a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
      --count;
    19f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    19fa:	3b01      	subs	r3, #1
    19fc:	64bb      	str	r3, [r7, #72]	; 0x48
      buf[len++] = (char)(48U + (frac % 10U));
    19fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1a00:	4b65      	ldr	r3, [pc, #404]	; (1b98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1a02:	fba3 2301 	umull	r2, r3, r3, r1
    1a06:	08da      	lsrs	r2, r3, #3
    1a08:	4613      	mov	r3, r2
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	4413      	add	r3, r2
    1a0e:	005b      	lsls	r3, r3, #1
    1a10:	1aca      	subs	r2, r1, r3
    1a12:	b2d3      	uxtb	r3, r2
    1a14:	3330      	adds	r3, #48	; 0x30
    1a16:	b2d9      	uxtb	r1, r3
    1a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a1a:	1c5a      	adds	r2, r3, #1
    1a1c:	65ba      	str	r2, [r7, #88]	; 0x58
    1a1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1a22:	4413      	add	r3, r2
    1a24:	460a      	mov	r2, r1
    1a26:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    1a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a2c:	4a5a      	ldr	r2, [pc, #360]	; (1b98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x350>)
    1a2e:	fba2 2303 	umull	r2, r3, r2, r3
    1a32:	08db      	lsrs	r3, r3, #3
    1a34:	64fb      	str	r3, [r7, #76]	; 0x4c
    1a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a38:	2b00      	cmp	r3, #0
    1a3a:	bf0c      	ite	eq
    1a3c:	2301      	moveq	r3, #1
    1a3e:	2300      	movne	r3, #0
    1a40:	b2db      	uxtb	r3, r3
    1a42:	2b00      	cmp	r3, #0
    1a44:	d100      	bne.n	1a48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x200>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1a46:	e7d4      	b.n	19f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1aa>
        break;
    1a48:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a4c:	2b1f      	cmp	r3, #31
    1a4e:	d806      	bhi.n	1a5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a52:	1e5a      	subs	r2, r3, #1
    1a54:	64ba      	str	r2, [r7, #72]	; 0x48
    1a56:	2b00      	cmp	r3, #0
    1a58:	d001      	beq.n	1a5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x216>
    1a5a:	2301      	movs	r3, #1
    1a5c:	e000      	b.n	1a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x218>
    1a5e:	2300      	movs	r3, #0
    1a60:	2b00      	cmp	r3, #0
    1a62:	d009      	beq.n	1a78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x230>
      buf[len++] = '0';
    1a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a66:	1c5a      	adds	r2, r3, #1
    1a68:	65ba      	str	r2, [r7, #88]	; 0x58
    1a6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1a6e:	4413      	add	r3, r2
    1a70:	2230      	movs	r2, #48	; 0x30
    1a72:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1a76:	e7e8      	b.n	1a4a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x202>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a7a:	2b1f      	cmp	r3, #31
    1a7c:	d808      	bhi.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      // add decimal
      buf[len++] = '.';
    1a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a80:	1c5a      	adds	r2, r3, #1
    1a82:	65ba      	str	r2, [r7, #88]	; 0x58
    1a84:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1a88:	4413      	add	r3, r2
    1a8a:	222e      	movs	r2, #46	; 0x2e
    1a8c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a92:	2b1f      	cmp	r3, #31
    1a94:	d829      	bhi.n	1aea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
    buf[len++] = (char)(48 + (whole % 10));
    1a96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1a98:	4b40      	ldr	r3, [pc, #256]	; (1b9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1a9a:	fb83 1302 	smull	r1, r3, r3, r2
    1a9e:	1099      	asrs	r1, r3, #2
    1aa0:	17d3      	asrs	r3, r2, #31
    1aa2:	1ac9      	subs	r1, r1, r3
    1aa4:	460b      	mov	r3, r1
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	440b      	add	r3, r1
    1aaa:	005b      	lsls	r3, r3, #1
    1aac:	1ad1      	subs	r1, r2, r3
    1aae:	b2cb      	uxtb	r3, r1
    1ab0:	3330      	adds	r3, #48	; 0x30
    1ab2:	b2d9      	uxtb	r1, r3
    1ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1ab6:	1c5a      	adds	r2, r3, #1
    1ab8:	65ba      	str	r2, [r7, #88]	; 0x58
    1aba:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1abe:	4413      	add	r3, r2
    1ac0:	460a      	mov	r2, r1
    1ac2:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    1ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ac8:	4a34      	ldr	r2, [pc, #208]	; (1b9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x354>)
    1aca:	fb82 1203 	smull	r1, r2, r2, r3
    1ace:	1092      	asrs	r2, r2, #2
    1ad0:	17db      	asrs	r3, r3, #31
    1ad2:	1ad3      	subs	r3, r2, r3
    1ad4:	653b      	str	r3, [r7, #80]	; 0x50
    1ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ad8:	2b00      	cmp	r3, #0
    1ada:	bf0c      	ite	eq
    1adc:	2301      	moveq	r3, #1
    1ade:	2300      	movne	r3, #0
    1ae0:	b2db      	uxtb	r3, r3
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d100      	bne.n	1ae8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1ae6:	e7d3      	b.n	1a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x248>
      break;
    1ae8:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1aee:	f003 0302 	and.w	r3, r3, #2
    1af2:	2b00      	cmp	r3, #0
    1af4:	d116      	bne.n	1b24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1afa:	f003 0301 	and.w	r3, r3, #1
    1afe:	2b00      	cmp	r3, #0
    1b00:	d010      	beq.n	1b24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b06:	429a      	cmp	r2, r3
    1b08:	d20c      	bcs.n	1b24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    1b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b0c:	2b1f      	cmp	r3, #31
    1b0e:	d809      	bhi.n	1b24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2dc>
    buf[len++] = '0';
    1b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b12:	1c5a      	adds	r2, r3, #1
    1b14:	65ba      	str	r2, [r7, #88]	; 0x58
    1b16:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1b1a:	4413      	add	r3, r2
    1b1c:	2230      	movs	r2, #48	; 0x30
    1b1e:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1b22:	e7e2      	b.n	1aea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2a2>
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b28:	429a      	cmp	r2, r3
    1b2a:	d112      	bne.n	1b52 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    1b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1b30:	2b00      	cmp	r3, #0
    1b32:	d10b      	bne.n	1b4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1b38:	f003 0304 	and.w	r3, r3, #4
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d105      	bne.n	1b4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1b44:	f003 0308 	and.w	r3, r3, #8
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d002      	beq.n	1b52 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30a>
    len--;
    1b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b4e:	3b01      	subs	r3, #1
    1b50:	65bb      	str	r3, [r7, #88]	; 0x58
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b54:	2b1f      	cmp	r3, #31
    1b56:	d832      	bhi.n	1bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    if (negative) {
    1b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d009      	beq.n	1b74 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x32c>
      buf[len++] = '-';
    1b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b62:	1c5a      	adds	r2, r3, #1
    1b64:	65ba      	str	r2, [r7, #88]	; 0x58
    1b66:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1b6a:	4413      	add	r3, r2
    1b6c:	222d      	movs	r2, #45	; 0x2d
    1b6e:	f803 2c50 	strb.w	r2, [r3, #-80]
    1b72:	e024      	b.n	1bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    }
    else if (flags & FLAGS_PLUS) {
    1b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1b78:	f003 0304 	and.w	r3, r3, #4
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d00f      	beq.n	1ba0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x358>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1b82:	1c5a      	adds	r2, r3, #1
    1b84:	65ba      	str	r2, [r7, #88]	; 0x58
    1b86:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1b8a:	4413      	add	r3, r2
    1b8c:	222b      	movs	r2, #43	; 0x2b
    1b8e:	f803 2c50 	strb.w	r2, [r3, #-80]
    1b92:	e014      	b.n	1bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
    1b94:	00006b80 	.word	0x00006b80
    1b98:	cccccccd 	.word	0xcccccccd
    1b9c:	66666667 	.word	0x66666667
    }
    else if (flags & FLAGS_SPACE) {
    1ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1ba4:	f003 0308 	and.w	r3, r3, #8
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d008      	beq.n	1bbe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x376>
      buf[len++] = ' ';
    1bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1bae:	1c5a      	adds	r2, r3, #1
    1bb0:	65ba      	str	r2, [r7, #88]	; 0x58
    1bb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1bb6:	4413      	add	r3, r2
    1bb8:	2220      	movs	r2, #32
    1bba:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1bbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1bc2:	f003 0302 	and.w	r3, r3, #2
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d117      	bne.n	1bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    1bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1bce:	f003 0301 	and.w	r3, r3, #1
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d111      	bne.n	1bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
    for (size_t i = len; i < width; i++) {
    1bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1bd8:	647b      	str	r3, [r7, #68]	; 0x44
    1bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bde:	429a      	cmp	r2, r3
    1be0:	d20b      	bcs.n	1bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b2>
      out(' ', buffer, idx++, maxlen);
    1be2:	687a      	ldr	r2, [r7, #4]
    1be4:	1c53      	adds	r3, r2, #1
    1be6:	607b      	str	r3, [r7, #4]
    1be8:	68fc      	ldr	r4, [r7, #12]
    1bea:	683b      	ldr	r3, [r7, #0]
    1bec:	68b9      	ldr	r1, [r7, #8]
    1bee:	2020      	movs	r0, #32
    1bf0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1bf4:	3301      	adds	r3, #1
    1bf6:	647b      	str	r3, [r7, #68]	; 0x44
    1bf8:	e7ef      	b.n	1bda <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x392>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1bfa:	2300      	movs	r3, #0
    1bfc:	643b      	str	r3, [r7, #64]	; 0x40
    1bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c02:	429a      	cmp	r2, r3
    1c04:	d213      	bcs.n	1c2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3e6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c0a:	1ad3      	subs	r3, r2, r3
    1c0c:	3b01      	subs	r3, #1
    1c0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1c12:	4413      	add	r3, r2
    1c14:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    1c18:	687a      	ldr	r2, [r7, #4]
    1c1a:	1c53      	adds	r3, r2, #1
    1c1c:	607b      	str	r3, [r7, #4]
    1c1e:	68fc      	ldr	r4, [r7, #12]
    1c20:	683b      	ldr	r3, [r7, #0]
    1c22:	68b9      	ldr	r1, [r7, #8]
    1c24:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c28:	3301      	adds	r3, #1
    1c2a:	643b      	str	r3, [r7, #64]	; 0x40
    1c2c:	e7e7      	b.n	1bfe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3b6>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1c32:	f003 0302 	and.w	r3, r3, #2
    1c36:	2b00      	cmp	r3, #0
    1c38:	d00e      	beq.n	1c58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
    while (idx - start_idx < width) {
    1c3a:	687a      	ldr	r2, [r7, #4]
    1c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c3e:	1ad3      	subs	r3, r2, r3
    1c40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1c42:	429a      	cmp	r2, r3
    1c44:	d908      	bls.n	1c58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x410>
      out(' ', buffer, idx++, maxlen);
    1c46:	687a      	ldr	r2, [r7, #4]
    1c48:	1c53      	adds	r3, r2, #1
    1c4a:	607b      	str	r3, [r7, #4]
    1c4c:	68fc      	ldr	r4, [r7, #12]
    1c4e:	683b      	ldr	r3, [r7, #0]
    1c50:	68b9      	ldr	r1, [r7, #8]
    1c52:	2020      	movs	r0, #32
    1c54:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1c56:	e7f0      	b.n	1c3a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f2>
    }
  }

  return idx;
    1c58:	687b      	ldr	r3, [r7, #4]
}
    1c5a:	4618      	mov	r0, r3
    1c5c:	3764      	adds	r7, #100	; 0x64
    1c5e:	46bd      	mov	sp, r7
    1c60:	bd90      	pop	{r4, r7, pc}
    1c62:	bf00      	nop

00001c64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1c64:	b5b0      	push	{r4, r5, r7, lr}
    1c66:	b0a0      	sub	sp, #128	; 0x80
    1c68:	af0a      	add	r7, sp, #40	; 0x28
    1c6a:	60f8      	str	r0, [r7, #12]
    1c6c:	60b9      	str	r1, [r7, #8]
    1c6e:	607a      	str	r2, [r7, #4]
    1c70:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    1c72:	2300      	movs	r3, #0
    1c74:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    1c76:	68bb      	ldr	r3, [r7, #8]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d101      	bne.n	1c80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    1c7c:	4ba2      	ldr	r3, [pc, #648]	; (1f08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    1c7e:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    1c80:	683b      	ldr	r3, [r7, #0]
    1c82:	781b      	ldrb	r3, [r3, #0]
    1c84:	2b00      	cmp	r3, #0
    1c86:	f000 8440 	beq.w	250a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a6>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1c8a:	683b      	ldr	r3, [r7, #0]
    1c8c:	781b      	ldrb	r3, [r3, #0]
    1c8e:	2b25      	cmp	r3, #37	; 0x25
    1c90:	d00d      	beq.n	1cae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    1c92:	683b      	ldr	r3, [r7, #0]
    1c94:	7818      	ldrb	r0, [r3, #0]
    1c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1c98:	1c53      	adds	r3, r2, #1
    1c9a:	647b      	str	r3, [r7, #68]	; 0x44
    1c9c:	68fc      	ldr	r4, [r7, #12]
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	68b9      	ldr	r1, [r7, #8]
    1ca2:	47a0      	blx	r4
      format++;
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	3301      	adds	r3, #1
    1ca8:	603b      	str	r3, [r7, #0]
      continue;
    1caa:	f000 bc2c 	b.w	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
    }
    else {
      // yes, evaluate it
      format++;
    1cae:	683b      	ldr	r3, [r7, #0]
    1cb0:	3301      	adds	r3, #1
    1cb2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    1cb4:	2300      	movs	r3, #0
    1cb6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    1cb8:	683b      	ldr	r3, [r7, #0]
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	3b20      	subs	r3, #32
    1cbe:	2b10      	cmp	r3, #16
    1cc0:	d856      	bhi.n	1d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    1cc2:	a201      	add	r2, pc, #4	; (adr r2, 1cc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    1cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1cc8:	00001d49 	.word	0x00001d49
    1ccc:	00001d71 	.word	0x00001d71
    1cd0:	00001d71 	.word	0x00001d71
    1cd4:	00001d5d 	.word	0x00001d5d
    1cd8:	00001d71 	.word	0x00001d71
    1cdc:	00001d71 	.word	0x00001d71
    1ce0:	00001d71 	.word	0x00001d71
    1ce4:	00001d71 	.word	0x00001d71
    1ce8:	00001d71 	.word	0x00001d71
    1cec:	00001d71 	.word	0x00001d71
    1cf0:	00001d71 	.word	0x00001d71
    1cf4:	00001d35 	.word	0x00001d35
    1cf8:	00001d71 	.word	0x00001d71
    1cfc:	00001d21 	.word	0x00001d21
    1d00:	00001d71 	.word	0x00001d71
    1d04:	00001d71 	.word	0x00001d71
    1d08:	00001d0d 	.word	0x00001d0d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d0e:	f043 0301 	orr.w	r3, r3, #1
    1d12:	657b      	str	r3, [r7, #84]	; 0x54
    1d14:	683b      	ldr	r3, [r7, #0]
    1d16:	3301      	adds	r3, #1
    1d18:	603b      	str	r3, [r7, #0]
    1d1a:	2301      	movs	r3, #1
    1d1c:	64bb      	str	r3, [r7, #72]	; 0x48
    1d1e:	e02a      	b.n	1d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d22:	f043 0302 	orr.w	r3, r3, #2
    1d26:	657b      	str	r3, [r7, #84]	; 0x54
    1d28:	683b      	ldr	r3, [r7, #0]
    1d2a:	3301      	adds	r3, #1
    1d2c:	603b      	str	r3, [r7, #0]
    1d2e:	2301      	movs	r3, #1
    1d30:	64bb      	str	r3, [r7, #72]	; 0x48
    1d32:	e020      	b.n	1d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d36:	f043 0304 	orr.w	r3, r3, #4
    1d3a:	657b      	str	r3, [r7, #84]	; 0x54
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	3301      	adds	r3, #1
    1d40:	603b      	str	r3, [r7, #0]
    1d42:	2301      	movs	r3, #1
    1d44:	64bb      	str	r3, [r7, #72]	; 0x48
    1d46:	e016      	b.n	1d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d4a:	f043 0308 	orr.w	r3, r3, #8
    1d4e:	657b      	str	r3, [r7, #84]	; 0x54
    1d50:	683b      	ldr	r3, [r7, #0]
    1d52:	3301      	adds	r3, #1
    1d54:	603b      	str	r3, [r7, #0]
    1d56:	2301      	movs	r3, #1
    1d58:	64bb      	str	r3, [r7, #72]	; 0x48
    1d5a:	e00c      	b.n	1d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d5e:	f043 0310 	orr.w	r3, r3, #16
    1d62:	657b      	str	r3, [r7, #84]	; 0x54
    1d64:	683b      	ldr	r3, [r7, #0]
    1d66:	3301      	adds	r3, #1
    1d68:	603b      	str	r3, [r7, #0]
    1d6a:	2301      	movs	r3, #1
    1d6c:	64bb      	str	r3, [r7, #72]	; 0x48
    1d6e:	e002      	b.n	1d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    1d70:	2300      	movs	r3, #0
    1d72:	64bb      	str	r3, [r7, #72]	; 0x48
    1d74:	bf00      	nop
      }
    } while (n);
    1d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d000      	beq.n	1d7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    1d7c:	e79c      	b.n	1cb8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    1d7e:	2300      	movs	r3, #0
    1d80:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    1d82:	683b      	ldr	r3, [r7, #0]
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	4618      	mov	r0, r3
    1d88:	f7ff fb2d 	bl	13e6 <_is_digit(char)>
    1d8c:	4603      	mov	r3, r0
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d005      	beq.n	1d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    1d92:	463b      	mov	r3, r7
    1d94:	4618      	mov	r0, r3
    1d96:	f7ff fb39 	bl	140c <_atoi(char const**)>
    1d9a:	6538      	str	r0, [r7, #80]	; 0x50
    1d9c:	e018      	b.n	1dd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    1d9e:	683b      	ldr	r3, [r7, #0]
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	2b2a      	cmp	r3, #42	; 0x2a
    1da4:	d114      	bne.n	1dd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    1da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1da8:	1d1a      	adds	r2, r3, #4
    1daa:	66ba      	str	r2, [r7, #104]	; 0x68
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    1db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1db2:	2b00      	cmp	r3, #0
    1db4:	da07      	bge.n	1dc6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    1db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1db8:	f043 0302 	orr.w	r3, r3, #2
    1dbc:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    1dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1dc0:	425b      	negs	r3, r3
    1dc2:	653b      	str	r3, [r7, #80]	; 0x50
    1dc4:	e001      	b.n	1dca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    1dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1dc8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    1dca:	683b      	ldr	r3, [r7, #0]
    1dcc:	3301      	adds	r3, #1
    1dce:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    1dd0:	2300      	movs	r3, #0
    1dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    1dd4:	683b      	ldr	r3, [r7, #0]
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	2b2e      	cmp	r3, #46	; 0x2e
    1dda:	d124      	bne.n	1e26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    1ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1de2:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    1de4:	683b      	ldr	r3, [r7, #0]
    1de6:	3301      	adds	r3, #1
    1de8:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    1dea:	683b      	ldr	r3, [r7, #0]
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	4618      	mov	r0, r3
    1df0:	f7ff faf9 	bl	13e6 <_is_digit(char)>
    1df4:	4603      	mov	r3, r0
    1df6:	2b00      	cmp	r3, #0
    1df8:	d005      	beq.n	1e06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    1dfa:	463b      	mov	r3, r7
    1dfc:	4618      	mov	r0, r3
    1dfe:	f7ff fb05 	bl	140c <_atoi(char const**)>
    1e02:	64f8      	str	r0, [r7, #76]	; 0x4c
    1e04:	e00f      	b.n	1e26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    1e06:	683b      	ldr	r3, [r7, #0]
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	2b2a      	cmp	r3, #42	; 0x2a
    1e0c:	d10b      	bne.n	1e26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    1e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e10:	1d1a      	adds	r2, r3, #4
    1e12:	66ba      	str	r2, [r7, #104]	; 0x68
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    1e20:	683b      	ldr	r3, [r7, #0]
    1e22:	3301      	adds	r3, #1
    1e24:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    1e26:	683b      	ldr	r3, [r7, #0]
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	3b68      	subs	r3, #104	; 0x68
    1e2c:	2b12      	cmp	r3, #18
    1e2e:	d867      	bhi.n	1f00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    1e30:	a201      	add	r2, pc, #4	; (adr r2, 1e38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    1e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e36:	bf00      	nop
    1e38:	00001eab 	.word	0x00001eab
    1e3c:	00001f01 	.word	0x00001f01
    1e40:	00001ee1 	.word	0x00001ee1
    1e44:	00001f01 	.word	0x00001f01
    1e48:	00001e85 	.word	0x00001e85
    1e4c:	00001f01 	.word	0x00001f01
    1e50:	00001f01 	.word	0x00001f01
    1e54:	00001f01 	.word	0x00001f01
    1e58:	00001f01 	.word	0x00001f01
    1e5c:	00001f01 	.word	0x00001f01
    1e60:	00001f01 	.word	0x00001f01
    1e64:	00001f01 	.word	0x00001f01
    1e68:	00001ed1 	.word	0x00001ed1
    1e6c:	00001f01 	.word	0x00001f01
    1e70:	00001f01 	.word	0x00001f01
    1e74:	00001f01 	.word	0x00001f01
    1e78:	00001f01 	.word	0x00001f01
    1e7c:	00001f01 	.word	0x00001f01
    1e80:	00001ef1 	.word	0x00001ef1
      case 'l' :
        flags |= FLAGS_LONG;
    1e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e8a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1e8c:	683b      	ldr	r3, [r7, #0]
    1e8e:	3301      	adds	r3, #1
    1e90:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    1e92:	683b      	ldr	r3, [r7, #0]
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	2b6c      	cmp	r3, #108	; 0x6c
    1e98:	d134      	bne.n	1f04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    1e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1ea0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1ea2:	683b      	ldr	r3, [r7, #0]
    1ea4:	3301      	adds	r3, #1
    1ea6:	603b      	str	r3, [r7, #0]
        }
        break;
    1ea8:	e02c      	b.n	1f04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    1eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1eb0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1eb2:	683b      	ldr	r3, [r7, #0]
    1eb4:	3301      	adds	r3, #1
    1eb6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    1eb8:	683b      	ldr	r3, [r7, #0]
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	2b68      	cmp	r3, #104	; 0x68
    1ebe:	d125      	bne.n	1f0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    1ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ec6:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    1ec8:	683b      	ldr	r3, [r7, #0]
    1eca:	3301      	adds	r3, #1
    1ecc:	603b      	str	r3, [r7, #0]
        }
        break;
    1ece:	e01d      	b.n	1f0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1ed6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1ed8:	683b      	ldr	r3, [r7, #0]
    1eda:	3301      	adds	r3, #1
    1edc:	603b      	str	r3, [r7, #0]
        break;
    1ede:	e016      	b.n	1f0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1ee6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1ee8:	683b      	ldr	r3, [r7, #0]
    1eea:	3301      	adds	r3, #1
    1eec:	603b      	str	r3, [r7, #0]
        break;
    1eee:	e00e      	b.n	1f0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1ef6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    1ef8:	683b      	ldr	r3, [r7, #0]
    1efa:	3301      	adds	r3, #1
    1efc:	603b      	str	r3, [r7, #0]
        break;
    1efe:	e006      	b.n	1f0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    1f00:	bf00      	nop
    1f02:	e004      	b.n	1f0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    1f04:	bf00      	nop
    1f06:	e002      	b.n	1f0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    1f08:	000013a1 	.word	0x000013a1
        break;
    1f0c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    1f0e:	683b      	ldr	r3, [r7, #0]
    1f10:	781b      	ldrb	r3, [r3, #0]
    1f12:	3b25      	subs	r3, #37	; 0x25
    1f14:	2b53      	cmp	r3, #83	; 0x53
    1f16:	f200 82e9 	bhi.w	24ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x888>
    1f1a:	a201      	add	r2, pc, #4	; (adr r2, 1f20 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    1f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f20:	000024d5 	.word	0x000024d5
    1f24:	000024ed 	.word	0x000024ed
    1f28:	000024ed 	.word	0x000024ed
    1f2c:	000024ed 	.word	0x000024ed
    1f30:	000024ed 	.word	0x000024ed
    1f34:	000024ed 	.word	0x000024ed
    1f38:	000024ed 	.word	0x000024ed
    1f3c:	000024ed 	.word	0x000024ed
    1f40:	000024ed 	.word	0x000024ed
    1f44:	000024ed 	.word	0x000024ed
    1f48:	000024ed 	.word	0x000024ed
    1f4c:	000024ed 	.word	0x000024ed
    1f50:	000024ed 	.word	0x000024ed
    1f54:	000024ed 	.word	0x000024ed
    1f58:	000024ed 	.word	0x000024ed
    1f5c:	000024ed 	.word	0x000024ed
    1f60:	000024ed 	.word	0x000024ed
    1f64:	000024ed 	.word	0x000024ed
    1f68:	000024ed 	.word	0x000024ed
    1f6c:	000024ed 	.word	0x000024ed
    1f70:	000024ed 	.word	0x000024ed
    1f74:	000024ed 	.word	0x000024ed
    1f78:	000024ed 	.word	0x000024ed
    1f7c:	000024ed 	.word	0x000024ed
    1f80:	000024ed 	.word	0x000024ed
    1f84:	000024ed 	.word	0x000024ed
    1f88:	000024ed 	.word	0x000024ed
    1f8c:	000024ed 	.word	0x000024ed
    1f90:	000024ed 	.word	0x000024ed
    1f94:	000024ed 	.word	0x000024ed
    1f98:	000024ed 	.word	0x000024ed
    1f9c:	000024ed 	.word	0x000024ed
    1fa0:	000024ed 	.word	0x000024ed
    1fa4:	000022f9 	.word	0x000022f9
    1fa8:	000024ed 	.word	0x000024ed
    1fac:	000024ed 	.word	0x000024ed
    1fb0:	000024ed 	.word	0x000024ed
    1fb4:	000024ed 	.word	0x000024ed
    1fb8:	000024ed 	.word	0x000024ed
    1fbc:	000024ed 	.word	0x000024ed
    1fc0:	000024ed 	.word	0x000024ed
    1fc4:	000024ed 	.word	0x000024ed
    1fc8:	000024ed 	.word	0x000024ed
    1fcc:	000024ed 	.word	0x000024ed
    1fd0:	000024ed 	.word	0x000024ed
    1fd4:	000024ed 	.word	0x000024ed
    1fd8:	000024ed 	.word	0x000024ed
    1fdc:	000024ed 	.word	0x000024ed
    1fe0:	000024ed 	.word	0x000024ed
    1fe4:	000024ed 	.word	0x000024ed
    1fe8:	000024ed 	.word	0x000024ed
    1fec:	00002071 	.word	0x00002071
    1ff0:	000024ed 	.word	0x000024ed
    1ff4:	000024ed 	.word	0x000024ed
    1ff8:	000024ed 	.word	0x000024ed
    1ffc:	000024ed 	.word	0x000024ed
    2000:	000024ed 	.word	0x000024ed
    2004:	000024ed 	.word	0x000024ed
    2008:	000024ed 	.word	0x000024ed
    200c:	000024ed 	.word	0x000024ed
    2010:	000024ed 	.word	0x000024ed
    2014:	00002071 	.word	0x00002071
    2018:	0000232f 	.word	0x0000232f
    201c:	00002071 	.word	0x00002071
    2020:	000024ed 	.word	0x000024ed
    2024:	000022f9 	.word	0x000022f9
    2028:	000024ed 	.word	0x000024ed
    202c:	000024ed 	.word	0x000024ed
    2030:	00002071 	.word	0x00002071
    2034:	000024ed 	.word	0x000024ed
    2038:	000024ed 	.word	0x000024ed
    203c:	000024ed 	.word	0x000024ed
    2040:	000024ed 	.word	0x000024ed
    2044:	000024ed 	.word	0x000024ed
    2048:	00002071 	.word	0x00002071
    204c:	0000248d 	.word	0x0000248d
    2050:	000024ed 	.word	0x000024ed
    2054:	000024ed 	.word	0x000024ed
    2058:	000023b7 	.word	0x000023b7
    205c:	000024ed 	.word	0x000024ed
    2060:	00002071 	.word	0x00002071
    2064:	000024ed 	.word	0x000024ed
    2068:	000024ed 	.word	0x000024ed
    206c:	00002071 	.word	0x00002071
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2070:	683b      	ldr	r3, [r7, #0]
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	2b78      	cmp	r3, #120	; 0x78
    2076:	d003      	beq.n	2080 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    2078:	683b      	ldr	r3, [r7, #0]
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	2b58      	cmp	r3, #88	; 0x58
    207e:	d102      	bne.n	2086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    2080:	2310      	movs	r3, #16
    2082:	643b      	str	r3, [r7, #64]	; 0x40
    2084:	e013      	b.n	20ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    2086:	683b      	ldr	r3, [r7, #0]
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	2b6f      	cmp	r3, #111	; 0x6f
    208c:	d102      	bne.n	2094 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    208e:	2308      	movs	r3, #8
    2090:	643b      	str	r3, [r7, #64]	; 0x40
    2092:	e00c      	b.n	20ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    2094:	683b      	ldr	r3, [r7, #0]
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	2b62      	cmp	r3, #98	; 0x62
    209a:	d102      	bne.n	20a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    209c:	2302      	movs	r3, #2
    209e:	643b      	str	r3, [r7, #64]	; 0x40
    20a0:	e005      	b.n	20ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    20a2:	230a      	movs	r3, #10
    20a4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    20a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20a8:	f023 0310 	bic.w	r3, r3, #16
    20ac:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    20ae:	683b      	ldr	r3, [r7, #0]
    20b0:	781b      	ldrb	r3, [r3, #0]
    20b2:	2b58      	cmp	r3, #88	; 0x58
    20b4:	d103      	bne.n	20be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    20b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20b8:	f043 0320 	orr.w	r3, r3, #32
    20bc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    20be:	683b      	ldr	r3, [r7, #0]
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	2b69      	cmp	r3, #105	; 0x69
    20c4:	d007      	beq.n	20d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    20c6:	683b      	ldr	r3, [r7, #0]
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	2b64      	cmp	r3, #100	; 0x64
    20cc:	d003      	beq.n	20d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    20ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20d0:	f023 030c 	bic.w	r3, r3, #12
    20d4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    20d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    20dc:	2b00      	cmp	r3, #0
    20de:	d003      	beq.n	20e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    20e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20e2:	f023 0301 	bic.w	r3, r3, #1
    20e6:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    20e8:	683b      	ldr	r3, [r7, #0]
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b69      	cmp	r3, #105	; 0x69
    20ee:	d004      	beq.n	20fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    20f0:	683b      	ldr	r3, [r7, #0]
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2b64      	cmp	r3, #100	; 0x64
    20f6:	f040 808c 	bne.w	2212 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5ae>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    20fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2100:	2b00      	cmp	r3, #0
    2102:	d02d      	beq.n	2160 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2106:	3307      	adds	r3, #7
    2108:	f023 0307 	bic.w	r3, r3, #7
    210c:	f103 0208 	add.w	r2, r3, #8
    2110:	66ba      	str	r2, [r7, #104]	; 0x68
    2112:	cb18      	ldmia	r3, {r3, r4}
    2114:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2118:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    211c:	2b00      	cmp	r3, #0
    211e:	f174 0200 	sbcs.w	r2, r4, #0
    2122:	da02      	bge.n	212a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c6>
    2124:	425b      	negs	r3, r3
    2126:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    212a:	4619      	mov	r1, r3
    212c:	4622      	mov	r2, r4
    212e:	697b      	ldr	r3, [r7, #20]
    2130:	0fdb      	lsrs	r3, r3, #31
    2132:	b2d8      	uxtb	r0, r3
    2134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2136:	f04f 0400 	mov.w	r4, #0
    213a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    213c:	9508      	str	r5, [sp, #32]
    213e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    2140:	9507      	str	r5, [sp, #28]
    2142:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    2144:	9506      	str	r5, [sp, #24]
    2146:	e9cd 3404 	strd	r3, r4, [sp, #16]
    214a:	9002      	str	r0, [sp, #8]
    214c:	e9cd 1200 	strd	r1, r2, [sp]
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2154:	68b9      	ldr	r1, [r7, #8]
    2156:	68f8      	ldr	r0, [r7, #12]
    2158:	f7ff fb05 	bl	1766 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    215c:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    215e:	e0c7      	b.n	22f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          else if (flags & FLAGS_LONG) {
    2160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2162:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2166:	2b00      	cmp	r3, #0
    2168:	d01e      	beq.n	21a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x544>
            const long value = va_arg(va, long);
    216a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    216c:	1d1a      	adds	r2, r3, #4
    216e:	66ba      	str	r2, [r7, #104]	; 0x68
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2174:	69fb      	ldr	r3, [r7, #28]
    2176:	2b00      	cmp	r3, #0
    2178:	bfb8      	it	lt
    217a:	425b      	neglt	r3, r3
    217c:	4619      	mov	r1, r3
    217e:	69fb      	ldr	r3, [r7, #28]
    2180:	0fdb      	lsrs	r3, r3, #31
    2182:	b2db      	uxtb	r3, r3
    2184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2186:	9205      	str	r2, [sp, #20]
    2188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    218a:	9204      	str	r2, [sp, #16]
    218c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    218e:	9203      	str	r2, [sp, #12]
    2190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2192:	9202      	str	r2, [sp, #8]
    2194:	9301      	str	r3, [sp, #4]
    2196:	9100      	str	r1, [sp, #0]
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    219c:	68b9      	ldr	r1, [r7, #8]
    219e:	68f8      	ldr	r0, [r7, #12]
    21a0:	f7ff fa79 	bl	1696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    21a4:	6478      	str	r0, [r7, #68]	; 0x44
          }
    21a6:	e0a3      	b.n	22f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    21a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    21ae:	2b00      	cmp	r3, #0
    21b0:	d005      	beq.n	21be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55a>
    21b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21b4:	1d1a      	adds	r2, r3, #4
    21b6:	66ba      	str	r2, [r7, #104]	; 0x68
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	b2db      	uxtb	r3, r3
    21bc:	e00e      	b.n	21dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    21be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    21c4:	2b00      	cmp	r3, #0
    21c6:	d005      	beq.n	21d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x570>
    21c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21ca:	1d1a      	adds	r2, r3, #4
    21cc:	66ba      	str	r2, [r7, #104]	; 0x68
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	b21b      	sxth	r3, r3
    21d2:	e003      	b.n	21dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x578>
    21d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21d6:	1d1a      	adds	r2, r3, #4
    21d8:	66ba      	str	r2, [r7, #104]	; 0x68
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    21de:	6a3b      	ldr	r3, [r7, #32]
    21e0:	2b00      	cmp	r3, #0
    21e2:	bfb8      	it	lt
    21e4:	425b      	neglt	r3, r3
    21e6:	4619      	mov	r1, r3
    21e8:	6a3b      	ldr	r3, [r7, #32]
    21ea:	0fdb      	lsrs	r3, r3, #31
    21ec:	b2db      	uxtb	r3, r3
    21ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    21f0:	9205      	str	r2, [sp, #20]
    21f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    21f4:	9204      	str	r2, [sp, #16]
    21f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    21f8:	9203      	str	r2, [sp, #12]
    21fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    21fc:	9202      	str	r2, [sp, #8]
    21fe:	9301      	str	r3, [sp, #4]
    2200:	9100      	str	r1, [sp, #0]
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2206:	68b9      	ldr	r1, [r7, #8]
    2208:	68f8      	ldr	r0, [r7, #12]
    220a:	f7ff fa44 	bl	1696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    220e:	6478      	str	r0, [r7, #68]	; 0x44
          }
    2210:	e06e      	b.n	22f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2214:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2218:	2b00      	cmp	r3, #0
    221a:	d01f      	beq.n	225c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    221c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    221e:	3307      	adds	r3, #7
    2220:	f023 0307 	bic.w	r3, r3, #7
    2224:	f103 0208 	add.w	r2, r3, #8
    2228:	66ba      	str	r2, [r7, #104]	; 0x68
    222a:	cb18      	ldmia	r3, {r3, r4}
    222c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    222e:	4611      	mov	r1, r2
    2230:	f04f 0200 	mov.w	r2, #0
    2234:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2236:	9008      	str	r0, [sp, #32]
    2238:	6d38      	ldr	r0, [r7, #80]	; 0x50
    223a:	9007      	str	r0, [sp, #28]
    223c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    223e:	9006      	str	r0, [sp, #24]
    2240:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2244:	2200      	movs	r2, #0
    2246:	9202      	str	r2, [sp, #8]
    2248:	e9cd 3400 	strd	r3, r4, [sp]
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2250:	68b9      	ldr	r1, [r7, #8]
    2252:	68f8      	ldr	r0, [r7, #12]
    2254:	f7ff fa87 	bl	1766 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2258:	6478      	str	r0, [r7, #68]	; 0x44
    225a:	e049      	b.n	22f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
#endif
          }
          else if (flags & FLAGS_LONG) {
    225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2262:	2b00      	cmp	r3, #0
    2264:	d016      	beq.n	2294 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x630>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2268:	1d1a      	adds	r2, r3, #4
    226a:	66ba      	str	r2, [r7, #104]	; 0x68
    226c:	681b      	ldr	r3, [r3, #0]
    226e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2270:	9205      	str	r2, [sp, #20]
    2272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2274:	9204      	str	r2, [sp, #16]
    2276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2278:	9203      	str	r2, [sp, #12]
    227a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    227c:	9202      	str	r2, [sp, #8]
    227e:	2200      	movs	r2, #0
    2280:	9201      	str	r2, [sp, #4]
    2282:	9300      	str	r3, [sp, #0]
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2288:	68b9      	ldr	r1, [r7, #8]
    228a:	68f8      	ldr	r0, [r7, #12]
    228c:	f7ff fa03 	bl	1696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2290:	6478      	str	r0, [r7, #68]	; 0x44
    2292:	e02d      	b.n	22f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x68c>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2296:	f003 0340 	and.w	r3, r3, #64	; 0x40
    229a:	2b00      	cmp	r3, #0
    229c:	d005      	beq.n	22aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x646>
    229e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22a0:	1d1a      	adds	r2, r3, #4
    22a2:	66ba      	str	r2, [r7, #104]	; 0x68
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	b2db      	uxtb	r3, r3
    22a8:	e00e      	b.n	22c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    22aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    22b0:	2b00      	cmp	r3, #0
    22b2:	d005      	beq.n	22c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65c>
    22b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22b6:	1d1a      	adds	r2, r3, #4
    22b8:	66ba      	str	r2, [r7, #104]	; 0x68
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	b29b      	uxth	r3, r3
    22be:	e003      	b.n	22c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x664>
    22c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22c2:	1d1a      	adds	r2, r3, #4
    22c4:	66ba      	str	r2, [r7, #104]	; 0x68
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    22ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22cc:	9305      	str	r3, [sp, #20]
    22ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    22d0:	9304      	str	r3, [sp, #16]
    22d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    22d4:	9303      	str	r3, [sp, #12]
    22d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    22d8:	9302      	str	r3, [sp, #8]
    22da:	2300      	movs	r3, #0
    22dc:	9301      	str	r3, [sp, #4]
    22de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22e0:	9300      	str	r3, [sp, #0]
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    22e6:	68b9      	ldr	r1, [r7, #8]
    22e8:	68f8      	ldr	r0, [r7, #12]
    22ea:	f7ff f9d4 	bl	1696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    22ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    22f0:	683b      	ldr	r3, [r7, #0]
    22f2:	3301      	adds	r3, #1
    22f4:	603b      	str	r3, [r7, #0]
        break;
    22f6:	e106      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    22f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22fa:	3307      	adds	r3, #7
    22fc:	f023 0307 	bic.w	r3, r3, #7
    2300:	f103 0208 	add.w	r2, r3, #8
    2304:	66ba      	str	r2, [r7, #104]	; 0x68
    2306:	cb18      	ldmia	r3, {r3, r4}
    2308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    230a:	9204      	str	r2, [sp, #16]
    230c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    230e:	9203      	str	r2, [sp, #12]
    2310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2312:	9202      	str	r2, [sp, #8]
    2314:	e9cd 3400 	strd	r3, r4, [sp]
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    231c:	68b9      	ldr	r1, [r7, #8]
    231e:	68f8      	ldr	r0, [r7, #12]
    2320:	f7ff fa92 	bl	1848 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2324:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2326:	683b      	ldr	r3, [r7, #0]
    2328:	3301      	adds	r3, #1
    232a:	603b      	str	r3, [r7, #0]
        break;
    232c:	e0eb      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    232e:	2301      	movs	r3, #1
    2330:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2334:	f003 0302 	and.w	r3, r3, #2
    2338:	2b00      	cmp	r3, #0
    233a:	d113      	bne.n	2364 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
          while (l++ < width) {
    233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    233e:	1c5a      	adds	r2, r3, #1
    2340:	63fa      	str	r2, [r7, #60]	; 0x3c
    2342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2344:	429a      	cmp	r2, r3
    2346:	bf8c      	ite	hi
    2348:	2301      	movhi	r3, #1
    234a:	2300      	movls	r3, #0
    234c:	b2db      	uxtb	r3, r3
    234e:	2b00      	cmp	r3, #0
    2350:	d008      	beq.n	2364 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x700>
            out(' ', buffer, idx++, maxlen);
    2352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2354:	1c53      	adds	r3, r2, #1
    2356:	647b      	str	r3, [r7, #68]	; 0x44
    2358:	68fc      	ldr	r4, [r7, #12]
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	68b9      	ldr	r1, [r7, #8]
    235e:	2020      	movs	r0, #32
    2360:	47a0      	blx	r4
          while (l++ < width) {
    2362:	e7eb      	b.n	233c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6d8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2366:	1d1a      	adds	r2, r3, #4
    2368:	66ba      	str	r2, [r7, #104]	; 0x68
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	b2d8      	uxtb	r0, r3
    236e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2370:	1c53      	adds	r3, r2, #1
    2372:	647b      	str	r3, [r7, #68]	; 0x44
    2374:	68fc      	ldr	r4, [r7, #12]
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	68b9      	ldr	r1, [r7, #8]
    237a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    237e:	f003 0302 	and.w	r3, r3, #2
    2382:	2b00      	cmp	r3, #0
    2384:	d013      	beq.n	23ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
          while (l++ < width) {
    2386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2388:	1c5a      	adds	r2, r3, #1
    238a:	63fa      	str	r2, [r7, #60]	; 0x3c
    238c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    238e:	429a      	cmp	r2, r3
    2390:	bf8c      	ite	hi
    2392:	2301      	movhi	r3, #1
    2394:	2300      	movls	r3, #0
    2396:	b2db      	uxtb	r3, r3
    2398:	2b00      	cmp	r3, #0
    239a:	d008      	beq.n	23ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x74a>
            out(' ', buffer, idx++, maxlen);
    239c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    239e:	1c53      	adds	r3, r2, #1
    23a0:	647b      	str	r3, [r7, #68]	; 0x44
    23a2:	68fc      	ldr	r4, [r7, #12]
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	68b9      	ldr	r1, [r7, #8]
    23a8:	2020      	movs	r0, #32
    23aa:	47a0      	blx	r4
          while (l++ < width) {
    23ac:	e7eb      	b.n	2386 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x722>
          }
        }
        format++;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	3301      	adds	r3, #1
    23b2:	603b      	str	r3, [r7, #0]
        break;
    23b4:	e0a7      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    23b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    23b8:	1d1a      	adds	r2, r3, #4
    23ba:	66ba      	str	r2, [r7, #104]	; 0x68
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    23c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    23c2:	f7fe fffa 	bl	13ba <_strlen(char const*)>
    23c6:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    23c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    23ce:	2b00      	cmp	r3, #0
    23d0:	d007      	beq.n	23e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77e>
          l = (l < precision ? l : precision);
    23d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    23d6:	429a      	cmp	r2, r3
    23d8:	d201      	bcs.n	23de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77a>
    23da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23dc:	e000      	b.n	23e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x77c>
    23de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    23e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    23e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23e4:	f003 0302 	and.w	r3, r3, #2
    23e8:	2b00      	cmp	r3, #0
    23ea:	d113      	bne.n	2414 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
          while (l++ < width) {
    23ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23ee:	1c5a      	adds	r2, r3, #1
    23f0:	637a      	str	r2, [r7, #52]	; 0x34
    23f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    23f4:	429a      	cmp	r2, r3
    23f6:	bf8c      	ite	hi
    23f8:	2301      	movhi	r3, #1
    23fa:	2300      	movls	r3, #0
    23fc:	b2db      	uxtb	r3, r3
    23fe:	2b00      	cmp	r3, #0
    2400:	d008      	beq.n	2414 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
            out(' ', buffer, idx++, maxlen);
    2402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2404:	1c53      	adds	r3, r2, #1
    2406:	647b      	str	r3, [r7, #68]	; 0x44
    2408:	68fc      	ldr	r4, [r7, #12]
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	68b9      	ldr	r1, [r7, #8]
    240e:	2020      	movs	r0, #32
    2410:	47a0      	blx	r4
          while (l++ < width) {
    2412:	e7eb      	b.n	23ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b00      	cmp	r3, #0
    241a:	d00b      	beq.n	2434 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    241c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2422:	2b00      	cmp	r3, #0
    2424:	d004      	beq.n	2430 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7cc>
    2426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2428:	1e5a      	subs	r2, r3, #1
    242a:	64fa      	str	r2, [r7, #76]	; 0x4c
    242c:	2b00      	cmp	r3, #0
    242e:	d001      	beq.n	2434 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d0>
    2430:	2301      	movs	r3, #1
    2432:	e000      	b.n	2436 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d2>
    2434:	2300      	movs	r3, #0
    2436:	2b00      	cmp	r3, #0
    2438:	d00b      	beq.n	2452 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ee>
          out(*(p++), buffer, idx++, maxlen);
    243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    243c:	1c5a      	adds	r2, r3, #1
    243e:	63ba      	str	r2, [r7, #56]	; 0x38
    2440:	7818      	ldrb	r0, [r3, #0]
    2442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2444:	1c53      	adds	r3, r2, #1
    2446:	647b      	str	r3, [r7, #68]	; 0x44
    2448:	68fc      	ldr	r4, [r7, #12]
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	68b9      	ldr	r1, [r7, #8]
    244e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2450:	e7e0      	b.n	2414 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7b0>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    2452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2454:	f003 0302 	and.w	r3, r3, #2
    2458:	2b00      	cmp	r3, #0
    245a:	d013      	beq.n	2484 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
          while (l++ < width) {
    245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    245e:	1c5a      	adds	r2, r3, #1
    2460:	637a      	str	r2, [r7, #52]	; 0x34
    2462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2464:	429a      	cmp	r2, r3
    2466:	bf8c      	ite	hi
    2468:	2301      	movhi	r3, #1
    246a:	2300      	movls	r3, #0
    246c:	b2db      	uxtb	r3, r3
    246e:	2b00      	cmp	r3, #0
    2470:	d008      	beq.n	2484 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x820>
            out(' ', buffer, idx++, maxlen);
    2472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2474:	1c53      	adds	r3, r2, #1
    2476:	647b      	str	r3, [r7, #68]	; 0x44
    2478:	68fc      	ldr	r4, [r7, #12]
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	68b9      	ldr	r1, [r7, #8]
    247e:	2020      	movs	r0, #32
    2480:	47a0      	blx	r4
          while (l++ < width) {
    2482:	e7eb      	b.n	245c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          }
        }
        format++;
    2484:	683b      	ldr	r3, [r7, #0]
    2486:	3301      	adds	r3, #1
    2488:	603b      	str	r3, [r7, #0]
        break;
    248a:	e03c      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    248c:	2308      	movs	r3, #8
    248e:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    2490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2492:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    2496:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    2498:	2300      	movs	r3, #0
    249a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    249e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    24a0:	1d1a      	adds	r2, r3, #4
    24a2:	66ba      	str	r2, [r7, #104]	; 0x68
    24a4:	681b      	ldr	r3, [r3, #0]
    24a6:	461a      	mov	r2, r3
    24a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24aa:	9305      	str	r3, [sp, #20]
    24ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    24ae:	9304      	str	r3, [sp, #16]
    24b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    24b2:	9303      	str	r3, [sp, #12]
    24b4:	2310      	movs	r3, #16
    24b6:	9302      	str	r3, [sp, #8]
    24b8:	2300      	movs	r3, #0
    24ba:	9301      	str	r3, [sp, #4]
    24bc:	9200      	str	r2, [sp, #0]
    24be:	687b      	ldr	r3, [r7, #4]
    24c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    24c2:	68b9      	ldr	r1, [r7, #8]
    24c4:	68f8      	ldr	r0, [r7, #12]
    24c6:	f7ff f8e6 	bl	1696 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    24ca:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    24cc:	683b      	ldr	r3, [r7, #0]
    24ce:	3301      	adds	r3, #1
    24d0:	603b      	str	r3, [r7, #0]
        break;
    24d2:	e018      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    24d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    24d6:	1c53      	adds	r3, r2, #1
    24d8:	647b      	str	r3, [r7, #68]	; 0x44
    24da:	68fc      	ldr	r4, [r7, #12]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	68b9      	ldr	r1, [r7, #8]
    24e0:	2025      	movs	r0, #37	; 0x25
    24e2:	47a0      	blx	r4
        format++;
    24e4:	683b      	ldr	r3, [r7, #0]
    24e6:	3301      	adds	r3, #1
    24e8:	603b      	str	r3, [r7, #0]
        break;
    24ea:	e00c      	b.n	2506 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>

      default :
        out(*format, buffer, idx++, maxlen);
    24ec:	683b      	ldr	r3, [r7, #0]
    24ee:	7818      	ldrb	r0, [r3, #0]
    24f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    24f2:	1c53      	adds	r3, r2, #1
    24f4:	647b      	str	r3, [r7, #68]	; 0x44
    24f6:	68fc      	ldr	r4, [r7, #12]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	68b9      	ldr	r1, [r7, #8]
    24fc:	47a0      	blx	r4
        format++;
    24fe:	683b      	ldr	r3, [r7, #0]
    2500:	3301      	adds	r3, #1
    2502:	603b      	str	r3, [r7, #0]
        break;
    2504:	bf00      	nop
  while (*format)
    2506:	f7ff bbbb 	b.w	1c80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    250a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	429a      	cmp	r2, r3
    2510:	d302      	bcc.n	2518 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b4>
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	1e5a      	subs	r2, r3, #1
    2516:	e000      	b.n	251a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b6>
    2518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    251a:	68fc      	ldr	r4, [r7, #12]
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	68b9      	ldr	r1, [r7, #8]
    2520:	2000      	movs	r0, #0
    2522:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    2524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2526:	4618      	mov	r0, r3
    2528:	3758      	adds	r7, #88	; 0x58
    252a:	46bd      	mov	sp, r7
    252c:	bdb0      	pop	{r4, r5, r7, pc}
    252e:	bf00      	nop

00002530 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    2530:	b40f      	push	{r0, r1, r2, r3}
    2532:	b580      	push	{r7, lr}
    2534:	b0c4      	sub	sp, #272	; 0x110
    2536:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    2538:	f507 738a 	add.w	r3, r7, #276	; 0x114
    253c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    2540:	4639      	mov	r1, r7
    2542:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    2546:	9300      	str	r3, [sp, #0]
    2548:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    254c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2550:	4807      	ldr	r0, [pc, #28]	; (2570 <printf+0x40>)
    2552:	f7ff fb87 	bl	1c64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    2556:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    255a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    255e:	4618      	mov	r0, r3
    2560:	f507 7784 	add.w	r7, r7, #264	; 0x108
    2564:	46bd      	mov	sp, r7
    2566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    256a:	b004      	add	sp, #16
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	00001331 	.word	0x00001331

00002574 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    2574:	b480      	push	{r7}
    2576:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    2578:	bf00      	nop
    257a:	46bd      	mov	sp, r7
    257c:	bc80      	pop	{r7}
    257e:	4770      	bx	lr

00002580 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    2580:	b580      	push	{r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	af00      	add	r7, sp, #0
    2586:	6078      	str	r0, [r7, #4]
    2588:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    258a:	6839      	ldr	r1, [r7, #0]
    258c:	6878      	ldr	r0, [r7, #4]
    258e:	f000 f805 	bl	259c <_trace_write_semihosting_stdout(char const*, unsigned int)>
    2592:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    2594:	4618      	mov	r0, r3
    2596:	3708      	adds	r7, #8
    2598:	46bd      	mov	sp, r7
    259a:	bd80      	pop	{r7, pc}

0000259c <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    259c:	b5b0      	push	{r4, r5, r7, lr}
    259e:	b08c      	sub	sp, #48	; 0x30
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
    25a4:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    25a6:	4b2d      	ldr	r3, [pc, #180]	; (265c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    25a8:	681b      	ldr	r3, [r3, #0]
    25aa:	f003 0301 	and.w	r3, r3, #1
    25ae:	2b00      	cmp	r3, #0
    25b0:	bf0c      	ite	eq
    25b2:	2301      	moveq	r3, #1
    25b4:	2300      	movne	r3, #0
    25b6:	b2db      	uxtb	r3, r3
    25b8:	2b00      	cmp	r3, #0
    25ba:	d001      	beq.n	25c0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    25bc:	683b      	ldr	r3, [r7, #0]
    25be:	e049      	b.n	2654 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    25c0:	4b27      	ldr	r3, [pc, #156]	; (2660 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d11d      	bne.n	2604 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    25c8:	4b26      	ldr	r3, [pc, #152]	; (2664 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    25ca:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    25cc:	2304      	movs	r3, #4
    25ce:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    25d0:	2303      	movs	r3, #3
    25d2:	613b      	str	r3, [r7, #16]
    25d4:	2301      	movs	r3, #1
    25d6:	62bb      	str	r3, [r7, #40]	; 0x28
    25d8:	f107 0308 	add.w	r3, r7, #8
    25dc:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    25de:	6abc      	ldr	r4, [r7, #40]	; 0x28
    25e0:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    25e2:	4620      	mov	r0, r4
    25e4:	4629      	mov	r1, r5
    25e6:	beab      	bkpt	0x00ab
    25e8:	4604      	mov	r4, r0
    25ea:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    25ec:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    25ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    25f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    25f6:	d102      	bne.n	25fe <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    25f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    25fc:	e02a      	b.n	2654 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    25fe:	4a18      	ldr	r2, [pc, #96]	; (2660 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2602:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    2604:	4b16      	ldr	r3, [pc, #88]	; (2660 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	613b      	str	r3, [r7, #16]
    2612:	2305      	movs	r3, #5
    2614:	61fb      	str	r3, [r7, #28]
    2616:	f107 0308 	add.w	r3, r7, #8
    261a:	61bb      	str	r3, [r7, #24]
  );
    261c:	69fc      	ldr	r4, [r7, #28]
    261e:	69bd      	ldr	r5, [r7, #24]
    2620:	4620      	mov	r0, r4
    2622:	4629      	mov	r1, r5
    2624:	beab      	bkpt	0x00ab
    2626:	4604      	mov	r4, r0
    2628:	617c      	str	r4, [r7, #20]
  return value;
    262a:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2634:	d102      	bne.n	263c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    2636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    263a:	e00b      	b.n	2654 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    263c:	683b      	ldr	r3, [r7, #0]
    263e:	461a      	mov	r2, r3
    2640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2642:	4293      	cmp	r3, r2
    2644:	d102      	bne.n	264c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    2646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    264a:	e003      	b.n	2654 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    264c:	683b      	ldr	r3, [r7, #0]
    264e:	461a      	mov	r2, r3
    2650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2652:	1ad3      	subs	r3, r2, r3
}
    2654:	4618      	mov	r0, r3
    2656:	3730      	adds	r7, #48	; 0x30
    2658:	46bd      	mov	sp, r7
    265a:	bdb0      	pop	{r4, r5, r7, pc}
    265c:	e000edf0 	.word	0xe000edf0
    2660:	2007c2d0 	.word	0x2007c2d0
    2664:	00006ba8 	.word	0x00006ba8

00002668 <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
    2668:	b480      	push	{r7}
    266a:	af00      	add	r7, sp, #0
    266c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2670:	4618      	mov	r0, r3
    2672:	46bd      	mov	sp, r7
    2674:	bc80      	pop	{r7}
    2676:	4770      	bx	lr

00002678 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
    2678:	b480      	push	{r7}
    267a:	af00      	add	r7, sp, #0
    267c:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
    2680:	4618      	mov	r0, r3
    2682:	46bd      	mov	sp, r7
    2684:	bc80      	pop	{r7}
    2686:	4770      	bx	lr

00002688 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    2688:	b480      	push	{r7}
    268a:	b083      	sub	sp, #12
    268c:	af00      	add	r7, sp, #0
    268e:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2690:	4b0c      	ldr	r3, [pc, #48]	; (26c4 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	68da      	ldr	r2, [r3, #12]
    2696:	4b0b      	ldr	r3, [pc, #44]	; (26c4 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    269e:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    26a0:	4b09      	ldr	r3, [pc, #36]	; (26c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	2200      	movs	r2, #0
    26a6:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    26a8:	4b07      	ldr	r3, [pc, #28]	; (26c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	681a      	ldr	r2, [r3, #0]
    26ae:	4b06      	ldr	r3, [pc, #24]	; (26c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    26b0:	681b      	ldr	r3, [r3, #0]
    26b2:	f042 0201 	orr.w	r2, r2, #1
    26b6:	601a      	str	r2, [r3, #0]
  }
    26b8:	bf00      	nop
    26ba:	370c      	adds	r7, #12
    26bc:	46bd      	mov	sp, r7
    26be:	bc80      	pop	{r7}
    26c0:	4770      	bx	lr
    26c2:	bf00      	nop
    26c4:	2007c014 	.word	0x2007c014
    26c8:	2007c010 	.word	0x2007c010

000026cc <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    26cc:	b480      	push	{r7}
    26ce:	b083      	sub	sp, #12
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    26d4:	4b03      	ldr	r3, [pc, #12]	; (26e4 <sjsu::cortex::DwtCounter::GetCount()+0x18>)
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	685b      	ldr	r3, [r3, #4]
  }
    26da:	4618      	mov	r0, r3
    26dc:	370c      	adds	r7, #12
    26de:	46bd      	mov	sp, r7
    26e0:	bc80      	pop	{r7}
    26e2:	4770      	bx	lr
    26e4:	2007c010 	.word	0x2007c010

000026e8 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
    26e8:	b580      	push	{r7, lr}
    26ea:	b082      	sub	sp, #8
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
			return x < 0 ? -x : x;
    26f0:	f04f 0100 	mov.w	r1, #0
    26f4:	6878      	ldr	r0, [r7, #4]
    26f6:	f002 fbb3 	bl	4e60 <__aeabi_fcmplt>
    26fa:	4603      	mov	r3, r0
    26fc:	2b00      	cmp	r3, #0
    26fe:	d003      	beq.n	2708 <units::detail::abs(float)+0x20>
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    2706:	e000      	b.n	270a <units::detail::abs(float)+0x22>
    2708:	687b      	ldr	r3, [r7, #4]
		}
    270a:	4618      	mov	r0, r3
    270c:	3708      	adds	r7, #8
    270e:	46bd      	mov	sp, r7
    2710:	bd80      	pop	{r7, pc}

00002712 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    2712:	b580      	push	{r7, lr}
    2714:	b084      	sub	sp, #16
    2716:	af00      	add	r7, sp, #0
    2718:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    271c:	e9d7 0100 	ldrd	r0, r1, [r7]
    2720:	f002 f9ba 	bl	4a98 <__aeabi_ul2f>
    2724:	4602      	mov	r2, r0
    2726:	f107 030c 	add.w	r3, r7, #12
    272a:	4611      	mov	r1, r2
    272c:	4618      	mov	r0, r3
    272e:	f000 f814 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2732:	68fb      	ldr	r3, [r7, #12]
    2734:	4618      	mov	r0, r3
    2736:	3710      	adds	r7, #16
    2738:	46bd      	mov	sp, r7
    273a:	bd80      	pop	{r7, pc}

0000273c <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    273c:	b480      	push	{r7}
    273e:	b083      	sub	sp, #12
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
    2746:	683b      	ldr	r3, [r7, #0]
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	601a      	str	r2, [r3, #0]
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	4618      	mov	r0, r3
    2752:	370c      	adds	r7, #12
    2754:	46bd      	mov	sp, r7
    2756:	bc80      	pop	{r7}
    2758:	4770      	bx	lr

0000275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    275a:	b580      	push	{r7, lr}
    275c:	b082      	sub	sp, #8
    275e:	af00      	add	r7, sp, #0
    2760:	6078      	str	r0, [r7, #4]
    2762:	6039      	str	r1, [r7, #0]
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	463a      	mov	r2, r7
    2768:	4611      	mov	r1, r2
    276a:	4618      	mov	r0, r3
    276c:	f7ff ffe6 	bl	273c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	4618      	mov	r0, r3
    2774:	3708      	adds	r7, #8
    2776:	46bd      	mov	sp, r7
    2778:	bd80      	pop	{r7, pc}

0000277a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    277a:	b5f0      	push	{r4, r5, r6, r7, lr}
    277c:	b083      	sub	sp, #12
    277e:	af00      	add	r7, sp, #0
    2780:	6078      	str	r0, [r7, #4]
    2782:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	681c      	ldr	r4, [r3, #0]
    2788:	683b      	ldr	r3, [r7, #0]
    278a:	4618      	mov	r0, r3
    278c:	f000 f84a 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2790:	4603      	mov	r3, r0
    2792:	4619      	mov	r1, r3
    2794:	4620      	mov	r0, r4
    2796:	f002 f8bb 	bl	4910 <__aeabi_fsub>
    279a:	4603      	mov	r3, r0
    279c:	4618      	mov	r0, r3
    279e:	f7ff ffa3 	bl	26e8 <units::detail::abs(float)>
    27a2:	4605      	mov	r5, r0
    27a4:	f7ff ff68 	bl	2678 <std::numeric_limits<float>::epsilon()>
    27a8:	4606      	mov	r6, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	681c      	ldr	r4, [r3, #0]
    27ae:	683b      	ldr	r3, [r7, #0]
    27b0:	4618      	mov	r0, r3
    27b2:	f000 f837 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    27b6:	4603      	mov	r3, r0
    27b8:	4619      	mov	r1, r3
    27ba:	4620      	mov	r0, r4
    27bc:	f002 f8aa 	bl	4914 <__addsf3>
    27c0:	4603      	mov	r3, r0
    27c2:	4618      	mov	r0, r3
    27c4:	f7ff ff90 	bl	26e8 <units::detail::abs(float)>
    27c8:	4603      	mov	r3, r0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    27ca:	4619      	mov	r1, r3
    27cc:	4630      	mov	r0, r6
    27ce:	f002 f9a9 	bl	4b24 <__aeabi_fmul>
    27d2:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    27d4:	4619      	mov	r1, r3
    27d6:	4628      	mov	r0, r5
    27d8:	f002 fb42 	bl	4e60 <__aeabi_fcmplt>
    27dc:	4603      	mov	r3, r0
    27de:	2b00      	cmp	r3, #0
    27e0:	d119      	bne.n	2816 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	681c      	ldr	r4, [r3, #0]
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	4618      	mov	r0, r3
    27ea:	f000 f81b 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    27ee:	4603      	mov	r3, r0
    27f0:	4619      	mov	r1, r3
    27f2:	4620      	mov	r0, r4
    27f4:	f002 f88c 	bl	4910 <__aeabi_fsub>
    27f8:	4603      	mov	r3, r0
    27fa:	4618      	mov	r0, r3
    27fc:	f7ff ff74 	bl	26e8 <units::detail::abs(float)>
    2800:	4604      	mov	r4, r0
    2802:	f7ff ff31 	bl	2668 <std::numeric_limits<float>::min()>
    2806:	4603      	mov	r3, r0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    2808:	4619      	mov	r1, r3
    280a:	4620      	mov	r0, r4
    280c:	f002 fb28 	bl	4e60 <__aeabi_fcmplt>
    2810:	4603      	mov	r3, r0
    2812:	2b00      	cmp	r3, #0
    2814:	d001      	beq.n	281a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
    2816:	2301      	movs	r3, #1
    2818:	e000      	b.n	281c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
    281a:	2300      	movs	r3, #0
		}
    281c:	4618      	mov	r0, r3
    281e:	370c      	adds	r7, #12
    2820:	46bd      	mov	sp, r7
    2822:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2824:	b580      	push	{r7, lr}
    2826:	b086      	sub	sp, #24
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    282c:	6878      	ldr	r0, [r7, #4]
    282e:	f000 f805 	bl	283c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2832:	4603      	mov	r3, r0
	}
    2834:	4618      	mov	r0, r3
    2836:	3718      	adds	r7, #24
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}

0000283c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    283c:	b480      	push	{r7}
    283e:	b085      	sub	sp, #20
    2840:	af00      	add	r7, sp, #0
    2842:	60f8      	str	r0, [r7, #12]
    2844:	7239      	strb	r1, [r7, #8]
    2846:	713a      	strb	r2, [r7, #4]
    2848:	703b      	strb	r3, [r7, #0]
			return value;
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	681b      	ldr	r3, [r3, #0]
		}
    284e:	4618      	mov	r0, r3
    2850:	3714      	adds	r7, #20
    2852:	46bd      	mov	sp, r7
    2854:	bc80      	pop	{r7}
    2856:	4770      	bx	lr

00002858 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2858:	b5b0      	push	{r4, r5, r7, lr}
    285a:	b082      	sub	sp, #8
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
    2860:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	681c      	ldr	r4, [r3, #0]
    2866:	683b      	ldr	r3, [r7, #0]
    2868:	4618      	mov	r0, r3
    286a:	f7ff ffdb 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    286e:	4602      	mov	r2, r0
    2870:	2301      	movs	r3, #1
    2872:	461d      	mov	r5, r3
    2874:	4611      	mov	r1, r2
    2876:	4620      	mov	r0, r4
    2878:	f002 fafc 	bl	4e74 <__aeabi_fcmple>
    287c:	4603      	mov	r3, r0
    287e:	2b00      	cmp	r3, #0
    2880:	d101      	bne.n	2886 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    2882:	2300      	movs	r3, #0
    2884:	461d      	mov	r5, r3
    2886:	b2eb      	uxtb	r3, r5
		}
    2888:	4618      	mov	r0, r3
    288a:	3708      	adds	r7, #8
    288c:	46bd      	mov	sp, r7
    288e:	bdb0      	pop	{r4, r5, r7, pc}

00002890 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    2890:	b480      	push	{r7}
    2892:	b083      	sub	sp, #12
    2894:	af00      	add	r7, sp, #0
    2896:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    2898:	4a03      	ldr	r2, [pc, #12]	; (28a8 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x18>)
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	6013      	str	r3, [r2, #0]
}
    289e:	bf00      	nop
    28a0:	370c      	adds	r7, #12
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	2007c000 	.word	0x2007c000

000028ac <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    28ac:	b580      	push	{r7, lr}
    28ae:	b082      	sub	sp, #8
    28b0:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    28b2:	4b09      	ldr	r3, [pc, #36]	; (28d8 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    28b4:	681b      	ldr	r3, [r3, #0]
    28b6:	685b      	ldr	r3, [r3, #4]
    28b8:	b2db      	uxtb	r3, r3
    28ba:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    28bc:	4a07      	ldr	r2, [pc, #28]	; (28dc <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    28c2:	4a07      	ldr	r2, [pc, #28]	; (28e0 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28ca:	603b      	str	r3, [r7, #0]
    isr();
    28cc:	683b      	ldr	r3, [r7, #0]
    28ce:	4798      	blx	r3
  }
    28d0:	bf00      	nop
    28d2:	3708      	adds	r7, #8
    28d4:	46bd      	mov	sp, r7
    28d6:	bd80      	pop	{r7, pc}
    28d8:	2007c018 	.word	0x2007c018
    28dc:	2007c004 	.word	0x2007c004
    28e0:	2007c150 	.word	0x2007c150

000028e4 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    28e4:	b580      	push	{r7, lr}
    28e6:	b086      	sub	sp, #24
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
    28ec:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	3308      	adds	r3, #8
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	6839      	ldr	r1, [r7, #0]
    28f8:	6878      	ldr	r0, [r7, #4]
    28fa:	4798      	blx	r3
    28fc:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    28fe:	f04f 0300 	mov.w	r3, #0
    2902:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    2904:	697b      	ldr	r3, [r7, #20]
    2906:	2b00      	cmp	r3, #0
    2908:	d00f      	beq.n	292a <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	330c      	adds	r3, #12
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	6878      	ldr	r0, [r7, #4]
    2914:	4798      	blx	r3
    2916:	4603      	mov	r3, r0
    2918:	613b      	str	r3, [r7, #16]
    291a:	f107 0310 	add.w	r3, r7, #16
    291e:	6979      	ldr	r1, [r7, #20]
    2920:	4618      	mov	r0, r3
    2922:	f001 fbeb 	bl	40fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    2926:	4603      	mov	r3, r0
    2928:	60fb      	str	r3, [r7, #12]
    }
    return result;
    292a:	68fb      	ldr	r3, [r7, #12]
  }
    292c:	4618      	mov	r0, r3
    292e:	3718      	adds	r7, #24
    2930:	46bd      	mov	sp, r7
    2932:	bd80      	pop	{r7, pc}

00002934 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    2934:	b580      	push	{r7, lr}
    2936:	b082      	sub	sp, #8
    2938:	af00      	add	r7, sp, #0
    293a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	4618      	mov	r0, r3
    2940:	f000 f804 	bl	294c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    2944:	6878      	ldr	r0, [r7, #4]
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    294c:	b580      	push	{r7, lr}
    294e:	b082      	sub	sp, #8
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2954:	4903      	ldr	r1, [pc, #12]	; (2964 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    2956:	6878      	ldr	r0, [r7, #4]
    2958:	f7fd ffae 	bl	8b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    295c:	6878      	ldr	r0, [r7, #4]
    295e:	3708      	adds	r7, #8
    2960:	46bd      	mov	sp, r7
    2962:	bd80      	pop	{r7, pc}
    2964:	00006bb0 	.word	0x00006bb0

00002968 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    2968:	b580      	push	{r7, lr}
    296a:	b084      	sub	sp, #16
    296c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    296e:	f107 0308 	add.w	r3, r7, #8
    2972:	4618      	mov	r0, r3
    2974:	f7ff ffde 	bl	2934 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    2978:	f107 0208 	add.w	r2, r7, #8
    297c:	463b      	mov	r3, r7
    297e:	4611      	mov	r1, r2
    2980:	4618      	mov	r0, r3
    2982:	f7fd ffff 	bl	984 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2986:	463b      	mov	r3, r7
    2988:	4619      	mov	r1, r3
    298a:	4807      	ldr	r0, [pc, #28]	; (29a8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    298c:	f001 fbd5 	bl	413a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    2992:	681b      	ldr	r3, [r3, #0]
    2994:	2b00      	cmp	r3, #0
    2996:	d002      	beq.n	299e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    2998:	4b04      	ldr	r3, [pc, #16]	; (29ac <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	4798      	blx	r3
    }
  }
    299e:	bf00      	nop
    29a0:	3710      	adds	r7, #16
    29a2:	46bd      	mov	sp, r7
    29a4:	bd80      	pop	{r7, pc}
    29a6:	bf00      	nop
    29a8:	2007c2d8 	.word	0x2007c2d8
    29ac:	2007c2d4 	.word	0x2007c2d4

000029b0 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    29b0:	b490      	push	{r4, r7}
    29b2:	b082      	sub	sp, #8
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
  {
    return counter;
    29b8:	687a      	ldr	r2, [r7, #4]
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <sjsu::cortex::SystemTimer::GetCount()+0x1c>)
    29bc:	cb18      	ldmia	r3, {r3, r4}
    29be:	e9c2 3400 	strd	r3, r4, [r2]
  }
    29c2:	6878      	ldr	r0, [r7, #4]
    29c4:	3708      	adds	r7, #8
    29c6:	46bd      	mov	sp, r7
    29c8:	bc90      	pop	{r4, r7}
    29ca:	4770      	bx	lr
    29cc:	2007c2d8 	.word	0x2007c2d8

000029d0 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	bf00      	nop
    29da:	370c      	adds	r7, #12
    29dc:	46bd      	mov	sp, r7
    29de:	bc80      	pop	{r7}
    29e0:	4770      	bx	lr
    29e2:	Address 0x00000000000029e2 is out of bounds.


000029e4 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    29e4:	b480      	push	{r7}
    29e6:	b083      	sub	sp, #12
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
    29ec:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    29ee:	4a04      	ldr	r2, [pc, #16]	; (2a00 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    29f0:	683b      	ldr	r3, [r7, #0]
    29f2:	6013      	str	r3, [r2, #0]
  }
    29f4:	bf00      	nop
    29f6:	370c      	adds	r7, #12
    29f8:	46bd      	mov	sp, r7
    29fa:	bc80      	pop	{r7}
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop
    2a00:	2007c2d4 	.word	0x2007c2d4

00002a04 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    2a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a06:	b08b      	sub	sp, #44	; 0x2c
    2a08:	af02      	add	r7, sp, #8
    2a0a:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    2a0c:	2304      	movs	r3, #4
    2a0e:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    2a10:	4b1f      	ldr	r3, [pc, #124]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	685b      	ldr	r3, [r3, #4]
    2a16:	2b00      	cmp	r3, #0
    2a18:	bf14      	ite	ne
    2a1a:	2301      	movne	r3, #1
    2a1c:	2300      	moveq	r3, #0
    2a1e:	b2db      	uxtb	r3, r3
    2a20:	2b00      	cmp	r3, #0
    2a22:	d030      	beq.n	2a86 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    2a24:	4b1a      	ldr	r3, [pc, #104]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	2200      	movs	r2, #0
    2a2a:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    2a2c:	4b18      	ldr	r3, [pc, #96]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	681a      	ldr	r2, [r3, #0]
    2a32:	4b17      	ldr	r3, [pc, #92]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	f042 0202 	orr.w	r2, r2, #2
    2a3a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    2a3c:	4b14      	ldr	r3, [pc, #80]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	681a      	ldr	r2, [r3, #0]
    2a42:	4b13      	ldr	r3, [pc, #76]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	f042 0201 	orr.w	r2, r2, #1
    2a4a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    2a4c:	4b10      	ldr	r3, [pc, #64]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	681a      	ldr	r2, [r3, #0]
    2a52:	4b0f      	ldr	r3, [pc, #60]	; (2a90 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	f042 0204 	orr.w	r2, r2, #4
    2a5a:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	689e      	ldr	r6, [r3, #8]
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    2a64:	681b      	ldr	r3, [r3, #0]
    2a66:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    2a68:	4b0a      	ldr	r3, [pc, #40]	; (2a94 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    2a6a:	f107 040c 	add.w	r4, r7, #12
    2a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2a74:	69bb      	ldr	r3, [r7, #24]
    2a76:	9300      	str	r3, [sp, #0]
    2a78:	f107 030c 	add.w	r3, r7, #12
    2a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
    2a7e:	4630      	mov	r0, r6
    2a80:	47a8      	blx	r5
      status = Status::kSuccess;
    2a82:	2300      	movs	r3, #0
    2a84:	61fb      	str	r3, [r7, #28]
    }

    return status;
    2a86:	69fb      	ldr	r3, [r7, #28]
  }
    2a88:	4618      	mov	r0, r3
    2a8a:	3724      	adds	r7, #36	; 0x24
    2a8c:	46bd      	mov	sp, r7
    2a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a90:	2007c01c 	.word	0x2007c01c
    2a94:	00006d48 	.word	0x00006d48

00002a98 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    2a98:	b480      	push	{r7}
    2a9a:	b083      	sub	sp, #12
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	681b      	ldr	r3, [r3, #0]
    2aa4:	4618      	mov	r0, r3
    2aa6:	370c      	adds	r7, #12
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc80      	pop	{r7}
    2aac:	4770      	bx	lr

00002aae <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2aae:	b590      	push	{r4, r7, lr}
    2ab0:	b085      	sub	sp, #20
    2ab2:	af00      	add	r7, sp, #0
    2ab4:	6078      	str	r0, [r7, #4]
    2ab6:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	4618      	mov	r0, r3
    2abc:	f7ff ffec 	bl	2a98 <units::linear_scale<float>::operator()() const>
    2ac0:	4604      	mov	r4, r0
    2ac2:	683b      	ldr	r3, [r7, #0]
    2ac4:	4618      	mov	r0, r3
    2ac6:	f7ff ffe7 	bl	2a98 <units::linear_scale<float>::operator()() const>
    2aca:	4603      	mov	r3, r0
    2acc:	60fb      	str	r3, [r7, #12]
    2ace:	f107 030c 	add.w	r3, r7, #12
    2ad2:	4618      	mov	r0, r3
    2ad4:	f7ff fea6 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2ad8:	4603      	mov	r3, r0
    2ada:	4619      	mov	r1, r3
    2adc:	4620      	mov	r0, r4
    2ade:	f002 f8d5 	bl	4c8c <__aeabi_fdiv>
    2ae2:	4603      	mov	r3, r0
    2ae4:	461a      	mov	r2, r3
    2ae6:	f107 0308 	add.w	r3, r7, #8
    2aea:	4611      	mov	r1, r2
    2aec:	4618      	mov	r0, r3
    2aee:	f000 f805 	bl	2afc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2af2:	68bb      	ldr	r3, [r7, #8]
	}
    2af4:	4618      	mov	r0, r3
    2af6:	3714      	adds	r7, #20
    2af8:	46bd      	mov	sp, r7
    2afa:	bd90      	pop	{r4, r7, pc}

00002afc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2afc:	b580      	push	{r7, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
    2b04:	6039      	str	r1, [r7, #0]
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	463a      	mov	r2, r7
    2b0a:	4611      	mov	r1, r2
    2b0c:	4618      	mov	r0, r3
    2b0e:	f7ff fe15 	bl	273c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	4618      	mov	r0, r3
    2b16:	3708      	adds	r7, #8
    2b18:	46bd      	mov	sp, r7
    2b1a:	bd80      	pop	{r7, pc}

00002b1c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    2b1c:	b590      	push	{r4, r7, lr}
    2b1e:	b085      	sub	sp, #20
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
    2b24:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    2b26:	687b      	ldr	r3, [r7, #4]
    2b28:	4618      	mov	r0, r3
    2b2a:	f7ff ffb5 	bl	2a98 <units::linear_scale<float>::operator()() const>
    2b2e:	4604      	mov	r4, r0
    2b30:	6838      	ldr	r0, [r7, #0]
    2b32:	f001 ffa3 	bl	4a7c <__aeabi_i2f>
    2b36:	4603      	mov	r3, r0
    2b38:	4619      	mov	r1, r3
    2b3a:	4620      	mov	r0, r4
    2b3c:	f001 fee8 	bl	4910 <__aeabi_fsub>
    2b40:	4603      	mov	r3, r0
    2b42:	461a      	mov	r2, r3
    2b44:	f107 030c 	add.w	r3, r7, #12
    2b48:	4611      	mov	r1, r2
    2b4a:	4618      	mov	r0, r3
    2b4c:	f7ff ffd6 	bl	2afc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2b50:	68fb      	ldr	r3, [r7, #12]
	}
    2b52:	4618      	mov	r0, r3
    2b54:	3714      	adds	r7, #20
    2b56:	46bd      	mov	sp, r7
    2b58:	bd90      	pop	{r4, r7, pc}

00002b5a <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2b5a:	b580      	push	{r7, lr}
    2b5c:	b082      	sub	sp, #8
    2b5e:	af00      	add	r7, sp, #0
    2b60:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2b62:	6878      	ldr	r0, [r7, #4]
    2b64:	f001 fb01 	bl	416a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2b68:	4603      	mov	r3, r0
	}
    2b6a:	4618      	mov	r0, r3
    2b6c:	3708      	adds	r7, #8
    2b6e:	46bd      	mov	sp, r7
    2b70:	bd80      	pop	{r7, pc}

00002b72 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    2b72:	b580      	push	{r7, lr}
    2b74:	b082      	sub	sp, #8
    2b76:	af00      	add	r7, sp, #0
    2b78:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    2b7a:	6878      	ldr	r0, [r7, #4]
    2b7c:	f000 f805 	bl	2b8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    2b80:	4603      	mov	r3, r0
	}
    2b82:	4618      	mov	r0, r3
    2b84:	3708      	adds	r7, #8
    2b86:	46bd      	mov	sp, r7
    2b88:	bd80      	pop	{r7, pc}

00002b8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2b8a:	b580      	push	{r7, lr}
    2b8c:	b082      	sub	sp, #8
    2b8e:	af00      	add	r7, sp, #0
    2b90:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	4618      	mov	r0, r3
    2b96:	f7ff ff7f 	bl	2a98 <units::linear_scale<float>::operator()() const>
    2b9a:	4603      	mov	r3, r0
    2b9c:	4618      	mov	r0, r3
    2b9e:	f002 f9ad 	bl	4efc <__aeabi_f2uiz>
    2ba2:	4603      	mov	r3, r0
		}
    2ba4:	4618      	mov	r0, r3
    2ba6:	3708      	adds	r7, #8
    2ba8:	46bd      	mov	sp, r7
    2baa:	bd80      	pop	{r7, pc}

00002bac <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    2bac:	b590      	push	{r4, r7, lr}
    2bae:	b089      	sub	sp, #36	; 0x24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	6078      	str	r0, [r7, #4]
    2bb4:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    2bb6:	f04f 0001 	mov.w	r0, #1
    2bba:	f04f 0100 	mov.w	r1, #0
    2bbe:	f7ff fda8 	bl	2712 <units::literals::operator"" _Hz(unsigned long long)>
    2bc2:	4603      	mov	r3, r0
    2bc4:	60fb      	str	r3, [r7, #12]
    2bc6:	f107 020c 	add.w	r2, r7, #12
    2bca:	463b      	mov	r3, r7
    2bcc:	4611      	mov	r1, r2
    2bce:	4618      	mov	r0, r3
    2bd0:	f7ff fe42 	bl	2858 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2bd4:	4603      	mov	r3, r0
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d002      	beq.n	2be0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    2bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2bde:	e041      	b.n	2c64 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	685a      	ldr	r2, [r3, #4]
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	685b      	ldr	r3, [r3, #4]
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	330c      	adds	r3, #12
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	4610      	mov	r0, r2
    2bf0:	4798      	blx	r3
    2bf2:	4603      	mov	r3, r0
    2bf4:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    2bf6:	463a      	mov	r2, r7
    2bf8:	f107 0308 	add.w	r3, r7, #8
    2bfc:	4611      	mov	r1, r2
    2bfe:	4618      	mov	r0, r3
    2c00:	f7ff ff55 	bl	2aae <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c04:	4603      	mov	r3, r0
    2c06:	617b      	str	r3, [r7, #20]
    2c08:	f107 0314 	add.w	r3, r7, #20
    2c0c:	2101      	movs	r1, #1
    2c0e:	4618      	mov	r0, r3
    2c10:	f7ff ff84 	bl	2b1c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    2c14:	4603      	mov	r3, r0
    2c16:	613b      	str	r3, [r7, #16]
    2c18:	f107 0310 	add.w	r3, r7, #16
    2c1c:	4618      	mov	r0, r3
    2c1e:	f7ff ff9c 	bl	2b5a <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c22:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2c24:	f107 0308 	add.w	r3, r7, #8
    2c28:	4618      	mov	r0, r3
    2c2a:	f7ff ffa2 	bl	2b72 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c2e:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    2c30:	463b      	mov	r3, r7
    2c32:	4618      	mov	r0, r3
    2c34:	f7ff ff9d 	bl	2b72 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2c38:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    2c3a:	fbb4 f2f3 	udiv	r2, r4, r3
    2c3e:	fb03 f302 	mul.w	r3, r3, r2
    2c42:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    2c44:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    2c46:	69fb      	ldr	r3, [r7, #28]
    2c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2c4c:	d305      	bcc.n	2c5a <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    2c4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2c52:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    2c54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2c58:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    2c5a:	4b04      	ldr	r3, [pc, #16]	; (2c6c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	69fa      	ldr	r2, [r7, #28]
    2c60:	605a      	str	r2, [r3, #4]
    return remainder;
    2c62:	69bb      	ldr	r3, [r7, #24]
  }
    2c64:	4618      	mov	r0, r3
    2c66:	3724      	adds	r7, #36	; 0x24
    2c68:	46bd      	mov	sp, r7
    2c6a:	bd90      	pop	{r4, r7, pc}
    2c6c:	2007c01c 	.word	0x2007c01c

00002c70 <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>:
/// @return constexpr Mask from the low bit position to the high bit position.
///         If the low_bit_position > high_bit_position, the result is
///         undefined.
constexpr Mask CreateMaskFromRange(uint8_t low_bit_position,
                                   uint8_t high_bit_position)
{
    2c70:	b480      	push	{r7}
    2c72:	b085      	sub	sp, #20
    2c74:	af00      	add	r7, sp, #0
    2c76:	4603      	mov	r3, r0
    2c78:	460a      	mov	r2, r1
    2c7a:	71fb      	strb	r3, [r7, #7]
    2c7c:	4613      	mov	r3, r2
    2c7e:	71bb      	strb	r3, [r7, #6]
  return Mask({
      .position = low_bit_position,
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
  });
    2c80:	79fb      	ldrb	r3, [r7, #7]
    2c82:	733b      	strb	r3, [r7, #12]
      .width = static_cast<uint8_t>(1 + (high_bit_position - low_bit_position)),
    2c84:	79ba      	ldrb	r2, [r7, #6]
    2c86:	79fb      	ldrb	r3, [r7, #7]
    2c88:	1ad3      	subs	r3, r2, r3
    2c8a:	b2db      	uxtb	r3, r3
    2c8c:	3301      	adds	r3, #1
    2c8e:	b2db      	uxtb	r3, r3
  });
    2c90:	737b      	strb	r3, [r7, #13]
    2c92:	2300      	movs	r3, #0
    2c94:	7b3a      	ldrb	r2, [r7, #12]
    2c96:	f362 0307 	bfi	r3, r2, #0, #8
    2c9a:	7b7a      	ldrb	r2, [r7, #13]
    2c9c:	f362 230f 	bfi	r3, r2, #8, #8
}
    2ca0:	4618      	mov	r0, r3
    2ca2:	3714      	adds	r7, #20
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bc80      	pop	{r7}
    2ca8:	4770      	bx	lr

00002caa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2caa:	b580      	push	{r7, lr}
    2cac:	b086      	sub	sp, #24
    2cae:	af00      	add	r7, sp, #0
    2cb0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2cb2:	6878      	ldr	r0, [r7, #4]
    2cb4:	f000 f806 	bl	2cc4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2cb8:	4603      	mov	r3, r0
	}
    2cba:	4618      	mov	r0, r3
    2cbc:	3718      	adds	r7, #24
    2cbe:	46bd      	mov	sp, r7
    2cc0:	bd80      	pop	{r7, pc}
    2cc2:	Address 0x0000000000002cc2 is out of bounds.


00002cc4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b084      	sub	sp, #16
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	7239      	strb	r1, [r7, #8]
    2cce:	713a      	strb	r2, [r7, #4]
    2cd0:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	4904      	ldr	r1, [pc, #16]	; (2ce8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x24>)
    2cd8:	4618      	mov	r0, r3
    2cda:	f001 ff23 	bl	4b24 <__aeabi_fmul>
    2cde:	4603      	mov	r3, r0
		}
    2ce0:	4618      	mov	r0, r3
    2ce2:	3710      	adds	r7, #16
    2ce4:	46bd      	mov	sp, r7
    2ce6:	bd80      	pop	{r7, pc}
    2ce8:	49742400 	.word	0x49742400

00002cec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
    2cec:	b590      	push	{r4, r7, lr}
    2cee:	b085      	sub	sp, #20
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	6078      	str	r0, [r7, #4]
    2cf4:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
    2cf6:	687c      	ldr	r4, [r7, #4]
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f7ff ffd5 	bl	2caa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2d00:	4603      	mov	r3, r0
    2d02:	60bb      	str	r3, [r7, #8]
    2d04:	f107 020c 	add.w	r2, r7, #12
    2d08:	f107 0308 	add.w	r3, r7, #8
    2d0c:	4619      	mov	r1, r3
    2d0e:	4620      	mov	r0, r4
    2d10:	f000 f805 	bl	2d1e <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	4618      	mov	r0, r3
    2d18:	3714      	adds	r7, #20
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd90      	pop	{r4, r7, pc}

00002d1e <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2d1e:	b480      	push	{r7}
    2d20:	b085      	sub	sp, #20
    2d22:	af00      	add	r7, sp, #0
    2d24:	60f8      	str	r0, [r7, #12]
    2d26:	60b9      	str	r1, [r7, #8]
    2d28:	607a      	str	r2, [r7, #4]
    2d2a:	68bb      	ldr	r3, [r7, #8]
    2d2c:	681a      	ldr	r2, [r3, #0]
    2d2e:	68fb      	ldr	r3, [r7, #12]
    2d30:	601a      	str	r2, [r3, #0]
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	4618      	mov	r0, r3
    2d36:	3714      	adds	r7, #20
    2d38:	46bd      	mov	sp, r7
    2d3a:	bc80      	pop	{r7}
    2d3c:	4770      	bx	lr
    2d3e:	Address 0x0000000000002d3e is out of bounds.


00002d40 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// @note The USB subsystem should be configured to obtain its input clock
  ///       from the USB PLL. The internal RC is used for PLL0 and will not
  ///       generate a precise enough clock to be used by the USB subsystem.
  ///
  /// @param frequency The desired CPU Clock frequency in megahertz.
  void SetSystemClockFrequency(
    2d40:	b590      	push	{r4, r7, lr}
    2d42:	b085      	sub	sp, #20
    2d44:	af00      	add	r7, sp, #0
    2d46:	6078      	str	r0, [r7, #4]
    2d48:	6039      	str	r1, [r7, #0]
    //       update the PLL0CFG and enable PLL0 simultaneously with the same
    //       feed sequence.

    // 1. Disconnect PLL0 with one feed sequence if PLL0 is already connected.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2d4a:	4b63      	ldr	r3, [pc, #396]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2d4c:	681b      	ldr	r3, [r3, #0]
    2d4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2d52:	4b61      	ldr	r3, [pc, #388]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2d54:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllConnectBit);
    2d56:	2101      	movs	r1, #1
    2d58:	4610      	mov	r0, r2
    2d5a:	f001 fa1e 	bl	419a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2d5e:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2d60:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2d64:	2100      	movs	r1, #0
    2d66:	6878      	ldr	r0, [r7, #4]
    2d68:	f000 fb76 	bl	3458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 2. Disable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2d6c:	4b5a      	ldr	r3, [pc, #360]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2d74:	4b58      	ldr	r3, [pc, #352]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2d76:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PLL0CON, kPllEnableBit);
    2d78:	2100      	movs	r1, #0
    2d7a:	4610      	mov	r0, r2
    2d7c:	f001 fa0d 	bl	419a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2d80:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2d82:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2d86:	2100      	movs	r1, #0
    2d88:	6878      	ldr	r0, [r7, #4]
    2d8a:	f000 fb65 	bl	3458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 3. Change the CPU Clock Divider setting to speed up operation without
    //    PLL0, if desired.
    SetCpuClockDivider(0);
    2d8e:	2100      	movs	r1, #0
    2d90:	6878      	ldr	r0, [r7, #4]
    2d92:	f000 fc13 	bl	35bc <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 4. Write to the Clock Source Selection Control register to change the
    //    clock source if needed.
    //    The 4 MHz internal RC will be used until PLL0 achieves a lock and is
    //    connected.
    SelectOscillatorSource(OscillatorSource::kIrc);
    2d96:	2100      	movs	r1, #0
    2d98:	6878      	ldr	r0, [r7, #4]
    2d9a:	f000 f9e5 	bl	3168 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>
    // 5. Write to the PLL0CFG and make it effective with one feed sequence.
    //    The PLL0CFG can only be updated when PLL0 is disabled.
    const Pll0Settings_t kPll0Settings =
        CalculatePll0(kDefaultIRCFrequency, frequency);
    2d9e:	463a      	mov	r2, r7
    2da0:	f107 030c 	add.w	r3, r7, #12
    2da4:	4611      	mov	r1, r2
    2da6:	4618      	mov	r0, r3
    2da8:	f7ff ffa0 	bl	2cec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2dac:	4b4b      	ldr	r3, [pc, #300]	; (2edc <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19c>)
    2dae:	68fa      	ldr	r2, [r7, #12]
    2db0:	6819      	ldr	r1, [r3, #0]
    2db2:	6878      	ldr	r0, [r7, #4]
    2db4:	f000 fa34 	bl	3220 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    2db8:	4603      	mov	r3, r0
    2dba:	60bb      	str	r3, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2dbc:	4b46      	ldr	r3, [pc, #280]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.multiplier,
    2dc4:	8939      	ldrh	r1, [r7, #8]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2dc6:	4b44      	ldr	r3, [pc, #272]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2dc8:	681c      	ldr	r4, [r3, #0]
    2dca:	4b45      	ldr	r3, [pc, #276]	; (2ee0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a0>)
    2dcc:	781a      	ldrb	r2, [r3, #0]
    2dce:	785b      	ldrb	r3, [r3, #1]
    2dd0:	021b      	lsls	r3, r3, #8
    2dd2:	431a      	orrs	r2, r3
    2dd4:	2300      	movs	r3, #0
    2dd6:	f362 030f 	bfi	r3, r2, #0, #16
    2dda:	461a      	mov	r2, r3
    2ddc:	f001 f9ef 	bl	41be <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>
    2de0:	4603      	mov	r3, r0
    2de2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kMultiplier);
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2de6:	4b3c      	ldr	r3, [pc, #240]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2de8:	681b      	ldr	r3, [r3, #0]
    2dea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                             kPll0Settings.pre_divider,
    2dee:	7ab9      	ldrb	r1, [r7, #10]
    system_controller->PLL0CFG = bit::Insert(system_controller->PLL0CFG,
    2df0:	4b39      	ldr	r3, [pc, #228]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2df2:	681c      	ldr	r4, [r3, #0]
    2df4:	4b3b      	ldr	r3, [pc, #236]	; (2ee4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    2df6:	781a      	ldrb	r2, [r3, #0]
    2df8:	785b      	ldrb	r3, [r3, #1]
    2dfa:	021b      	lsls	r3, r3, #8
    2dfc:	431a      	orrs	r2, r3
    2dfe:	2300      	movs	r3, #0
    2e00:	f362 030f 	bfi	r3, r2, #0, #16
    2e04:	461a      	mov	r2, r3
    2e06:	f001 f9ed 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    2e0a:	4603      	mov	r3, r0
    2e0c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                                             MainPll::kPreDivider);
    WritePllFeedSequence(PllSelect::kMainPll);
    2e10:	2100      	movs	r1, #0
    2e12:	6878      	ldr	r0, [r7, #4]
    2e14:	f000 fb20 	bl	3458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 6. Enable PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    2e18:	4b2f      	ldr	r3, [pc, #188]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e1a:	681b      	ldr	r3, [r3, #0]
    2e1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2e20:	4b2d      	ldr	r3, [pc, #180]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e22:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllEnableBit);
    2e24:	2100      	movs	r1, #0
    2e26:	4610      	mov	r0, r2
    2e28:	f001 f9ef 	bl	420a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2e2c:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2e2e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2e32:	2100      	movs	r1, #0
    2e34:	6878      	ldr	r0, [r7, #4]
    2e36:	f000 fb0f 	bl	3458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>
    // 7. Change the CPU Clock Divider setting for the operation with PLL0.
    //    It is critical to do this before connecting PLL0.
    SetCpuClockDivider(kPll0Settings.cpu_divider);
    2e3a:	7afb      	ldrb	r3, [r7, #11]
    2e3c:	4619      	mov	r1, r3
    2e3e:	6878      	ldr	r0, [r7, #4]
    2e40:	f000 fbbc 	bl	35bc <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>
    // 8. Wait for PLL0 to achieve lock by monitoring the PLOCK0 bit in the
    //    PLL0STAT register, or using the PLOCK0 interrupt, or wait for a fixed
    //    time when the input clock to PLL0 is slow (i.e. 32 kHz).
    SJ2_ASSERT_FATAL(WaitForPllLockStatus(PllSelect::kMainPll),
    2e44:	2100      	movs	r1, #0
    2e46:	6878      	ldr	r0, [r7, #4]
    2e48:	f000 fb34 	bl	34b4 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    2e4c:	4603      	mov	r3, r0
    2e4e:	f083 0301 	eor.w	r3, r3, #1
    2e52:	b2db      	uxtb	r3, r3
    2e54:	2b00      	cmp	r3, #0
    2e56:	d00d      	beq.n	2e74 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x134>
    2e58:	23c5      	movs	r3, #197	; 0xc5
    2e5a:	4a23      	ldr	r2, [pc, #140]	; (2ee8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    2e5c:	4923      	ldr	r1, [pc, #140]	; (2eec <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    2e5e:	4824      	ldr	r0, [pc, #144]	; (2ef0 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    2e60:	f7ff fb66 	bl	2530 <printf>
    2e64:	4823      	ldr	r0, [pc, #140]	; (2ef4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    2e66:	f7fe fa39 	bl	12dc <puts>
    2e6a:	2100      	movs	r1, #0
    2e6c:	2001      	movs	r0, #1
    2e6e:	f7fe f819 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2e72:	e7fe      	b.n	2e72 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x132>
                     "PLL0 lock could not be established before timeout");
    // 9. Connect PLL0 with one feed sequence.
    system_controller->PLL0CON =
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    2e74:	4b18      	ldr	r3, [pc, #96]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    system_controller->PLL0CON =
    2e7c:	4b16      	ldr	r3, [pc, #88]	; (2ed8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2e7e:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PLL0CON, kPllConnectBit);
    2e80:	2101      	movs	r1, #1
    2e82:	4610      	mov	r0, r2
    2e84:	f001 f9c1 	bl	420a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2e88:	4603      	mov	r3, r0
    system_controller->PLL0CON =
    2e8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    WritePllFeedSequence(PllSelect::kMainPll);
    2e8e:	2100      	movs	r1, #0
    2e90:	6878      	ldr	r0, [r7, #4]
    2e92:	f000 fae1 	bl	3458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>

    SJ2_ASSERT_FATAL(WaitForPllConnectionStatus(PllSelect::kMainPll),
    2e96:	2100      	movs	r1, #0
    2e98:	6878      	ldr	r0, [r7, #4]
    2e9a:	f000 fb4d 	bl	3538 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>
    2e9e:	4603      	mov	r3, r0
    2ea0:	f083 0301 	eor.w	r3, r3, #1
    2ea4:	b2db      	uxtb	r3, r3
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d00d      	beq.n	2ec6 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x186>
    2eaa:	23cc      	movs	r3, #204	; 0xcc
    2eac:	4a0e      	ldr	r2, [pc, #56]	; (2ee8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    2eae:	4912      	ldr	r1, [pc, #72]	; (2ef8 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    2eb0:	4812      	ldr	r0, [pc, #72]	; (2efc <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    2eb2:	f7ff fb3d 	bl	2530 <printf>
    2eb6:	480f      	ldr	r0, [pc, #60]	; (2ef4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    2eb8:	f7fe fa10 	bl	12dc <puts>
    2ebc:	2100      	movs	r1, #0
    2ebe:	2001      	movs	r0, #1
    2ec0:	f7fd fff0 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2ec4:	e7fe      	b.n	2ec4 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>
                     "Failed to connect PLL0.");

    speed_in_hertz = frequency;
    2ec6:	463b      	mov	r3, r7
    2ec8:	4619      	mov	r1, r3
    2eca:	480d      	ldr	r0, [pc, #52]	; (2f00 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1c0>)
    2ecc:	f001 f9ae 	bl	422c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
  }
    2ed0:	bf00      	nop
    2ed2:	3714      	adds	r7, #20
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bd90      	pop	{r4, r7, pc}
    2ed8:	2007c2e0 	.word	0x2007c2e0
    2edc:	00007554 	.word	0x00007554
    2ee0:	0000754c 	.word	0x0000754c
    2ee4:	00007550 	.word	0x00007550
    2ee8:	000077ac 	.word	0x000077ac
    2eec:	00007558 	.word	0x00007558
    2ef0:	00006d58 	.word	0x00006d58
    2ef4:	00006e24 	.word	0x00006e24
    2ef8:	00007570 	.word	0x00007570
    2efc:	00006e3c 	.word	0x00006e3c
    2f00:	2007c020 	.word	0x2007c020

00002f04 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:
  /// The following dividers are supported for non-CAN peripherals: 1, 2, 4, 8.
  /// For CAN the following dividers are supported: 1, 2, 4, 6.
  ///
  /// @param peripheral_select  Peripheral to configure.
  /// @param peripheral_divider Peripheral clock divider value.
  void SetPeripheralClockDivider(const PeripheralID & peripheral_select,
    2f04:	b580      	push	{r7, lr}
    2f06:	b088      	sub	sp, #32
    2f08:	af00      	add	r7, sp, #0
    2f0a:	60f8      	str	r0, [r7, #12]
    2f0c:	60b9      	str	r1, [r7, #8]
    2f0e:	4613      	mov	r3, r2
    2f10:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    const bool kIsCanPeripheral =
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    2f12:	68bb      	ldr	r3, [r7, #8]
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	220d      	movs	r2, #13
    2f18:	4293      	cmp	r3, r2
    2f1a:	d004      	beq.n	2f26 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x22>
        peripheral_select.device_id == Peripherals::kCan2.device_id;
    2f1c:	68bb      	ldr	r3, [r7, #8]
    2f1e:	781b      	ldrb	r3, [r3, #0]
    2f20:	220e      	movs	r2, #14
        peripheral_select.device_id == Peripherals::kCan1.device_id ||
    2f22:	4293      	cmp	r3, r2
    2f24:	d101      	bne.n	2f2a <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x26>
    2f26:	2301      	movs	r3, #1
    2f28:	e000      	b.n	2f2c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x28>
    2f2a:	2300      	movs	r3, #0
    const bool kIsCanPeripheral =
    2f2c:	75fb      	strb	r3, [r7, #23]
    // Convert the divider value to corresponding 2-bit select value
    // The list of divider select values can be found in the LPC176x/5x User
    // Manual Table 42.
    uint8_t divider_select;
    switch (peripheral_divider)
    2f2e:	79fb      	ldrb	r3, [r7, #7]
    2f30:	3b01      	subs	r3, #1
    2f32:	2b07      	cmp	r3, #7
    2f34:	d848      	bhi.n	2fc8 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xc4>
    2f36:	a201      	add	r2, pc, #4	; (adr r2, 2f3c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x38>)
    2f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2f3c:	00002f5d 	.word	0x00002f5d
    2f40:	00002f63 	.word	0x00002f63
    2f44:	00002fc9 	.word	0x00002fc9
    2f48:	00002f69 	.word	0x00002f69
    2f4c:	00002fc9 	.word	0x00002fc9
    2f50:	00002f6f 	.word	0x00002f6f
    2f54:	00002fc9 	.word	0x00002fc9
    2f58:	00002f9f 	.word	0x00002f9f
    {
      case 1: divider_select = 0b01; break;
    2f5c:	2301      	movs	r3, #1
    2f5e:	77fb      	strb	r3, [r7, #31]
    2f60:	e041      	b.n	2fe6 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 2: divider_select = 0b10; break;
    2f62:	2302      	movs	r3, #2
    2f64:	77fb      	strb	r3, [r7, #31]
    2f66:	e03e      	b.n	2fe6 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 4: divider_select = 0b00; break;
    2f68:	2300      	movs	r3, #0
    2f6a:	77fb      	strb	r3, [r7, #31]
    2f6c:	e03b      	b.n	2fe6 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 6:
      {
        SJ2_ASSERT_FATAL(
    2f6e:	7dfb      	ldrb	r3, [r7, #23]
    2f70:	f083 0301 	eor.w	r3, r3, #1
    2f74:	b2db      	uxtb	r3, r3
    2f76:	2b00      	cmp	r3, #0
    2f78:	d00e      	beq.n	2f98 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x94>
    2f7a:	f44f 738e 	mov.w	r3, #284	; 0x11c
    2f7e:	4a26      	ldr	r2, [pc, #152]	; (3018 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    2f80:	4926      	ldr	r1, [pc, #152]	; (301c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x118>)
    2f82:	4827      	ldr	r0, [pc, #156]	; (3020 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x11c>)
    2f84:	f7ff fad4 	bl	2530 <printf>
    2f88:	4826      	ldr	r0, [pc, #152]	; (3024 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    2f8a:	f7fe f9a7 	bl	12dc <puts>
    2f8e:	2100      	movs	r1, #0
    2f90:	2001      	movs	r0, #1
    2f92:	f7fd ff87 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2f96:	e7fe      	b.n	2f96 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x92>
            kIsCanPeripheral,
            "The divider value of 6 is only supported for CAN peripherals.");
        divider_select = 0b11;
    2f98:	2303      	movs	r3, #3
    2f9a:	77fb      	strb	r3, [r7, #31]
      }
      break;
    2f9c:	e023      	b.n	2fe6 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      case 8:
      {
        SJ2_ASSERT_FATAL(
    2f9e:	7dfb      	ldrb	r3, [r7, #23]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d00e      	beq.n	2fc2 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbe>
    2fa4:	f44f 7392 	mov.w	r3, #292	; 0x124
    2fa8:	4a1b      	ldr	r2, [pc, #108]	; (3018 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    2faa:	491f      	ldr	r1, [pc, #124]	; (3028 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x124>)
    2fac:	481f      	ldr	r0, [pc, #124]	; (302c <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x128>)
    2fae:	f7ff fabf 	bl	2530 <printf>
    2fb2:	481c      	ldr	r0, [pc, #112]	; (3024 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    2fb4:	f7fe f992 	bl	12dc <puts>
    2fb8:	2100      	movs	r1, #0
    2fba:	2001      	movs	r0, #1
    2fbc:	f7fd ff72 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2fc0:	e7fe      	b.n	2fc0 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xbc>
            !kIsCanPeripheral,
            "The divider value of 8 is not supported for CAN peripherals.");
        divider_select = 0b11;
    2fc2:	2303      	movs	r3, #3
    2fc4:	77fb      	strb	r3, [r7, #31]
      }
      break;
    2fc6:	e00e      	b.n	2fe6 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe2>
      default:
        SJ2_ASSERT_FATAL(
    2fc8:	f44f 7396 	mov.w	r3, #300	; 0x12c
    2fcc:	4a12      	ldr	r2, [pc, #72]	; (3018 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x114>)
    2fce:	4918      	ldr	r1, [pc, #96]	; (3030 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x12c>)
    2fd0:	4818      	ldr	r0, [pc, #96]	; (3034 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x130>)
    2fd2:	f7ff faad 	bl	2530 <printf>
    2fd6:	4813      	ldr	r0, [pc, #76]	; (3024 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x120>)
    2fd8:	f7fe f980 	bl	12dc <puts>
    2fdc:	2100      	movs	r1, #0
    2fde:	2001      	movs	r0, #1
    2fe0:	f7fd ff60 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    2fe4:	e7fe      	b.n	2fe4 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0xe0>
            "Only the following peripheral divider values are supported: 1, 2, "
            "4, 8. The divider value of 6 is supported for CAN peripherals.");
        divider_select = -1;
    }
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    2fe6:	68b9      	ldr	r1, [r7, #8]
    2fe8:	68f8      	ldr	r0, [r7, #12]
    2fea:	f000 fb0b 	bl	3604 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    2fee:	61b8      	str	r0, [r7, #24]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    2ff0:	68b9      	ldr	r1, [r7, #8]
    2ff2:	68f8      	ldr	r0, [r7, #12]
    2ff4:	f000 fb20 	bl	3638 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    2ff8:	4603      	mov	r3, r0
    2ffa:	82bb      	strh	r3, [r7, #20]
    *pclk_sel = bit::Insert(*pclk_sel, divider_select, kDividerMask);
    2ffc:	69bb      	ldr	r3, [r7, #24]
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	7ff9      	ldrb	r1, [r7, #31]
    3002:	697a      	ldr	r2, [r7, #20]
    3004:	4618      	mov	r0, r3
    3006:	f001 f8ed 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    300a:	4602      	mov	r2, r0
    300c:	69bb      	ldr	r3, [r7, #24]
    300e:	601a      	str	r2, [r3, #0]
  }
    3010:	bf00      	nop
    3012:	3720      	adds	r7, #32
    3014:	46bd      	mov	sp, r7
    3016:	bd80      	pop	{r7, pc}
    3018:	00007728 	.word	0x00007728
    301c:	00007588 	.word	0x00007588
    3020:	00006ef4 	.word	0x00006ef4
    3024:	00006e24 	.word	0x00006e24
    3028:	000075a0 	.word	0x000075a0
    302c:	00006fb4 	.word	0x00006fb4
    3030:	000075b8 	.word	0x000075b8
    3034:	00007074 	.word	0x00007074

00003038 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns The clock divider for the specified peripheral.
  uint32_t GetPeripheralClockDivider(
    3038:	b580      	push	{r7, lr}
    303a:	b086      	sub	sp, #24
    303c:	af00      	add	r7, sp, #0
    303e:	6078      	str	r0, [r7, #4]
    3040:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    volatile uint32_t * pclk_sel =
        GetPeripheralClockSelectRegister(peripheral_select);
    3042:	6839      	ldr	r1, [r7, #0]
    3044:	6878      	ldr	r0, [r7, #4]
    3046:	f000 fadd 	bl	3604 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>
    304a:	6138      	str	r0, [r7, #16]
    const bit::Mask kDividerMask =
        CalculatePeripheralClockDividerMask(peripheral_select);
    304c:	6839      	ldr	r1, [r7, #0]
    304e:	6878      	ldr	r0, [r7, #4]
    3050:	f000 faf2 	bl	3638 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>
    3054:	4603      	mov	r3, r0
    3056:	81bb      	strh	r3, [r7, #12]
    const uint8_t kDividerSelect =
        static_cast<uint8_t>(bit::Extract(*pclk_sel, kDividerMask));
    3058:	693b      	ldr	r3, [r7, #16]
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	68f9      	ldr	r1, [r7, #12]
    305e:	4618      	mov	r0, r3
    3060:	f001 f8f5 	bl	424e <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    3064:	4603      	mov	r3, r0
    3066:	73fb      	strb	r3, [r7, #15]

    uint8_t peripheral_clock_divider;
    // convert and return the actual peripheral divider value based on the 2-bit
    // divider select value
    switch (kDividerSelect)
    3068:	7bfb      	ldrb	r3, [r7, #15]
    306a:	2b03      	cmp	r3, #3
    306c:	d81e      	bhi.n	30ac <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
    306e:	a201      	add	r2, pc, #4	; (adr r2, 3074 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x3c>)
    3070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3074:	00003085 	.word	0x00003085
    3078:	0000308b 	.word	0x0000308b
    307c:	00003091 	.word	0x00003091
    3080:	00003097 	.word	0x00003097
    {
      case 0b00: peripheral_clock_divider = 4; break;
    3084:	2304      	movs	r3, #4
    3086:	75fb      	strb	r3, [r7, #23]
    3088:	e010      	b.n	30ac <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b01: peripheral_clock_divider = 1; break;
    308a:	2301      	movs	r3, #1
    308c:	75fb      	strb	r3, [r7, #23]
    308e:	e00d      	b.n	30ac <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b10: peripheral_clock_divider = 2; break;
    3090:	2302      	movs	r3, #2
    3092:	75fb      	strb	r3, [r7, #23]
    3094:	e00a      	b.n	30ac <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
      case 0b11:
      {
        // 0b11 for CAN peripiherals use a divider of 6 while all others use a
        // divider of 8
        switch (peripheral_select.device_id)
    3096:	683b      	ldr	r3, [r7, #0]
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	3b0d      	subs	r3, #13
    309c:	2b01      	cmp	r3, #1
    309e:	d802      	bhi.n	30a6 <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x6e>
        {
          case Peripherals::kCan1.device_id: [[fallthrough]];
          case Peripherals::kCan2.device_id:
            peripheral_clock_divider = 6;
    30a0:	2306      	movs	r3, #6
    30a2:	75fb      	strb	r3, [r7, #23]
            break;
    30a4:	e002      	b.n	30ac <sjsu::lpc17xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x74>
          default: peripheral_clock_divider = 8; break;
    30a6:	2308      	movs	r3, #8
    30a8:	75fb      	strb	r3, [r7, #23]
    30aa:	bf00      	nop
        }
      }
    }
    return peripheral_clock_divider;
    30ac:	7dfb      	ldrb	r3, [r7, #23]
  }
    30ae:	4618      	mov	r0, r3
    30b0:	3718      	adds	r7, #24
    30b2:	46bd      	mov	sp, r7
    30b4:	bd80      	pop	{r7, pc}
    30b6:	bf00      	nop

000030b8 <sjsu::lpc17xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    30b8:	b480      	push	{r7}
    30ba:	b083      	sub	sp, #12
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    30c0:	4b03      	ldr	r3, [pc, #12]	; (30d0 <sjsu::lpc17xx::SystemController::GetSystemFrequency() const+0x18>)
    30c2:	681b      	ldr	r3, [r3, #0]
  }
    30c4:	4618      	mov	r0, r3
    30c6:	370c      	adds	r7, #12
    30c8:	46bd      	mov	sp, r7
    30ca:	bc80      	pop	{r7}
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop
    30d0:	2007c020 	.word	0x2007c020

000030d4 <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:
  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    30d4:	b580      	push	{r7, lr}
    30d6:	b082      	sub	sp, #8
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
    30dc:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    return bit::Read(system_controller->PCONP, peripheral_select.device_id);
    30de:	4b07      	ldr	r3, [pc, #28]	; (30fc <sjsu::lpc17xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x28>)
    30e0:	681b      	ldr	r3, [r3, #0]
    30e2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    30e6:	683b      	ldr	r3, [r7, #0]
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	4619      	mov	r1, r3
    30ec:	4610      	mov	r0, r2
    30ee:	f001 f8bf 	bl	4270 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    30f2:	4603      	mov	r3, r0
  }
    30f4:	4618      	mov	r0, r3
    30f6:	3708      	adds	r7, #8
    30f8:	46bd      	mov	sp, r7
    30fa:	bd80      	pop	{r7, pc}
    30fc:	2007c2e0 	.word	0x2007c2e0

00003100 <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    3100:	b590      	push	{r4, r7, lr}
    3102:	b083      	sub	sp, #12
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
    3108:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    310a:	4b09      	ldr	r3, [pc, #36]	; (3130 <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    310c:	681b      	ldr	r3, [r3, #0]
    310e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3112:	683b      	ldr	r3, [r7, #0]
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	4619      	mov	r1, r3
    system_controller->PCONP =
    3118:	4b05      	ldr	r3, [pc, #20]	; (3130 <sjsu::lpc17xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    311a:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    311c:	4610      	mov	r0, r2
    311e:	f001 f874 	bl	420a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3122:	4603      	mov	r3, r0
    system_controller->PCONP =
    3124:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3128:	bf00      	nop
    312a:	370c      	adds	r7, #12
    312c:	46bd      	mov	sp, r7
    312e:	bd90      	pop	{r4, r7, pc}
    3130:	2007c2e0 	.word	0x2007c2e0

00003134 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:

  void PowerDownPeripheral(
    3134:	b590      	push	{r4, r7, lr}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    313e:	4b09      	ldr	r3, [pc, #36]	; (3164 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	781b      	ldrb	r3, [r3, #0]
    314a:	4619      	mov	r1, r3
    system_controller->PCONP =
    314c:	4b05      	ldr	r3, [pc, #20]	; (3164 <sjsu::lpc17xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    314e:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    3150:	4610      	mov	r0, r2
    3152:	f001 f822 	bl	419a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3156:	4603      	mov	r3, r0
    system_controller->PCONP =
    3158:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    315c:	bf00      	nop
    315e:	370c      	adds	r7, #12
    3160:	46bd      	mov	sp, r7
    3162:	bd90      	pop	{r4, r7, pc}
    3164:	2007c2e0 	.word	0x2007c2e0

00003168 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const>:

 private:
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;

  void SelectOscillatorSource(OscillatorSource source) const
    3168:	b590      	push	{r4, r7, lr}
    316a:	b083      	sub	sp, #12
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    3170:	460b      	mov	r3, r1
    3172:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    3174:	4b0c      	ldr	r3, [pc, #48]	; (31a8 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    317c:	78f9      	ldrb	r1, [r7, #3]
    317e:	4b0a      	ldr	r3, [pc, #40]	; (31a8 <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x40>)
    3180:	681c      	ldr	r4, [r3, #0]
    3182:	4b0a      	ldr	r3, [pc, #40]	; (31ac <sjsu::lpc17xx::SystemController::SelectOscillatorSource(sjsu::lpc17xx::SystemController::OscillatorSource) const+0x44>)
    3184:	781a      	ldrb	r2, [r3, #0]
    3186:	785b      	ldrb	r3, [r3, #1]
    3188:	021b      	lsls	r3, r3, #8
    318a:	431a      	orrs	r2, r3
    318c:	2300      	movs	r3, #0
    318e:	f362 030f 	bfi	r3, r2, #0, #16
    3192:	461a      	mov	r2, r3
    3194:	f001 f882 	bl	429c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3198:	4603      	mov	r3, r0
    319a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    319e:	bf00      	nop
    31a0:	370c      	adds	r7, #12
    31a2:	46bd      	mov	sp, r7
    31a4:	bd90      	pop	{r4, r7, pc}
    31a6:	bf00      	nop
    31a8:	2007c2e0 	.word	0x2007c2e0
    31ac:	00007544 	.word	0x00007544

000031b0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    31b0:	b5b0      	push	{r4, r5, r7, lr}
    31b2:	b082      	sub	sp, #8
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	681c      	ldr	r4, [r3, #0]
    31be:	683b      	ldr	r3, [r7, #0]
    31c0:	4618      	mov	r0, r3
    31c2:	f7ff fb2f 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    31c6:	4602      	mov	r2, r0
    31c8:	2301      	movs	r3, #1
    31ca:	461d      	mov	r5, r3
    31cc:	4611      	mov	r1, r2
    31ce:	4620      	mov	r0, r4
    31d0:	f001 fe64 	bl	4e9c <__aeabi_fcmpgt>
    31d4:	4603      	mov	r3, r0
    31d6:	2b00      	cmp	r3, #0
    31d8:	d101      	bne.n	31de <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    31da:	2300      	movs	r3, #0
    31dc:	461d      	mov	r5, r3
    31de:	b2eb      	uxtb	r3, r5
		}
    31e0:	4618      	mov	r0, r3
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bdb0      	pop	{r4, r5, r7, pc}

000031e8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    31e8:	b5b0      	push	{r4, r5, r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]
    31f0:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	681c      	ldr	r4, [r3, #0]
    31f6:	683b      	ldr	r3, [r7, #0]
    31f8:	4618      	mov	r0, r3
    31fa:	f7ff fb13 	bl	2824 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    31fe:	4602      	mov	r2, r0
    3200:	2301      	movs	r3, #1
    3202:	461d      	mov	r5, r3
    3204:	4611      	mov	r1, r2
    3206:	4620      	mov	r0, r4
    3208:	f001 fe2a 	bl	4e60 <__aeabi_fcmplt>
    320c:	4603      	mov	r3, r0
    320e:	2b00      	cmp	r3, #0
    3210:	d101      	bne.n	3216 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x2e>
    3212:	2300      	movs	r3, #0
    3214:	461d      	mov	r5, r3
    3216:	b2eb      	uxtb	r3, r5
		}
    3218:	4618      	mov	r0, r3
    321a:	3708      	adds	r7, #8
    321c:	46bd      	mov	sp, r7
    321e:	bdb0      	pop	{r4, r5, r7, pc}

00003220 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  /// frequency.
  ///
  /// @param input_frequency Input of PLL0 should be 32 kHz to 50 MHz.
  /// @param desired_speed   Desired CPU clock to achieve. Should not
  ///                        exceed the maximum allowed CPU clock.
  Pll0Settings_t CalculatePll0(units::frequency::hertz_t input_frequency,
    3220:	b580      	push	{r7, lr}
    3222:	b090      	sub	sp, #64	; 0x40
    3224:	af00      	add	r7, sp, #0
    3226:	60f8      	str	r0, [r7, #12]
    3228:	60b9      	str	r1, [r7, #8]
    322a:	607a      	str	r2, [r7, #4]
                               units::frequency::hertz_t desired_speed) const
  {
    // minimum/maximum input and output frequencies of PLL0 in kHz
    constexpr units::frequency::hertz_t kMinimumPll0InputFrequency = 32_kHz;
    322c:	f04f 0300 	mov.w	r3, #0
    3230:	62fb      	str	r3, [r7, #44]	; 0x2c
    3232:	4b76      	ldr	r3, [pc, #472]	; (340c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ec>)
    3234:	62fb      	str	r3, [r7, #44]	; 0x2c
    constexpr units::frequency::hertz_t kMaximumPll0InputFrequency = 50_MHz;
    3236:	f04f 0300 	mov.w	r3, #0
    323a:	62bb      	str	r3, [r7, #40]	; 0x28
    323c:	4b74      	ldr	r3, [pc, #464]	; (3410 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f0>)
    323e:	62bb      	str	r3, [r7, #40]	; 0x28
    constexpr units::frequency::hertz_t kMinimumPll0OuputFrequency = 275_MHz;
    3240:	f04f 0300 	mov.w	r3, #0
    3244:	627b      	str	r3, [r7, #36]	; 0x24
    3246:	4b73      	ldr	r3, [pc, #460]	; (3414 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f4>)
    3248:	627b      	str	r3, [r7, #36]	; 0x24
    constexpr units::frequency::hertz_t kMaximumPll0OuputFrequency = 550_MHz;
    324a:	f04f 0300 	mov.w	r3, #0
    324e:	623b      	str	r3, [r7, #32]
    3250:	4b71      	ldr	r3, [pc, #452]	; (3418 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1f8>)
    3252:	623b      	str	r3, [r7, #32]

    // Maximum allowed CPU speed in kHz.
    // This value will be 100 MHz or 120 MHz depending on the MCU in use
    // For the SJOne, the max CPU speed for LPC1758 is 100 MHz.
    constexpr units::frequency::hertz_t kMaxCPUSpeed = 100_MHz;
    3254:	f04f 0300 	mov.w	r3, #0
    3258:	61fb      	str	r3, [r7, #28]
    325a:	4b70      	ldr	r3, [pc, #448]	; (341c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1fc>)
    325c:	61fb      	str	r3, [r7, #28]

    SJ2_ASSERT_FATAL(
    325e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    3262:	f107 0308 	add.w	r3, r7, #8
    3266:	4611      	mov	r1, r2
    3268:	4618      	mov	r0, r3
    326a:	f7ff ffa1 	bl	31b0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    326e:	4603      	mov	r3, r0
    3270:	f083 0301 	eor.w	r3, r3, #1
    3274:	b2db      	uxtb	r3, r3
    3276:	2b00      	cmp	r3, #0
    3278:	d10d      	bne.n	3296 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x76>
    327a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    327e:	f107 0308 	add.w	r3, r7, #8
    3282:	4611      	mov	r1, r2
    3284:	4618      	mov	r0, r3
    3286:	f7ff ffaf 	bl	31e8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    328a:	4603      	mov	r3, r0
    328c:	f083 0301 	eor.w	r3, r3, #1
    3290:	b2db      	uxtb	r3, r3
    3292:	2b00      	cmp	r3, #0
    3294:	d001      	beq.n	329a <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7a>
    3296:	2301      	movs	r3, #1
    3298:	e000      	b.n	329c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x7c>
    329a:	2300      	movs	r3, #0
    329c:	2b00      	cmp	r3, #0
    329e:	d00e      	beq.n	32be <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9e>
    32a0:	f240 1393 	movw	r3, #403	; 0x193
    32a4:	4a5e      	ldr	r2, [pc, #376]	; (3420 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    32a6:	495f      	ldr	r1, [pc, #380]	; (3424 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x204>)
    32a8:	485f      	ldr	r0, [pc, #380]	; (3428 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x208>)
    32aa:	f7ff f941 	bl	2530 <printf>
    32ae:	485f      	ldr	r0, [pc, #380]	; (342c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    32b0:	f7fe f814 	bl	12dc <puts>
    32b4:	2100      	movs	r1, #0
    32b6:	2001      	movs	r0, #1
    32b8:	f7fd fdf4 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    32bc:	e7fe      	b.n	32bc <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9c>
        input_frequency > kMinimumPll0InputFrequency &&
            input_frequency < kMaximumPll0InputFrequency,
        "The input PLL0 frequency must be between 32kHz and 50MHz");
    SJ2_ASSERT_FATAL(
    32be:	f107 021c 	add.w	r2, r7, #28
    32c2:	1d3b      	adds	r3, r7, #4
    32c4:	4611      	mov	r1, r2
    32c6:	4618      	mov	r0, r3
    32c8:	f7ff ff8e 	bl	31e8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    32cc:	4603      	mov	r3, r0
    32ce:	f083 0301 	eor.w	r3, r3, #1
    32d2:	b2db      	uxtb	r3, r3
    32d4:	2b00      	cmp	r3, #0
    32d6:	d00e      	beq.n	32f6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd6>
    32d8:	f44f 73cb 	mov.w	r3, #406	; 0x196
    32dc:	4a50      	ldr	r2, [pc, #320]	; (3420 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    32de:	4954      	ldr	r1, [pc, #336]	; (3430 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x210>)
    32e0:	4854      	ldr	r0, [pc, #336]	; (3434 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x214>)
    32e2:	f7ff f925 	bl	2530 <printf>
    32e6:	4851      	ldr	r0, [pc, #324]	; (342c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    32e8:	f7fd fff8 	bl	12dc <puts>
    32ec:	2100      	movs	r1, #0
    32ee:	2001      	movs	r0, #1
    32f0:	f7fd fdd8 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    32f4:	e7fe      	b.n	32f4 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xd4>
    // Since a small value for the pre-divider, n, is desired, we will iterate
    // through n starting from the lowest possible value of 1 in order to find a
    // suitable multiplier, m. The values of m and n are inversely proportional;
    // therefore, we start looking for the multiplier from its largest possible
    // value of 512.
    for (uint8_t n = 0; n < 32; n++)
    32f6:	2300      	movs	r3, #0
    32f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    32fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    3300:	2b1f      	cmp	r3, #31
    3302:	d868      	bhi.n	33d6 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b6>
    {
      for (uint16_t m = 511; m >= 6; m--)
    3304:	f240 13ff 	movw	r3, #511	; 0x1ff
    3308:	87bb      	strh	r3, [r7, #60]	; 0x3c
    330a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    330c:	2b05      	cmp	r3, #5
    330e:	d95c      	bls.n	33ca <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1aa>
        // Current calculated controlled oscillator frequency, fcco, output of
        // PLL0 in kilohertz
        // Dividing by 1000 to scale down kFcco, as the multiplier for is
        // internally scaled by 1000.
        const units::frequency::hertz_t kFcco =
            (2 * (m + 1) * input_frequency) / (n + 1);
    3310:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    3312:	3301      	adds	r3, #1
    3314:	005b      	lsls	r3, r3, #1
    3316:	f107 0208 	add.w	r2, r7, #8
    331a:	4611      	mov	r1, r2
    331c:	4618      	mov	r0, r3
    331e:	f000 ffcf 	bl	42c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3322:	4603      	mov	r3, r0
    3324:	633b      	str	r3, [r7, #48]	; 0x30
    3326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    332a:	1c5a      	adds	r2, r3, #1
    332c:	f107 0330 	add.w	r3, r7, #48	; 0x30
    3330:	4611      	mov	r1, r2
    3332:	4618      	mov	r0, r3
    3334:	f000 ffe3 	bl	42fe <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3338:	4603      	mov	r3, r0
    333a:	61bb      	str	r3, [r7, #24]
        if (kMinimumPll0OuputFrequency < kFcco &&
    333c:	f107 0218 	add.w	r2, r7, #24
    3340:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3344:	4611      	mov	r1, r2
    3346:	4618      	mov	r0, r3
    3348:	f7ff ff4e 	bl	31e8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    334c:	4603      	mov	r3, r0
    334e:	2b00      	cmp	r3, #0
    3350:	d00c      	beq.n	336c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
            kFcco < kMaximumPll0OuputFrequency)
    3352:	f107 0220 	add.w	r2, r7, #32
    3356:	f107 0318 	add.w	r3, r7, #24
    335a:	4611      	mov	r1, r2
    335c:	4618      	mov	r0, r3
    335e:	f7ff ff43 	bl	31e8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3362:	4603      	mov	r3, r0
        if (kMinimumPll0OuputFrequency < kFcco &&
    3364:	2b00      	cmp	r3, #0
    3366:	d001      	beq.n	336c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14c>
    3368:	2301      	movs	r3, #1
    336a:	e000      	b.n	336e <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x14e>
    336c:	2300      	movs	r3, #0
    336e:	2b00      	cmp	r3, #0
    3370:	d027      	beq.n	33c2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
        {
          // since PLL0 is in use, the cpu_divider values of 0 and 1 are not
          // allowed as the resulting CPU clock will always be above the maximum
          // allowed CPU speed
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    3372:	2302      	movs	r3, #2
    3374:	877b      	strh	r3, [r7, #58]	; 0x3a
    3376:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    3378:	2bff      	cmp	r3, #255	; 0xff
    337a:	d822      	bhi.n	33c2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a2>
          {
            // Get resulting CPU clock
            // Requires that we scale kFcco back to a proper frequency.
            const units::frequency::hertz_t kCpuClock =
                kFcco / (cpu_divider + 1);
    337c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    337e:	1c5a      	adds	r2, r3, #1
    3380:	f107 0318 	add.w	r3, r7, #24
    3384:	4611      	mov	r1, r2
    3386:	4618      	mov	r0, r3
    3388:	f000 ffb9 	bl	42fe <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    338c:	4603      	mov	r3, r0
    338e:	617b      	str	r3, [r7, #20]
            if (kCpuClock == desired_speed)
    3390:	1d3a      	adds	r2, r7, #4
    3392:	f107 0314 	add.w	r3, r7, #20
    3396:	4611      	mov	r1, r2
    3398:	4618      	mov	r0, r3
    339a:	f7ff f9ee 	bl	277a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    339e:	4603      	mov	r3, r0
    33a0:	2b00      	cmp	r3, #0
    33a2:	d00a      	beq.n	33ba <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19a>
            {
              return Pll0Settings_t{ .multiplier  = m,
                                     .pre_divider = n,
                                     .cpu_divider =
                                         static_cast<uint8_t>(cpu_divider) };
    33a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    33a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    33a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    33ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    33b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    33b2:	b2db      	uxtb	r3, r3
    33b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    33b8:	e01c      	b.n	33f4 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d4>
          for (uint16_t cpu_divider = 2; cpu_divider < 256; cpu_divider++)
    33ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    33bc:	3301      	adds	r3, #1
    33be:	877b      	strh	r3, [r7, #58]	; 0x3a
    33c0:	e7d9      	b.n	3376 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x156>
      for (uint16_t m = 511; m >= 6; m--)
    33c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    33c4:	3b01      	subs	r3, #1
    33c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    33c8:	e79f      	b.n	330a <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    for (uint8_t n = 0; n < 32; n++)
    33ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    33ce:	3301      	adds	r3, #1
    33d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    33d4:	e792      	b.n	32fc <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xdc>
            }
          }  // cpu_divider loop
        }
      }  // m for loop
    }    // n for loop
    SJ2_ASSERT_FATAL(
    33d6:	f240 13c1 	movw	r3, #449	; 0x1c1
    33da:	4a11      	ldr	r2, [pc, #68]	; (3420 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x200>)
    33dc:	4916      	ldr	r1, [pc, #88]	; (3438 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x218>)
    33de:	4817      	ldr	r0, [pc, #92]	; (343c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x21c>)
    33e0:	f7ff f8a6 	bl	2530 <printf>
    33e4:	4811      	ldr	r0, [pc, #68]	; (342c <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x20c>)
    33e6:	f7fd ff79 	bl	12dc <puts>
    33ea:	2100      	movs	r1, #0
    33ec:	2001      	movs	r0, #1
    33ee:	f7fd fd59 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    33f2:	e7fe      	b.n	33f2 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1d2>
    33f4:	2300      	movs	r3, #0
    33f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
    33f8:	f362 030f 	bfi	r3, r2, #0, #16
    33fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    33fe:	f362 431f 	bfi	r3, r2, #16, #16
        false,
        "Failed to calculate the PLL0 settings for the desired frequency.");
    return Pll0Settings_t{
      .multiplier = 0, .pre_divider = 0, .cpu_divider = 0
    };
  }
    3402:	4618      	mov	r0, r3
    3404:	3740      	adds	r7, #64	; 0x40
    3406:	46bd      	mov	sp, r7
    3408:	bd80      	pop	{r7, pc}
    340a:	bf00      	nop
    340c:	46fa0000 	.word	0x46fa0000
    3410:	4c3ebc20 	.word	0x4c3ebc20
    3414:	4d832156 	.word	0x4d832156
    3418:	4e032156 	.word	0x4e032156
    341c:	4cbebc20 	.word	0x4cbebc20
    3420:	00007818 	.word	0x00007818
    3424:	000075d0 	.word	0x000075d0
    3428:	0000716c 	.word	0x0000716c
    342c:	00006e24 	.word	0x00006e24
    3430:	000075e8 	.word	0x000075e8
    3434:	00007270 	.word	0x00007270
    3438:	00007600 	.word	0x00007600
    343c:	0000733c 	.word	0x0000733c

00003440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
    3440:	b480      	push	{r7}
    3442:	b083      	sub	sp, #12
    3444:	af00      	add	r7, sp, #0
    3446:	4603      	mov	r3, r0
    3448:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
    344a:	79fb      	ldrb	r3, [r7, #7]
}
    344c:	4618      	mov	r0, r3
    344e:	370c      	adds	r7, #12
    3450:	46bd      	mov	sp, r7
    3452:	bc80      	pop	{r7}
    3454:	4770      	bx	lr
    3456:	Address 0x0000000000003456 is out of bounds.


00003458 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const>:
  /// Writes the feed sequence that is necessary to lock in any changes to the
  /// PLLCON and PLLCGG registers.
  void WritePllFeedSequence(PllSelect pll) const
    3458:	b580      	push	{r7, lr}
    345a:	b084      	sub	sp, #16
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
    3460:	460b      	mov	r3, r1
    3462:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pll_feed_registers[] = {
      &(system_controller->PLL0FEED),
    3464:	4b12      	ldr	r3, [pc, #72]	; (34b0 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	338c      	adds	r3, #140	; 0x8c
      &(system_controller->PLL1FEED),
    };
    346a:	60bb      	str	r3, [r7, #8]
      &(system_controller->PLL1FEED),
    346c:	4b10      	ldr	r3, [pc, #64]	; (34b0 <sjsu::lpc17xx::SystemController::WritePllFeedSequence(sjsu::lpc17xx::SystemController::PllSelect) const+0x58>)
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	33ac      	adds	r3, #172	; 0xac
    };
    3472:	60fb      	str	r3, [r7, #12]
    *(pll_feed_registers[Value(pll)]) = 0xAA;
    3474:	78fb      	ldrb	r3, [r7, #3]
    3476:	4618      	mov	r0, r3
    3478:	f7ff ffe2 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    347c:	4603      	mov	r3, r0
    347e:	009b      	lsls	r3, r3, #2
    3480:	f107 0210 	add.w	r2, r7, #16
    3484:	4413      	add	r3, r2
    3486:	f853 3c08 	ldr.w	r3, [r3, #-8]
    348a:	22aa      	movs	r2, #170	; 0xaa
    348c:	601a      	str	r2, [r3, #0]
    *(pll_feed_registers[Value(pll)]) = 0x55;
    348e:	78fb      	ldrb	r3, [r7, #3]
    3490:	4618      	mov	r0, r3
    3492:	f7ff ffd5 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3496:	4603      	mov	r3, r0
    3498:	009b      	lsls	r3, r3, #2
    349a:	f107 0210 	add.w	r2, r7, #16
    349e:	4413      	add	r3, r2
    34a0:	f853 3c08 	ldr.w	r3, [r3, #-8]
    34a4:	2255      	movs	r2, #85	; 0x55
    34a6:	601a      	str	r2, [r3, #0]
  }
    34a8:	bf00      	nop
    34aa:	3710      	adds	r7, #16
    34ac:	46bd      	mov	sp, r7
    34ae:	bd80      	pop	{r7, pc}
    34b0:	2007c2e0 	.word	0x2007c2e0

000034b4 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  bool WaitForPllLockStatus(PllSelect pll) const
    34b4:	b580      	push	{r7, lr}
    34b6:	b088      	sub	sp, #32
    34b8:	af00      	add	r7, sp, #0
    34ba:	6078      	str	r0, [r7, #4]
    34bc:	460b      	mov	r3, r1
    34be:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    34c0:	4b1b      	ldr	r3, [pc, #108]	; (3530 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    34c2:	681b      	ldr	r3, [r3, #0]
    34c4:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    34c6:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    34c8:	4b19      	ldr	r3, [pc, #100]	; (3530 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	33a8      	adds	r3, #168	; 0xa8
    };
    34ce:	61bb      	str	r3, [r7, #24]
    const bit::Mask kLockStatusMasks[] = { MainPll::kLockStatus,
    34d0:	4b18      	ldr	r3, [pc, #96]	; (3534 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	613b      	str	r3, [r7, #16]
                                           UsbPll::kLockStatus };
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    34d6:	78fb      	ldrb	r3, [r7, #3]
    34d8:	4618      	mov	r0, r3
    34da:	f7ff ffb1 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    34de:	4603      	mov	r3, r0
    34e0:	009b      	lsls	r3, r3, #2
    34e2:	f107 0220 	add.w	r2, r7, #32
    34e6:	4413      	add	r3, r2
    34e8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    34ec:	61fb      	str	r3, [r7, #28]
    const bit::Mask kLockStatusMask = kLockStatusMasks[Value(pll)];
    34ee:	78fb      	ldrb	r3, [r7, #3]
    34f0:	4618      	mov	r0, r3
    34f2:	f7ff ffa5 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    34f6:	4603      	mov	r3, r0
    34f8:	005b      	lsls	r3, r3, #1
    34fa:	f107 0220 	add.w	r2, r7, #32
    34fe:	4413      	add	r3, r2
    3500:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    3504:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kLockStatusMask.position))
    3506:	69fb      	ldr	r3, [r7, #28]
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	7b3a      	ldrb	r2, [r7, #12]
    350c:	4611      	mov	r1, r2
    350e:	4618      	mov	r0, r3
    3510:	f000 feae 	bl	4270 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3514:	4603      	mov	r3, r0
    3516:	f083 0301 	eor.w	r3, r3, #1
    351a:	b2db      	uxtb	r3, r3
    351c:	2b00      	cmp	r3, #0
    351e:	d001      	beq.n	3524 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    3520:	bf00      	nop
    while (!bit::Read(*status_register, kLockStatusMask.position))
    3522:	e7f0      	b.n	3506 <sjsu::lpc17xx::SystemController::WaitForPllLockStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    3524:	2301      	movs	r3, #1
  }
    3526:	4618      	mov	r0, r3
    3528:	3720      	adds	r7, #32
    352a:	46bd      	mov	sp, r7
    352c:	bd80      	pop	{r7, pc}
    352e:	bf00      	nop
    3530:	2007c2e0 	.word	0x2007c2e0
    3534:	000073f4 	.word	0x000073f4

00003538 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const>:

  /// @returns  Returns true if the PLL's enable and connect status bits in the
  ///           PLL status register are both 1.
  bool WaitForPllConnectionStatus(PllSelect pll) const
    3538:	b580      	push	{r7, lr}
    353a:	b088      	sub	sp, #32
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	70fb      	strb	r3, [r7, #3]
    {
      return true;
    }

    volatile uint32_t * pll_status_registers[] = {
      &(system_controller->PLL0STAT),  // NOLINT
    3544:	4b1b      	ldr	r3, [pc, #108]	; (35b4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	3388      	adds	r3, #136	; 0x88
      &(system_controller->PLL1STAT)
    };
    354a:	617b      	str	r3, [r7, #20]
      &(system_controller->PLL1STAT)
    354c:	4b19      	ldr	r3, [pc, #100]	; (35b4 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x7c>)
    354e:	681b      	ldr	r3, [r3, #0]
    3550:	33a8      	adds	r3, #168	; 0xa8
    };
    3552:	61bb      	str	r3, [r7, #24]
    const bit::Mask kMasks[] = { MainPll::kMode, UsbPll::kMode };
    3554:	4b18      	ldr	r3, [pc, #96]	; (35b8 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x80>)
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	613b      	str	r3, [r7, #16]
    volatile uint32_t * status_register =
        pll_status_registers[Value(pll)];
    355a:	78fb      	ldrb	r3, [r7, #3]
    355c:	4618      	mov	r0, r3
    355e:	f7ff ff6f 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    3562:	4603      	mov	r3, r0
    3564:	009b      	lsls	r3, r3, #2
    3566:	f107 0220 	add.w	r2, r7, #32
    356a:	4413      	add	r3, r2
    356c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    3570:	61fb      	str	r3, [r7, #28]
    const bit::Mask kPllModeMask = kMasks[Value(pll)];
    3572:	78fb      	ldrb	r3, [r7, #3]
    3574:	4618      	mov	r0, r3
    3576:	f7ff ff63 	bl	3440 <auto sjsu::Value<sjsu::lpc17xx::SystemController::PllSelect>(sjsu::lpc17xx::SystemController::PllSelect)>
    357a:	4603      	mov	r3, r0
    357c:	005b      	lsls	r3, r3, #1
    357e:	f107 0220 	add.w	r2, r7, #32
    3582:	4413      	add	r3, r2
    3584:	f833 3c10 	ldrh.w	r3, [r3, #-16]
    3588:	81bb      	strh	r3, [r7, #12]

    while (!bit::Read(*status_register, kPllModeMask.position))
    358a:	69fb      	ldr	r3, [r7, #28]
    358c:	681b      	ldr	r3, [r3, #0]
    358e:	7b3a      	ldrb	r2, [r7, #12]
    3590:	4611      	mov	r1, r2
    3592:	4618      	mov	r0, r3
    3594:	f000 fe6c 	bl	4270 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3598:	4603      	mov	r3, r0
    359a:	f083 0301 	eor.w	r3, r3, #1
    359e:	b2db      	uxtb	r3, r3
    35a0:	2b00      	cmp	r3, #0
    35a2:	d001      	beq.n	35a8 <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x70>
    {
      continue;
    35a4:	bf00      	nop
    while (!bit::Read(*status_register, kPllModeMask.position))
    35a6:	e7f0      	b.n	358a <sjsu::lpc17xx::SystemController::WaitForPllConnectionStatus(sjsu::lpc17xx::SystemController::PllSelect) const+0x52>
    }

    return true;
    35a8:	2301      	movs	r3, #1
  }
    35aa:	4618      	mov	r0, r3
    35ac:	3720      	adds	r7, #32
    35ae:	46bd      	mov	sp, r7
    35b0:	bd80      	pop	{r7, pc}
    35b2:	bf00      	nop
    35b4:	2007c2e0 	.word	0x2007c2e0
    35b8:	000073f8 	.word	0x000073f8

000035bc <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const>:
  /// @note If PLL0 is connected, divider values 0 and 1 are not allowed
  ///       since the the produced clock rate must not exceed the maximum
  ///       allowed CPU clock.
  ///
  /// @param cpu_divider 8-bit divider ranging from 0 - 255.
  void SetCpuClockDivider(uint8_t cpu_divider) const
    35bc:	b590      	push	{r4, r7, lr}
    35be:	b083      	sub	sp, #12
    35c0:	af00      	add	r7, sp, #0
    35c2:	6078      	str	r0, [r7, #4]
    35c4:	460b      	mov	r3, r1
    35c6:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->CCLKCFG = bit::Insert(
    35c8:	4b0c      	ldr	r3, [pc, #48]	; (35fc <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    35ca:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKCFG, cpu_divider, CpuClock::kDivider);
    35cc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKCFG = bit::Insert(
    35d0:	4b0a      	ldr	r3, [pc, #40]	; (35fc <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x40>)
    35d2:	681c      	ldr	r4, [r3, #0]
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <sjsu::lpc17xx::SystemController::SetCpuClockDivider(unsigned char) const+0x44>)
    35d6:	78f9      	ldrb	r1, [r7, #3]
    35d8:	781a      	ldrb	r2, [r3, #0]
    35da:	785b      	ldrb	r3, [r3, #1]
    35dc:	021b      	lsls	r3, r3, #8
    35de:	431a      	orrs	r2, r3
    35e0:	2300      	movs	r3, #0
    35e2:	f362 030f 	bfi	r3, r2, #0, #16
    35e6:	461a      	mov	r2, r3
    35e8:	f000 fdfc 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    35ec:	4603      	mov	r3, r0
    35ee:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    35f2:	bf00      	nop
    35f4:	370c      	adds	r7, #12
    35f6:	46bd      	mov	sp, r7
    35f8:	bd90      	pop	{r4, r7, pc}
    35fa:	bf00      	nop
    35fc:	2007c2e0 	.word	0x2007c2e0
    3600:	00007548 	.word	0x00007548

00003604 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  Pointer to the PCLKSEL0 or PCLKSEL1 register based on the
  ///           peripheral's device_id.
  volatile uint32_t * GetPeripheralClockSelectRegister(
    3604:	b480      	push	{r7}
    3606:	b083      	sub	sp, #12
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
    360c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    if (peripheral_select.device_id > 15)
    360e:	683b      	ldr	r3, [r7, #0]
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	2b0f      	cmp	r3, #15
    3614:	d904      	bls.n	3620 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x1c>
    {
      return &(system_controller->PCLKSEL1);
    3616:	4b07      	ldr	r3, [pc, #28]	; (3634 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3618:	681b      	ldr	r3, [r3, #0]
    361a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    361e:	e003      	b.n	3628 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x24>
    }
    return &(system_controller->PCLKSEL0);
    3620:	4b04      	ldr	r3, [pc, #16]	; (3634 <sjsu::lpc17xx::SystemController::GetPeripheralClockSelectRegister(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3622:	681b      	ldr	r3, [r3, #0]
    3624:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
  }
    3628:	4618      	mov	r0, r3
    362a:	370c      	adds	r7, #12
    362c:	46bd      	mov	sp, r7
    362e:	bc80      	pop	{r7}
    3630:	4770      	bx	lr
    3632:	bf00      	nop
    3634:	2007c2e0 	.word	0x2007c2e0

00003638 <sjsu::lpc17xx::SystemController::CalculatePeripheralClockDividerMask(sjsu::SystemController::PeripheralID const&) const>:
  /// @returns  The bit mask for the 2-bit position of the specified
  ///           peripheral's divider select in the PCLKSEL0 or PCLKSEL1
  ///           register.
  bit::Mask CalculatePeripheralClockDividerMask(
    3638:	b580      	push	{r7, lr}
    363a:	b084      	sub	sp, #16
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
    3640:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    constexpr uint8_t kMaxBitWidth = 32;
    3642:	2320      	movs	r3, #32
    3644:	73fb      	strb	r3, [r7, #15]
    const uint8_t kLowBit  = (peripheral_select.device_id * 2) % kMaxBitWidth;
    3646:	683b      	ldr	r3, [r7, #0]
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	005b      	lsls	r3, r3, #1
    364c:	b2db      	uxtb	r3, r3
    364e:	f003 031e 	and.w	r3, r3, #30
    3652:	73bb      	strb	r3, [r7, #14]
    const uint8_t kHighBit = static_cast<uint8_t>(kLowBit + 1);
    3654:	7bbb      	ldrb	r3, [r7, #14]
    3656:	3301      	adds	r3, #1
    3658:	737b      	strb	r3, [r7, #13]
    return bit::CreateMaskFromRange(kLowBit, kHighBit);
    365a:	7b7a      	ldrb	r2, [r7, #13]
    365c:	7bbb      	ldrb	r3, [r7, #14]
    365e:	4611      	mov	r1, r2
    3660:	4618      	mov	r0, r3
    3662:	f7ff fb05 	bl	2c70 <sjsu::bit::CreateMaskFromRange(unsigned char, unsigned char)>
    3666:	4603      	mov	r3, r0
    3668:	813b      	strh	r3, [r7, #8]
    366a:	2300      	movs	r3, #0
    366c:	7a3a      	ldrb	r2, [r7, #8]
    366e:	f362 0307 	bfi	r3, r2, #0, #8
    3672:	7a7a      	ldrb	r2, [r7, #9]
    3674:	f362 230f 	bfi	r3, r2, #8, #8
  }
    3678:	4618      	mov	r0, r3
    367a:	3710      	adds	r7, #16
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}

00003680 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
    3680:	b480      	push	{r7}
    3682:	b083      	sub	sp, #12
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
  {
    return port_;
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	791b      	ldrb	r3, [r3, #4]
  }
    368c:	4618      	mov	r0, r3
    368e:	370c      	adds	r7, #12
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr

00003696 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
    3696:	b480      	push	{r7}
    3698:	b083      	sub	sp, #12
    369a:	af00      	add	r7, sp, #0
    369c:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	795b      	ldrb	r3, [r3, #5]
  }
    36a2:	4618      	mov	r0, r3
    36a4:	370c      	adds	r7, #12
    36a6:	46bd      	mov	sp, r7
    36a8:	bc80      	pop	{r7}
    36aa:	4770      	bx	lr

000036ac <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:
  constexpr Pin(uint8_t port, uint8_t pin)
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
  {
  }

  void SetPinFunction(uint8_t function) const override
    36ac:	b590      	push	{r4, r7, lr}
    36ae:	b085      	sub	sp, #20
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
    36b4:	460b      	mov	r3, r1
    36b6:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
    36b8:	6878      	ldr	r0, [r7, #4]
    36ba:	f000 f88f 	bl	37dc <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    36be:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    36c0:	4b0b      	ldr	r3, [pc, #44]	; (36f0 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	68fa      	ldr	r2, [r7, #12]
    36c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
    36ca:	4b09      	ldr	r3, [pc, #36]	; (36f0 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
    36cc:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	78f9      	ldrb	r1, [r7, #3]
    36d2:	88da      	ldrh	r2, [r3, #6]
    36d4:	2300      	movs	r3, #0
    36d6:	f362 030f 	bfi	r3, r2, #0, #16
    36da:	461a      	mov	r2, r3
    36dc:	f000 fd82 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    36e0:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
    36e2:	68fb      	ldr	r3, [r7, #12]
    36e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
    36e8:	bf00      	nop
    36ea:	3714      	adds	r7, #20
    36ec:	46bd      	mov	sp, r7
    36ee:	bd90      	pop	{r4, r7, pc}
    36f0:	2007c2e4 	.word	0x2007c2e4

000036f4 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
constexpr auto Value(Enum enum_type_value)
    36f4:	b480      	push	{r7}
    36f6:	b083      	sub	sp, #12
    36f8:	af00      	add	r7, sp, #0
    36fa:	4603      	mov	r3, r0
    36fc:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    36fe:	79fb      	ldrb	r3, [r7, #7]
}
    3700:	4618      	mov	r0, r3
    3702:	370c      	adds	r7, #12
    3704:	46bd      	mov	sp, r7
    3706:	bc80      	pop	{r7}
    3708:	4770      	bx	lr
    370a:	Address 0x000000000000370a is out of bounds.


0000370c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    370c:	b5b0      	push	{r4, r5, r7, lr}
    370e:	b084      	sub	sp, #16
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
    3714:	460b      	mov	r3, r1
    3716:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
    3718:	6878      	ldr	r0, [r7, #4]
    371a:	f000 f85f 	bl	37dc <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
    371e:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
    3720:	4b0f      	ldr	r3, [pc, #60]	; (3760 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	68fa      	ldr	r2, [r7, #12]
    3726:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
    372a:	78fb      	ldrb	r3, [r7, #3]
    372c:	4618      	mov	r0, r3
    372e:	f7ff ffe1 	bl	36f4 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
    3732:	4603      	mov	r3, r0
    3734:	461a      	mov	r2, r3
    3736:	4b0b      	ldr	r3, [pc, #44]	; (3764 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
    3738:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
    373a:	4b09      	ldr	r3, [pc, #36]	; (3760 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
    373c:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	88da      	ldrh	r2, [r3, #6]
    3742:	2300      	movs	r3, #0
    3744:	f362 030f 	bfi	r3, r2, #0, #16
    3748:	461a      	mov	r2, r3
    374a:	4628      	mov	r0, r5
    374c:	f000 fd4a 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3750:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
    3752:	68fb      	ldr	r3, [r7, #12]
    3754:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
    3758:	bf00      	nop
    375a:	3710      	adds	r7, #16
    375c:	46bd      	mov	sp, r7
    375e:	bdb0      	pop	{r4, r5, r7, pc}
    3760:	2007c2e8 	.word	0x2007c2e8
    3764:	00007618 	.word	0x00007618

00003768 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
    3768:	b580      	push	{r7, lr}
    376a:	b082      	sub	sp, #8
    376c:	af00      	add	r7, sp, #0
    376e:	6078      	str	r0, [r7, #4]
    3770:	460b      	mov	r3, r1
    3772:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
    3774:	2354      	movs	r3, #84	; 0x54
    3776:	4a04      	ldr	r2, [pc, #16]	; (3788 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
    3778:	4904      	ldr	r1, [pc, #16]	; (378c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
    377a:	4805      	ldr	r0, [pc, #20]	; (3790 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
    377c:	f7fe fed8 	bl	2530 <printf>
  }
    3780:	bf00      	nop
    3782:	3708      	adds	r7, #8
    3784:	46bd      	mov	sp, r7
    3786:	bd80      	pop	{r7, pc}
    3788:	000078b4 	.word	0x000078b4
    378c:	0000761c 	.word	0x0000761c
    3790:	000073fc 	.word	0x000073fc

00003794 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    3794:	b5b0      	push	{r4, r5, r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
    379c:	460b      	mov	r3, r1
    379e:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    37a0:	4b0d      	ldr	r3, [pc, #52]	; (37d8 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	687a      	ldr	r2, [r7, #4]
    37a6:	7912      	ldrb	r2, [r2, #4]
    37a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
    37b0:	733b      	strb	r3, [r7, #12]
    37b2:	2301      	movs	r3, #1
    37b4:	737b      	strb	r3, [r7, #13]
    37b6:	4b08      	ldr	r3, [pc, #32]	; (37d8 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
    37b8:	681c      	ldr	r4, [r3, #0]
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	791b      	ldrb	r3, [r3, #4]
    37be:	461d      	mov	r5, r3
    37c0:	78fb      	ldrb	r3, [r7, #3]
    37c2:	68fa      	ldr	r2, [r7, #12]
    37c4:	4619      	mov	r1, r3
    37c6:	f000 fdb9 	bl	433c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    37ca:	4603      	mov	r3, r0
    37cc:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
    37d0:	bf00      	nop
    37d2:	3710      	adds	r7, #16
    37d4:	46bd      	mov	sp, r7
    37d6:	bdb0      	pop	{r4, r5, r7, pc}
    37d8:	2007c2ec 	.word	0x2007c2ec

000037dc <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  }
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	795b      	ldrb	r3, [r3, #5]
    37e8:	2b0f      	cmp	r3, #15
    37ea:	d901      	bls.n	37f0 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
    37ec:	2301      	movs	r3, #1
    37ee:	e000      	b.n	37f2 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
    37f0:	2300      	movs	r3, #0
    37f2:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	791b      	ldrb	r3, [r3, #4]
    37f8:	005b      	lsls	r3, r3, #1
    37fa:	461a      	mov	r2, r3
    37fc:	68fb      	ldr	r3, [r7, #12]
    37fe:	4413      	add	r3, r2
  }
    3800:	4618      	mov	r0, r3
    3802:	3714      	adds	r7, #20
    3804:	46bd      	mov	sp, r7
    3806:	bc80      	pop	{r7}
    3808:	4770      	bx	lr
    380a:	Address 0x000000000000380a is out of bounds.


0000380c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
    380c:	b580      	push	{r7, lr}
    380e:	b082      	sub	sp, #8
    3810:	af00      	add	r7, sp, #0
    3812:	6078      	str	r0, [r7, #4]
    3814:	460b      	mov	r3, r1
    3816:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
    3818:	4b08      	ldr	r3, [pc, #32]	; (383c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
    381a:	78f9      	ldrb	r1, [r7, #3]
    381c:	781a      	ldrb	r2, [r3, #0]
    381e:	785b      	ldrb	r3, [r3, #1]
    3820:	021b      	lsls	r3, r3, #8
    3822:	431a      	orrs	r2, r3
    3824:	2300      	movs	r3, #0
    3826:	f362 030f 	bfi	r3, r2, #0, #16
    382a:	461a      	mov	r2, r3
    382c:	6878      	ldr	r0, [r7, #4]
    382e:	f000 f859 	bl	38e4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3832:	bf00      	nop
    3834:	3708      	adds	r7, #8
    3836:	46bd      	mov	sp, r7
    3838:	bd80      	pop	{r7, pc}
    383a:	bf00      	nop
    383c:	00007624 	.word	0x00007624

00003840 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
    3848:	460b      	mov	r3, r1
    384a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
    384c:	4b08      	ldr	r3, [pc, #32]	; (3870 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
    384e:	78f9      	ldrb	r1, [r7, #3]
    3850:	781a      	ldrb	r2, [r3, #0]
    3852:	785b      	ldrb	r3, [r3, #1]
    3854:	021b      	lsls	r3, r3, #8
    3856:	431a      	orrs	r2, r3
    3858:	2300      	movs	r3, #0
    385a:	f362 030f 	bfi	r3, r2, #0, #16
    385e:	461a      	mov	r2, r3
    3860:	6878      	ldr	r0, [r7, #4]
    3862:	f000 f83f 	bl	38e4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    3866:	bf00      	nop
    3868:	3708      	adds	r7, #8
    386a:	46bd      	mov	sp, r7
    386c:	bd80      	pop	{r7, pc}
    386e:	bf00      	nop
    3870:	00007628 	.word	0x00007628

00003874 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
    387c:	460b      	mov	r3, r1
    387e:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
    3880:	78fb      	ldrb	r3, [r7, #3]
    3882:	f083 0301 	eor.w	r3, r3, #1
    3886:	b2db      	uxtb	r3, r3
    3888:	4619      	mov	r1, r3
    388a:	4b08      	ldr	r3, [pc, #32]	; (38ac <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
    388c:	781a      	ldrb	r2, [r3, #0]
    388e:	785b      	ldrb	r3, [r3, #1]
    3890:	021b      	lsls	r3, r3, #8
    3892:	431a      	orrs	r2, r3
    3894:	2300      	movs	r3, #0
    3896:	f362 030f 	bfi	r3, r2, #0, #16
    389a:	461a      	mov	r2, r3
    389c:	6878      	ldr	r0, [r7, #4]
    389e:	f000 f821 	bl	38e4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    38a2:	bf00      	nop
    38a4:	3708      	adds	r7, #8
    38a6:	46bd      	mov	sp, r7
    38a8:	bd80      	pop	{r7, pc}
    38aa:	bf00      	nop
    38ac:	0000762c 	.word	0x0000762c

000038b0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
    38b0:	b580      	push	{r7, lr}
    38b2:	b082      	sub	sp, #8
    38b4:	af00      	add	r7, sp, #0
    38b6:	6078      	str	r0, [r7, #4]
    38b8:	460b      	mov	r3, r1
    38ba:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
    38bc:	78f9      	ldrb	r1, [r7, #3]
    38be:	4b08      	ldr	r3, [pc, #32]	; (38e0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
    38c0:	781a      	ldrb	r2, [r3, #0]
    38c2:	785b      	ldrb	r3, [r3, #1]
    38c4:	021b      	lsls	r3, r3, #8
    38c6:	431a      	orrs	r2, r3
    38c8:	2300      	movs	r3, #0
    38ca:	f362 030f 	bfi	r3, r2, #0, #16
    38ce:	461a      	mov	r2, r3
    38d0:	6878      	ldr	r0, [r7, #4]
    38d2:	f000 f807 	bl	38e4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
    38d6:	bf00      	nop
    38d8:	3708      	adds	r7, #8
    38da:	46bd      	mov	sp, r7
    38dc:	bd80      	pop	{r7, pc}
    38de:	bf00      	nop
    38e0:	00007630 	.word	0x00007630

000038e4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
    38e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38e6:	b087      	sub	sp, #28
    38e8:	af00      	add	r7, sp, #0
    38ea:	60f8      	str	r0, [r7, #12]
    38ec:	460b      	mov	r3, r1
    38ee:	80ba      	strh	r2, [r7, #4]
    38f0:	72fb      	strb	r3, [r7, #11]
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
    38f6:	4b19      	ldr	r3, [pc, #100]	; (395c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    38f8:	681c      	ldr	r4, [r3, #0]
    38fa:	693b      	ldr	r3, [r7, #16]
    38fc:	4618      	mov	r0, r3
    38fe:	f7ff febf 	bl	3680 <sjsu::Pin::GetPort() const>
    3902:	4603      	mov	r3, r0
    3904:	461d      	mov	r5, r3
    3906:	693b      	ldr	r3, [r7, #16]
    3908:	4618      	mov	r0, r3
    390a:	f7ff fec4 	bl	3696 <sjsu::Pin::GetPin() const>
    390e:	4603      	mov	r3, r0
    3910:	461a      	mov	r2, r3
    3912:	016b      	lsls	r3, r5, #5
    3914:	4413      	add	r3, r2
    3916:	009b      	lsls	r3, r3, #2
    3918:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	7af9      	ldrb	r1, [r7, #11]
    391e:	687a      	ldr	r2, [r7, #4]
    3920:	4618      	mov	r0, r3
    3922:	f000 fc5f 	bl	41e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3926:	4605      	mov	r5, r0
    3928:	68fb      	ldr	r3, [r7, #12]
    392a:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
    392c:	4b0b      	ldr	r3, [pc, #44]	; (395c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
    392e:	681c      	ldr	r4, [r3, #0]
    3930:	697b      	ldr	r3, [r7, #20]
    3932:	4618      	mov	r0, r3
    3934:	f7ff fea4 	bl	3680 <sjsu::Pin::GetPort() const>
    3938:	4603      	mov	r3, r0
    393a:	461e      	mov	r6, r3
    393c:	697b      	ldr	r3, [r7, #20]
    393e:	4618      	mov	r0, r3
    3940:	f7ff fea9 	bl	3696 <sjsu::Pin::GetPin() const>
    3944:	4603      	mov	r3, r0
    3946:	461a      	mov	r2, r3
    3948:	0173      	lsls	r3, r6, #5
    394a:	4413      	add	r3, r2
    394c:	009b      	lsls	r3, r3, #2
    394e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    3950:	601d      	str	r5, [r3, #0]
  }
    3952:	bf00      	nop
    3954:	371c      	adds	r7, #28
    3956:	46bd      	mov	sp, r7
    3958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395a:	bf00      	nop
    395c:	2007c13c 	.word	0x2007c13c

00003960 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3960:	b580      	push	{r7, lr}
    3962:	b088      	sub	sp, #32
    3964:	af00      	add	r7, sp, #0
    3966:	6078      	str	r0, [r7, #4]
    3968:	6039      	str	r1, [r7, #0]
  UartCalibration_t result;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	2200      	movs	r2, #0
    396e:	601a      	str	r2, [r3, #0]
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	2200      	movs	r2, #0
    3974:	605a      	str	r2, [r3, #4]
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	2201      	movs	r2, #1
    397a:	609a      	str	r2, [r3, #8]
  bool finished = false;
    397c:	2300      	movs	r3, #0
    397e:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3980:	2300      	movs	r3, #0
    3982:	61bb      	str	r3, [r7, #24]
    3984:	69bb      	ldr	r3, [r7, #24]
    3986:	2b0e      	cmp	r3, #14
    3988:	dc49      	bgt.n	3a1e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
    398a:	7ffb      	ldrb	r3, [r7, #31]
    398c:	2b00      	cmp	r3, #0
    398e:	d146      	bne.n	3a1e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbe>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3990:	69bb      	ldr	r3, [r7, #24]
    3992:	3301      	adds	r3, #1
    3994:	617b      	str	r3, [r7, #20]
    3996:	697b      	ldr	r3, [r7, #20]
    3998:	2b0e      	cmp	r3, #14
    399a:	dc3c      	bgt.n	3a16 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    399c:	7ffb      	ldrb	r3, [r7, #31]
    399e:	2b00      	cmp	r3, #0
    39a0:	d139      	bne.n	3a16 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xb6>
    {
      float divf         = static_cast<float>(div);
    39a2:	69b8      	ldr	r0, [r7, #24]
    39a4:	f001 f86a 	bl	4a7c <__aeabi_i2f>
    39a8:	4603      	mov	r3, r0
    39aa:	613b      	str	r3, [r7, #16]
      float mulf         = static_cast<float>(mul);
    39ac:	6978      	ldr	r0, [r7, #20]
    39ae:	f001 f865 	bl	4a7c <__aeabi_i2f>
    39b2:	4603      	mov	r3, r0
    39b4:	60fb      	str	r3, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    39b6:	68f9      	ldr	r1, [r7, #12]
    39b8:	6938      	ldr	r0, [r7, #16]
    39ba:	f001 f967 	bl	4c8c <__aeabi_fdiv>
    39be:	4603      	mov	r3, r0
    39c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    39c4:	4618      	mov	r0, r3
    39c6:	f000 ffa5 	bl	4914 <__addsf3>
    39ca:	4603      	mov	r3, r0
    39cc:	60bb      	str	r3, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    39ce:	4916      	ldr	r1, [pc, #88]	; (3a28 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    39d0:	68b8      	ldr	r0, [r7, #8]
    39d2:	f000 ff9f 	bl	4914 <__addsf3>
    39d6:	4603      	mov	r3, r0
    39d8:	4619      	mov	r1, r3
    39da:	6838      	ldr	r0, [r7, #0]
    39dc:	f001 fa4a 	bl	4e74 <__aeabi_fcmple>
    39e0:	4603      	mov	r3, r0
    39e2:	2b00      	cmp	r3, #0
    39e4:	d013      	beq.n	3a0e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
          decimal >= test_decimal - kThreshold)
    39e6:	4910      	ldr	r1, [pc, #64]	; (3a28 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc8>)
    39e8:	68b8      	ldr	r0, [r7, #8]
    39ea:	f000 ff91 	bl	4910 <__aeabi_fsub>
    39ee:	4603      	mov	r3, r0
      if (decimal <= test_decimal + kThreshold &&
    39f0:	4619      	mov	r1, r3
    39f2:	6838      	ldr	r0, [r7, #0]
    39f4:	f001 fa48 	bl	4e88 <__aeabi_fcmpge>
    39f8:	4603      	mov	r3, r0
    39fa:	2b00      	cmp	r3, #0
    39fc:	d007      	beq.n	3a0e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xae>
      {
        result.divide_add = div;
    39fe:	69ba      	ldr	r2, [r7, #24]
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3a04:	697a      	ldr	r2, [r7, #20]
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	609a      	str	r2, [r3, #8]
        finished          = true;
    3a0a:	2301      	movs	r3, #1
    3a0c:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3a0e:	697b      	ldr	r3, [r7, #20]
    3a10:	3301      	adds	r3, #1
    3a12:	617b      	str	r3, [r7, #20]
    3a14:	e7bf      	b.n	3996 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x36>
  for (int div = 0; div < 15 && !finished; div++)
    3a16:	69bb      	ldr	r3, [r7, #24]
    3a18:	3301      	adds	r3, #1
    3a1a:	61bb      	str	r3, [r7, #24]
    3a1c:	e7b2      	b.n	3984 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x24>
      }
    }
  }
  return result;
    3a1e:	bf00      	nop
}
    3a20:	6878      	ldr	r0, [r7, #4]
    3a22:	3720      	adds	r7, #32
    3a24:	46bd      	mov	sp, r7
    3a26:	bd80      	pop	{r7, pc}
    3a28:	3d4ccccd 	.word	0x3d4ccccd

00003a2c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af00      	add	r7, sp, #0
    3a32:	60f8      	str	r0, [r7, #12]
    3a34:	60b9      	str	r1, [r7, #8]
    3a36:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3a38:	6878      	ldr	r0, [r7, #4]
    3a3a:	f001 f81b 	bl	4a74 <__aeabi_ui2f>
    3a3e:	4603      	mov	r3, r0
    3a40:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3a42:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3a46:	68f8      	ldr	r0, [r7, #12]
    3a48:	f001 f86c 	bl	4b24 <__aeabi_fmul>
    3a4c:	4603      	mov	r3, r0
    3a4e:	68b9      	ldr	r1, [r7, #8]
    3a50:	4618      	mov	r0, r3
    3a52:	f001 f867 	bl	4b24 <__aeabi_fmul>
    3a56:	4603      	mov	r3, r0
    3a58:	4619      	mov	r1, r3
    3a5a:	6978      	ldr	r0, [r7, #20]
    3a5c:	f001 f916 	bl	4c8c <__aeabi_fdiv>
    3a60:	4603      	mov	r3, r0
}
    3a62:	4618      	mov	r0, r3
    3a64:	3718      	adds	r7, #24
    3a66:	46bd      	mov	sp, r7
    3a68:	bd80      	pop	{r7, pc}

00003a6a <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    3a6a:	b580      	push	{r7, lr}
    3a6c:	b086      	sub	sp, #24
    3a6e:	af00      	add	r7, sp, #0
    3a70:	60f8      	str	r0, [r7, #12]
    3a72:	60b9      	str	r1, [r7, #8]
    3a74:	607a      	str	r2, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3a76:	6878      	ldr	r0, [r7, #4]
    3a78:	f000 fffc 	bl	4a74 <__aeabi_ui2f>
    3a7c:	4603      	mov	r3, r0
    3a7e:	617b      	str	r3, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    3a80:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    3a84:	68f8      	ldr	r0, [r7, #12]
    3a86:	f001 f84d 	bl	4b24 <__aeabi_fmul>
    3a8a:	4603      	mov	r3, r0
    3a8c:	68b9      	ldr	r1, [r7, #8]
    3a8e:	4618      	mov	r0, r3
    3a90:	f001 f848 	bl	4b24 <__aeabi_fmul>
    3a94:	4603      	mov	r3, r0
    3a96:	4619      	mov	r1, r3
    3a98:	6978      	ldr	r0, [r7, #20]
    3a9a:	f001 f8f7 	bl	4c8c <__aeabi_fdiv>
    3a9e:	4603      	mov	r3, r0
}
    3aa0:	4618      	mov	r0, r3
    3aa2:	3718      	adds	r7, #24
    3aa4:	46bd      	mov	sp, r7
    3aa6:	bd80      	pop	{r7, pc}

00003aa8 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b082      	sub	sp, #8
    3aac:	af00      	add	r7, sp, #0
    3aae:	6078      	str	r0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    3ab0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3ab4:	6878      	ldr	r0, [r7, #4]
    3ab6:	f000 ff2d 	bl	4914 <__addsf3>
    3aba:	4603      	mov	r3, r0
    3abc:	4618      	mov	r0, r3
    3abe:	f001 f9f7 	bl	4eb0 <__aeabi_f2iz>
    3ac2:	4603      	mov	r3, r0
    3ac4:	4618      	mov	r0, r3
    3ac6:	f000 ffd9 	bl	4a7c <__aeabi_i2f>
    3aca:	4603      	mov	r3, r0
}
    3acc:	4618      	mov	r0, r3
    3ace:	3708      	adds	r7, #8
    3ad0:	46bd      	mov	sp, r7
    3ad2:	bd80      	pop	{r7, pc}

00003ad4 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b086      	sub	sp, #24
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
  bool result         = false;
    3adc:	2300      	movs	r3, #0
    3ade:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    3ae0:	6878      	ldr	r0, [r7, #4]
    3ae2:	f7ff ffe1 	bl	3aa8 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3ae6:	6138      	str	r0, [r7, #16]
  float error         = value - rounded_value;
    3ae8:	6939      	ldr	r1, [r7, #16]
    3aea:	6878      	ldr	r0, [r7, #4]
    3aec:	f000 ff10 	bl	4910 <__aeabi_fsub>
    3af0:	4603      	mov	r3, r0
    3af2:	60fb      	str	r3, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    3af4:	490a      	ldr	r1, [pc, #40]	; (3b20 <sjsu::lpc40xx::uart::IsDecmial(float)+0x4c>)
    3af6:	68f8      	ldr	r0, [r7, #12]
    3af8:	f001 f9c6 	bl	4e88 <__aeabi_fcmpge>
    3afc:	4603      	mov	r3, r0
    3afe:	2b00      	cmp	r3, #0
    3b00:	d008      	beq.n	3b14 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
    3b02:	4908      	ldr	r1, [pc, #32]	; (3b24 <sjsu::lpc40xx::uart::IsDecmial(float)+0x50>)
    3b04:	68f8      	ldr	r0, [r7, #12]
    3b06:	f001 f9b5 	bl	4e74 <__aeabi_fcmple>
    3b0a:	4603      	mov	r3, r0
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d001      	beq.n	3b14 <sjsu::lpc40xx::uart::IsDecmial(float)+0x40>
  {
    result = true;
    3b10:	2301      	movs	r3, #1
    3b12:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    3b14:	7dfb      	ldrb	r3, [r7, #23]
}
    3b16:	4618      	mov	r0, r3
    3b18:	3718      	adds	r7, #24
    3b1a:	46bd      	mov	sp, r7
    3b1c:	bd80      	pop	{r7, pc}
    3b1e:	bf00      	nop
    3b20:	bd4ccccd 	.word	0xbd4ccccd
    3b24:	3d4ccccd 	.word	0x3d4ccccd

00003b28 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    3b28:	b590      	push	{r4, r7, lr}
    3b2a:	b091      	sub	sp, #68	; 0x44
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	61f8      	str	r0, [r7, #28]
    3b30:	61b9      	str	r1, [r7, #24]
    3b32:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    3b34:	f107 0314 	add.w	r3, r7, #20
    3b38:	4618      	mov	r0, r3
    3b3a:	f7ff f81a 	bl	2b72 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3b3e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    3b40:	2300      	movs	r3, #0
    3b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    3b44:	69fb      	ldr	r3, [r7, #28]
    3b46:	2200      	movs	r2, #0
    3b48:	601a      	str	r2, [r3, #0]
    3b4a:	69fb      	ldr	r3, [r7, #28]
    3b4c:	2200      	movs	r2, #0
    3b4e:	605a      	str	r2, [r3, #4]
    3b50:	69fb      	ldr	r3, [r7, #28]
    3b52:	2201      	movs	r2, #1
    3b54:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    3b56:	69b8      	ldr	r0, [r7, #24]
    3b58:	f000 ff8c 	bl	4a74 <__aeabi_ui2f>
    3b5c:	4603      	mov	r3, r0
    3b5e:	627b      	str	r3, [r7, #36]	; 0x24
  float divide_estimate = 0;
    3b60:	f04f 0300 	mov.w	r3, #0
    3b64:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    3b66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    3b6a:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    3b6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3b70:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    3b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    3b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b7a:	2b04      	cmp	r3, #4
    3b7c:	f000 80a0 	beq.w	3cc0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x198>
  {
    switch (state)
    3b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b82:	2b03      	cmp	r3, #3
    3b84:	f200 809a 	bhi.w	3cbc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x194>
    3b88:	a201      	add	r2, pc, #4	; (adr r2, 3b90 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x68>)
    3b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b8e:	bf00      	nop
    3b90:	00003ba1 	.word	0x00003ba1
    3b94:	00003bef 	.word	0x00003bef
    3b98:	00003c37 	.word	0x00003c37
    3b9c:	00003c95 	.word	0x00003c95
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    3ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ba2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3ba8:	f7ff ff40 	bl	3a2c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3bac:	63b8      	str	r0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    3bae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3bb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3bb4:	f001 f954 	bl	4e60 <__aeabi_fcmplt>
    3bb8:	4603      	mov	r3, r0
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d005      	beq.n	3bca <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xa2>
        {
          uart_calibration.divide_latch = 0;
    3bbe:	69fb      	ldr	r3, [r7, #28]
    3bc0:	2200      	movs	r2, #0
    3bc2:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    3bc4:	2304      	movs	r3, #4
    3bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    3bc8:	e079      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        else if (IsDecmial(divide_estimate))
    3bca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3bcc:	f7ff ff82 	bl	3ad4 <sjsu::lpc40xx::uart::IsDecmial(float)>
    3bd0:	4603      	mov	r3, r0
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d008      	beq.n	3be8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xc0>
              static_cast<uint32_t>(divide_estimate);
    3bd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3bd8:	f001 f990 	bl	4efc <__aeabi_f2uiz>
    3bdc:	4602      	mov	r2, r0
          uart_calibration.divide_latch =
    3bde:	69fb      	ldr	r3, [r7, #28]
    3be0:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    3be2:	2304      	movs	r3, #4
    3be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3be6:	e06a      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kCalculateDivideLatchWithDecimal;
    3be8:	2301      	movs	r3, #1
    3bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3bec:	e067      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    3bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3bf4:	f7ff ff1a 	bl	3a2c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3bf8:	4603      	mov	r3, r0
    3bfa:	4618      	mov	r0, r3
    3bfc:	f7ff ff54 	bl	3aa8 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3c00:	63b8      	str	r0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    3c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3c08:	f7ff ff2f 	bl	3a6a <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    3c0c:	6378      	str	r0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    3c0e:	492f      	ldr	r1, [pc, #188]	; (3ccc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a4>)
    3c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3c12:	f001 f939 	bl	4e88 <__aeabi_fcmpge>
    3c16:	4603      	mov	r3, r0
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d009      	beq.n	3c30 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
    3c1c:	492c      	ldr	r1, [pc, #176]	; (3cd0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1a8>)
    3c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3c20:	f001 f928 	bl	4e74 <__aeabi_fcmple>
    3c24:	4603      	mov	r3, r0
    3c26:	2b00      	cmp	r3, #0
    3c28:	d002      	beq.n	3c30 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x108>
        {
          state = States::kGenerateFractionFromDecimal;
    3c2a:	2303      	movs	r3, #3
    3c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    3c2e:	e046      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
          state = States::kDecimalFailedGenerateNewDecimal;
    3c30:	2302      	movs	r3, #2
    3c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3c34:	e043      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    3c36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3c3c:	f000 fe6a 	bl	4914 <__addsf3>
    3c40:	4603      	mov	r3, r0
    3c42:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (div > 15)
    3c44:	4923      	ldr	r1, [pc, #140]	; (3cd4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c48:	f001 f928 	bl	4e9c <__aeabi_fcmpgt>
    3c4c:	4603      	mov	r3, r0
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d002      	beq.n	3c58 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kDone;
    3c52:	2304      	movs	r3, #4
    3c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    3c56:	e032      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
        }
        else if (mul > 15)
    3c58:	491e      	ldr	r1, [pc, #120]	; (3cd4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1ac>)
    3c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3c5c:	f001 f91e 	bl	4e9c <__aeabi_fcmpgt>
    3c60:	4603      	mov	r3, r0
    3c62:	2b00      	cmp	r3, #0
    3c64:	d00d      	beq.n	3c82 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15a>
        {
          div += 1;
    3c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c6c:	f000 fe52 	bl	4914 <__addsf3>
    3c70:	4603      	mov	r3, r0
    3c72:	633b      	str	r3, [r7, #48]	; 0x30
          mul = div + 1;
    3c74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c7a:	f000 fe4b 	bl	4914 <__addsf3>
    3c7e:	4603      	mov	r3, r0
    3c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    3c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c86:	f001 f801 	bl	4c8c <__aeabi_fdiv>
    3c8a:	4603      	mov	r3, r0
    3c8c:	637b      	str	r3, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    3c8e:	2301      	movs	r3, #1
    3c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3c92:	e014      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    3c94:	69fc      	ldr	r4, [r7, #28]
    3c96:	463b      	mov	r3, r7
    3c98:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c9a:	4618      	mov	r0, r3
    3c9c:	f7ff fe60 	bl	3960 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    3ca0:	463b      	mov	r3, r7
    3ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    3caa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cac:	f001 f926 	bl	4efc <__aeabi_f2uiz>
    3cb0:	4602      	mov	r2, r0
    3cb2:	69fb      	ldr	r3, [r7, #28]
    3cb4:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    3cb6:	2304      	movs	r3, #4
    3cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3cba:	e000      	b.n	3cbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x196>
      }
      case States::kDone:
      default: break;
    3cbc:	bf00      	nop
  while (state != States::kDone)
    3cbe:	e75b      	b.n	3b78 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x50>
    }
  }
  return uart_calibration;
    3cc0:	bf00      	nop
}
    3cc2:	69f8      	ldr	r0, [r7, #28]
    3cc4:	3744      	adds	r7, #68	; 0x44
    3cc6:	46bd      	mov	sp, r7
    3cc8:	bd90      	pop	{r4, r7, pc}
    3cca:	bf00      	nop
    3ccc:	3f8ccccd 	.word	0x3f8ccccd
    3cd0:	3ff33333 	.word	0x3ff33333
    3cd4:	41700000 	.word	0x41700000

00003cd8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
  {
  }

  Status Initialize(uint32_t baud_rate) const override
    3cd8:	b580      	push	{r7, lr}
    3cda:	b084      	sub	sp, #16
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
    3ce0:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    3ce2:	2307      	movs	r3, #7
    3ce4:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	6898      	ldr	r0, [r3, #8]
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	689b      	ldr	r3, [r3, #8]
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	3314      	adds	r3, #20
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	687a      	ldr	r2, [r7, #4]
    3cf6:	6852      	ldr	r2, [r2, #4]
    3cf8:	3204      	adds	r2, #4
    3cfa:	4611      	mov	r1, r2
    3cfc:	4798      	blx	r3

    SetBaudRate(baud_rate);
    3cfe:	6839      	ldr	r1, [r7, #0]
    3d00:	6878      	ldr	r0, [r7, #4]
    3d02:	f000 f849 	bl	3d98 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	685b      	ldr	r3, [r3, #4]
    3d0a:	68d8      	ldr	r0, [r3, #12]
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	685b      	ldr	r3, [r3, #4]
    3d10:	68db      	ldr	r3, [r3, #12]
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	681b      	ldr	r3, [r3, #0]
    3d16:	687a      	ldr	r2, [r7, #4]
    3d18:	6852      	ldr	r2, [r2, #4]
    3d1a:	7c12      	ldrb	r2, [r2, #16]
    3d1c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    3d20:	b2d2      	uxtb	r2, r2
    3d22:	4611      	mov	r1, r2
    3d24:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	685b      	ldr	r3, [r3, #4]
    3d2a:	6898      	ldr	r0, [r3, #8]
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	685b      	ldr	r3, [r3, #4]
    3d30:	689b      	ldr	r3, [r3, #8]
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	687a      	ldr	r2, [r7, #4]
    3d38:	6852      	ldr	r2, [r2, #4]
    3d3a:	7c12      	ldrb	r2, [r2, #16]
    3d3c:	f3c2 0202 	ubfx	r2, r2, #0, #3
    3d40:	b2d2      	uxtb	r2, r2
    3d42:	4611      	mov	r1, r2
    3d44:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	685b      	ldr	r3, [r3, #4]
    3d4a:	68da      	ldr	r2, [r3, #12]
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	685b      	ldr	r3, [r3, #4]
    3d50:	68db      	ldr	r3, [r3, #12]
    3d52:	681b      	ldr	r3, [r3, #0]
    3d54:	3304      	adds	r3, #4
    3d56:	681b      	ldr	r3, [r3, #0]
    3d58:	2102      	movs	r1, #2
    3d5a:	4610      	mov	r0, r2
    3d5c:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	685b      	ldr	r3, [r3, #4]
    3d62:	689a      	ldr	r2, [r3, #8]
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	685b      	ldr	r3, [r3, #4]
    3d68:	689b      	ldr	r3, [r3, #8]
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	3304      	adds	r3, #4
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	2102      	movs	r1, #2
    3d72:	4610      	mov	r0, r2
    3d74:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	685b      	ldr	r3, [r3, #4]
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	7a1b      	ldrb	r3, [r3, #8]
    3d7e:	b2da      	uxtb	r2, r3
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	685b      	ldr	r3, [r3, #4]
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	f042 0207 	orr.w	r2, r2, #7
    3d8a:	b2d2      	uxtb	r2, r2
    3d8c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    3d8e:	2300      	movs	r3, #0
  }
    3d90:	4618      	mov	r0, r3
    3d92:	3710      	adds	r7, #16
    3d94:	46bd      	mov	sp, r7
    3d96:	bd80      	pop	{r7, pc}

00003d98 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    3d98:	b580      	push	{r7, lr}
    3d9a:	b086      	sub	sp, #24
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	6078      	str	r0, [r7, #4]
    3da0:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	689a      	ldr	r2, [r3, #8]
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	685b      	ldr	r3, [r3, #4]
    3daa:	3304      	adds	r3, #4
    3dac:	4619      	mov	r1, r3
    3dae:	4610      	mov	r0, r2
    3db0:	f7fe fd98 	bl	28e4 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    3db4:	4602      	mov	r2, r0
    3db6:	f107 0308 	add.w	r3, r7, #8
    3dba:	6839      	ldr	r1, [r7, #0]
    3dbc:	4618      	mov	r0, r3
    3dbe:	f7ff feb3 	bl	3b28 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    3dc2:	2380      	movs	r3, #128	; 0x80
    3dc4:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    3dc6:	68bb      	ldr	r3, [r7, #8]
    3dc8:	0a1b      	lsrs	r3, r3, #8
    3dca:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    3dcc:	68bb      	ldr	r3, [r7, #8]
    3dce:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3dd0:	693b      	ldr	r3, [r7, #16]
    3dd2:	b2db      	uxtb	r3, r3
    3dd4:	011b      	lsls	r3, r3, #4
    3dd6:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	b2db      	uxtb	r3, r3
    3ddc:	f003 030f 	and.w	r3, r3, #15
    3de0:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    3de2:	4313      	orrs	r3, r2
    3de4:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	685b      	ldr	r3, [r3, #4]
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	2280      	movs	r2, #128	; 0x80
    3dee:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	685b      	ldr	r3, [r3, #4]
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	7dba      	ldrb	r2, [r7, #22]
    3df8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	685b      	ldr	r3, [r3, #4]
    3dfe:	681b      	ldr	r3, [r3, #0]
    3e00:	7d7a      	ldrb	r2, [r7, #21]
    3e02:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	685b      	ldr	r3, [r3, #4]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	7d3a      	ldrb	r2, [r7, #20]
    3e0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	685b      	ldr	r3, [r3, #4]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	2203      	movs	r2, #3
    3e18:	731a      	strb	r2, [r3, #12]
    return true;
    3e1a:	2301      	movs	r3, #1
  }
    3e1c:	4618      	mov	r0, r3
    3e1e:	3718      	adds	r7, #24
    3e20:	46bd      	mov	sp, r7
    3e22:	bd80      	pop	{r7, pc}

00003e24 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    3e24:	b580      	push	{r7, lr}
    3e26:	b086      	sub	sp, #24
    3e28:	af00      	add	r7, sp, #0
    3e2a:	60f8      	str	r0, [r7, #12]
    3e2c:	60b9      	str	r1, [r7, #8]
    3e2e:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    3e30:	2300      	movs	r3, #0
    3e32:	617b      	str	r3, [r7, #20]
    3e34:	697a      	ldr	r2, [r7, #20]
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	429a      	cmp	r2, r3
    3e3a:	d216      	bcs.n	3e6a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    3e3c:	68ba      	ldr	r2, [r7, #8]
    3e3e:	697b      	ldr	r3, [r7, #20]
    3e40:	441a      	add	r2, r3
    3e42:	68fb      	ldr	r3, [r7, #12]
    3e44:	685b      	ldr	r3, [r3, #4]
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	7812      	ldrb	r2, [r2, #0]
    3e4a:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    3e4c:	68f8      	ldr	r0, [r7, #12]
    3e4e:	f000 f8b5 	bl	3fbc <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    3e52:	4603      	mov	r3, r0
    3e54:	f083 0301 	eor.w	r3, r3, #1
    3e58:	b2db      	uxtb	r3, r3
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d001      	beq.n	3e62 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    3e5e:	bf00      	nop
      while (!TransmissionComplete())
    3e60:	e7f4      	b.n	3e4c <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    3e62:	697b      	ldr	r3, [r7, #20]
    3e64:	3301      	adds	r3, #1
    3e66:	617b      	str	r3, [r7, #20]
    3e68:	e7e4      	b.n	3e34 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    3e6a:	bf00      	nop
    3e6c:	3718      	adds	r7, #24
    3e6e:	46bd      	mov	sp, r7
    3e70:	bd80      	pop	{r7, pc}

00003e72 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3e72:	b590      	push	{r4, r7, lr}
    3e74:	b083      	sub	sp, #12
    3e76:	af00      	add	r7, sp, #0
    3e78:	6078      	str	r0, [r7, #4]
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    3e7e:	4618      	mov	r0, r3
    3e80:	f000 f88a 	bl	3f98 <sjsu::lpc40xx::Uart::HasData() const>
    3e84:	4603      	mov	r3, r0
    3e86:	2b00      	cmp	r3, #0
    3e88:	d010      	beq.n	3eac <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3e8e:	685b      	ldr	r3, [r3, #4]
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3e9a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    3ea0:	6813      	ldr	r3, [r2, #0]
    3ea2:	1c58      	adds	r0, r3, #1
    3ea4:	6010      	str	r0, [r2, #0]
    3ea6:	440b      	add	r3, r1
    3ea8:	4622      	mov	r2, r4
    3eaa:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    3eb0:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d301      	bcc.n	3ebe <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    3eba:	2301      	movs	r3, #1
    3ebc:	e000      	b.n	3ec0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    3ebe:	2300      	movs	r3, #0
    });
    3ec0:	4618      	mov	r0, r3
    3ec2:	370c      	adds	r7, #12
    3ec4:	46bd      	mov	sp, r7
    3ec6:	bd90      	pop	{r4, r7, pc}

00003ec8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    3ec8:	b590      	push	{r4, r7, lr}
    3eca:	b09d      	sub	sp, #116	; 0x74
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6178      	str	r0, [r7, #20]
    3ed0:	6139      	str	r1, [r7, #16]
    3ed2:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    3ed4:	2300      	movs	r3, #0
    3ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    3ed8:	697b      	ldr	r3, [r7, #20]
    3eda:	643b      	str	r3, [r7, #64]	; 0x40
    3edc:	f107 0310 	add.w	r3, r7, #16
    3ee0:	647b      	str	r3, [r7, #68]	; 0x44
    3ee2:	68fb      	ldr	r3, [r7, #12]
    3ee4:	64bb      	str	r3, [r7, #72]	; 0x48
    3ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3eea:	64fb      	str	r3, [r7, #76]	; 0x4c
    3eec:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    3ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    3ef4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    3ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    3efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    3f02:	f107 0360 	add.w	r3, r7, #96	; 0x60
    3f06:	4618      	mov	r0, r3
    3f08:	f7fc fe8d 	bl	c26 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    3f0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3f10:	f107 0320 	add.w	r3, r7, #32
    3f14:	4611      	mov	r1, r2
    3f16:	4618      	mov	r0, r3
    3f18:	f7fc fe99 	bl	c4e <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3f1c:	4603      	mov	r3, r0
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d004      	beq.n	3f2c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    3f22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    3f26:	e9c7 3406 	strd	r3, r4, [r7, #24]
    3f2a:	e011      	b.n	3f50 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    3f2c:	4b19      	ldr	r3, [pc, #100]	; (3f94 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	f107 0258 	add.w	r2, r7, #88	; 0x58
    3f34:	4610      	mov	r0, r2
    3f36:	4798      	blx	r3
    3f38:	463b      	mov	r3, r7
    3f3a:	f107 0220 	add.w	r2, r7, #32
    3f3e:	f107 0158 	add.w	r1, r7, #88	; 0x58
    3f42:	4618      	mov	r0, r3
    3f44:	f7fc fea8 	bl	c98 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3f48:	e9d7 3400 	ldrd	r3, r4, [r7]
    3f4c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    3f50:	2301      	movs	r3, #1
    3f52:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    3f54:	4b0f      	ldr	r3, [pc, #60]	; (3f94 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	f107 0250 	add.w	r2, r7, #80	; 0x50
    3f5c:	4610      	mov	r0, r2
    3f5e:	4798      	blx	r3
    3f60:	f107 0218 	add.w	r2, r7, #24
    3f64:	f107 0350 	add.w	r3, r7, #80	; 0x50
    3f68:	4611      	mov	r1, r2
    3f6a:	4618      	mov	r0, r3
    3f6c:	f7fc febf 	bl	cee <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    3f70:	4603      	mov	r3, r0
    3f72:	2b00      	cmp	r3, #0
    3f74:	d009      	beq.n	3f8a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    3f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    3f7a:	4618      	mov	r0, r3
    3f7c:	f7ff ff79 	bl	3e72 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    3f80:	4603      	mov	r3, r0
    3f82:	2b00      	cmp	r3, #0
    3f84:	d0e6      	beq.n	3f54 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    3f86:	2300      	movs	r3, #0
    3f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    3f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    3f8c:	4618      	mov	r0, r3
    3f8e:	3774      	adds	r7, #116	; 0x74
    3f90:	46bd      	mov	sp, r7
    3f92:	bd90      	pop	{r4, r7, pc}
    3f94:	2007c000 	.word	0x2007c000

00003f98 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	685b      	ldr	r3, [r3, #4]
    3fa4:	681b      	ldr	r3, [r3, #0]
    3fa6:	7d1b      	ldrb	r3, [r3, #20]
    3fa8:	b2db      	uxtb	r3, r3
    3faa:	2100      	movs	r1, #0
    3fac:	4618      	mov	r0, r3
    3fae:	f000 f9d8 	bl	4362 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    3fb2:	4603      	mov	r3, r0
  }
    3fb4:	4618      	mov	r0, r3
    3fb6:	3708      	adds	r7, #8
    3fb8:	46bd      	mov	sp, r7
    3fba:	bd80      	pop	{r7, pc}

00003fbc <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	685b      	ldr	r3, [r3, #4]
    3fc8:	681b      	ldr	r3, [r3, #0]
    3fca:	7d1b      	ldrb	r3, [r3, #20]
    3fcc:	b2db      	uxtb	r3, r3
    3fce:	2105      	movs	r1, #5
    3fd0:	4618      	mov	r0, r3
    3fd2:	f000 f9c6 	bl	4362 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    3fd6:	4603      	mov	r3, r0
  }
    3fd8:	4618      	mov	r0, r3
    3fda:	3708      	adds	r7, #8
    3fdc:	46bd      	mov	sp, r7
    3fde:	bd80      	pop	{r7, pc}

00003fe0 <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc17xxStdOut(const char * data, size_t length)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b082      	sub	sp, #8
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
    3fe8:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    3fea:	683a      	ldr	r2, [r7, #0]
    3fec:	6879      	ldr	r1, [r7, #4]
    3fee:	4804      	ldr	r0, [pc, #16]	; (4000 <(anonymous namespace)::Lpc17xxStdOut(char const*, unsigned int)+0x20>)
    3ff0:	f7ff ff18 	bl	3e24 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    3ff4:	683b      	ldr	r3, [r7, #0]
}
    3ff6:	4618      	mov	r0, r3
    3ff8:	3708      	adds	r7, #8
    3ffa:	46bd      	mov	sp, r7
    3ffc:	bd80      	pop	{r7, pc}
    3ffe:	bf00      	nop
    4000:	2007c0a0 	.word	0x2007c0a0

00004004 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)>:

int Lpc17xxStdIn(char * data, size_t length)
{
    4004:	b590      	push	{r4, r7, lr}
    4006:	b087      	sub	sp, #28
    4008:	af02      	add	r7, sp, #8
    400a:	6078      	str	r0, [r7, #4]
    400c:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    400e:	f107 0308 	add.w	r3, r7, #8
    4012:	4618      	mov	r0, r3
    4014:	f7fc fe07 	bl	c26 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4018:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    401c:	e9cd 3400 	strd	r3, r4, [sp]
    4020:	683a      	ldr	r2, [r7, #0]
    4022:	6879      	ldr	r1, [r7, #4]
    4024:	4803      	ldr	r0, [pc, #12]	; (4034 <(anonymous namespace)::Lpc17xxStdIn(char*, unsigned int)+0x30>)
    4026:	f7ff ff4f 	bl	3ec8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    402a:	683b      	ldr	r3, [r7, #0]
}
    402c:	4618      	mov	r0, r3
    402e:	3714      	adds	r7, #20
    4030:	46bd      	mov	sp, r7
    4032:	bd90      	pop	{r4, r7, pc}
    4034:	2007c0a0 	.word	0x2007c0a0

00004038 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    4038:	b580      	push	{r7, lr}
    403a:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    403c:	4802      	ldr	r0, [pc, #8]	; (4048 <ThreadRuntimeCounter+0x10>)
    403e:	f7fe fb45 	bl	26cc <sjsu::cortex::DwtCounter::GetCount()>
    4042:	4603      	mov	r3, r0
}
    4044:	4618      	mov	r0, r3
    4046:	bd80      	pop	{r7, pc}
    4048:	2007c2f4 	.word	0x2007c2f4

0000404c <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    4052:	4b1c      	ldr	r3, [pc, #112]	; (40c4 <sjsu::InitializePlatform()+0x78>)
    4054:	6819      	ldr	r1, [r3, #0]
    4056:	481c      	ldr	r0, [pc, #112]	; (40c8 <sjsu::InitializePlatform()+0x7c>)
    4058:	f7fe fe72 	bl	2d40 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  system_controller.SetPeripheralClockDivider(
    405c:	2201      	movs	r2, #1
    405e:	491b      	ldr	r1, [pc, #108]	; (40cc <sjsu::InitializePlatform()+0x80>)
    4060:	4819      	ldr	r0, [pc, #100]	; (40c8 <sjsu::InitializePlatform()+0x7c>)
    4062:	f7fe ff4f 	bl	2f04 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
      sjsu::lpc17xx::SystemController::Peripherals::kUart0, 1);
  uart0.Initialize(config::kBaudRate);
    4066:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    406a:	4819      	ldr	r0, [pc, #100]	; (40d0 <sjsu::InitializePlatform()+0x84>)
    406c:	f7ff fe34 	bl	3cd8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>

  sjsu::newlib::SetStdout(Lpc17xxStdOut);
    4070:	4818      	ldr	r0, [pc, #96]	; (40d4 <sjsu::InitializePlatform()+0x88>)
    4072:	f000 fbc7 	bl	4804 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc17xxStdIn);
    4076:	4818      	ldr	r0, [pc, #96]	; (40d8 <sjsu::InitializePlatform()+0x8c>)
    4078:	f000 fbd2 	bl	4820 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    407c:	4b17      	ldr	r3, [pc, #92]	; (40dc <sjsu::InitializePlatform()+0x90>)
    407e:	6819      	ldr	r1, [r3, #0]
    4080:	4817      	ldr	r0, [pc, #92]	; (40e0 <sjsu::InitializePlatform()+0x94>)
    4082:	f7fe fd93 	bl	2bac <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    4086:	4816      	ldr	r0, [pc, #88]	; (40e0 <sjsu::InitializePlatform()+0x94>)
    4088:	f7fe fcbc 	bl	2a04 <sjsu::cortex::SystemTimer::StartTimer() const>
    408c:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	2b00      	cmp	r3, #0
    4092:	d00d      	beq.n	40b0 <sjsu::InitializePlatform()+0x64>
    4094:	23c6      	movs	r3, #198	; 0xc6
    4096:	4a13      	ldr	r2, [pc, #76]	; (40e4 <sjsu::InitializePlatform()+0x98>)
    4098:	4913      	ldr	r1, [pc, #76]	; (40e8 <sjsu::InitializePlatform()+0x9c>)
    409a:	4814      	ldr	r0, [pc, #80]	; (40ec <sjsu::InitializePlatform()+0xa0>)
    409c:	f7fe fa48 	bl	2530 <printf>
    40a0:	4813      	ldr	r0, [pc, #76]	; (40f0 <sjsu::InitializePlatform()+0xa4>)
    40a2:	f7fd f91b 	bl	12dc <puts>
    40a6:	2100      	movs	r1, #0
    40a8:	2001      	movs	r0, #1
    40aa:	f7fc fefb 	bl	ea4 <sjsu::debug::PrintBacktrace(bool, void*)>
    40ae:	e7fe      	b.n	40ae <sjsu::InitializePlatform()+0x62>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    40b0:	4810      	ldr	r0, [pc, #64]	; (40f4 <sjsu::InitializePlatform()+0xa8>)
    40b2:	f7fe fae9 	bl	2688 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    40b6:	4810      	ldr	r0, [pc, #64]	; (40f8 <sjsu::InitializePlatform()+0xac>)
    40b8:	f7fe fbea 	bl	2890 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    40bc:	bf00      	nop
    40be:	3708      	adds	r7, #8
    40c0:	46bd      	mov	sp, r7
    40c2:	bd80      	pop	{r7, pc}
    40c4:	00006bb8 	.word	0x00006bb8
    40c8:	2007c09c 	.word	0x2007c09c
    40cc:	00007540 	.word	0x00007540
    40d0:	2007c0a0 	.word	0x2007c0a0
    40d4:	00003fe1 	.word	0x00003fe1
    40d8:	00004005 	.word	0x00004005
    40dc:	00006bbc 	.word	0x00006bbc
    40e0:	2007c0ac 	.word	0x2007c0ac
    40e4:	000078f4 	.word	0x000078f4
    40e8:	00007694 	.word	0x00007694
    40ec:	0000746c 	.word	0x0000746c
    40f0:	00006e24 	.word	0x00006e24
    40f4:	2007c2f4 	.word	0x2007c2f4
    40f8:	000029b1 	.word	0x000029b1

000040fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    40fc:	b590      	push	{r4, r7, lr}
    40fe:	b085      	sub	sp, #20
    4100:	af00      	add	r7, sp, #0
    4102:	6078      	str	r0, [r7, #4]
    4104:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	4618      	mov	r0, r3
    410a:	f7fe fcc5 	bl	2a98 <units::linear_scale<float>::operator()() const>
    410e:	4604      	mov	r4, r0
    4110:	6838      	ldr	r0, [r7, #0]
    4112:	f000 fcaf 	bl	4a74 <__aeabi_ui2f>
    4116:	4603      	mov	r3, r0
    4118:	4619      	mov	r1, r3
    411a:	4620      	mov	r0, r4
    411c:	f000 fdb6 	bl	4c8c <__aeabi_fdiv>
    4120:	4603      	mov	r3, r0
    4122:	461a      	mov	r2, r3
    4124:	f107 030c 	add.w	r3, r7, #12
    4128:	4611      	mov	r1, r2
    412a:	4618      	mov	r0, r3
    412c:	f7fe fb15 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4130:	68fb      	ldr	r3, [r7, #12]
	}
    4132:	4618      	mov	r0, r3
    4134:	3714      	adds	r7, #20
    4136:	46bd      	mov	sp, r7
    4138:	bd90      	pop	{r4, r7, pc}

0000413a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    413a:	b5f0      	push	{r4, r5, r6, r7, lr}
    413c:	b083      	sub	sp, #12
    413e:	af00      	add	r7, sp, #0
    4140:	6078      	str	r0, [r7, #4]
    4142:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4144:	6838      	ldr	r0, [r7, #0]
    4146:	f7fc fc37 	bl	9b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    414a:	460a      	mov	r2, r1
    414c:	4601      	mov	r1, r0
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	e9d3 5600 	ldrd	r5, r6, [r3]
    4154:	186b      	adds	r3, r5, r1
    4156:	eb46 0402 	adc.w	r4, r6, r2
    415a:	687a      	ldr	r2, [r7, #4]
    415c:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    4160:	687b      	ldr	r3, [r7, #4]
	}
    4162:	4618      	mov	r0, r3
    4164:	370c      	adds	r7, #12
    4166:	46bd      	mov	sp, r7
    4168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000416a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    416a:	b580      	push	{r7, lr}
    416c:	b084      	sub	sp, #16
    416e:	af00      	add	r7, sp, #0
    4170:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	4618      	mov	r0, r3
    4176:	f7fe fc8f 	bl	2a98 <units::linear_scale<float>::operator()() const>
    417a:	4603      	mov	r3, r0
    417c:	60fb      	str	r3, [r7, #12]
    417e:	f107 030c 	add.w	r3, r7, #12
    4182:	4618      	mov	r0, r3
    4184:	f000 f903 	bl	438e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4188:	4603      	mov	r3, r0
    418a:	4618      	mov	r0, r3
    418c:	f000 feb6 	bl	4efc <__aeabi_f2uiz>
    4190:	4603      	mov	r3, r0
		}
    4192:	4618      	mov	r0, r3
    4194:	3710      	adds	r7, #16
    4196:	46bd      	mov	sp, r7
    4198:	bd80      	pop	{r7, pc}

0000419a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    419a:	b480      	push	{r7}
    419c:	b083      	sub	sp, #12
    419e:	af00      	add	r7, sp, #0
    41a0:	6078      	str	r0, [r7, #4]
    41a2:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    41a4:	2201      	movs	r2, #1
    41a6:	683b      	ldr	r3, [r7, #0]
    41a8:	fa02 f303 	lsl.w	r3, r2, r3
    41ac:	43db      	mvns	r3, r3
    41ae:	461a      	mov	r2, r3
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	4013      	ands	r3, r2
}
    41b4:	4618      	mov	r0, r3
    41b6:	370c      	adds	r7, #12
    41b8:	46bd      	mov	sp, r7
    41ba:	bc80      	pop	{r7}
    41bc:	4770      	bx	lr

000041be <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    41be:	b580      	push	{r7, lr}
    41c0:	b084      	sub	sp, #16
    41c2:	af00      	add	r7, sp, #0
    41c4:	60f8      	str	r0, [r7, #12]
    41c6:	460b      	mov	r3, r1
    41c8:	80ba      	strh	r2, [r7, #4]
    41ca:	817b      	strh	r3, [r7, #10]
  return Insert(target, value, bitmask.position, bitmask.width);
    41cc:	793b      	ldrb	r3, [r7, #4]
    41ce:	461a      	mov	r2, r3
    41d0:	797b      	ldrb	r3, [r7, #5]
    41d2:	8979      	ldrh	r1, [r7, #10]
    41d4:	68f8      	ldr	r0, [r7, #12]
    41d6:	f000 f8e6 	bl	43a6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>
    41da:	4603      	mov	r3, r0
}
    41dc:	4618      	mov	r0, r3
    41de:	3710      	adds	r7, #16
    41e0:	46bd      	mov	sp, r7
    41e2:	bd80      	pop	{r7, pc}

000041e4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    41e4:	b580      	push	{r7, lr}
    41e6:	b084      	sub	sp, #16
    41e8:	af00      	add	r7, sp, #0
    41ea:	60f8      	str	r0, [r7, #12]
    41ec:	460b      	mov	r3, r1
    41ee:	80ba      	strh	r2, [r7, #4]
    41f0:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    41f2:	793b      	ldrb	r3, [r7, #4]
    41f4:	461a      	mov	r2, r3
    41f6:	797b      	ldrb	r3, [r7, #5]
    41f8:	7af9      	ldrb	r1, [r7, #11]
    41fa:	68f8      	ldr	r0, [r7, #12]
    41fc:	f000 f8ff 	bl	43fe <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    4200:	4603      	mov	r3, r0
}
    4202:	4618      	mov	r0, r3
    4204:	3710      	adds	r7, #16
    4206:	46bd      	mov	sp, r7
    4208:	bd80      	pop	{r7, pc}

0000420a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    420a:	b480      	push	{r7}
    420c:	b083      	sub	sp, #12
    420e:	af00      	add	r7, sp, #0
    4210:	6078      	str	r0, [r7, #4]
    4212:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    4214:	2201      	movs	r2, #1
    4216:	683b      	ldr	r3, [r7, #0]
    4218:	fa02 f303 	lsl.w	r3, r2, r3
    421c:	461a      	mov	r2, r3
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	4313      	orrs	r3, r2
}
    4222:	4618      	mov	r0, r3
    4224:	370c      	adds	r7, #12
    4226:	46bd      	mov	sp, r7
    4228:	bc80      	pop	{r7}
    422a:	4770      	bx	lr

0000422c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    422c:	b580      	push	{r7, lr}
    422e:	b082      	sub	sp, #8
    4230:	af00      	add	r7, sp, #0
    4232:	6078      	str	r0, [r7, #4]
    4234:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	4618      	mov	r0, r3
    423a:	f7fe fd36 	bl	2caa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    423e:	4602      	mov	r2, r0
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	601a      	str	r2, [r3, #0]
			return *this;
    4244:	687b      	ldr	r3, [r7, #4]
		}
    4246:	4618      	mov	r0, r3
    4248:	3708      	adds	r7, #8
    424a:	46bd      	mov	sp, r7
    424c:	bd80      	pop	{r7, pc}

0000424e <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    424e:	b580      	push	{r7, lr}
    4250:	b082      	sub	sp, #8
    4252:	af00      	add	r7, sp, #0
    4254:	6078      	str	r0, [r7, #4]
    4256:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    4258:	783b      	ldrb	r3, [r7, #0]
    425a:	4619      	mov	r1, r3
    425c:	787b      	ldrb	r3, [r7, #1]
    425e:	461a      	mov	r2, r3
    4260:	6878      	ldr	r0, [r7, #4]
    4262:	f000 f8f8 	bl	4456 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    4266:	4603      	mov	r3, r0
}
    4268:	4618      	mov	r0, r3
    426a:	3708      	adds	r7, #8
    426c:	46bd      	mov	sp, r7
    426e:	bd80      	pop	{r7, pc}

00004270 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    4270:	b480      	push	{r7}
    4272:	b083      	sub	sp, #12
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    427a:	2201      	movs	r2, #1
    427c:	683b      	ldr	r3, [r7, #0]
    427e:	fa02 f303 	lsl.w	r3, r2, r3
    4282:	461a      	mov	r2, r3
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	4013      	ands	r3, r2
    4288:	2b00      	cmp	r3, #0
    428a:	bf14      	ite	ne
    428c:	2301      	movne	r3, #1
    428e:	2300      	moveq	r3, #0
    4290:	b2db      	uxtb	r3, r3
}
    4292:	4618      	mov	r0, r3
    4294:	370c      	adds	r7, #12
    4296:	46bd      	mov	sp, r7
    4298:	bc80      	pop	{r7}
    429a:	4770      	bx	lr

0000429c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    429c:	b580      	push	{r7, lr}
    429e:	b084      	sub	sp, #16
    42a0:	af00      	add	r7, sp, #0
    42a2:	60f8      	str	r0, [r7, #12]
    42a4:	60b9      	str	r1, [r7, #8]
    42a6:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    42a8:	793b      	ldrb	r3, [r7, #4]
    42aa:	461a      	mov	r2, r3
    42ac:	797b      	ldrb	r3, [r7, #5]
    42ae:	68b9      	ldr	r1, [r7, #8]
    42b0:	68f8      	ldr	r0, [r7, #12]
    42b2:	f000 f8ed 	bl	4490 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    42b6:	4603      	mov	r3, r0
}
    42b8:	4618      	mov	r0, r3
    42ba:	3710      	adds	r7, #16
    42bc:	46bd      	mov	sp, r7
    42be:	bd80      	pop	{r7, pc}

000042c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(int, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr UnitTypeRhs operator*(T lhs, const UnitTypeRhs& rhs) noexcept
    42c0:	b590      	push	{r4, r7, lr}
    42c2:	b085      	sub	sp, #20
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	6039      	str	r1, [r7, #0]
		return UnitTypeRhs(lhs * rhs());
    42ca:	6878      	ldr	r0, [r7, #4]
    42cc:	f000 fbd6 	bl	4a7c <__aeabi_i2f>
    42d0:	4604      	mov	r4, r0
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	4618      	mov	r0, r3
    42d6:	f7fe fbdf 	bl	2a98 <units::linear_scale<float>::operator()() const>
    42da:	4603      	mov	r3, r0
    42dc:	4619      	mov	r1, r3
    42de:	4620      	mov	r0, r4
    42e0:	f000 fc20 	bl	4b24 <__aeabi_fmul>
    42e4:	4603      	mov	r3, r0
    42e6:	461a      	mov	r2, r3
    42e8:	f107 030c 	add.w	r3, r7, #12
    42ec:	4611      	mov	r1, r2
    42ee:	4618      	mov	r0, r3
    42f0:	f7fe fa33 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    42f4:	68fb      	ldr	r3, [r7, #12]
	}
    42f6:	4618      	mov	r0, r3
    42f8:	3714      	adds	r7, #20
    42fa:	46bd      	mov	sp, r7
    42fc:	bd90      	pop	{r4, r7, pc}

000042fe <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    42fe:	b590      	push	{r4, r7, lr}
    4300:	b085      	sub	sp, #20
    4302:	af00      	add	r7, sp, #0
    4304:	6078      	str	r0, [r7, #4]
    4306:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	4618      	mov	r0, r3
    430c:	f7fe fbc4 	bl	2a98 <units::linear_scale<float>::operator()() const>
    4310:	4604      	mov	r4, r0
    4312:	6838      	ldr	r0, [r7, #0]
    4314:	f000 fbb2 	bl	4a7c <__aeabi_i2f>
    4318:	4603      	mov	r3, r0
    431a:	4619      	mov	r1, r3
    431c:	4620      	mov	r0, r4
    431e:	f000 fcb5 	bl	4c8c <__aeabi_fdiv>
    4322:	4603      	mov	r3, r0
    4324:	461a      	mov	r2, r3
    4326:	f107 030c 	add.w	r3, r7, #12
    432a:	4611      	mov	r1, r2
    432c:	4618      	mov	r0, r3
    432e:	f7fe fa14 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4332:	68fb      	ldr	r3, [r7, #12]
	}
    4334:	4618      	mov	r0, r3
    4336:	3714      	adds	r7, #20
    4338:	46bd      	mov	sp, r7
    433a:	bd90      	pop	{r4, r7, pc}

0000433c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    433c:	b580      	push	{r7, lr}
    433e:	b084      	sub	sp, #16
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	460b      	mov	r3, r1
    4346:	80ba      	strh	r2, [r7, #4]
    4348:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    434a:	793b      	ldrb	r3, [r7, #4]
    434c:	461a      	mov	r2, r3
    434e:	797b      	ldrb	r3, [r7, #5]
    4350:	7af9      	ldrb	r1, [r7, #11]
    4352:	68f8      	ldr	r0, [r7, #12]
    4354:	f000 f8c7 	bl	44e6 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    4358:	4603      	mov	r3, r0
}
    435a:	4618      	mov	r0, r3
    435c:	3710      	adds	r7, #16
    435e:	46bd      	mov	sp, r7
    4360:	bd80      	pop	{r7, pc}

00004362 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    4362:	b480      	push	{r7}
    4364:	b083      	sub	sp, #12
    4366:	af00      	add	r7, sp, #0
    4368:	4603      	mov	r3, r0
    436a:	6039      	str	r1, [r7, #0]
    436c:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    436e:	79fa      	ldrb	r2, [r7, #7]
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	fa42 f303 	asr.w	r3, r2, r3
    4376:	f003 0301 	and.w	r3, r3, #1
    437a:	2b00      	cmp	r3, #0
    437c:	bf14      	ite	ne
    437e:	2301      	movne	r3, #1
    4380:	2300      	moveq	r3, #0
    4382:	b2db      	uxtb	r3, r3
}
    4384:	4618      	mov	r0, r3
    4386:	370c      	adds	r7, #12
    4388:	46bd      	mov	sp, r7
    438a:	bc80      	pop	{r7}
    438c:	4770      	bx	lr

0000438e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    438e:	b580      	push	{r7, lr}
    4390:	b086      	sub	sp, #24
    4392:	af00      	add	r7, sp, #0
    4394:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4396:	6878      	ldr	r0, [r7, #4]
    4398:	f000 f8d1 	bl	453e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    439c:	4603      	mov	r3, r0
	}
    439e:	4618      	mov	r0, r3
    43a0:	3718      	adds	r7, #24
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}

000043a6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned short>(unsigned long, unsigned short, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    43a6:	b480      	push	{r7}
    43a8:	b089      	sub	sp, #36	; 0x24
    43aa:	af00      	add	r7, sp, #0
    43ac:	60f8      	str	r0, [r7, #12]
    43ae:	607a      	str	r2, [r7, #4]
    43b0:	603b      	str	r3, [r7, #0]
    43b2:	460b      	mov	r3, r1
    43b4:	817b      	strh	r3, [r7, #10]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    43b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43ba:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    43bc:	2320      	movs	r3, #32
    43be:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    43c0:	683b      	ldr	r3, [r7, #0]
    43c2:	f1c3 0320 	rsb	r3, r3, #32
    43c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43ca:	fa22 f303 	lsr.w	r3, r2, r3
    43ce:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    43d0:	697a      	ldr	r2, [r7, #20]
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	fa02 f303 	lsl.w	r3, r2, r3
    43d8:	43db      	mvns	r3, r3
    43da:	68fa      	ldr	r2, [r7, #12]
    43dc:	4013      	ands	r3, r2
    43de:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    43e0:	897a      	ldrh	r2, [r7, #10]
    43e2:	697b      	ldr	r3, [r7, #20]
    43e4:	401a      	ands	r2, r3
    43e6:	687b      	ldr	r3, [r7, #4]
    43e8:	fa02 f303 	lsl.w	r3, r2, r3
    43ec:	68fa      	ldr	r2, [r7, #12]
    43ee:	4313      	orrs	r3, r2
    43f0:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    43f2:	68fb      	ldr	r3, [r7, #12]
}
    43f4:	4618      	mov	r0, r3
    43f6:	3724      	adds	r7, #36	; 0x24
    43f8:	46bd      	mov	sp, r7
    43fa:	bc80      	pop	{r7}
    43fc:	4770      	bx	lr

000043fe <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    43fe:	b480      	push	{r7}
    4400:	b089      	sub	sp, #36	; 0x24
    4402:	af00      	add	r7, sp, #0
    4404:	60f8      	str	r0, [r7, #12]
    4406:	607a      	str	r2, [r7, #4]
    4408:	603b      	str	r3, [r7, #0]
    440a:	460b      	mov	r3, r1
    440c:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    440e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4412:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4414:	2320      	movs	r3, #32
    4416:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4418:	683b      	ldr	r3, [r7, #0]
    441a:	f1c3 0320 	rsb	r3, r3, #32
    441e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4422:	fa22 f303 	lsr.w	r3, r2, r3
    4426:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4428:	697a      	ldr	r2, [r7, #20]
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	fa02 f303 	lsl.w	r3, r2, r3
    4430:	43db      	mvns	r3, r3
    4432:	68fa      	ldr	r2, [r7, #12]
    4434:	4013      	ands	r3, r2
    4436:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4438:	7afa      	ldrb	r2, [r7, #11]
    443a:	697b      	ldr	r3, [r7, #20]
    443c:	401a      	ands	r2, r3
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	fa02 f303 	lsl.w	r3, r2, r3
    4444:	68fa      	ldr	r2, [r7, #12]
    4446:	4313      	orrs	r3, r2
    4448:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    444a:	68fb      	ldr	r3, [r7, #12]
}
    444c:	4618      	mov	r0, r3
    444e:	3724      	adds	r7, #36	; 0x24
    4450:	46bd      	mov	sp, r7
    4452:	bc80      	pop	{r7}
    4454:	4770      	bx	lr

00004456 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    4456:	b480      	push	{r7}
    4458:	b089      	sub	sp, #36	; 0x24
    445a:	af00      	add	r7, sp, #0
    445c:	60f8      	str	r0, [r7, #12]
    445e:	60b9      	str	r1, [r7, #8]
    4460:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    4462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4466:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4468:	2320      	movs	r3, #32
    446a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	f1c3 0320 	rsb	r3, r3, #32
    4472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4476:	fa22 f303 	lsr.w	r3, r2, r3
    447a:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    447c:	68fa      	ldr	r2, [r7, #12]
    447e:	68bb      	ldr	r3, [r7, #8]
    4480:	40da      	lsrs	r2, r3
    4482:	697b      	ldr	r3, [r7, #20]
    4484:	4013      	ands	r3, r2
}
    4486:	4618      	mov	r0, r3
    4488:	3724      	adds	r7, #36	; 0x24
    448a:	46bd      	mov	sp, r7
    448c:	bc80      	pop	{r7}
    448e:	4770      	bx	lr

00004490 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    4490:	b480      	push	{r7}
    4492:	b089      	sub	sp, #36	; 0x24
    4494:	af00      	add	r7, sp, #0
    4496:	60f8      	str	r0, [r7, #12]
    4498:	60b9      	str	r1, [r7, #8]
    449a:	607a      	str	r2, [r7, #4]
    449c:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    449e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44a2:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    44a4:	2320      	movs	r3, #32
    44a6:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	f1c3 0320 	rsb	r3, r3, #32
    44ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    44b2:	fa22 f303 	lsr.w	r3, r2, r3
    44b6:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    44b8:	697a      	ldr	r2, [r7, #20]
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	fa02 f303 	lsl.w	r3, r2, r3
    44c0:	43db      	mvns	r3, r3
    44c2:	68fa      	ldr	r2, [r7, #12]
    44c4:	4013      	ands	r3, r2
    44c6:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    44c8:	68ba      	ldr	r2, [r7, #8]
    44ca:	697b      	ldr	r3, [r7, #20]
    44cc:	401a      	ands	r2, r3
    44ce:	687b      	ldr	r3, [r7, #4]
    44d0:	fa02 f303 	lsl.w	r3, r2, r3
    44d4:	68fa      	ldr	r2, [r7, #12]
    44d6:	4313      	orrs	r3, r2
    44d8:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    44da:	68fb      	ldr	r3, [r7, #12]
}
    44dc:	4618      	mov	r0, r3
    44de:	3724      	adds	r7, #36	; 0x24
    44e0:	46bd      	mov	sp, r7
    44e2:	bc80      	pop	{r7}
    44e4:	4770      	bx	lr

000044e6 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    44e6:	b480      	push	{r7}
    44e8:	b089      	sub	sp, #36	; 0x24
    44ea:	af00      	add	r7, sp, #0
    44ec:	60f8      	str	r0, [r7, #12]
    44ee:	607a      	str	r2, [r7, #4]
    44f0:	603b      	str	r3, [r7, #0]
    44f2:	460b      	mov	r3, r1
    44f4:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    44f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44fa:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    44fc:	2320      	movs	r3, #32
    44fe:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4500:	683b      	ldr	r3, [r7, #0]
    4502:	f1c3 0320 	rsb	r3, r3, #32
    4506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    450a:	fa22 f303 	lsr.w	r3, r2, r3
    450e:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4510:	697a      	ldr	r2, [r7, #20]
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	fa02 f303 	lsl.w	r3, r2, r3
    4518:	43db      	mvns	r3, r3
    451a:	68fa      	ldr	r2, [r7, #12]
    451c:	4013      	ands	r3, r2
    451e:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4520:	7afa      	ldrb	r2, [r7, #11]
    4522:	697b      	ldr	r3, [r7, #20]
    4524:	401a      	ands	r2, r3
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	fa02 f303 	lsl.w	r3, r2, r3
    452c:	68fa      	ldr	r2, [r7, #12]
    452e:	4313      	orrs	r3, r2
    4530:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4532:	68fb      	ldr	r3, [r7, #12]
}
    4534:	4618      	mov	r0, r3
    4536:	3724      	adds	r7, #36	; 0x24
    4538:	46bd      	mov	sp, r7
    453a:	bc80      	pop	{r7}
    453c:	4770      	bx	lr

0000453e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    453e:	b480      	push	{r7}
    4540:	b085      	sub	sp, #20
    4542:	af00      	add	r7, sp, #0
    4544:	60f8      	str	r0, [r7, #12]
    4546:	7239      	strb	r1, [r7, #8]
    4548:	713a      	strb	r2, [r7, #4]
    454a:	703b      	strb	r3, [r7, #0]
			return value;
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
		}
    4550:	4618      	mov	r0, r3
    4552:	3714      	adds	r7, #20
    4554:	46bd      	mov	sp, r7
    4556:	bc80      	pop	{r7}
    4558:	4770      	bx	lr
    455a:	Address 0x000000000000455a is out of bounds.


0000455c <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    455c:	b580      	push	{r7, lr}
    455e:	b082      	sub	sp, #8
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
    4564:	6039      	str	r1, [r7, #0]
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	2b01      	cmp	r3, #1
    456a:	f040 80a6 	bne.w	46ba <__static_initialization_and_destruction_0(int, int)+0x15e>
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4574:	4293      	cmp	r3, r2
    4576:	f040 80a0 	bne.w	46ba <__static_initialization_and_destruction_0(int, int)+0x15e>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    457a:	4b52      	ldr	r3, [pc, #328]	; (46c4 <__static_initialization_and_destruction_0(int, int)+0x168>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	f003 0301 	and.w	r3, r3, #1
    4582:	2b00      	cmp	r3, #0
    4584:	d106      	bne.n	4594 <__static_initialization_and_destruction_0(int, int)+0x38>
    4586:	4b4f      	ldr	r3, [pc, #316]	; (46c4 <__static_initialization_and_destruction_0(int, int)+0x168>)
    4588:	2201      	movs	r2, #1
    458a:	601a      	str	r2, [r3, #0]
    458c:	4b4e      	ldr	r3, [pc, #312]	; (46c8 <__static_initialization_and_destruction_0(int, int)+0x16c>)
    458e:	4618      	mov	r0, r3
    4590:	f7fc f8e2 	bl	758 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    4594:	4b4d      	ldr	r3, [pc, #308]	; (46cc <__static_initialization_and_destruction_0(int, int)+0x170>)
    4596:	681b      	ldr	r3, [r3, #0]
    4598:	f003 0301 	and.w	r3, r3, #1
    459c:	2b00      	cmp	r3, #0
    459e:	d105      	bne.n	45ac <__static_initialization_and_destruction_0(int, int)+0x50>
    45a0:	4b4a      	ldr	r3, [pc, #296]	; (46cc <__static_initialization_and_destruction_0(int, int)+0x170>)
    45a2:	2201      	movs	r2, #1
    45a4:	601a      	str	r2, [r3, #0]
    45a6:	4a4a      	ldr	r2, [pc, #296]	; (46d0 <__static_initialization_and_destruction_0(int, int)+0x174>)
    45a8:	4b4a      	ldr	r3, [pc, #296]	; (46d4 <__static_initialization_and_destruction_0(int, int)+0x178>)
    45aa:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * function_map =
    45ac:	4b4a      	ldr	r3, [pc, #296]	; (46d8 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    45ae:	681b      	ldr	r3, [r3, #0]
    45b0:	f003 0301 	and.w	r3, r3, #1
    45b4:	2b00      	cmp	r3, #0
    45b6:	d106      	bne.n	45c6 <__static_initialization_and_destruction_0(int, int)+0x6a>
    45b8:	4b47      	ldr	r3, [pc, #284]	; (46d8 <__static_initialization_and_destruction_0(int, int)+0x17c>)
    45ba:	2201      	movs	r2, #1
    45bc:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    45be:	4b47      	ldr	r3, [pc, #284]	; (46dc <__static_initialization_and_destruction_0(int, int)+0x180>)
    45c0:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    45c2:	4b47      	ldr	r3, [pc, #284]	; (46e0 <__static_initialization_and_destruction_0(int, int)+0x184>)
    45c4:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    45c6:	4b47      	ldr	r3, [pc, #284]	; (46e4 <__static_initialization_and_destruction_0(int, int)+0x188>)
    45c8:	681b      	ldr	r3, [r3, #0]
    45ca:	f003 0301 	and.w	r3, r3, #1
    45ce:	2b00      	cmp	r3, #0
    45d0:	d106      	bne.n	45e0 <__static_initialization_and_destruction_0(int, int)+0x84>
    45d2:	4b44      	ldr	r3, [pc, #272]	; (46e4 <__static_initialization_and_destruction_0(int, int)+0x188>)
    45d4:	2201      	movs	r2, #1
    45d6:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    45d8:	4b40      	ldr	r3, [pc, #256]	; (46dc <__static_initialization_and_destruction_0(int, int)+0x180>)
    45da:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    45dc:	4a42      	ldr	r2, [pc, #264]	; (46e8 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    45de:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    45e0:	4b42      	ldr	r3, [pc, #264]	; (46ec <__static_initialization_and_destruction_0(int, int)+0x190>)
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	f003 0301 	and.w	r3, r3, #1
    45e8:	2b00      	cmp	r3, #0
    45ea:	d106      	bne.n	45fa <__static_initialization_and_destruction_0(int, int)+0x9e>
    45ec:	4b3f      	ldr	r3, [pc, #252]	; (46ec <__static_initialization_and_destruction_0(int, int)+0x190>)
    45ee:	2201      	movs	r2, #1
    45f0:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    45f2:	4b3a      	ldr	r3, [pc, #232]	; (46dc <__static_initialization_and_destruction_0(int, int)+0x180>)
    45f4:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    45f6:	4a3e      	ldr	r2, [pc, #248]	; (46f0 <__static_initialization_and_destruction_0(int, int)+0x194>)
    45f8:	6013      	str	r3, [r2, #0]
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    45fa:	4b3e      	ldr	r3, [pc, #248]	; (46f4 <__static_initialization_and_destruction_0(int, int)+0x198>)
    45fc:	681b      	ldr	r3, [r3, #0]
    45fe:	f003 0301 	and.w	r3, r3, #1
    4602:	2b00      	cmp	r3, #0
    4604:	d105      	bne.n	4612 <__static_initialization_and_destruction_0(int, int)+0xb6>
    4606:	4b3b      	ldr	r3, [pc, #236]	; (46f4 <__static_initialization_and_destruction_0(int, int)+0x198>)
    4608:	2201      	movs	r2, #1
    460a:	601a      	str	r2, [r3, #0]
    460c:	4a30      	ldr	r2, [pc, #192]	; (46d0 <__static_initialization_and_destruction_0(int, int)+0x174>)
    460e:	4b3a      	ldr	r3, [pc, #232]	; (46f8 <__static_initialization_and_destruction_0(int, int)+0x19c>)
    4610:	601a      	str	r2, [r3, #0]
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    4612:	4b3a      	ldr	r3, [pc, #232]	; (46fc <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	f003 0301 	and.w	r3, r3, #1
    461a:	2b00      	cmp	r3, #0
    461c:	d105      	bne.n	462a <__static_initialization_and_destruction_0(int, int)+0xce>
    461e:	4b37      	ldr	r3, [pc, #220]	; (46fc <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    4620:	2201      	movs	r2, #1
    4622:	601a      	str	r2, [r3, #0]
    4624:	4a2d      	ldr	r2, [pc, #180]	; (46dc <__static_initialization_and_destruction_0(int, int)+0x180>)
    4626:	4b36      	ldr	r3, [pc, #216]	; (4700 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    4628:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    462a:	4b36      	ldr	r3, [pc, #216]	; (4704 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	f003 0301 	and.w	r3, r3, #1
    4632:	2b00      	cmp	r3, #0
    4634:	d105      	bne.n	4642 <__static_initialization_and_destruction_0(int, int)+0xe6>
    4636:	4b33      	ldr	r3, [pc, #204]	; (4704 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    4638:	2201      	movs	r2, #1
    463a:	601a      	str	r2, [r3, #0]
    };
    463c:	4a32      	ldr	r2, [pc, #200]	; (4708 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    463e:	4b33      	ldr	r3, [pc, #204]	; (470c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    4640:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    4642:	4b33      	ldr	r3, [pc, #204]	; (4710 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	f003 0301 	and.w	r3, r3, #1
    464a:	2b00      	cmp	r3, #0
    464c:	d105      	bne.n	465a <__static_initialization_and_destruction_0(int, int)+0xfe>
    464e:	4b30      	ldr	r3, [pc, #192]	; (4710 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    4650:	2201      	movs	r2, #1
    4652:	601a      	str	r2, [r3, #0]
    };
    4654:	4a2f      	ldr	r2, [pc, #188]	; (4714 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    4656:	4b30      	ldr	r3, [pc, #192]	; (4718 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    4658:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    465a:	4b30      	ldr	r3, [pc, #192]	; (471c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    465c:	681b      	ldr	r3, [r3, #0]
    465e:	f003 0301 	and.w	r3, r3, #1
    4662:	2b00      	cmp	r3, #0
    4664:	d105      	bne.n	4672 <__static_initialization_and_destruction_0(int, int)+0x116>
    4666:	4b2d      	ldr	r3, [pc, #180]	; (471c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    4668:	2201      	movs	r2, #1
    466a:	601a      	str	r2, [r3, #0]
    };
    466c:	4a2c      	ldr	r2, [pc, #176]	; (4720 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    466e:	4b2d      	ldr	r3, [pc, #180]	; (4724 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    4670:	601a      	str	r2, [r3, #0]
  inline static const Pin kUart3Tx = Pin(4, 28);
  inline static const Pin kUart3Rx = Pin(4, 29);

 public:
  /// Definition for uart port 0 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart0 = {
    4672:	4b2d      	ldr	r3, [pc, #180]	; (4728 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	f003 0301 	and.w	r3, r3, #1
    467a:	2b00      	cmp	r3, #0
    467c:	d105      	bne.n	468a <__static_initialization_and_destruction_0(int, int)+0x12e>
    467e:	4b2a      	ldr	r3, [pc, #168]	; (4728 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    4680:	2201      	movs	r2, #1
    4682:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart0,
    .tx             = kUart0Tx,
    .rx             = kUart0Rx,
    .tx_function_id = 0b01,
    .rx_function_id = 0b01,
  };
    4684:	4a29      	ldr	r2, [pc, #164]	; (472c <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    4686:	4b2a      	ldr	r3, [pc, #168]	; (4730 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    4688:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 1 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart2 = {
    468a:	4b2a      	ldr	r3, [pc, #168]	; (4734 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    468c:	681b      	ldr	r3, [r3, #0]
    468e:	f003 0301 	and.w	r3, r3, #1
    4692:	2b00      	cmp	r3, #0
    4694:	d105      	bne.n	46a2 <__static_initialization_and_destruction_0(int, int)+0x146>
    4696:	4b27      	ldr	r3, [pc, #156]	; (4734 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    4698:	2201      	movs	r2, #1
    469a:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart2,
    .tx             = kUart2Tx,
    .rx             = kUart2Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    469c:	4a1a      	ldr	r2, [pc, #104]	; (4708 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    469e:	4b26      	ldr	r3, [pc, #152]	; (4738 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    46a0:	601a      	str	r2, [r3, #0]
  /// Definition for uart port 2 for lpc40xx.
  inline static const lpc40xx::Uart::Port_t kUart3 = {
    46a2:	4b26      	ldr	r3, [pc, #152]	; (473c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	f003 0301 	and.w	r3, r3, #1
    46aa:	2b00      	cmp	r3, #0
    46ac:	d105      	bne.n	46ba <__static_initialization_and_destruction_0(int, int)+0x15e>
    46ae:	4b23      	ldr	r3, [pc, #140]	; (473c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    46b0:	2201      	movs	r2, #1
    46b2:	601a      	str	r2, [r3, #0]
    .power_on_id    = lpc40xx::SystemController::Peripherals::kUart3,
    .tx             = kUart3Tx,
    .rx             = kUart3Rx,
    .tx_function_id = 0b010,
    .rx_function_id = 0b010,
  };
    46b4:	4a17      	ldr	r2, [pc, #92]	; (4714 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    46b6:	4b22      	ldr	r3, [pc, #136]	; (4740 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    46b8:	601a      	str	r2, [r3, #0]
    46ba:	bf00      	nop
    46bc:	3708      	adds	r7, #8
    46be:	46bd      	mov	sp, r7
    46c0:	bd80      	pop	{r7, pc}
    46c2:	bf00      	nop
    46c4:	2007c250 	.word	0x2007c250
    46c8:	2007c150 	.word	0x2007c150
    46cc:	2007c2f8 	.word	0x2007c2f8
    46d0:	400fc000 	.word	0x400fc000
    46d4:	2007c2e0 	.word	0x2007c2e0
    46d8:	2007c2fc 	.word	0x2007c2fc
    46dc:	4002c000 	.word	0x4002c000
    46e0:	2007c2e4 	.word	0x2007c2e4
    46e4:	2007c300 	.word	0x2007c300
    46e8:	2007c2e8 	.word	0x2007c2e8
    46ec:	2007c304 	.word	0x2007c304
    46f0:	2007c2ec 	.word	0x2007c2ec
    46f4:	2007c308 	.word	0x2007c308
    46f8:	2007c2f0 	.word	0x2007c2f0
    46fc:	2007c140 	.word	0x2007c140
    4700:	2007c13c 	.word	0x2007c13c
    4704:	2007c30c 	.word	0x2007c30c
    4708:	40098000 	.word	0x40098000
    470c:	2007c024 	.word	0x2007c024
    4710:	2007c310 	.word	0x2007c310
    4714:	4009c000 	.word	0x4009c000
    4718:	2007c038 	.word	0x2007c038
    471c:	2007c314 	.word	0x2007c314
    4720:	400a4000 	.word	0x400a4000
    4724:	2007c04c 	.word	0x2007c04c
    4728:	2007c318 	.word	0x2007c318
    472c:	4000c000 	.word	0x4000c000
    4730:	2007c060 	.word	0x2007c060
    4734:	2007c31c 	.word	0x2007c31c
    4738:	2007c074 	.word	0x2007c074
    473c:	2007c320 	.word	0x2007c320
    4740:	2007c088 	.word	0x2007c088

00004744 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    4744:	b580      	push	{r7, lr}
    4746:	af00      	add	r7, sp, #0
    4748:	f64f 71ff 	movw	r1, #65535	; 0xffff
    474c:	2001      	movs	r0, #1
    474e:	f7ff ff05 	bl	455c <__static_initialization_and_destruction_0(int, int)>
    4752:	bd80      	pop	{r7, pc}
    4754:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    4758:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    475c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004760 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4760:	4b07      	ldr	r3, [pc, #28]	; (4780 <pxCurrentTCBConst2>)
    4762:	6819      	ldr	r1, [r3, #0]
    4764:	6808      	ldr	r0, [r1, #0]
    4766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    476a:	f380 8809 	msr	PSP, r0
    476e:	f3bf 8f6f 	isb	sy
    4772:	f04f 0000 	mov.w	r0, #0
    4776:	f380 8811 	msr	BASEPRI, r0
    477a:	f04e 0e0d 	orr.w	lr, lr, #13
    477e:	4770      	bx	lr

00004780 <pxCurrentTCBConst2>:
    4780:	2007c254 	.word	0x2007c254
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    4784:	bf00      	nop
    4786:	bf00      	nop
    4788:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    478c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004790 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4790:	f3ef 8009 	mrs	r0, PSP
    4794:	f3bf 8f6f 	isb	sy
    4798:	4b0d      	ldr	r3, [pc, #52]	; (47d0 <pxCurrentTCBConst>)
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    47a0:	6010      	str	r0, [r2, #0]
    47a2:	e92d 4008 	stmdb	sp!, {r3, lr}
    47a6:	f04f 0028 	mov.w	r0, #40	; 0x28
    47aa:	f380 8811 	msr	BASEPRI, r0
    47ae:	f7fc fd07 	bl	11c0 <vTaskSwitchContext>
    47b2:	f04f 0000 	mov.w	r0, #0
    47b6:	f380 8811 	msr	BASEPRI, r0
    47ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47be:	6819      	ldr	r1, [r3, #0]
    47c0:	6808      	ldr	r0, [r1, #0]
    47c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    47c6:	f380 8809 	msr	PSP, r0
    47ca:	f3bf 8f6f 	isb	sy
    47ce:	4770      	bx	lr

000047d0 <pxCurrentTCBConst>:
    47d0:	2007c254 	.word	0x2007c254
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    47d4:	bf00      	nop
    47d6:	bf00      	nop

000047d8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    47d8:	b480      	push	{r7}
    47da:	b083      	sub	sp, #12
    47dc:	af00      	add	r7, sp, #0
    47de:	6078      	str	r0, [r7, #4]
    47e0:	6039      	str	r1, [r7, #0]
  return 1;
    47e2:	2301      	movs	r3, #1
}
    47e4:	4618      	mov	r0, r3
    47e6:	370c      	adds	r7, #12
    47e8:	46bd      	mov	sp, r7
    47ea:	bc80      	pop	{r7}
    47ec:	4770      	bx	lr

000047ee <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    47ee:	b480      	push	{r7}
    47f0:	b083      	sub	sp, #12
    47f2:	af00      	add	r7, sp, #0
    47f4:	6078      	str	r0, [r7, #4]
    47f6:	6039      	str	r1, [r7, #0]
  return 0;
    47f8:	2300      	movs	r3, #0
}
    47fa:	4618      	mov	r0, r3
    47fc:	370c      	adds	r7, #12
    47fe:	46bd      	mov	sp, r7
    4800:	bc80      	pop	{r7}
    4802:	4770      	bx	lr

00004804 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4804:	b480      	push	{r7}
    4806:	b083      	sub	sp, #12
    4808:	af00      	add	r7, sp, #0
    480a:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    480c:	4a03      	ldr	r2, [pc, #12]	; (481c <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x18>)
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	6013      	str	r3, [r2, #0]
}
    4812:	bf00      	nop
    4814:	370c      	adds	r7, #12
    4816:	46bd      	mov	sp, r7
    4818:	bc80      	pop	{r7}
    481a:	4770      	bx	lr
    481c:	2007c008 	.word	0x2007c008

00004820 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    4828:	4a03      	ldr	r2, [pc, #12]	; (4838 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x18>)
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	6013      	str	r3, [r2, #0]
}
    482e:	bf00      	nop
    4830:	370c      	adds	r7, #12
    4832:	46bd      	mov	sp, r7
    4834:	bc80      	pop	{r7}
    4836:	4770      	bx	lr
    4838:	2007c00c 	.word	0x2007c00c

0000483c <__cxa_pure_virtual>:
    483c:	b508      	push	{r3, lr}
    483e:	f000 f80d 	bl	485c <std::terminate()>

00004842 <__cxxabiv1::__terminate(void (*)())>:
    4842:	b508      	push	{r3, lr}
    4844:	4780      	blx	r0
    4846:	f001 fc8d 	bl	6164 <abort>
    484a:	Address 0x000000000000484a is out of bounds.


0000484c <std::get_terminate()>:
    484c:	4b02      	ldr	r3, [pc, #8]	; (4858 <std::get_terminate()+0xc>)
    484e:	6818      	ldr	r0, [r3, #0]
    4850:	f3bf 8f5b 	dmb	ish
    4854:	4770      	bx	lr
    4856:	bf00      	nop
    4858:	2007c0b8 	.word	0x2007c0b8

0000485c <std::terminate()>:
    485c:	b508      	push	{r3, lr}
    485e:	f7ff fff5 	bl	484c <std::get_terminate()>
    4862:	f7ff ffee 	bl	4842 <__cxxabiv1::__terminate(void (*)())>
    4866:	Address 0x0000000000004866 is out of bounds.


00004868 <__aeabi_d2f>:
    4868:	ea4f 0241 	mov.w	r2, r1, lsl #1
    486c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4870:	bf24      	itt	cs
    4872:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4876:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    487a:	d90d      	bls.n	4898 <__aeabi_d2f+0x30>
    487c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4880:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4884:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4888:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    488c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4890:	bf08      	it	eq
    4892:	f020 0001 	biceq.w	r0, r0, #1
    4896:	4770      	bx	lr
    4898:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    489c:	d121      	bne.n	48e2 <__aeabi_d2f+0x7a>
    489e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    48a2:	bfbc      	itt	lt
    48a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    48a8:	4770      	bxlt	lr
    48aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    48ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
    48b2:	f1c2 0218 	rsb	r2, r2, #24
    48b6:	f1c2 0c20 	rsb	ip, r2, #32
    48ba:	fa10 f30c 	lsls.w	r3, r0, ip
    48be:	fa20 f002 	lsr.w	r0, r0, r2
    48c2:	bf18      	it	ne
    48c4:	f040 0001 	orrne.w	r0, r0, #1
    48c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    48cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    48d0:	fa03 fc0c 	lsl.w	ip, r3, ip
    48d4:	ea40 000c 	orr.w	r0, r0, ip
    48d8:	fa23 f302 	lsr.w	r3, r3, r2
    48dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    48e0:	e7cc      	b.n	487c <__aeabi_d2f+0x14>
    48e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    48e6:	d107      	bne.n	48f8 <__aeabi_d2f+0x90>
    48e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    48ec:	bf1e      	ittt	ne
    48ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    48f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    48f6:	4770      	bxne	lr
    48f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    48fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4900:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4904:	4770      	bx	lr
    4906:	bf00      	nop

00004908 <__aeabi_frsub>:
    4908:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    490c:	e002      	b.n	4914 <__addsf3>
    490e:	bf00      	nop

00004910 <__aeabi_fsub>:
    4910:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004914 <__addsf3>:
    4914:	0042      	lsls	r2, r0, #1
    4916:	bf1f      	itttt	ne
    4918:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    491c:	ea92 0f03 	teqne	r2, r3
    4920:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4924:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4928:	d06a      	beq.n	4a00 <__addsf3+0xec>
    492a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    492e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4932:	bfc1      	itttt	gt
    4934:	18d2      	addgt	r2, r2, r3
    4936:	4041      	eorgt	r1, r0
    4938:	4048      	eorgt	r0, r1
    493a:	4041      	eorgt	r1, r0
    493c:	bfb8      	it	lt
    493e:	425b      	neglt	r3, r3
    4940:	2b19      	cmp	r3, #25
    4942:	bf88      	it	hi
    4944:	4770      	bxhi	lr
    4946:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    494a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    494e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4952:	bf18      	it	ne
    4954:	4240      	negne	r0, r0
    4956:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    495a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    495e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4962:	bf18      	it	ne
    4964:	4249      	negne	r1, r1
    4966:	ea92 0f03 	teq	r2, r3
    496a:	d03f      	beq.n	49ec <__addsf3+0xd8>
    496c:	f1a2 0201 	sub.w	r2, r2, #1
    4970:	fa41 fc03 	asr.w	ip, r1, r3
    4974:	eb10 000c 	adds.w	r0, r0, ip
    4978:	f1c3 0320 	rsb	r3, r3, #32
    497c:	fa01 f103 	lsl.w	r1, r1, r3
    4980:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4984:	d502      	bpl.n	498c <__addsf3+0x78>
    4986:	4249      	negs	r1, r1
    4988:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    498c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4990:	d313      	bcc.n	49ba <__addsf3+0xa6>
    4992:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4996:	d306      	bcc.n	49a6 <__addsf3+0x92>
    4998:	0840      	lsrs	r0, r0, #1
    499a:	ea4f 0131 	mov.w	r1, r1, rrx
    499e:	f102 0201 	add.w	r2, r2, #1
    49a2:	2afe      	cmp	r2, #254	; 0xfe
    49a4:	d251      	bcs.n	4a4a <__addsf3+0x136>
    49a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    49aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    49ae:	bf08      	it	eq
    49b0:	f020 0001 	biceq.w	r0, r0, #1
    49b4:	ea40 0003 	orr.w	r0, r0, r3
    49b8:	4770      	bx	lr
    49ba:	0049      	lsls	r1, r1, #1
    49bc:	eb40 0000 	adc.w	r0, r0, r0
    49c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    49c4:	f1a2 0201 	sub.w	r2, r2, #1
    49c8:	d1ed      	bne.n	49a6 <__addsf3+0x92>
    49ca:	fab0 fc80 	clz	ip, r0
    49ce:	f1ac 0c08 	sub.w	ip, ip, #8
    49d2:	ebb2 020c 	subs.w	r2, r2, ip
    49d6:	fa00 f00c 	lsl.w	r0, r0, ip
    49da:	bfaa      	itet	ge
    49dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    49e0:	4252      	neglt	r2, r2
    49e2:	4318      	orrge	r0, r3
    49e4:	bfbc      	itt	lt
    49e6:	40d0      	lsrlt	r0, r2
    49e8:	4318      	orrlt	r0, r3
    49ea:	4770      	bx	lr
    49ec:	f092 0f00 	teq	r2, #0
    49f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    49f4:	bf06      	itte	eq
    49f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    49fa:	3201      	addeq	r2, #1
    49fc:	3b01      	subne	r3, #1
    49fe:	e7b5      	b.n	496c <__addsf3+0x58>
    4a00:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4a04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4a08:	bf18      	it	ne
    4a0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4a0e:	d021      	beq.n	4a54 <__addsf3+0x140>
    4a10:	ea92 0f03 	teq	r2, r3
    4a14:	d004      	beq.n	4a20 <__addsf3+0x10c>
    4a16:	f092 0f00 	teq	r2, #0
    4a1a:	bf08      	it	eq
    4a1c:	4608      	moveq	r0, r1
    4a1e:	4770      	bx	lr
    4a20:	ea90 0f01 	teq	r0, r1
    4a24:	bf1c      	itt	ne
    4a26:	2000      	movne	r0, #0
    4a28:	4770      	bxne	lr
    4a2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4a2e:	d104      	bne.n	4a3a <__addsf3+0x126>
    4a30:	0040      	lsls	r0, r0, #1
    4a32:	bf28      	it	cs
    4a34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4a38:	4770      	bx	lr
    4a3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4a3e:	bf3c      	itt	cc
    4a40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4a44:	4770      	bxcc	lr
    4a46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4a4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4a52:	4770      	bx	lr
    4a54:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4a58:	bf16      	itet	ne
    4a5a:	4608      	movne	r0, r1
    4a5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4a60:	4601      	movne	r1, r0
    4a62:	0242      	lsls	r2, r0, #9
    4a64:	bf06      	itte	eq
    4a66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4a6a:	ea90 0f01 	teqeq	r0, r1
    4a6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4a72:	4770      	bx	lr

00004a74 <__aeabi_ui2f>:
    4a74:	f04f 0300 	mov.w	r3, #0
    4a78:	e004      	b.n	4a84 <__aeabi_i2f+0x8>
    4a7a:	bf00      	nop

00004a7c <__aeabi_i2f>:
    4a7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4a80:	bf48      	it	mi
    4a82:	4240      	negmi	r0, r0
    4a84:	ea5f 0c00 	movs.w	ip, r0
    4a88:	bf08      	it	eq
    4a8a:	4770      	bxeq	lr
    4a8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4a90:	4601      	mov	r1, r0
    4a92:	f04f 0000 	mov.w	r0, #0
    4a96:	e01c      	b.n	4ad2 <__aeabi_l2f+0x2a>

00004a98 <__aeabi_ul2f>:
    4a98:	ea50 0201 	orrs.w	r2, r0, r1
    4a9c:	bf08      	it	eq
    4a9e:	4770      	bxeq	lr
    4aa0:	f04f 0300 	mov.w	r3, #0
    4aa4:	e00a      	b.n	4abc <__aeabi_l2f+0x14>
    4aa6:	bf00      	nop

00004aa8 <__aeabi_l2f>:
    4aa8:	ea50 0201 	orrs.w	r2, r0, r1
    4aac:	bf08      	it	eq
    4aae:	4770      	bxeq	lr
    4ab0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4ab4:	d502      	bpl.n	4abc <__aeabi_l2f+0x14>
    4ab6:	4240      	negs	r0, r0
    4ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4abc:	ea5f 0c01 	movs.w	ip, r1
    4ac0:	bf02      	ittt	eq
    4ac2:	4684      	moveq	ip, r0
    4ac4:	4601      	moveq	r1, r0
    4ac6:	2000      	moveq	r0, #0
    4ac8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4acc:	bf08      	it	eq
    4ace:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4ad2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4ad6:	fabc f28c 	clz	r2, ip
    4ada:	3a08      	subs	r2, #8
    4adc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4ae0:	db10      	blt.n	4b04 <__aeabi_l2f+0x5c>
    4ae2:	fa01 fc02 	lsl.w	ip, r1, r2
    4ae6:	4463      	add	r3, ip
    4ae8:	fa00 fc02 	lsl.w	ip, r0, r2
    4aec:	f1c2 0220 	rsb	r2, r2, #32
    4af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4af4:	fa20 f202 	lsr.w	r2, r0, r2
    4af8:	eb43 0002 	adc.w	r0, r3, r2
    4afc:	bf08      	it	eq
    4afe:	f020 0001 	biceq.w	r0, r0, #1
    4b02:	4770      	bx	lr
    4b04:	f102 0220 	add.w	r2, r2, #32
    4b08:	fa01 fc02 	lsl.w	ip, r1, r2
    4b0c:	f1c2 0220 	rsb	r2, r2, #32
    4b10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4b14:	fa21 f202 	lsr.w	r2, r1, r2
    4b18:	eb43 0002 	adc.w	r0, r3, r2
    4b1c:	bf08      	it	eq
    4b1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4b22:	4770      	bx	lr

00004b24 <__aeabi_fmul>:
    4b24:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4b28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4b2c:	bf1e      	ittt	ne
    4b2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4b32:	ea92 0f0c 	teqne	r2, ip
    4b36:	ea93 0f0c 	teqne	r3, ip
    4b3a:	d06f      	beq.n	4c1c <__aeabi_fmul+0xf8>
    4b3c:	441a      	add	r2, r3
    4b3e:	ea80 0c01 	eor.w	ip, r0, r1
    4b42:	0240      	lsls	r0, r0, #9
    4b44:	bf18      	it	ne
    4b46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    4b4a:	d01e      	beq.n	4b8a <__aeabi_fmul+0x66>
    4b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    4b50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    4b54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    4b58:	fba0 3101 	umull	r3, r1, r0, r1
    4b5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4b60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    4b64:	bf3e      	ittt	cc
    4b66:	0049      	lslcc	r1, r1, #1
    4b68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    4b6c:	005b      	lslcc	r3, r3, #1
    4b6e:	ea40 0001 	orr.w	r0, r0, r1
    4b72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    4b76:	2afd      	cmp	r2, #253	; 0xfd
    4b78:	d81d      	bhi.n	4bb6 <__aeabi_fmul+0x92>
    4b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4b82:	bf08      	it	eq
    4b84:	f020 0001 	biceq.w	r0, r0, #1
    4b88:	4770      	bx	lr
    4b8a:	f090 0f00 	teq	r0, #0
    4b8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4b92:	bf08      	it	eq
    4b94:	0249      	lsleq	r1, r1, #9
    4b96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4b9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    4b9e:	3a7f      	subs	r2, #127	; 0x7f
    4ba0:	bfc2      	ittt	gt
    4ba2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4ba6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4baa:	4770      	bxgt	lr
    4bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4bb0:	f04f 0300 	mov.w	r3, #0
    4bb4:	3a01      	subs	r2, #1
    4bb6:	dc5d      	bgt.n	4c74 <__aeabi_fmul+0x150>
    4bb8:	f112 0f19 	cmn.w	r2, #25
    4bbc:	bfdc      	itt	le
    4bbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    4bc2:	4770      	bxle	lr
    4bc4:	f1c2 0200 	rsb	r2, r2, #0
    4bc8:	0041      	lsls	r1, r0, #1
    4bca:	fa21 f102 	lsr.w	r1, r1, r2
    4bce:	f1c2 0220 	rsb	r2, r2, #32
    4bd2:	fa00 fc02 	lsl.w	ip, r0, r2
    4bd6:	ea5f 0031 	movs.w	r0, r1, rrx
    4bda:	f140 0000 	adc.w	r0, r0, #0
    4bde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    4be2:	bf08      	it	eq
    4be4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4be8:	4770      	bx	lr
    4bea:	f092 0f00 	teq	r2, #0
    4bee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4bf2:	bf02      	ittt	eq
    4bf4:	0040      	lsleq	r0, r0, #1
    4bf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4bfa:	3a01      	subeq	r2, #1
    4bfc:	d0f9      	beq.n	4bf2 <__aeabi_fmul+0xce>
    4bfe:	ea40 000c 	orr.w	r0, r0, ip
    4c02:	f093 0f00 	teq	r3, #0
    4c06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4c0a:	bf02      	ittt	eq
    4c0c:	0049      	lsleq	r1, r1, #1
    4c0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4c12:	3b01      	subeq	r3, #1
    4c14:	d0f9      	beq.n	4c0a <__aeabi_fmul+0xe6>
    4c16:	ea41 010c 	orr.w	r1, r1, ip
    4c1a:	e78f      	b.n	4b3c <__aeabi_fmul+0x18>
    4c1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4c20:	ea92 0f0c 	teq	r2, ip
    4c24:	bf18      	it	ne
    4c26:	ea93 0f0c 	teqne	r3, ip
    4c2a:	d00a      	beq.n	4c42 <__aeabi_fmul+0x11e>
    4c2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4c30:	bf18      	it	ne
    4c32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4c36:	d1d8      	bne.n	4bea <__aeabi_fmul+0xc6>
    4c38:	ea80 0001 	eor.w	r0, r0, r1
    4c3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4c40:	4770      	bx	lr
    4c42:	f090 0f00 	teq	r0, #0
    4c46:	bf17      	itett	ne
    4c48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    4c4c:	4608      	moveq	r0, r1
    4c4e:	f091 0f00 	teqne	r1, #0
    4c52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    4c56:	d014      	beq.n	4c82 <__aeabi_fmul+0x15e>
    4c58:	ea92 0f0c 	teq	r2, ip
    4c5c:	d101      	bne.n	4c62 <__aeabi_fmul+0x13e>
    4c5e:	0242      	lsls	r2, r0, #9
    4c60:	d10f      	bne.n	4c82 <__aeabi_fmul+0x15e>
    4c62:	ea93 0f0c 	teq	r3, ip
    4c66:	d103      	bne.n	4c70 <__aeabi_fmul+0x14c>
    4c68:	024b      	lsls	r3, r1, #9
    4c6a:	bf18      	it	ne
    4c6c:	4608      	movne	r0, r1
    4c6e:	d108      	bne.n	4c82 <__aeabi_fmul+0x15e>
    4c70:	ea80 0001 	eor.w	r0, r0, r1
    4c74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4c78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c80:	4770      	bx	lr
    4c82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4c86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    4c8a:	4770      	bx	lr

00004c8c <__aeabi_fdiv>:
    4c8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4c90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4c94:	bf1e      	ittt	ne
    4c96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4c9a:	ea92 0f0c 	teqne	r2, ip
    4c9e:	ea93 0f0c 	teqne	r3, ip
    4ca2:	d069      	beq.n	4d78 <__aeabi_fdiv+0xec>
    4ca4:	eba2 0203 	sub.w	r2, r2, r3
    4ca8:	ea80 0c01 	eor.w	ip, r0, r1
    4cac:	0249      	lsls	r1, r1, #9
    4cae:	ea4f 2040 	mov.w	r0, r0, lsl #9
    4cb2:	d037      	beq.n	4d24 <__aeabi_fdiv+0x98>
    4cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4cb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    4cbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    4cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4cc4:	428b      	cmp	r3, r1
    4cc6:	bf38      	it	cc
    4cc8:	005b      	lslcc	r3, r3, #1
    4cca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    4cce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    4cd2:	428b      	cmp	r3, r1
    4cd4:	bf24      	itt	cs
    4cd6:	1a5b      	subcs	r3, r3, r1
    4cd8:	ea40 000c 	orrcs.w	r0, r0, ip
    4cdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    4ce0:	bf24      	itt	cs
    4ce2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    4ce6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4cea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    4cee:	bf24      	itt	cs
    4cf0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    4cf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4cf8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4cfc:	bf24      	itt	cs
    4cfe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    4d02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4d06:	011b      	lsls	r3, r3, #4
    4d08:	bf18      	it	ne
    4d0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    4d0e:	d1e0      	bne.n	4cd2 <__aeabi_fdiv+0x46>
    4d10:	2afd      	cmp	r2, #253	; 0xfd
    4d12:	f63f af50 	bhi.w	4bb6 <__aeabi_fmul+0x92>
    4d16:	428b      	cmp	r3, r1
    4d18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4d1c:	bf08      	it	eq
    4d1e:	f020 0001 	biceq.w	r0, r0, #1
    4d22:	4770      	bx	lr
    4d24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4d28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4d2c:	327f      	adds	r2, #127	; 0x7f
    4d2e:	bfc2      	ittt	gt
    4d30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4d34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4d38:	4770      	bxgt	lr
    4d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4d3e:	f04f 0300 	mov.w	r3, #0
    4d42:	3a01      	subs	r2, #1
    4d44:	e737      	b.n	4bb6 <__aeabi_fmul+0x92>
    4d46:	f092 0f00 	teq	r2, #0
    4d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4d4e:	bf02      	ittt	eq
    4d50:	0040      	lsleq	r0, r0, #1
    4d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4d56:	3a01      	subeq	r2, #1
    4d58:	d0f9      	beq.n	4d4e <__aeabi_fdiv+0xc2>
    4d5a:	ea40 000c 	orr.w	r0, r0, ip
    4d5e:	f093 0f00 	teq	r3, #0
    4d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4d66:	bf02      	ittt	eq
    4d68:	0049      	lsleq	r1, r1, #1
    4d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4d6e:	3b01      	subeq	r3, #1
    4d70:	d0f9      	beq.n	4d66 <__aeabi_fdiv+0xda>
    4d72:	ea41 010c 	orr.w	r1, r1, ip
    4d76:	e795      	b.n	4ca4 <__aeabi_fdiv+0x18>
    4d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4d7c:	ea92 0f0c 	teq	r2, ip
    4d80:	d108      	bne.n	4d94 <__aeabi_fdiv+0x108>
    4d82:	0242      	lsls	r2, r0, #9
    4d84:	f47f af7d 	bne.w	4c82 <__aeabi_fmul+0x15e>
    4d88:	ea93 0f0c 	teq	r3, ip
    4d8c:	f47f af70 	bne.w	4c70 <__aeabi_fmul+0x14c>
    4d90:	4608      	mov	r0, r1
    4d92:	e776      	b.n	4c82 <__aeabi_fmul+0x15e>
    4d94:	ea93 0f0c 	teq	r3, ip
    4d98:	d104      	bne.n	4da4 <__aeabi_fdiv+0x118>
    4d9a:	024b      	lsls	r3, r1, #9
    4d9c:	f43f af4c 	beq.w	4c38 <__aeabi_fmul+0x114>
    4da0:	4608      	mov	r0, r1
    4da2:	e76e      	b.n	4c82 <__aeabi_fmul+0x15e>
    4da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4da8:	bf18      	it	ne
    4daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    4dae:	d1ca      	bne.n	4d46 <__aeabi_fdiv+0xba>
    4db0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    4db4:	f47f af5c 	bne.w	4c70 <__aeabi_fmul+0x14c>
    4db8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    4dbc:	f47f af3c 	bne.w	4c38 <__aeabi_fmul+0x114>
    4dc0:	e75f      	b.n	4c82 <__aeabi_fmul+0x15e>
    4dc2:	bf00      	nop

00004dc4 <__gesf2>:
    4dc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4dc8:	e006      	b.n	4dd8 <__cmpsf2+0x4>
    4dca:	bf00      	nop

00004dcc <__lesf2>:
    4dcc:	f04f 0c01 	mov.w	ip, #1
    4dd0:	e002      	b.n	4dd8 <__cmpsf2+0x4>
    4dd2:	bf00      	nop

00004dd4 <__cmpsf2>:
    4dd4:	f04f 0c01 	mov.w	ip, #1
    4dd8:	f84d cd04 	str.w	ip, [sp, #-4]!
    4ddc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4de8:	bf18      	it	ne
    4dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4dee:	d011      	beq.n	4e14 <__cmpsf2+0x40>
    4df0:	b001      	add	sp, #4
    4df2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    4df6:	bf18      	it	ne
    4df8:	ea90 0f01 	teqne	r0, r1
    4dfc:	bf58      	it	pl
    4dfe:	ebb2 0003 	subspl.w	r0, r2, r3
    4e02:	bf88      	it	hi
    4e04:	17c8      	asrhi	r0, r1, #31
    4e06:	bf38      	it	cc
    4e08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    4e0c:	bf18      	it	ne
    4e0e:	f040 0001 	orrne.w	r0, r0, #1
    4e12:	4770      	bx	lr
    4e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4e18:	d102      	bne.n	4e20 <__cmpsf2+0x4c>
    4e1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    4e1e:	d105      	bne.n	4e2c <__cmpsf2+0x58>
    4e20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    4e24:	d1e4      	bne.n	4df0 <__cmpsf2+0x1c>
    4e26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    4e2a:	d0e1      	beq.n	4df0 <__cmpsf2+0x1c>
    4e2c:	f85d 0b04 	ldr.w	r0, [sp], #4
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop

00004e34 <__aeabi_cfrcmple>:
    4e34:	4684      	mov	ip, r0
    4e36:	4608      	mov	r0, r1
    4e38:	4661      	mov	r1, ip
    4e3a:	e7ff      	b.n	4e3c <__aeabi_cfcmpeq>

00004e3c <__aeabi_cfcmpeq>:
    4e3c:	b50f      	push	{r0, r1, r2, r3, lr}
    4e3e:	f7ff ffc9 	bl	4dd4 <__cmpsf2>
    4e42:	2800      	cmp	r0, #0
    4e44:	bf48      	it	mi
    4e46:	f110 0f00 	cmnmi.w	r0, #0
    4e4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

00004e4c <__aeabi_fcmpeq>:
    4e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4e50:	f7ff fff4 	bl	4e3c <__aeabi_cfcmpeq>
    4e54:	bf0c      	ite	eq
    4e56:	2001      	moveq	r0, #1
    4e58:	2000      	movne	r0, #0
    4e5a:	f85d fb08 	ldr.w	pc, [sp], #8
    4e5e:	bf00      	nop

00004e60 <__aeabi_fcmplt>:
    4e60:	f84d ed08 	str.w	lr, [sp, #-8]!
    4e64:	f7ff ffea 	bl	4e3c <__aeabi_cfcmpeq>
    4e68:	bf34      	ite	cc
    4e6a:	2001      	movcc	r0, #1
    4e6c:	2000      	movcs	r0, #0
    4e6e:	f85d fb08 	ldr.w	pc, [sp], #8
    4e72:	bf00      	nop

00004e74 <__aeabi_fcmple>:
    4e74:	f84d ed08 	str.w	lr, [sp, #-8]!
    4e78:	f7ff ffe0 	bl	4e3c <__aeabi_cfcmpeq>
    4e7c:	bf94      	ite	ls
    4e7e:	2001      	movls	r0, #1
    4e80:	2000      	movhi	r0, #0
    4e82:	f85d fb08 	ldr.w	pc, [sp], #8
    4e86:	bf00      	nop

00004e88 <__aeabi_fcmpge>:
    4e88:	f84d ed08 	str.w	lr, [sp, #-8]!
    4e8c:	f7ff ffd2 	bl	4e34 <__aeabi_cfrcmple>
    4e90:	bf94      	ite	ls
    4e92:	2001      	movls	r0, #1
    4e94:	2000      	movhi	r0, #0
    4e96:	f85d fb08 	ldr.w	pc, [sp], #8
    4e9a:	bf00      	nop

00004e9c <__aeabi_fcmpgt>:
    4e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4ea0:	f7ff ffc8 	bl	4e34 <__aeabi_cfrcmple>
    4ea4:	bf34      	ite	cc
    4ea6:	2001      	movcc	r0, #1
    4ea8:	2000      	movcs	r0, #0
    4eaa:	f85d fb08 	ldr.w	pc, [sp], #8
    4eae:	bf00      	nop

00004eb0 <__aeabi_f2iz>:
    4eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4eb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    4eb8:	d30f      	bcc.n	4eda <__aeabi_f2iz+0x2a>
    4eba:	f04f 039e 	mov.w	r3, #158	; 0x9e
    4ebe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    4ec2:	d90d      	bls.n	4ee0 <__aeabi_f2iz+0x30>
    4ec4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    4ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4ecc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4ed0:	fa23 f002 	lsr.w	r0, r3, r2
    4ed4:	bf18      	it	ne
    4ed6:	4240      	negne	r0, r0
    4ed8:	4770      	bx	lr
    4eda:	f04f 0000 	mov.w	r0, #0
    4ede:	4770      	bx	lr
    4ee0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    4ee4:	d101      	bne.n	4eea <__aeabi_f2iz+0x3a>
    4ee6:	0242      	lsls	r2, r0, #9
    4ee8:	d105      	bne.n	4ef6 <__aeabi_f2iz+0x46>
    4eea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    4eee:	bf08      	it	eq
    4ef0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    4ef4:	4770      	bx	lr
    4ef6:	f04f 0000 	mov.w	r0, #0
    4efa:	4770      	bx	lr

00004efc <__aeabi_f2uiz>:
    4efc:	0042      	lsls	r2, r0, #1
    4efe:	d20e      	bcs.n	4f1e <__aeabi_f2uiz+0x22>
    4f00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    4f04:	d30b      	bcc.n	4f1e <__aeabi_f2uiz+0x22>
    4f06:	f04f 039e 	mov.w	r3, #158	; 0x9e
    4f0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    4f0e:	d409      	bmi.n	4f24 <__aeabi_f2uiz+0x28>
    4f10:	ea4f 2300 	mov.w	r3, r0, lsl #8
    4f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4f18:	fa23 f002 	lsr.w	r0, r3, r2
    4f1c:	4770      	bx	lr
    4f1e:	f04f 0000 	mov.w	r0, #0
    4f22:	4770      	bx	lr
    4f24:	f112 0f61 	cmn.w	r2, #97	; 0x61
    4f28:	d101      	bne.n	4f2e <__aeabi_f2uiz+0x32>
    4f2a:	0242      	lsls	r2, r0, #9
    4f2c:	d102      	bne.n	4f34 <__aeabi_f2uiz+0x38>
    4f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f32:	4770      	bx	lr
    4f34:	f04f 0000 	mov.w	r0, #0
    4f38:	4770      	bx	lr
    4f3a:	bf00      	nop

00004f3c <__aeabi_uldivmod>:
    4f3c:	b953      	cbnz	r3, 4f54 <__aeabi_uldivmod+0x18>
    4f3e:	b94a      	cbnz	r2, 4f54 <__aeabi_uldivmod+0x18>
    4f40:	2900      	cmp	r1, #0
    4f42:	bf08      	it	eq
    4f44:	2800      	cmpeq	r0, #0
    4f46:	bf1c      	itt	ne
    4f48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4f4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4f50:	f001 b906 	b.w	6160 <__aeabi_idiv0>
    4f54:	f1ad 0c08 	sub.w	ip, sp, #8
    4f58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4f5c:	f000 f806 	bl	4f6c <__udivmoddi4>
    4f60:	f8dd e004 	ldr.w	lr, [sp, #4]
    4f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4f68:	b004      	add	sp, #16
    4f6a:	4770      	bx	lr

00004f6c <__udivmoddi4>:
    4f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f70:	468c      	mov	ip, r1
    4f72:	4604      	mov	r4, r0
    4f74:	9e08      	ldr	r6, [sp, #32]
    4f76:	2b00      	cmp	r3, #0
    4f78:	d14b      	bne.n	5012 <__udivmoddi4+0xa6>
    4f7a:	428a      	cmp	r2, r1
    4f7c:	4615      	mov	r5, r2
    4f7e:	d967      	bls.n	5050 <__udivmoddi4+0xe4>
    4f80:	fab2 f282 	clz	r2, r2
    4f84:	b14a      	cbz	r2, 4f9a <__udivmoddi4+0x2e>
    4f86:	f1c2 0720 	rsb	r7, r2, #32
    4f8a:	fa01 f302 	lsl.w	r3, r1, r2
    4f8e:	fa20 f707 	lsr.w	r7, r0, r7
    4f92:	4095      	lsls	r5, r2
    4f94:	ea47 0c03 	orr.w	ip, r7, r3
    4f98:	4094      	lsls	r4, r2
    4f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4f9e:	fbbc f7fe 	udiv	r7, ip, lr
    4fa2:	fa1f f885 	uxth.w	r8, r5
    4fa6:	fb0e c317 	mls	r3, lr, r7, ip
    4faa:	fb07 f908 	mul.w	r9, r7, r8
    4fae:	0c21      	lsrs	r1, r4, #16
    4fb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    4fb4:	4599      	cmp	r9, r3
    4fb6:	d909      	bls.n	4fcc <__udivmoddi4+0x60>
    4fb8:	18eb      	adds	r3, r5, r3
    4fba:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
    4fbe:	f080 811c 	bcs.w	51fa <__udivmoddi4+0x28e>
    4fc2:	4599      	cmp	r9, r3
    4fc4:	f240 8119 	bls.w	51fa <__udivmoddi4+0x28e>
    4fc8:	3f02      	subs	r7, #2
    4fca:	442b      	add	r3, r5
    4fcc:	eba3 0309 	sub.w	r3, r3, r9
    4fd0:	fbb3 f0fe 	udiv	r0, r3, lr
    4fd4:	fb0e 3310 	mls	r3, lr, r0, r3
    4fd8:	fb00 f108 	mul.w	r1, r0, r8
    4fdc:	b2a4      	uxth	r4, r4
    4fde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4fe2:	42a1      	cmp	r1, r4
    4fe4:	d909      	bls.n	4ffa <__udivmoddi4+0x8e>
    4fe6:	192c      	adds	r4, r5, r4
    4fe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4fec:	f080 8107 	bcs.w	51fe <__udivmoddi4+0x292>
    4ff0:	42a1      	cmp	r1, r4
    4ff2:	f240 8104 	bls.w	51fe <__udivmoddi4+0x292>
    4ff6:	3802      	subs	r0, #2
    4ff8:	442c      	add	r4, r5
    4ffa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4ffe:	2700      	movs	r7, #0
    5000:	1a64      	subs	r4, r4, r1
    5002:	b11e      	cbz	r6, 500c <__udivmoddi4+0xa0>
    5004:	2300      	movs	r3, #0
    5006:	40d4      	lsrs	r4, r2
    5008:	e9c6 4300 	strd	r4, r3, [r6]
    500c:	4639      	mov	r1, r7
    500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5012:	428b      	cmp	r3, r1
    5014:	d909      	bls.n	502a <__udivmoddi4+0xbe>
    5016:	2e00      	cmp	r6, #0
    5018:	f000 80ec 	beq.w	51f4 <__udivmoddi4+0x288>
    501c:	2700      	movs	r7, #0
    501e:	e9c6 0100 	strd	r0, r1, [r6]
    5022:	4638      	mov	r0, r7
    5024:	4639      	mov	r1, r7
    5026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    502a:	fab3 f783 	clz	r7, r3
    502e:	2f00      	cmp	r7, #0
    5030:	d148      	bne.n	50c4 <__udivmoddi4+0x158>
    5032:	428b      	cmp	r3, r1
    5034:	d302      	bcc.n	503c <__udivmoddi4+0xd0>
    5036:	4282      	cmp	r2, r0
    5038:	f200 80fb 	bhi.w	5232 <__udivmoddi4+0x2c6>
    503c:	1a84      	subs	r4, r0, r2
    503e:	eb61 0303 	sbc.w	r3, r1, r3
    5042:	2001      	movs	r0, #1
    5044:	469c      	mov	ip, r3
    5046:	2e00      	cmp	r6, #0
    5048:	d0e0      	beq.n	500c <__udivmoddi4+0xa0>
    504a:	e9c6 4c00 	strd	r4, ip, [r6]
    504e:	e7dd      	b.n	500c <__udivmoddi4+0xa0>
    5050:	b902      	cbnz	r2, 5054 <__udivmoddi4+0xe8>
    5052:	deff      	udf	#255	; 0xff
    5054:	fab2 f282 	clz	r2, r2
    5058:	2a00      	cmp	r2, #0
    505a:	f040 808f 	bne.w	517c <__udivmoddi4+0x210>
    505e:	2701      	movs	r7, #1
    5060:	1b49      	subs	r1, r1, r5
    5062:	ea4f 4815 	mov.w	r8, r5, lsr #16
    5066:	fa1f f985 	uxth.w	r9, r5
    506a:	fbb1 fef8 	udiv	lr, r1, r8
    506e:	fb08 111e 	mls	r1, r8, lr, r1
    5072:	fb09 f00e 	mul.w	r0, r9, lr
    5076:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    507a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
    507e:	4298      	cmp	r0, r3
    5080:	d907      	bls.n	5092 <__udivmoddi4+0x126>
    5082:	18eb      	adds	r3, r5, r3
    5084:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    5088:	d202      	bcs.n	5090 <__udivmoddi4+0x124>
    508a:	4298      	cmp	r0, r3
    508c:	f200 80cd 	bhi.w	522a <__udivmoddi4+0x2be>
    5090:	468e      	mov	lr, r1
    5092:	1a1b      	subs	r3, r3, r0
    5094:	fbb3 f0f8 	udiv	r0, r3, r8
    5098:	fb08 3310 	mls	r3, r8, r0, r3
    509c:	fb09 f900 	mul.w	r9, r9, r0
    50a0:	b2a4      	uxth	r4, r4
    50a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    50a6:	45a1      	cmp	r9, r4
    50a8:	d907      	bls.n	50ba <__udivmoddi4+0x14e>
    50aa:	192c      	adds	r4, r5, r4
    50ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    50b0:	d202      	bcs.n	50b8 <__udivmoddi4+0x14c>
    50b2:	45a1      	cmp	r9, r4
    50b4:	f200 80b6 	bhi.w	5224 <__udivmoddi4+0x2b8>
    50b8:	4618      	mov	r0, r3
    50ba:	eba4 0409 	sub.w	r4, r4, r9
    50be:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    50c2:	e79e      	b.n	5002 <__udivmoddi4+0x96>
    50c4:	f1c7 0520 	rsb	r5, r7, #32
    50c8:	40bb      	lsls	r3, r7
    50ca:	fa22 fc05 	lsr.w	ip, r2, r5
    50ce:	ea4c 0c03 	orr.w	ip, ip, r3
    50d2:	fa21 f405 	lsr.w	r4, r1, r5
    50d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    50da:	fbb4 f9fe 	udiv	r9, r4, lr
    50de:	fa1f f88c 	uxth.w	r8, ip
    50e2:	fb0e 4419 	mls	r4, lr, r9, r4
    50e6:	fa20 f305 	lsr.w	r3, r0, r5
    50ea:	40b9      	lsls	r1, r7
    50ec:	fb09 fa08 	mul.w	sl, r9, r8
    50f0:	4319      	orrs	r1, r3
    50f2:	0c0b      	lsrs	r3, r1, #16
    50f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    50f8:	45a2      	cmp	sl, r4
    50fa:	fa02 f207 	lsl.w	r2, r2, r7
    50fe:	fa00 f307 	lsl.w	r3, r0, r7
    5102:	d90b      	bls.n	511c <__udivmoddi4+0x1b0>
    5104:	eb1c 0404 	adds.w	r4, ip, r4
    5108:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    510c:	f080 8088 	bcs.w	5220 <__udivmoddi4+0x2b4>
    5110:	45a2      	cmp	sl, r4
    5112:	f240 8085 	bls.w	5220 <__udivmoddi4+0x2b4>
    5116:	f1a9 0902 	sub.w	r9, r9, #2
    511a:	4464      	add	r4, ip
    511c:	eba4 040a 	sub.w	r4, r4, sl
    5120:	fbb4 f0fe 	udiv	r0, r4, lr
    5124:	fb0e 4410 	mls	r4, lr, r0, r4
    5128:	fb00 fa08 	mul.w	sl, r0, r8
    512c:	b289      	uxth	r1, r1
    512e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
    5132:	45a2      	cmp	sl, r4
    5134:	d908      	bls.n	5148 <__udivmoddi4+0x1dc>
    5136:	eb1c 0404 	adds.w	r4, ip, r4
    513a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    513e:	d26b      	bcs.n	5218 <__udivmoddi4+0x2ac>
    5140:	45a2      	cmp	sl, r4
    5142:	d969      	bls.n	5218 <__udivmoddi4+0x2ac>
    5144:	3802      	subs	r0, #2
    5146:	4464      	add	r4, ip
    5148:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    514c:	fba0 8902 	umull	r8, r9, r0, r2
    5150:	eba4 040a 	sub.w	r4, r4, sl
    5154:	454c      	cmp	r4, r9
    5156:	4641      	mov	r1, r8
    5158:	46ce      	mov	lr, r9
    515a:	d354      	bcc.n	5206 <__udivmoddi4+0x29a>
    515c:	d051      	beq.n	5202 <__udivmoddi4+0x296>
    515e:	2e00      	cmp	r6, #0
    5160:	d069      	beq.n	5236 <__udivmoddi4+0x2ca>
    5162:	1a5a      	subs	r2, r3, r1
    5164:	eb64 040e 	sbc.w	r4, r4, lr
    5168:	fa04 f505 	lsl.w	r5, r4, r5
    516c:	fa22 f307 	lsr.w	r3, r2, r7
    5170:	40fc      	lsrs	r4, r7
    5172:	431d      	orrs	r5, r3
    5174:	e9c6 5400 	strd	r5, r4, [r6]
    5178:	2700      	movs	r7, #0
    517a:	e747      	b.n	500c <__udivmoddi4+0xa0>
    517c:	4095      	lsls	r5, r2
    517e:	f1c2 0320 	rsb	r3, r2, #32
    5182:	fa21 f003 	lsr.w	r0, r1, r3
    5186:	ea4f 4815 	mov.w	r8, r5, lsr #16
    518a:	fbb0 f7f8 	udiv	r7, r0, r8
    518e:	fa1f f985 	uxth.w	r9, r5
    5192:	fb08 0017 	mls	r0, r8, r7, r0
    5196:	fa24 f303 	lsr.w	r3, r4, r3
    519a:	4091      	lsls	r1, r2
    519c:	fb07 fc09 	mul.w	ip, r7, r9
    51a0:	430b      	orrs	r3, r1
    51a2:	0c19      	lsrs	r1, r3, #16
    51a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    51a8:	458c      	cmp	ip, r1
    51aa:	fa04 f402 	lsl.w	r4, r4, r2
    51ae:	d907      	bls.n	51c0 <__udivmoddi4+0x254>
    51b0:	1869      	adds	r1, r5, r1
    51b2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    51b6:	d231      	bcs.n	521c <__udivmoddi4+0x2b0>
    51b8:	458c      	cmp	ip, r1
    51ba:	d92f      	bls.n	521c <__udivmoddi4+0x2b0>
    51bc:	3f02      	subs	r7, #2
    51be:	4429      	add	r1, r5
    51c0:	eba1 010c 	sub.w	r1, r1, ip
    51c4:	fbb1 f0f8 	udiv	r0, r1, r8
    51c8:	fb08 1c10 	mls	ip, r8, r0, r1
    51cc:	fb00 fe09 	mul.w	lr, r0, r9
    51d0:	b299      	uxth	r1, r3
    51d2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    51d6:	458e      	cmp	lr, r1
    51d8:	d907      	bls.n	51ea <__udivmoddi4+0x27e>
    51da:	1869      	adds	r1, r5, r1
    51dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    51e0:	d218      	bcs.n	5214 <__udivmoddi4+0x2a8>
    51e2:	458e      	cmp	lr, r1
    51e4:	d916      	bls.n	5214 <__udivmoddi4+0x2a8>
    51e6:	3802      	subs	r0, #2
    51e8:	4429      	add	r1, r5
    51ea:	eba1 010e 	sub.w	r1, r1, lr
    51ee:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    51f2:	e73a      	b.n	506a <__udivmoddi4+0xfe>
    51f4:	4637      	mov	r7, r6
    51f6:	4630      	mov	r0, r6
    51f8:	e708      	b.n	500c <__udivmoddi4+0xa0>
    51fa:	460f      	mov	r7, r1
    51fc:	e6e6      	b.n	4fcc <__udivmoddi4+0x60>
    51fe:	4618      	mov	r0, r3
    5200:	e6fb      	b.n	4ffa <__udivmoddi4+0x8e>
    5202:	4543      	cmp	r3, r8
    5204:	d2ab      	bcs.n	515e <__udivmoddi4+0x1f2>
    5206:	ebb8 0102 	subs.w	r1, r8, r2
    520a:	eb69 020c 	sbc.w	r2, r9, ip
    520e:	3801      	subs	r0, #1
    5210:	4696      	mov	lr, r2
    5212:	e7a4      	b.n	515e <__udivmoddi4+0x1f2>
    5214:	4618      	mov	r0, r3
    5216:	e7e8      	b.n	51ea <__udivmoddi4+0x27e>
    5218:	4608      	mov	r0, r1
    521a:	e795      	b.n	5148 <__udivmoddi4+0x1dc>
    521c:	4607      	mov	r7, r0
    521e:	e7cf      	b.n	51c0 <__udivmoddi4+0x254>
    5220:	4681      	mov	r9, r0
    5222:	e77b      	b.n	511c <__udivmoddi4+0x1b0>
    5224:	3802      	subs	r0, #2
    5226:	442c      	add	r4, r5
    5228:	e747      	b.n	50ba <__udivmoddi4+0x14e>
    522a:	f1ae 0e02 	sub.w	lr, lr, #2
    522e:	442b      	add	r3, r5
    5230:	e72f      	b.n	5092 <__udivmoddi4+0x126>
    5232:	4638      	mov	r0, r7
    5234:	e707      	b.n	5046 <__udivmoddi4+0xda>
    5236:	4637      	mov	r7, r6
    5238:	e6e8      	b.n	500c <__udivmoddi4+0xa0>
    523a:	bf00      	nop

0000523c <selfrel_offset31>:
    523c:	6803      	ldr	r3, [r0, #0]
    523e:	005a      	lsls	r2, r3, #1
    5240:	bf4c      	ite	mi
    5242:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    5246:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    524a:	4418      	add	r0, r3
    524c:	4770      	bx	lr
    524e:	bf00      	nop

00005250 <search_EIT_table>:
    5250:	b361      	cbz	r1, 52ac <search_EIT_table+0x5c>
    5252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5256:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    525a:	4690      	mov	r8, r2
    525c:	4606      	mov	r6, r0
    525e:	46d1      	mov	r9, sl
    5260:	2700      	movs	r7, #0
    5262:	eb07 0409 	add.w	r4, r7, r9
    5266:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    526a:	1064      	asrs	r4, r4, #1
    526c:	00e5      	lsls	r5, r4, #3
    526e:	1971      	adds	r1, r6, r5
    5270:	4608      	mov	r0, r1
    5272:	f7ff ffe3 	bl	523c <selfrel_offset31>
    5276:	45a2      	cmp	sl, r4
    5278:	4683      	mov	fp, r0
    527a:	f105 0008 	add.w	r0, r5, #8
    527e:	4430      	add	r0, r6
    5280:	d009      	beq.n	5296 <search_EIT_table+0x46>
    5282:	f7ff ffdb 	bl	523c <selfrel_offset31>
    5286:	45c3      	cmp	fp, r8
    5288:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    528c:	d805      	bhi.n	529a <search_EIT_table+0x4a>
    528e:	4540      	cmp	r0, r8
    5290:	d209      	bcs.n	52a6 <search_EIT_table+0x56>
    5292:	1c67      	adds	r7, r4, #1
    5294:	e7e5      	b.n	5262 <search_EIT_table+0x12>
    5296:	45c3      	cmp	fp, r8
    5298:	d905      	bls.n	52a6 <search_EIT_table+0x56>
    529a:	42a7      	cmp	r7, r4
    529c:	d002      	beq.n	52a4 <search_EIT_table+0x54>
    529e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    52a2:	e7de      	b.n	5262 <search_EIT_table+0x12>
    52a4:	2100      	movs	r1, #0
    52a6:	4608      	mov	r0, r1
    52a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52ac:	4608      	mov	r0, r1
    52ae:	4770      	bx	lr

000052b0 <__gnu_unwind_get_pr_addr>:
    52b0:	2801      	cmp	r0, #1
    52b2:	d007      	beq.n	52c4 <__gnu_unwind_get_pr_addr+0x14>
    52b4:	2802      	cmp	r0, #2
    52b6:	d007      	beq.n	52c8 <__gnu_unwind_get_pr_addr+0x18>
    52b8:	4b04      	ldr	r3, [pc, #16]	; (52cc <__gnu_unwind_get_pr_addr+0x1c>)
    52ba:	2800      	cmp	r0, #0
    52bc:	bf0c      	ite	eq
    52be:	4618      	moveq	r0, r3
    52c0:	2000      	movne	r0, #0
    52c2:	4770      	bx	lr
    52c4:	4802      	ldr	r0, [pc, #8]	; (52d0 <__gnu_unwind_get_pr_addr+0x20>)
    52c6:	4770      	bx	lr
    52c8:	4802      	ldr	r0, [pc, #8]	; (52d4 <__gnu_unwind_get_pr_addr+0x24>)
    52ca:	4770      	bx	lr
    52cc:	000059ad 	.word	0x000059ad
    52d0:	000059b1 	.word	0x000059b1
    52d4:	000059b5 	.word	0x000059b5

000052d8 <get_eit_entry>:
    52d8:	b530      	push	{r4, r5, lr}
    52da:	4b26      	ldr	r3, [pc, #152]	; (5374 <get_eit_entry+0x9c>)
    52dc:	b083      	sub	sp, #12
    52de:	4604      	mov	r4, r0
    52e0:	1e8d      	subs	r5, r1, #2
    52e2:	b34b      	cbz	r3, 5338 <get_eit_entry+0x60>
    52e4:	a901      	add	r1, sp, #4
    52e6:	4628      	mov	r0, r5
    52e8:	f3af 8000 	nop.w
    52ec:	b1f0      	cbz	r0, 532c <get_eit_entry+0x54>
    52ee:	9901      	ldr	r1, [sp, #4]
    52f0:	462a      	mov	r2, r5
    52f2:	f7ff ffad 	bl	5250 <search_EIT_table>
    52f6:	4601      	mov	r1, r0
    52f8:	b1c0      	cbz	r0, 532c <get_eit_entry+0x54>
    52fa:	f7ff ff9f 	bl	523c <selfrel_offset31>
    52fe:	684b      	ldr	r3, [r1, #4]
    5300:	64a0      	str	r0, [r4, #72]	; 0x48
    5302:	2b01      	cmp	r3, #1
    5304:	d02f      	beq.n	5366 <get_eit_entry+0x8e>
    5306:	2b00      	cmp	r3, #0
    5308:	f101 0004 	add.w	r0, r1, #4
    530c:	db27      	blt.n	535e <get_eit_entry+0x86>
    530e:	f7ff ff95 	bl	523c <selfrel_offset31>
    5312:	2300      	movs	r3, #0
    5314:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5318:	6803      	ldr	r3, [r0, #0]
    531a:	2b00      	cmp	r3, #0
    531c:	db13      	blt.n	5346 <get_eit_entry+0x6e>
    531e:	f7ff ff8d 	bl	523c <selfrel_offset31>
    5322:	2300      	movs	r3, #0
    5324:	6120      	str	r0, [r4, #16]
    5326:	4618      	mov	r0, r3
    5328:	b003      	add	sp, #12
    532a:	bd30      	pop	{r4, r5, pc}
    532c:	2309      	movs	r3, #9
    532e:	2200      	movs	r2, #0
    5330:	4618      	mov	r0, r3
    5332:	6122      	str	r2, [r4, #16]
    5334:	b003      	add	sp, #12
    5336:	bd30      	pop	{r4, r5, pc}
    5338:	4b0f      	ldr	r3, [pc, #60]	; (5378 <get_eit_entry+0xa0>)
    533a:	4910      	ldr	r1, [pc, #64]	; (537c <get_eit_entry+0xa4>)
    533c:	4618      	mov	r0, r3
    533e:	1ac9      	subs	r1, r1, r3
    5340:	10c9      	asrs	r1, r1, #3
    5342:	9101      	str	r1, [sp, #4]
    5344:	e7d4      	b.n	52f0 <get_eit_entry+0x18>
    5346:	f3c3 6003 	ubfx	r0, r3, #24, #4
    534a:	f7ff ffb1 	bl	52b0 <__gnu_unwind_get_pr_addr>
    534e:	2800      	cmp	r0, #0
    5350:	bf14      	ite	ne
    5352:	2300      	movne	r3, #0
    5354:	2309      	moveq	r3, #9
    5356:	6120      	str	r0, [r4, #16]
    5358:	4618      	mov	r0, r3
    535a:	b003      	add	sp, #12
    535c:	bd30      	pop	{r4, r5, pc}
    535e:	2301      	movs	r3, #1
    5360:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5364:	e7d8      	b.n	5318 <get_eit_entry+0x40>
    5366:	2305      	movs	r3, #5
    5368:	2200      	movs	r2, #0
    536a:	4618      	mov	r0, r3
    536c:	6122      	str	r2, [r4, #16]
    536e:	b003      	add	sp, #12
    5370:	bd30      	pop	{r4, r5, pc}
    5372:	bf00      	nop
    5374:	00000000 	.word	0x00000000
    5378:	000079b8 	.word	0x000079b8
    537c:	00007a70 	.word	0x00007a70

00005380 <restore_non_core_regs>:
    5380:	6803      	ldr	r3, [r0, #0]
    5382:	b510      	push	{r4, lr}
    5384:	07da      	lsls	r2, r3, #31
    5386:	4604      	mov	r4, r0
    5388:	d406      	bmi.n	5398 <restore_non_core_regs+0x18>
    538a:	079b      	lsls	r3, r3, #30
    538c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5390:	d509      	bpl.n	53a6 <restore_non_core_regs+0x26>
    5392:	f000 fc67 	bl	5c64 <__gnu_Unwind_Restore_VFP_D>
    5396:	6823      	ldr	r3, [r4, #0]
    5398:	0759      	lsls	r1, r3, #29
    539a:	d509      	bpl.n	53b0 <restore_non_core_regs+0x30>
    539c:	071a      	lsls	r2, r3, #28
    539e:	d50e      	bpl.n	53be <restore_non_core_regs+0x3e>
    53a0:	06db      	lsls	r3, r3, #27
    53a2:	d513      	bpl.n	53cc <restore_non_core_regs+0x4c>
    53a4:	bd10      	pop	{r4, pc}
    53a6:	f000 fc55 	bl	5c54 <__gnu_Unwind_Restore_VFP>
    53aa:	6823      	ldr	r3, [r4, #0]
    53ac:	0759      	lsls	r1, r3, #29
    53ae:	d4f5      	bmi.n	539c <restore_non_core_regs+0x1c>
    53b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    53b4:	f000 fc5e 	bl	5c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    53b8:	6823      	ldr	r3, [r4, #0]
    53ba:	071a      	lsls	r2, r3, #28
    53bc:	d4f0      	bmi.n	53a0 <restore_non_core_regs+0x20>
    53be:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    53c2:	f000 fc5f 	bl	5c84 <__gnu_Unwind_Restore_WMMXD>
    53c6:	6823      	ldr	r3, [r4, #0]
    53c8:	06db      	lsls	r3, r3, #27
    53ca:	d4eb      	bmi.n	53a4 <restore_non_core_regs+0x24>
    53cc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    53d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53d4:	f000 bc9a 	b.w	5d0c <__gnu_Unwind_Restore_WMMXC>

000053d8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    53d8:	6803      	ldr	r3, [r0, #0]
    53da:	b103      	cbz	r3, 53de <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    53dc:	4403      	add	r3, r0
    53de:	4618      	mov	r0, r3
    53e0:	4770      	bx	lr
    53e2:	bf00      	nop

000053e4 <__gnu_unwind_24bit.isra.1>:
    53e4:	2009      	movs	r0, #9
    53e6:	4770      	bx	lr

000053e8 <_Unwind_DebugHook>:
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop

000053ec <unwind_phase2>:
    53ec:	b570      	push	{r4, r5, r6, lr}
    53ee:	4604      	mov	r4, r0
    53f0:	460d      	mov	r5, r1
    53f2:	e008      	b.n	5406 <unwind_phase2+0x1a>
    53f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    53f6:	6923      	ldr	r3, [r4, #16]
    53f8:	6162      	str	r2, [r4, #20]
    53fa:	4621      	mov	r1, r4
    53fc:	462a      	mov	r2, r5
    53fe:	2001      	movs	r0, #1
    5400:	4798      	blx	r3
    5402:	2808      	cmp	r0, #8
    5404:	d108      	bne.n	5418 <unwind_phase2+0x2c>
    5406:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5408:	4620      	mov	r0, r4
    540a:	f7ff ff65 	bl	52d8 <get_eit_entry>
    540e:	4606      	mov	r6, r0
    5410:	2800      	cmp	r0, #0
    5412:	d0ef      	beq.n	53f4 <unwind_phase2+0x8>
    5414:	f000 fea6 	bl	6164 <abort>
    5418:	2807      	cmp	r0, #7
    541a:	d1fb      	bne.n	5414 <unwind_phase2+0x28>
    541c:	4630      	mov	r0, r6
    541e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5420:	f7ff ffe2 	bl	53e8 <_Unwind_DebugHook>
    5424:	1d28      	adds	r0, r5, #4
    5426:	f000 fc09 	bl	5c3c <__restore_core_regs>
    542a:	bf00      	nop

0000542c <unwind_phase2_forced>:
    542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5430:	4605      	mov	r5, r0
    5432:	f04f 0c00 	mov.w	ip, #0
    5436:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    543a:	ac03      	add	r4, sp, #12
    543c:	1d0e      	adds	r6, r1, #4
    543e:	4617      	mov	r7, r2
    5440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5448:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    544c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    5450:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5454:	f8d5 9018 	ldr.w	r9, [r5, #24]
    5458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    545c:	ac02      	add	r4, sp, #8
    545e:	f8c4 c000 	str.w	ip, [r4]
    5462:	e021      	b.n	54a8 <unwind_phase2_forced+0x7c>
    5464:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5466:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    546a:	616b      	str	r3, [r5, #20]
    546c:	4621      	mov	r1, r4
    546e:	a87a      	add	r0, sp, #488	; 0x1e8
    5470:	f000 fea4 	bl	61bc <memcpy>
    5474:	692b      	ldr	r3, [r5, #16]
    5476:	aa7a      	add	r2, sp, #488	; 0x1e8
    5478:	4629      	mov	r1, r5
    547a:	4630      	mov	r0, r6
    547c:	4798      	blx	r3
    547e:	9b88      	ldr	r3, [sp, #544]	; 0x220
    5480:	e9cd 4900 	strd	r4, r9, [sp]
    5484:	4682      	mov	sl, r0
    5486:	6463      	str	r3, [r4, #68]	; 0x44
    5488:	4631      	mov	r1, r6
    548a:	462b      	mov	r3, r5
    548c:	462a      	mov	r2, r5
    548e:	2001      	movs	r0, #1
    5490:	47c0      	blx	r8
    5492:	4607      	mov	r7, r0
    5494:	b9f8      	cbnz	r0, 54d6 <unwind_phase2_forced+0xaa>
    5496:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    549a:	a97a      	add	r1, sp, #488	; 0x1e8
    549c:	4620      	mov	r0, r4
    549e:	f000 fe8d 	bl	61bc <memcpy>
    54a2:	f1ba 0f08 	cmp.w	sl, #8
    54a6:	d11c      	bne.n	54e2 <unwind_phase2_forced+0xb6>
    54a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    54aa:	4628      	mov	r0, r5
    54ac:	f7ff ff14 	bl	52d8 <get_eit_entry>
    54b0:	2f00      	cmp	r7, #0
    54b2:	bf08      	it	eq
    54b4:	2609      	moveq	r6, #9
    54b6:	4607      	mov	r7, r0
    54b8:	bf18      	it	ne
    54ba:	260a      	movne	r6, #10
    54bc:	2800      	cmp	r0, #0
    54be:	d0d1      	beq.n	5464 <unwind_phase2_forced+0x38>
    54c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    54c2:	f046 0110 	orr.w	r1, r6, #16
    54c6:	e9cd 4900 	strd	r4, r9, [sp]
    54ca:	462a      	mov	r2, r5
    54cc:	6463      	str	r3, [r4, #68]	; 0x44
    54ce:	2001      	movs	r0, #1
    54d0:	462b      	mov	r3, r5
    54d2:	47c0      	blx	r8
    54d4:	b100      	cbz	r0, 54d8 <unwind_phase2_forced+0xac>
    54d6:	2709      	movs	r7, #9
    54d8:	4638      	mov	r0, r7
    54da:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    54de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54e2:	f1ba 0f07 	cmp.w	sl, #7
    54e6:	d1f6      	bne.n	54d6 <unwind_phase2_forced+0xaa>
    54e8:	4638      	mov	r0, r7
    54ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
    54ec:	f7ff ff7c 	bl	53e8 <_Unwind_DebugHook>
    54f0:	a803      	add	r0, sp, #12
    54f2:	f000 fba3 	bl	5c3c <__restore_core_regs>
    54f6:	bf00      	nop

000054f8 <_Unwind_GetCFA>:
    54f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
    54fa:	4770      	bx	lr

000054fc <__gnu_Unwind_RaiseException>:
    54fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5500:	b5f0      	push	{r4, r5, r6, r7, lr}
    5502:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5504:	b0f9      	sub	sp, #484	; 0x1e4
    5506:	640b      	str	r3, [r1, #64]	; 0x40
    5508:	1d0d      	adds	r5, r1, #4
    550a:	ac01      	add	r4, sp, #4
    550c:	460f      	mov	r7, r1
    550e:	4606      	mov	r6, r0
    5510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    551a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    551c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5524:	f8cd c000 	str.w	ip, [sp]
    5528:	e006      	b.n	5538 <__gnu_Unwind_RaiseException+0x3c>
    552a:	6933      	ldr	r3, [r6, #16]
    552c:	466a      	mov	r2, sp
    552e:	4631      	mov	r1, r6
    5530:	4798      	blx	r3
    5532:	2808      	cmp	r0, #8
    5534:	4604      	mov	r4, r0
    5536:	d108      	bne.n	554a <__gnu_Unwind_RaiseException+0x4e>
    5538:	9910      	ldr	r1, [sp, #64]	; 0x40
    553a:	4630      	mov	r0, r6
    553c:	f7ff fecc 	bl	52d8 <get_eit_entry>
    5540:	2800      	cmp	r0, #0
    5542:	d0f2      	beq.n	552a <__gnu_Unwind_RaiseException+0x2e>
    5544:	2009      	movs	r0, #9
    5546:	b079      	add	sp, #484	; 0x1e4
    5548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554a:	4668      	mov	r0, sp
    554c:	f7ff ff18 	bl	5380 <restore_non_core_regs>
    5550:	2c06      	cmp	r4, #6
    5552:	d1f7      	bne.n	5544 <__gnu_Unwind_RaiseException+0x48>
    5554:	4639      	mov	r1, r7
    5556:	4630      	mov	r0, r6
    5558:	f7ff ff48 	bl	53ec <unwind_phase2>

0000555c <__gnu_Unwind_ForcedUnwind>:
    555c:	b430      	push	{r4, r5}
    555e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5560:	60c1      	str	r1, [r0, #12]
    5562:	6182      	str	r2, [r0, #24]
    5564:	4619      	mov	r1, r3
    5566:	641d      	str	r5, [r3, #64]	; 0x40
    5568:	2200      	movs	r2, #0
    556a:	bc30      	pop	{r4, r5}
    556c:	e75e      	b.n	542c <unwind_phase2_forced>
    556e:	bf00      	nop

00005570 <__gnu_Unwind_Resume>:
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	6943      	ldr	r3, [r0, #20]
    5574:	68c6      	ldr	r6, [r0, #12]
    5576:	640b      	str	r3, [r1, #64]	; 0x40
    5578:	b9be      	cbnz	r6, 55aa <__gnu_Unwind_Resume+0x3a>
    557a:	6903      	ldr	r3, [r0, #16]
    557c:	460a      	mov	r2, r1
    557e:	4604      	mov	r4, r0
    5580:	460d      	mov	r5, r1
    5582:	4601      	mov	r1, r0
    5584:	2002      	movs	r0, #2
    5586:	4798      	blx	r3
    5588:	2807      	cmp	r0, #7
    558a:	d007      	beq.n	559c <__gnu_Unwind_Resume+0x2c>
    558c:	2808      	cmp	r0, #8
    558e:	d103      	bne.n	5598 <__gnu_Unwind_Resume+0x28>
    5590:	4629      	mov	r1, r5
    5592:	4620      	mov	r0, r4
    5594:	f7ff ff2a 	bl	53ec <unwind_phase2>
    5598:	f000 fde4 	bl	6164 <abort>
    559c:	4630      	mov	r0, r6
    559e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    55a0:	f7ff ff22 	bl	53e8 <_Unwind_DebugHook>
    55a4:	1d28      	adds	r0, r5, #4
    55a6:	f000 fb49 	bl	5c3c <__restore_core_regs>
    55aa:	2201      	movs	r2, #1
    55ac:	f7ff ff3e 	bl	542c <unwind_phase2_forced>
    55b0:	f000 fdd8 	bl	6164 <abort>

000055b4 <__gnu_Unwind_Resume_or_Rethrow>:
    55b4:	68c2      	ldr	r2, [r0, #12]
    55b6:	b12a      	cbz	r2, 55c4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
    55b8:	b410      	push	{r4}
    55ba:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    55bc:	2200      	movs	r2, #0
    55be:	640c      	str	r4, [r1, #64]	; 0x40
    55c0:	bc10      	pop	{r4}
    55c2:	e733      	b.n	542c <unwind_phase2_forced>
    55c4:	e79a      	b.n	54fc <__gnu_Unwind_RaiseException>
    55c6:	bf00      	nop

000055c8 <_Unwind_Complete>:
    55c8:	4770      	bx	lr
    55ca:	bf00      	nop

000055cc <_Unwind_DeleteException>:
    55cc:	6883      	ldr	r3, [r0, #8]
    55ce:	b113      	cbz	r3, 55d6 <_Unwind_DeleteException+0xa>
    55d0:	4601      	mov	r1, r0
    55d2:	2001      	movs	r0, #1
    55d4:	4718      	bx	r3
    55d6:	4770      	bx	lr

000055d8 <_Unwind_VRS_Get>:
    55d8:	2904      	cmp	r1, #4
    55da:	d807      	bhi.n	55ec <_Unwind_VRS_Get+0x14>
    55dc:	e8df f001 	tbb	[pc, r1]
    55e0:	08060803 	.word	0x08060803
    55e4:	08          	.byte	0x08
    55e5:	00          	.byte	0x00
    55e6:	b90b      	cbnz	r3, 55ec <_Unwind_VRS_Get+0x14>
    55e8:	2a0f      	cmp	r2, #15
    55ea:	d903      	bls.n	55f4 <_Unwind_VRS_Get+0x1c>
    55ec:	2002      	movs	r0, #2
    55ee:	4770      	bx	lr
    55f0:	2001      	movs	r0, #1
    55f2:	4770      	bx	lr
    55f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    55f8:	6842      	ldr	r2, [r0, #4]
    55fa:	4618      	mov	r0, r3
    55fc:	9b00      	ldr	r3, [sp, #0]
    55fe:	601a      	str	r2, [r3, #0]
    5600:	4770      	bx	lr
    5602:	bf00      	nop

00005604 <_Unwind_GetGR>:
    5604:	2300      	movs	r3, #0
    5606:	b510      	push	{r4, lr}
    5608:	b084      	sub	sp, #16
    560a:	ac03      	add	r4, sp, #12
    560c:	460a      	mov	r2, r1
    560e:	9400      	str	r4, [sp, #0]
    5610:	4619      	mov	r1, r3
    5612:	f7ff ffe1 	bl	55d8 <_Unwind_VRS_Get>
    5616:	9803      	ldr	r0, [sp, #12]
    5618:	b004      	add	sp, #16
    561a:	bd10      	pop	{r4, pc}

0000561c <_Unwind_VRS_Set>:
    561c:	2904      	cmp	r1, #4
    561e:	d807      	bhi.n	5630 <_Unwind_VRS_Set+0x14>
    5620:	e8df f001 	tbb	[pc, r1]
    5624:	08060803 	.word	0x08060803
    5628:	08          	.byte	0x08
    5629:	00          	.byte	0x00
    562a:	b90b      	cbnz	r3, 5630 <_Unwind_VRS_Set+0x14>
    562c:	2a0f      	cmp	r2, #15
    562e:	d903      	bls.n	5638 <_Unwind_VRS_Set+0x1c>
    5630:	2002      	movs	r0, #2
    5632:	4770      	bx	lr
    5634:	2001      	movs	r0, #1
    5636:	4770      	bx	lr
    5638:	9900      	ldr	r1, [sp, #0]
    563a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    563e:	6809      	ldr	r1, [r1, #0]
    5640:	4618      	mov	r0, r3
    5642:	6051      	str	r1, [r2, #4]
    5644:	4770      	bx	lr
    5646:	bf00      	nop

00005648 <_Unwind_SetGR>:
    5648:	2300      	movs	r3, #0
    564a:	b510      	push	{r4, lr}
    564c:	b084      	sub	sp, #16
    564e:	ac04      	add	r4, sp, #16
    5650:	f844 2d04 	str.w	r2, [r4, #-4]!
    5654:	9400      	str	r4, [sp, #0]
    5656:	460a      	mov	r2, r1
    5658:	4619      	mov	r1, r3
    565a:	f7ff ffdf 	bl	561c <_Unwind_VRS_Set>
    565e:	b004      	add	sp, #16
    5660:	bd10      	pop	{r4, pc}
    5662:	bf00      	nop

00005664 <__gnu_Unwind_Backtrace>:
    5664:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5668:	b5f0      	push	{r4, r5, r6, r7, lr}
    566a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    566c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5670:	6413      	str	r3, [r2, #64]	; 0x40
    5672:	1d15      	adds	r5, r2, #4
    5674:	ac17      	add	r4, sp, #92	; 0x5c
    5676:	4607      	mov	r7, r0
    5678:	460e      	mov	r6, r1
    567a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    567c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    567e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    568a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    568e:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
    5692:	e012      	b.n	56ba <__gnu_Unwind_Backtrace+0x56>
    5694:	210c      	movs	r1, #12
    5696:	a816      	add	r0, sp, #88	; 0x58
    5698:	466a      	mov	r2, sp
    569a:	f7ff ffd5 	bl	5648 <_Unwind_SetGR>
    569e:	4631      	mov	r1, r6
    56a0:	a816      	add	r0, sp, #88	; 0x58
    56a2:	47b8      	blx	r7
    56a4:	b978      	cbnz	r0, 56c6 <__gnu_Unwind_Backtrace+0x62>
    56a6:	9b04      	ldr	r3, [sp, #16]
    56a8:	aa16      	add	r2, sp, #88	; 0x58
    56aa:	4669      	mov	r1, sp
    56ac:	2008      	movs	r0, #8
    56ae:	4798      	blx	r3
    56b0:	2805      	cmp	r0, #5
    56b2:	4604      	mov	r4, r0
    56b4:	d008      	beq.n	56c8 <__gnu_Unwind_Backtrace+0x64>
    56b6:	2809      	cmp	r0, #9
    56b8:	d005      	beq.n	56c6 <__gnu_Unwind_Backtrace+0x62>
    56ba:	9926      	ldr	r1, [sp, #152]	; 0x98
    56bc:	4668      	mov	r0, sp
    56be:	f7ff fe0b 	bl	52d8 <get_eit_entry>
    56c2:	2800      	cmp	r0, #0
    56c4:	d0e6      	beq.n	5694 <__gnu_Unwind_Backtrace+0x30>
    56c6:	2409      	movs	r4, #9
    56c8:	a816      	add	r0, sp, #88	; 0x58
    56ca:	f7ff fe59 	bl	5380 <restore_non_core_regs>
    56ce:	4620      	mov	r0, r4
    56d0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    56d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d6:	bf00      	nop

000056d8 <__gnu_unwind_pr_common>:
    56d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56dc:	460d      	mov	r5, r1
    56de:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    56e0:	b089      	sub	sp, #36	; 0x24
    56e2:	1d0c      	adds	r4, r1, #4
    56e4:	4616      	mov	r6, r2
    56e6:	f000 0b03 	and.w	fp, r0, #3
    56ea:	680a      	ldr	r2, [r1, #0]
    56ec:	461f      	mov	r7, r3
    56ee:	9406      	str	r4, [sp, #24]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d068      	beq.n	57c6 <__gnu_unwind_pr_common+0xee>
    56f4:	2102      	movs	r1, #2
    56f6:	0c13      	lsrs	r3, r2, #16
    56f8:	f88d 301d 	strb.w	r3, [sp, #29]
    56fc:	0412      	lsls	r2, r2, #16
    56fe:	b2db      	uxtb	r3, r3
    5700:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5704:	9205      	str	r2, [sp, #20]
    5706:	f88d 101c 	strb.w	r1, [sp, #28]
    570a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    570c:	f1bb 0f02 	cmp.w	fp, #2
    5710:	bf08      	it	eq
    5712:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5714:	f013 0301 	ands.w	r3, r3, #1
    5718:	d146      	bne.n	57a8 <__gnu_unwind_pr_common+0xd0>
    571a:	9301      	str	r3, [sp, #4]
    571c:	f000 0308 	and.w	r3, r0, #8
    5720:	9300      	str	r3, [sp, #0]
    5722:	f8d4 9000 	ldr.w	r9, [r4]
    5726:	f1b9 0f00 	cmp.w	r9, #0
    572a:	f000 80f3 	beq.w	5914 <__gnu_unwind_pr_common+0x23c>
    572e:	2f02      	cmp	r7, #2
    5730:	d045      	beq.n	57be <__gnu_unwind_pr_common+0xe6>
    5732:	f8b4 9000 	ldrh.w	r9, [r4]
    5736:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    573a:	3404      	adds	r4, #4
    573c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    573e:	f028 0a01 	bic.w	sl, r8, #1
    5742:	210f      	movs	r1, #15
    5744:	4630      	mov	r0, r6
    5746:	449a      	add	sl, r3
    5748:	f7ff ff5c 	bl	5604 <_Unwind_GetGR>
    574c:	4582      	cmp	sl, r0
    574e:	d834      	bhi.n	57ba <__gnu_unwind_pr_common+0xe2>
    5750:	f029 0301 	bic.w	r3, r9, #1
    5754:	4453      	add	r3, sl
    5756:	4283      	cmp	r3, r0
    5758:	bf94      	ite	ls
    575a:	2000      	movls	r0, #0
    575c:	2001      	movhi	r0, #1
    575e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5762:	f008 0802 	and.w	r8, r8, #2
    5766:	f009 0901 	and.w	r9, r9, #1
    576a:	ea48 0809 	orr.w	r8, r8, r9
    576e:	f1b8 0f01 	cmp.w	r8, #1
    5772:	d03a      	beq.n	57ea <__gnu_unwind_pr_common+0x112>
    5774:	d331      	bcc.n	57da <__gnu_unwind_pr_common+0x102>
    5776:	f1b8 0f02 	cmp.w	r8, #2
    577a:	d11a      	bne.n	57b2 <__gnu_unwind_pr_common+0xda>
    577c:	6823      	ldr	r3, [r4, #0]
    577e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    5782:	f1bb 0f00 	cmp.w	fp, #0
    5786:	d166      	bne.n	5856 <__gnu_unwind_pr_common+0x17e>
    5788:	b130      	cbz	r0, 5798 <__gnu_unwind_pr_common+0xc0>
    578a:	9a00      	ldr	r2, [sp, #0]
    578c:	2a00      	cmp	r2, #0
    578e:	d06c      	beq.n	586a <__gnu_unwind_pr_common+0x192>
    5790:	f1ba 0f00 	cmp.w	sl, #0
    5794:	f000 8090 	beq.w	58b8 <__gnu_unwind_pr_common+0x1e0>
    5798:	2b00      	cmp	r3, #0
    579a:	da00      	bge.n	579e <__gnu_unwind_pr_common+0xc6>
    579c:	3404      	adds	r4, #4
    579e:	f10a 0301 	add.w	r3, sl, #1
    57a2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    57a6:	e7bc      	b.n	5722 <__gnu_unwind_pr_common+0x4a>
    57a8:	4630      	mov	r0, r6
    57aa:	a905      	add	r1, sp, #20
    57ac:	f000 fb48 	bl	5e40 <__gnu_unwind_execute>
    57b0:	b178      	cbz	r0, 57d2 <__gnu_unwind_pr_common+0xfa>
    57b2:	2009      	movs	r0, #9
    57b4:	b009      	add	sp, #36	; 0x24
    57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ba:	2000      	movs	r0, #0
    57bc:	e7cf      	b.n	575e <__gnu_unwind_pr_common+0x86>
    57be:	f8d4 8004 	ldr.w	r8, [r4, #4]
    57c2:	3408      	adds	r4, #8
    57c4:	e7ba      	b.n	573c <__gnu_unwind_pr_common+0x64>
    57c6:	2303      	movs	r3, #3
    57c8:	0212      	lsls	r2, r2, #8
    57ca:	9205      	str	r2, [sp, #20]
    57cc:	f8ad 301c 	strh.w	r3, [sp, #28]
    57d0:	e79b      	b.n	570a <__gnu_unwind_pr_common+0x32>
    57d2:	2008      	movs	r0, #8
    57d4:	b009      	add	sp, #36	; 0x24
    57d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57da:	f1bb 0f00 	cmp.w	fp, #0
    57de:	d002      	beq.n	57e6 <__gnu_unwind_pr_common+0x10e>
    57e0:	2800      	cmp	r0, #0
    57e2:	f040 80b4 	bne.w	594e <__gnu_unwind_pr_common+0x276>
    57e6:	3404      	adds	r4, #4
    57e8:	e79b      	b.n	5722 <__gnu_unwind_pr_common+0x4a>
    57ea:	f1bb 0f00 	cmp.w	fp, #0
    57ee:	d118      	bne.n	5822 <__gnu_unwind_pr_common+0x14a>
    57f0:	b1a8      	cbz	r0, 581e <__gnu_unwind_pr_common+0x146>
    57f2:	e9d4 2300 	ldrd	r2, r3, [r4]
    57f6:	1c99      	adds	r1, r3, #2
    57f8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    57fc:	d0d9      	beq.n	57b2 <__gnu_unwind_pr_common+0xda>
    57fe:	f105 0158 	add.w	r1, r5, #88	; 0x58
    5802:	3301      	adds	r3, #1
    5804:	9104      	str	r1, [sp, #16]
    5806:	f000 80b5 	beq.w	5974 <__gnu_unwind_pr_common+0x29c>
    580a:	1d20      	adds	r0, r4, #4
    580c:	f7ff fde4 	bl	53d8 <_Unwind_decode_typeinfo_ptr.isra.0>
    5810:	ab04      	add	r3, sp, #16
    5812:	4601      	mov	r1, r0
    5814:	4628      	mov	r0, r5
    5816:	f3af 8000 	nop.w
    581a:	2800      	cmp	r0, #0
    581c:	d167      	bne.n	58ee <__gnu_unwind_pr_common+0x216>
    581e:	3408      	adds	r4, #8
    5820:	e77f      	b.n	5722 <__gnu_unwind_pr_common+0x4a>
    5822:	210d      	movs	r1, #13
    5824:	4630      	mov	r0, r6
    5826:	f8d5 8020 	ldr.w	r8, [r5, #32]
    582a:	f7ff feeb 	bl	5604 <_Unwind_GetGR>
    582e:	4580      	cmp	r8, r0
    5830:	d1f5      	bne.n	581e <__gnu_unwind_pr_common+0x146>
    5832:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5834:	429c      	cmp	r4, r3
    5836:	d1f2      	bne.n	581e <__gnu_unwind_pr_common+0x146>
    5838:	4620      	mov	r0, r4
    583a:	f7ff fcff 	bl	523c <selfrel_offset31>
    583e:	210f      	movs	r1, #15
    5840:	4602      	mov	r2, r0
    5842:	4630      	mov	r0, r6
    5844:	f7ff ff00 	bl	5648 <_Unwind_SetGR>
    5848:	4630      	mov	r0, r6
    584a:	462a      	mov	r2, r5
    584c:	2100      	movs	r1, #0
    584e:	f7ff fefb 	bl	5648 <_Unwind_SetGR>
    5852:	2007      	movs	r0, #7
    5854:	e7ae      	b.n	57b4 <__gnu_unwind_pr_common+0xdc>
    5856:	210d      	movs	r1, #13
    5858:	4630      	mov	r0, r6
    585a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    585e:	f7ff fed1 	bl	5604 <_Unwind_GetGR>
    5862:	4580      	cmp	r8, r0
    5864:	d032      	beq.n	58cc <__gnu_unwind_pr_common+0x1f4>
    5866:	6823      	ldr	r3, [r4, #0]
    5868:	e796      	b.n	5798 <__gnu_unwind_pr_common+0xc0>
    586a:	f1ba 0f00 	cmp.w	sl, #0
    586e:	d023      	beq.n	58b8 <__gnu_unwind_pr_common+0x1e0>
    5870:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5874:	f104 0804 	add.w	r8, r4, #4
    5878:	f8cd b008 	str.w	fp, [sp, #8]
    587c:	f8dd 9000 	ldr.w	r9, [sp]
    5880:	46a3      	mov	fp, r4
    5882:	9703      	str	r7, [sp, #12]
    5884:	461c      	mov	r4, r3
    5886:	e002      	b.n	588e <__gnu_unwind_pr_common+0x1b6>
    5888:	4557      	cmp	r7, sl
    588a:	46b9      	mov	r9, r7
    588c:	d040      	beq.n	5910 <__gnu_unwind_pr_common+0x238>
    588e:	4640      	mov	r0, r8
    5890:	9404      	str	r4, [sp, #16]
    5892:	f7ff fda1 	bl	53d8 <_Unwind_decode_typeinfo_ptr.isra.0>
    5896:	ab04      	add	r3, sp, #16
    5898:	4601      	mov	r1, r0
    589a:	2200      	movs	r2, #0
    589c:	4628      	mov	r0, r5
    589e:	f3af 8000 	nop.w
    58a2:	f109 0701 	add.w	r7, r9, #1
    58a6:	f108 0804 	add.w	r8, r8, #4
    58aa:	2800      	cmp	r0, #0
    58ac:	d0ec      	beq.n	5888 <__gnu_unwind_pr_common+0x1b0>
    58ae:	45d1      	cmp	r9, sl
    58b0:	465c      	mov	r4, fp
    58b2:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    58b6:	d1d6      	bne.n	5866 <__gnu_unwind_pr_common+0x18e>
    58b8:	4630      	mov	r0, r6
    58ba:	210d      	movs	r1, #13
    58bc:	f7ff fea2 	bl	5604 <_Unwind_GetGR>
    58c0:	9b04      	ldr	r3, [sp, #16]
    58c2:	6228      	str	r0, [r5, #32]
    58c4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    58c8:	2006      	movs	r0, #6
    58ca:	e773      	b.n	57b4 <__gnu_unwind_pr_common+0xdc>
    58cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58ce:	429c      	cmp	r4, r3
    58d0:	d1c9      	bne.n	5866 <__gnu_unwind_pr_common+0x18e>
    58d2:	2204      	movs	r2, #4
    58d4:	f04f 0800 	mov.w	r8, #0
    58d8:	18a3      	adds	r3, r4, r2
    58da:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    58de:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    58e2:	6823      	ldr	r3, [r4, #0]
    58e4:	4543      	cmp	r3, r8
    58e6:	db4d      	blt.n	5984 <__gnu_unwind_pr_common+0x2ac>
    58e8:	2301      	movs	r3, #1
    58ea:	9301      	str	r3, [sp, #4]
    58ec:	e757      	b.n	579e <__gnu_unwind_pr_common+0xc6>
    58ee:	4680      	mov	r8, r0
    58f0:	210d      	movs	r1, #13
    58f2:	4630      	mov	r0, r6
    58f4:	f7ff fe86 	bl	5604 <_Unwind_GetGR>
    58f8:	f1b8 0f02 	cmp.w	r8, #2
    58fc:	6228      	str	r0, [r5, #32]
    58fe:	d13e      	bne.n	597e <__gnu_unwind_pr_common+0x2a6>
    5900:	462b      	mov	r3, r5
    5902:	9a04      	ldr	r2, [sp, #16]
    5904:	f843 2f2c 	str.w	r2, [r3, #44]!
    5908:	626b      	str	r3, [r5, #36]	; 0x24
    590a:	62ac      	str	r4, [r5, #40]	; 0x28
    590c:	2006      	movs	r0, #6
    590e:	e751      	b.n	57b4 <__gnu_unwind_pr_common+0xdc>
    5910:	465c      	mov	r4, fp
    5912:	e7d1      	b.n	58b8 <__gnu_unwind_pr_common+0x1e0>
    5914:	a905      	add	r1, sp, #20
    5916:	4630      	mov	r0, r6
    5918:	f000 fa92 	bl	5e40 <__gnu_unwind_execute>
    591c:	2800      	cmp	r0, #0
    591e:	f47f af48 	bne.w	57b2 <__gnu_unwind_pr_common+0xda>
    5922:	9b01      	ldr	r3, [sp, #4]
    5924:	2b00      	cmp	r3, #0
    5926:	f43f af54 	beq.w	57d2 <__gnu_unwind_pr_common+0xfa>
    592a:	210f      	movs	r1, #15
    592c:	4630      	mov	r0, r6
    592e:	f7ff fe69 	bl	5604 <_Unwind_GetGR>
    5932:	210e      	movs	r1, #14
    5934:	4602      	mov	r2, r0
    5936:	4630      	mov	r0, r6
    5938:	f7ff fe86 	bl	5648 <_Unwind_SetGR>
    593c:	4630      	mov	r0, r6
    593e:	4a1a      	ldr	r2, [pc, #104]	; (59a8 <__gnu_unwind_pr_common+0x2d0>)
    5940:	210f      	movs	r1, #15
    5942:	f7ff fe81 	bl	5648 <_Unwind_SetGR>
    5946:	2007      	movs	r0, #7
    5948:	b009      	add	sp, #36	; 0x24
    594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    594e:	4620      	mov	r0, r4
    5950:	f7ff fc74 	bl	523c <selfrel_offset31>
    5954:	3404      	adds	r4, #4
    5956:	4607      	mov	r7, r0
    5958:	63ac      	str	r4, [r5, #56]	; 0x38
    595a:	4628      	mov	r0, r5
    595c:	f3af 8000 	nop.w
    5960:	2800      	cmp	r0, #0
    5962:	f43f af26 	beq.w	57b2 <__gnu_unwind_pr_common+0xda>
    5966:	4630      	mov	r0, r6
    5968:	463a      	mov	r2, r7
    596a:	210f      	movs	r1, #15
    596c:	f7ff fe6c 	bl	5648 <_Unwind_SetGR>
    5970:	2007      	movs	r0, #7
    5972:	e71f      	b.n	57b4 <__gnu_unwind_pr_common+0xdc>
    5974:	4630      	mov	r0, r6
    5976:	210d      	movs	r1, #13
    5978:	f7ff fe44 	bl	5604 <_Unwind_GetGR>
    597c:	6228      	str	r0, [r5, #32]
    597e:	9b04      	ldr	r3, [sp, #16]
    5980:	626b      	str	r3, [r5, #36]	; 0x24
    5982:	e7c2      	b.n	590a <__gnu_unwind_pr_common+0x232>
    5984:	f10a 0001 	add.w	r0, sl, #1
    5988:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    598c:	f7ff fc56 	bl	523c <selfrel_offset31>
    5990:	210f      	movs	r1, #15
    5992:	4602      	mov	r2, r0
    5994:	4630      	mov	r0, r6
    5996:	f7ff fe57 	bl	5648 <_Unwind_SetGR>
    599a:	4630      	mov	r0, r6
    599c:	462a      	mov	r2, r5
    599e:	4641      	mov	r1, r8
    59a0:	f7ff fe52 	bl	5648 <_Unwind_SetGR>
    59a4:	2007      	movs	r0, #7
    59a6:	e705      	b.n	57b4 <__gnu_unwind_pr_common+0xdc>
    59a8:	00000000 	.word	0x00000000

000059ac <__aeabi_unwind_cpp_pr0>:
    59ac:	2300      	movs	r3, #0
    59ae:	e693      	b.n	56d8 <__gnu_unwind_pr_common>

000059b0 <__aeabi_unwind_cpp_pr1>:
    59b0:	2301      	movs	r3, #1
    59b2:	e691      	b.n	56d8 <__gnu_unwind_pr_common>

000059b4 <__aeabi_unwind_cpp_pr2>:
    59b4:	2302      	movs	r3, #2
    59b6:	e68f      	b.n	56d8 <__gnu_unwind_pr_common>

000059b8 <_Unwind_VRS_Pop>:
    59b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59bc:	4605      	mov	r5, r0
    59be:	b0c4      	sub	sp, #272	; 0x110
    59c0:	2904      	cmp	r1, #4
    59c2:	d806      	bhi.n	59d2 <_Unwind_VRS_Pop+0x1a>
    59c4:	e8df f001 	tbb	[pc, r1]
    59c8:	03052b4d 	.word	0x03052b4d
    59cc:	09          	.byte	0x09
    59cd:	00          	.byte	0x00
    59ce:	2b03      	cmp	r3, #3
    59d0:	d05f      	beq.n	5a92 <_Unwind_VRS_Pop+0xda>
    59d2:	2002      	movs	r0, #2
    59d4:	b044      	add	sp, #272	; 0x110
    59d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59da:	2b00      	cmp	r3, #0
    59dc:	d1f9      	bne.n	59d2 <_Unwind_VRS_Pop+0x1a>
    59de:	2a10      	cmp	r2, #16
    59e0:	d8f7      	bhi.n	59d2 <_Unwind_VRS_Pop+0x1a>
    59e2:	682b      	ldr	r3, [r5, #0]
    59e4:	06dc      	lsls	r4, r3, #27
    59e6:	f100 80f6 	bmi.w	5bd6 <_Unwind_VRS_Pop+0x21e>
    59ea:	ac22      	add	r4, sp, #136	; 0x88
    59ec:	4620      	mov	r0, r4
    59ee:	9201      	str	r2, [sp, #4]
    59f0:	2601      	movs	r6, #1
    59f2:	f000 f995 	bl	5d20 <__gnu_Unwind_Save_WMMXC>
    59f6:	2300      	movs	r3, #0
    59f8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    59fa:	9a01      	ldr	r2, [sp, #4]
    59fc:	fa06 f103 	lsl.w	r1, r6, r3
    5a00:	4211      	tst	r1, r2
    5a02:	d003      	beq.n	5a0c <_Unwind_VRS_Pop+0x54>
    5a04:	6801      	ldr	r1, [r0, #0]
    5a06:	3004      	adds	r0, #4
    5a08:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    5a0c:	3301      	adds	r3, #1
    5a0e:	2b04      	cmp	r3, #4
    5a10:	d1f4      	bne.n	59fc <_Unwind_VRS_Pop+0x44>
    5a12:	63a8      	str	r0, [r5, #56]	; 0x38
    5a14:	4620      	mov	r0, r4
    5a16:	f000 f979 	bl	5d0c <__gnu_Unwind_Restore_WMMXC>
    5a1a:	2000      	movs	r0, #0
    5a1c:	e7da      	b.n	59d4 <_Unwind_VRS_Pop+0x1c>
    5a1e:	2b01      	cmp	r3, #1
    5a20:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5a24:	b297      	uxth	r7, r2
    5a26:	d054      	beq.n	5ad2 <_Unwind_VRS_Pop+0x11a>
    5a28:	2b05      	cmp	r3, #5
    5a2a:	d1d2      	bne.n	59d2 <_Unwind_VRS_Pop+0x1a>
    5a2c:	eb06 0807 	add.w	r8, r6, r7
    5a30:	f1b8 0f20 	cmp.w	r8, #32
    5a34:	d8cd      	bhi.n	59d2 <_Unwind_VRS_Pop+0x1a>
    5a36:	2e0f      	cmp	r6, #15
    5a38:	f240 809b 	bls.w	5b72 <_Unwind_VRS_Pop+0x1ba>
    5a3c:	46b8      	mov	r8, r7
    5a3e:	2f00      	cmp	r7, #0
    5a40:	f040 80dd 	bne.w	5bfe <_Unwind_VRS_Pop+0x246>
    5a44:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5a46:	2e0f      	cmp	r6, #15
    5a48:	63aa      	str	r2, [r5, #56]	; 0x38
    5a4a:	f240 80c0 	bls.w	5bce <_Unwind_VRS_Pop+0x216>
    5a4e:	f1b8 0f00 	cmp.w	r8, #0
    5a52:	d002      	beq.n	5a5a <_Unwind_VRS_Pop+0xa2>
    5a54:	a802      	add	r0, sp, #8
    5a56:	f000 f90d 	bl	5c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5a5a:	2000      	movs	r0, #0
    5a5c:	b044      	add	sp, #272	; 0x110
    5a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a62:	2b00      	cmp	r3, #0
    5a64:	d1b5      	bne.n	59d2 <_Unwind_VRS_Pop+0x1a>
    5a66:	2701      	movs	r7, #1
    5a68:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5a6a:	b296      	uxth	r6, r2
    5a6c:	1d28      	adds	r0, r5, #4
    5a6e:	fa07 f103 	lsl.w	r1, r7, r3
    5a72:	4231      	tst	r1, r6
    5a74:	f103 0301 	add.w	r3, r3, #1
    5a78:	d002      	beq.n	5a80 <_Unwind_VRS_Pop+0xc8>
    5a7a:	6821      	ldr	r1, [r4, #0]
    5a7c:	3404      	adds	r4, #4
    5a7e:	6001      	str	r1, [r0, #0]
    5a80:	2b10      	cmp	r3, #16
    5a82:	f100 0004 	add.w	r0, r0, #4
    5a86:	d1f2      	bne.n	5a6e <_Unwind_VRS_Pop+0xb6>
    5a88:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5a8c:	d1e5      	bne.n	5a5a <_Unwind_VRS_Pop+0xa2>
    5a8e:	63ac      	str	r4, [r5, #56]	; 0x38
    5a90:	e7a0      	b.n	59d4 <_Unwind_VRS_Pop+0x1c>
    5a92:	0c16      	lsrs	r6, r2, #16
    5a94:	b297      	uxth	r7, r2
    5a96:	19f3      	adds	r3, r6, r7
    5a98:	2b10      	cmp	r3, #16
    5a9a:	d89a      	bhi.n	59d2 <_Unwind_VRS_Pop+0x1a>
    5a9c:	682b      	ldr	r3, [r5, #0]
    5a9e:	071a      	lsls	r2, r3, #28
    5aa0:	d45f      	bmi.n	5b62 <_Unwind_VRS_Pop+0x1aa>
    5aa2:	ac22      	add	r4, sp, #136	; 0x88
    5aa4:	4620      	mov	r0, r4
    5aa6:	f000 f90f 	bl	5cc8 <__gnu_Unwind_Save_WMMXD>
    5aaa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5aae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5ab0:	b14f      	cbz	r7, 5ac6 <_Unwind_VRS_Pop+0x10e>
    5ab2:	4603      	mov	r3, r0
    5ab4:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    5ab8:	681a      	ldr	r2, [r3, #0]
    5aba:	3304      	adds	r3, #4
    5abc:	4283      	cmp	r3, r0
    5abe:	f841 2b04 	str.w	r2, [r1], #4
    5ac2:	d1f9      	bne.n	5ab8 <_Unwind_VRS_Pop+0x100>
    5ac4:	4618      	mov	r0, r3
    5ac6:	63a8      	str	r0, [r5, #56]	; 0x38
    5ac8:	4620      	mov	r0, r4
    5aca:	f000 f8db 	bl	5c84 <__gnu_Unwind_Restore_WMMXD>
    5ace:	2000      	movs	r0, #0
    5ad0:	e780      	b.n	59d4 <_Unwind_VRS_Pop+0x1c>
    5ad2:	19f2      	adds	r2, r6, r7
    5ad4:	2a10      	cmp	r2, #16
    5ad6:	f63f af7c 	bhi.w	59d2 <_Unwind_VRS_Pop+0x1a>
    5ada:	2e0f      	cmp	r6, #15
    5adc:	f63f af79 	bhi.w	59d2 <_Unwind_VRS_Pop+0x1a>
    5ae0:	682a      	ldr	r2, [r5, #0]
    5ae2:	07d1      	lsls	r1, r2, #31
    5ae4:	d508      	bpl.n	5af8 <_Unwind_VRS_Pop+0x140>
    5ae6:	4628      	mov	r0, r5
    5ae8:	f022 0203 	bic.w	r2, r2, #3
    5aec:	f840 2b48 	str.w	r2, [r0], #72
    5af0:	9301      	str	r3, [sp, #4]
    5af2:	f000 f8b3 	bl	5c5c <__gnu_Unwind_Save_VFP>
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	ac22      	add	r4, sp, #136	; 0x88
    5afa:	4620      	mov	r0, r4
    5afc:	9301      	str	r3, [sp, #4]
    5afe:	f000 f8ad 	bl	5c5c <__gnu_Unwind_Save_VFP>
    5b02:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	2f00      	cmp	r7, #0
    5b08:	f000 8095 	beq.w	5c36 <_Unwind_VRS_Pop+0x27e>
    5b0c:	f04f 0800 	mov.w	r8, #0
    5b10:	007a      	lsls	r2, r7, #1
    5b12:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5b16:	3c04      	subs	r4, #4
    5b18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5b1c:	f851 0b04 	ldr.w	r0, [r1], #4
    5b20:	4291      	cmp	r1, r2
    5b22:	f844 0f04 	str.w	r0, [r4, #4]!
    5b26:	d1f9      	bne.n	5b1c <_Unwind_VRS_Pop+0x164>
    5b28:	f1b8 0f00 	cmp.w	r8, #0
    5b2c:	d00f      	beq.n	5b4e <_Unwind_VRS_Pop+0x196>
    5b2e:	ac02      	add	r4, sp, #8
    5b30:	2e10      	cmp	r6, #16
    5b32:	4631      	mov	r1, r6
    5b34:	bf38      	it	cc
    5b36:	2110      	movcc	r1, #16
    5b38:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5b3c:	3984      	subs	r1, #132	; 0x84
    5b3e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    5b42:	f852 0b04 	ldr.w	r0, [r2], #4
    5b46:	4294      	cmp	r4, r2
    5b48:	f841 0f04 	str.w	r0, [r1, #4]!
    5b4c:	d1f9      	bne.n	5b42 <_Unwind_VRS_Pop+0x18a>
    5b4e:	2b01      	cmp	r3, #1
    5b50:	f47f af79 	bne.w	5a46 <_Unwind_VRS_Pop+0x8e>
    5b54:	ac22      	add	r4, sp, #136	; 0x88
    5b56:	3204      	adds	r2, #4
    5b58:	63aa      	str	r2, [r5, #56]	; 0x38
    5b5a:	4620      	mov	r0, r4
    5b5c:	f000 f87a 	bl	5c54 <__gnu_Unwind_Restore_VFP>
    5b60:	e77b      	b.n	5a5a <_Unwind_VRS_Pop+0xa2>
    5b62:	f023 0308 	bic.w	r3, r3, #8
    5b66:	602b      	str	r3, [r5, #0]
    5b68:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5b6c:	f000 f8ac 	bl	5cc8 <__gnu_Unwind_Save_WMMXD>
    5b70:	e797      	b.n	5aa2 <_Unwind_VRS_Pop+0xea>
    5b72:	f1b8 0f10 	cmp.w	r8, #16
    5b76:	682a      	ldr	r2, [r5, #0]
    5b78:	d943      	bls.n	5c02 <_Unwind_VRS_Pop+0x24a>
    5b7a:	07d0      	lsls	r0, r2, #31
    5b7c:	f1a8 0810 	sub.w	r8, r8, #16
    5b80:	d50b      	bpl.n	5b9a <_Unwind_VRS_Pop+0x1e2>
    5b82:	4628      	mov	r0, r5
    5b84:	f022 0201 	bic.w	r2, r2, #1
    5b88:	f042 0202 	orr.w	r2, r2, #2
    5b8c:	f840 2b48 	str.w	r2, [r0], #72
    5b90:	9301      	str	r3, [sp, #4]
    5b92:	f000 f86b 	bl	5c6c <__gnu_Unwind_Save_VFP_D>
    5b96:	682a      	ldr	r2, [r5, #0]
    5b98:	9b01      	ldr	r3, [sp, #4]
    5b9a:	0751      	lsls	r1, r2, #29
    5b9c:	d425      	bmi.n	5bea <_Unwind_VRS_Pop+0x232>
    5b9e:	2e0f      	cmp	r6, #15
    5ba0:	d804      	bhi.n	5bac <_Unwind_VRS_Pop+0x1f4>
    5ba2:	a822      	add	r0, sp, #136	; 0x88
    5ba4:	9301      	str	r3, [sp, #4]
    5ba6:	f000 f861 	bl	5c6c <__gnu_Unwind_Save_VFP_D>
    5baa:	9b01      	ldr	r3, [sp, #4]
    5bac:	ac02      	add	r4, sp, #8
    5bae:	4620      	mov	r0, r4
    5bb0:	9301      	str	r3, [sp, #4]
    5bb2:	f000 f863 	bl	5c7c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5bb6:	f1c6 0010 	rsb	r0, r6, #16
    5bba:	2800      	cmp	r0, #0
    5bbc:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5bbe:	9b01      	ldr	r3, [sp, #4]
    5bc0:	ddb6      	ble.n	5b30 <_Unwind_VRS_Pop+0x178>
    5bc2:	ac22      	add	r4, sp, #136	; 0x88
    5bc4:	4611      	mov	r1, r2
    5bc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5bca:	0042      	lsls	r2, r0, #1
    5bcc:	e7a3      	b.n	5b16 <_Unwind_VRS_Pop+0x15e>
    5bce:	a822      	add	r0, sp, #136	; 0x88
    5bd0:	f000 f848 	bl	5c64 <__gnu_Unwind_Restore_VFP_D>
    5bd4:	e73b      	b.n	5a4e <_Unwind_VRS_Pop+0x96>
    5bd6:	f023 0310 	bic.w	r3, r3, #16
    5bda:	602b      	str	r3, [r5, #0]
    5bdc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5be0:	9201      	str	r2, [sp, #4]
    5be2:	f000 f89d 	bl	5d20 <__gnu_Unwind_Save_WMMXC>
    5be6:	9a01      	ldr	r2, [sp, #4]
    5be8:	e6ff      	b.n	59ea <_Unwind_VRS_Pop+0x32>
    5bea:	4628      	mov	r0, r5
    5bec:	f022 0204 	bic.w	r2, r2, #4
    5bf0:	f840 2bd0 	str.w	r2, [r0], #208
    5bf4:	9301      	str	r3, [sp, #4]
    5bf6:	f000 f841 	bl	5c7c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5bfa:	9b01      	ldr	r3, [sp, #4]
    5bfc:	e7cf      	b.n	5b9e <_Unwind_VRS_Pop+0x1e6>
    5bfe:	682a      	ldr	r2, [r5, #0]
    5c00:	e7cb      	b.n	5b9a <_Unwind_VRS_Pop+0x1e2>
    5c02:	07d0      	lsls	r0, r2, #31
    5c04:	d50a      	bpl.n	5c1c <_Unwind_VRS_Pop+0x264>
    5c06:	4628      	mov	r0, r5
    5c08:	f022 0201 	bic.w	r2, r2, #1
    5c0c:	f042 0202 	orr.w	r2, r2, #2
    5c10:	f840 2b48 	str.w	r2, [r0], #72
    5c14:	9301      	str	r3, [sp, #4]
    5c16:	f000 f829 	bl	5c6c <__gnu_Unwind_Save_VFP_D>
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	ac22      	add	r4, sp, #136	; 0x88
    5c1e:	4620      	mov	r0, r4
    5c20:	9301      	str	r3, [sp, #4]
    5c22:	46b8      	mov	r8, r7
    5c24:	f000 f822 	bl	5c6c <__gnu_Unwind_Save_VFP_D>
    5c28:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5c2a:	9b01      	ldr	r3, [sp, #4]
    5c2c:	2f00      	cmp	r7, #0
    5c2e:	f47f af6d 	bne.w	5b0c <_Unwind_VRS_Pop+0x154>
    5c32:	460a      	mov	r2, r1
    5c34:	e707      	b.n	5a46 <_Unwind_VRS_Pop+0x8e>
    5c36:	460a      	mov	r2, r1
    5c38:	e78d      	b.n	5b56 <_Unwind_VRS_Pop+0x19e>
    5c3a:	bf00      	nop

00005c3c <__restore_core_regs>:
    5c3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5c40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5c44:	469c      	mov	ip, r3
    5c46:	46a6      	mov	lr, r4
    5c48:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5c4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5c50:	46e5      	mov	sp, ip
    5c52:	bd00      	pop	{pc}

00005c54 <__gnu_Unwind_Restore_VFP>:
    5c54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5c58:	4770      	bx	lr
    5c5a:	bf00      	nop

00005c5c <__gnu_Unwind_Save_VFP>:
    5c5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5c60:	4770      	bx	lr
    5c62:	bf00      	nop

00005c64 <__gnu_Unwind_Restore_VFP_D>:
    5c64:	ec90 0b20 	vldmia	r0, {d0-d15}
    5c68:	4770      	bx	lr
    5c6a:	bf00      	nop

00005c6c <__gnu_Unwind_Save_VFP_D>:
    5c6c:	ec80 0b20 	vstmia	r0, {d0-d15}
    5c70:	4770      	bx	lr
    5c72:	bf00      	nop

00005c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5c74:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop

00005c7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5c7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop

00005c84 <__gnu_Unwind_Restore_WMMXD>:
    5c84:	ecf0 0102 	ldfe	f0, [r0], #8
    5c88:	ecf0 1102 	ldfe	f1, [r0], #8
    5c8c:	ecf0 2102 	ldfe	f2, [r0], #8
    5c90:	ecf0 3102 	ldfe	f3, [r0], #8
    5c94:	ecf0 4102 	ldfe	f4, [r0], #8
    5c98:	ecf0 5102 	ldfe	f5, [r0], #8
    5c9c:	ecf0 6102 	ldfe	f6, [r0], #8
    5ca0:	ecf0 7102 	ldfe	f7, [r0], #8
    5ca4:	ecf0 8102 	ldfp	f0, [r0], #8
    5ca8:	ecf0 9102 	ldfp	f1, [r0], #8
    5cac:	ecf0 a102 	ldfp	f2, [r0], #8
    5cb0:	ecf0 b102 	ldfp	f3, [r0], #8
    5cb4:	ecf0 c102 	ldfp	f4, [r0], #8
    5cb8:	ecf0 d102 	ldfp	f5, [r0], #8
    5cbc:	ecf0 e102 	ldfp	f6, [r0], #8
    5cc0:	ecf0 f102 	ldfp	f7, [r0], #8
    5cc4:	4770      	bx	lr
    5cc6:	bf00      	nop

00005cc8 <__gnu_Unwind_Save_WMMXD>:
    5cc8:	ece0 0102 	stfe	f0, [r0], #8
    5ccc:	ece0 1102 	stfe	f1, [r0], #8
    5cd0:	ece0 2102 	stfe	f2, [r0], #8
    5cd4:	ece0 3102 	stfe	f3, [r0], #8
    5cd8:	ece0 4102 	stfe	f4, [r0], #8
    5cdc:	ece0 5102 	stfe	f5, [r0], #8
    5ce0:	ece0 6102 	stfe	f6, [r0], #8
    5ce4:	ece0 7102 	stfe	f7, [r0], #8
    5ce8:	ece0 8102 	stfp	f0, [r0], #8
    5cec:	ece0 9102 	stfp	f1, [r0], #8
    5cf0:	ece0 a102 	stfp	f2, [r0], #8
    5cf4:	ece0 b102 	stfp	f3, [r0], #8
    5cf8:	ece0 c102 	stfp	f4, [r0], #8
    5cfc:	ece0 d102 	stfp	f5, [r0], #8
    5d00:	ece0 e102 	stfp	f6, [r0], #8
    5d04:	ece0 f102 	stfp	f7, [r0], #8
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop

00005d0c <__gnu_Unwind_Restore_WMMXC>:
    5d0c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5d10:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5d14:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5d18:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5d1c:	4770      	bx	lr
    5d1e:	bf00      	nop

00005d20 <__gnu_Unwind_Save_WMMXC>:
    5d20:	fca0 8101 	stc2	1, cr8, [r0], #4
    5d24:	fca0 9101 	stc2	1, cr9, [r0], #4
    5d28:	fca0 a101 	stc2	1, cr10, [r0], #4
    5d2c:	fca0 b101 	stc2	1, cr11, [r0], #4
    5d30:	4770      	bx	lr
    5d32:	bf00      	nop

00005d34 <_Unwind_RaiseException>:
    5d34:	46ec      	mov	ip, sp
    5d36:	b500      	push	{lr}
    5d38:	e92d 5000 	stmdb	sp!, {ip, lr}
    5d3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5d40:	f04f 0300 	mov.w	r3, #0
    5d44:	e92d 000c 	stmdb	sp!, {r2, r3}
    5d48:	a901      	add	r1, sp, #4
    5d4a:	f7ff fbd7 	bl	54fc <__gnu_Unwind_RaiseException>
    5d4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5d52:	b012      	add	sp, #72	; 0x48
    5d54:	4770      	bx	lr
    5d56:	bf00      	nop

00005d58 <_Unwind_Resume>:
    5d58:	46ec      	mov	ip, sp
    5d5a:	b500      	push	{lr}
    5d5c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5d60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5d64:	f04f 0300 	mov.w	r3, #0
    5d68:	e92d 000c 	stmdb	sp!, {r2, r3}
    5d6c:	a901      	add	r1, sp, #4
    5d6e:	f7ff fbff 	bl	5570 <__gnu_Unwind_Resume>
    5d72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5d76:	b012      	add	sp, #72	; 0x48
    5d78:	4770      	bx	lr
    5d7a:	bf00      	nop

00005d7c <_Unwind_Resume_or_Rethrow>:
    5d7c:	46ec      	mov	ip, sp
    5d7e:	b500      	push	{lr}
    5d80:	e92d 5000 	stmdb	sp!, {ip, lr}
    5d84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5d88:	f04f 0300 	mov.w	r3, #0
    5d8c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5d90:	a901      	add	r1, sp, #4
    5d92:	f7ff fc0f 	bl	55b4 <__gnu_Unwind_Resume_or_Rethrow>
    5d96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5d9a:	b012      	add	sp, #72	; 0x48
    5d9c:	4770      	bx	lr
    5d9e:	bf00      	nop

00005da0 <_Unwind_ForcedUnwind>:
    5da0:	46ec      	mov	ip, sp
    5da2:	b500      	push	{lr}
    5da4:	e92d 5000 	stmdb	sp!, {ip, lr}
    5da8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5dac:	f04f 0300 	mov.w	r3, #0
    5db0:	e92d 000c 	stmdb	sp!, {r2, r3}
    5db4:	ab01      	add	r3, sp, #4
    5db6:	f7ff fbd1 	bl	555c <__gnu_Unwind_ForcedUnwind>
    5dba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5dbe:	b012      	add	sp, #72	; 0x48
    5dc0:	4770      	bx	lr
    5dc2:	bf00      	nop

00005dc4 <_Unwind_Backtrace>:
    5dc4:	46ec      	mov	ip, sp
    5dc6:	b500      	push	{lr}
    5dc8:	e92d 5000 	stmdb	sp!, {ip, lr}
    5dcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5dd0:	f04f 0300 	mov.w	r3, #0
    5dd4:	e92d 000c 	stmdb	sp!, {r2, r3}
    5dd8:	aa01      	add	r2, sp, #4
    5dda:	f7ff fc43 	bl	5664 <__gnu_Unwind_Backtrace>
    5dde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5de2:	b012      	add	sp, #72	; 0x48
    5de4:	4770      	bx	lr
    5de6:	bf00      	nop

00005de8 <next_unwind_byte>:
    5de8:	7a02      	ldrb	r2, [r0, #8]
    5dea:	b97a      	cbnz	r2, 5e0c <next_unwind_byte+0x24>
    5dec:	7a43      	ldrb	r3, [r0, #9]
    5dee:	b1a3      	cbz	r3, 5e1a <next_unwind_byte+0x32>
    5df0:	2103      	movs	r1, #3
    5df2:	6842      	ldr	r2, [r0, #4]
    5df4:	3b01      	subs	r3, #1
    5df6:	b410      	push	{r4}
    5df8:	7243      	strb	r3, [r0, #9]
    5dfa:	6813      	ldr	r3, [r2, #0]
    5dfc:	1d14      	adds	r4, r2, #4
    5dfe:	7201      	strb	r1, [r0, #8]
    5e00:	021a      	lsls	r2, r3, #8
    5e02:	6044      	str	r4, [r0, #4]
    5e04:	6002      	str	r2, [r0, #0]
    5e06:	bc10      	pop	{r4}
    5e08:	0e18      	lsrs	r0, r3, #24
    5e0a:	4770      	bx	lr
    5e0c:	6803      	ldr	r3, [r0, #0]
    5e0e:	3a01      	subs	r2, #1
    5e10:	7202      	strb	r2, [r0, #8]
    5e12:	021a      	lsls	r2, r3, #8
    5e14:	6002      	str	r2, [r0, #0]
    5e16:	0e18      	lsrs	r0, r3, #24
    5e18:	4770      	bx	lr
    5e1a:	20b0      	movs	r0, #176	; 0xb0
    5e1c:	4770      	bx	lr
    5e1e:	bf00      	nop

00005e20 <_Unwind_GetGR.constprop.0>:
    5e20:	2300      	movs	r3, #0
    5e22:	b500      	push	{lr}
    5e24:	b085      	sub	sp, #20
    5e26:	aa03      	add	r2, sp, #12
    5e28:	9200      	str	r2, [sp, #0]
    5e2a:	4619      	mov	r1, r3
    5e2c:	220c      	movs	r2, #12
    5e2e:	f7ff fbd3 	bl	55d8 <_Unwind_VRS_Get>
    5e32:	9803      	ldr	r0, [sp, #12]
    5e34:	b005      	add	sp, #20
    5e36:	f85d fb04 	ldr.w	pc, [sp], #4
    5e3a:	bf00      	nop

00005e3c <unwind_UCB_from_context>:
    5e3c:	e7f0      	b.n	5e20 <_Unwind_GetGR.constprop.0>
    5e3e:	bf00      	nop

00005e40 <__gnu_unwind_execute>:
    5e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5e44:	4605      	mov	r5, r0
    5e46:	460e      	mov	r6, r1
    5e48:	f04f 0800 	mov.w	r8, #0
    5e4c:	b085      	sub	sp, #20
    5e4e:	4630      	mov	r0, r6
    5e50:	f7ff ffca 	bl	5de8 <next_unwind_byte>
    5e54:	28b0      	cmp	r0, #176	; 0xb0
    5e56:	4604      	mov	r4, r0
    5e58:	f000 80b0 	beq.w	5fbc <__gnu_unwind_execute+0x17c>
    5e5c:	0607      	lsls	r7, r0, #24
    5e5e:	d520      	bpl.n	5ea2 <__gnu_unwind_execute+0x62>
    5e60:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5e64:	2b80      	cmp	r3, #128	; 0x80
    5e66:	d065      	beq.n	5f34 <__gnu_unwind_execute+0xf4>
    5e68:	2b90      	cmp	r3, #144	; 0x90
    5e6a:	d036      	beq.n	5eda <__gnu_unwind_execute+0x9a>
    5e6c:	2ba0      	cmp	r3, #160	; 0xa0
    5e6e:	d078      	beq.n	5f62 <__gnu_unwind_execute+0x122>
    5e70:	2bb0      	cmp	r3, #176	; 0xb0
    5e72:	d047      	beq.n	5f04 <__gnu_unwind_execute+0xc4>
    5e74:	2bc0      	cmp	r3, #192	; 0xc0
    5e76:	f000 8089 	beq.w	5f8c <__gnu_unwind_execute+0x14c>
    5e7a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5e7e:	2bd0      	cmp	r3, #208	; 0xd0
    5e80:	d10b      	bne.n	5e9a <__gnu_unwind_execute+0x5a>
    5e82:	f000 0207 	and.w	r2, r0, #7
    5e86:	3201      	adds	r2, #1
    5e88:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5e8c:	2305      	movs	r3, #5
    5e8e:	2101      	movs	r1, #1
    5e90:	4628      	mov	r0, r5
    5e92:	f7ff fd91 	bl	59b8 <_Unwind_VRS_Pop>
    5e96:	2800      	cmp	r0, #0
    5e98:	d0d9      	beq.n	5e4e <__gnu_unwind_execute+0xe>
    5e9a:	2009      	movs	r0, #9
    5e9c:	b005      	add	sp, #20
    5e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ea2:	2300      	movs	r3, #0
    5ea4:	f10d 090c 	add.w	r9, sp, #12
    5ea8:	4619      	mov	r1, r3
    5eaa:	0087      	lsls	r7, r0, #2
    5eac:	f8cd 9000 	str.w	r9, [sp]
    5eb0:	220d      	movs	r2, #13
    5eb2:	4628      	mov	r0, r5
    5eb4:	f7ff fb90 	bl	55d8 <_Unwind_VRS_Get>
    5eb8:	b2ff      	uxtb	r7, r7
    5eba:	9b03      	ldr	r3, [sp, #12]
    5ebc:	3704      	adds	r7, #4
    5ebe:	0660      	lsls	r0, r4, #25
    5ec0:	bf4c      	ite	mi
    5ec2:	1bdf      	submi	r7, r3, r7
    5ec4:	18ff      	addpl	r7, r7, r3
    5ec6:	2300      	movs	r3, #0
    5ec8:	f8cd 9000 	str.w	r9, [sp]
    5ecc:	4619      	mov	r1, r3
    5ece:	220d      	movs	r2, #13
    5ed0:	4628      	mov	r0, r5
    5ed2:	9703      	str	r7, [sp, #12]
    5ed4:	f7ff fba2 	bl	561c <_Unwind_VRS_Set>
    5ed8:	e7b9      	b.n	5e4e <__gnu_unwind_execute+0xe>
    5eda:	f000 030d 	and.w	r3, r0, #13
    5ede:	2b0d      	cmp	r3, #13
    5ee0:	d0db      	beq.n	5e9a <__gnu_unwind_execute+0x5a>
    5ee2:	2300      	movs	r3, #0
    5ee4:	af03      	add	r7, sp, #12
    5ee6:	f000 020f 	and.w	r2, r0, #15
    5eea:	4619      	mov	r1, r3
    5eec:	9700      	str	r7, [sp, #0]
    5eee:	4628      	mov	r0, r5
    5ef0:	f7ff fb72 	bl	55d8 <_Unwind_VRS_Get>
    5ef4:	2300      	movs	r3, #0
    5ef6:	9700      	str	r7, [sp, #0]
    5ef8:	4619      	mov	r1, r3
    5efa:	220d      	movs	r2, #13
    5efc:	4628      	mov	r0, r5
    5efe:	f7ff fb8d 	bl	561c <_Unwind_VRS_Set>
    5f02:	e7a4      	b.n	5e4e <__gnu_unwind_execute+0xe>
    5f04:	28b1      	cmp	r0, #177	; 0xb1
    5f06:	d05e      	beq.n	5fc6 <__gnu_unwind_execute+0x186>
    5f08:	28b2      	cmp	r0, #178	; 0xb2
    5f0a:	f000 80cb 	beq.w	60a4 <__gnu_unwind_execute+0x264>
    5f0e:	28b3      	cmp	r0, #179	; 0xb3
    5f10:	d07d      	beq.n	600e <__gnu_unwind_execute+0x1ce>
    5f12:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    5f16:	2bb4      	cmp	r3, #180	; 0xb4
    5f18:	d0bf      	beq.n	5e9a <__gnu_unwind_execute+0x5a>
    5f1a:	2301      	movs	r3, #1
    5f1c:	f000 0207 	and.w	r2, r0, #7
    5f20:	441a      	add	r2, r3
    5f22:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5f26:	4619      	mov	r1, r3
    5f28:	4628      	mov	r0, r5
    5f2a:	f7ff fd45 	bl	59b8 <_Unwind_VRS_Pop>
    5f2e:	2800      	cmp	r0, #0
    5f30:	d08d      	beq.n	5e4e <__gnu_unwind_execute+0xe>
    5f32:	e7b2      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    5f34:	4630      	mov	r0, r6
    5f36:	f7ff ff57 	bl	5de8 <next_unwind_byte>
    5f3a:	0224      	lsls	r4, r4, #8
    5f3c:	4304      	orrs	r4, r0
    5f3e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5f42:	d0aa      	beq.n	5e9a <__gnu_unwind_execute+0x5a>
    5f44:	2300      	movs	r3, #0
    5f46:	0124      	lsls	r4, r4, #4
    5f48:	b2a2      	uxth	r2, r4
    5f4a:	4619      	mov	r1, r3
    5f4c:	4628      	mov	r0, r5
    5f4e:	f7ff fd33 	bl	59b8 <_Unwind_VRS_Pop>
    5f52:	2800      	cmp	r0, #0
    5f54:	d1a1      	bne.n	5e9a <__gnu_unwind_execute+0x5a>
    5f56:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5f5a:	bf18      	it	ne
    5f5c:	f04f 0801 	movne.w	r8, #1
    5f60:	e775      	b.n	5e4e <__gnu_unwind_execute+0xe>
    5f62:	43c3      	mvns	r3, r0
    5f64:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    5f68:	f003 0307 	and.w	r3, r3, #7
    5f6c:	411a      	asrs	r2, r3
    5f6e:	2300      	movs	r3, #0
    5f70:	0701      	lsls	r1, r0, #28
    5f72:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5f76:	bf48      	it	mi
    5f78:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    5f7c:	4619      	mov	r1, r3
    5f7e:	4628      	mov	r0, r5
    5f80:	f7ff fd1a 	bl	59b8 <_Unwind_VRS_Pop>
    5f84:	2800      	cmp	r0, #0
    5f86:	f43f af62 	beq.w	5e4e <__gnu_unwind_execute+0xe>
    5f8a:	e786      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    5f8c:	28c6      	cmp	r0, #198	; 0xc6
    5f8e:	d051      	beq.n	6034 <__gnu_unwind_execute+0x1f4>
    5f90:	28c7      	cmp	r0, #199	; 0xc7
    5f92:	d05a      	beq.n	604a <__gnu_unwind_execute+0x20a>
    5f94:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5f98:	2bc0      	cmp	r3, #192	; 0xc0
    5f9a:	d069      	beq.n	6070 <__gnu_unwind_execute+0x230>
    5f9c:	28c8      	cmp	r0, #200	; 0xc8
    5f9e:	d075      	beq.n	608c <__gnu_unwind_execute+0x24c>
    5fa0:	28c9      	cmp	r0, #201	; 0xc9
    5fa2:	f47f af7a 	bne.w	5e9a <__gnu_unwind_execute+0x5a>
    5fa6:	4630      	mov	r0, r6
    5fa8:	f7ff ff1e 	bl	5de8 <next_unwind_byte>
    5fac:	0302      	lsls	r2, r0, #12
    5fae:	f000 000f 	and.w	r0, r0, #15
    5fb2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5fb6:	3001      	adds	r0, #1
    5fb8:	4302      	orrs	r2, r0
    5fba:	e767      	b.n	5e8c <__gnu_unwind_execute+0x4c>
    5fbc:	f1b8 0f00 	cmp.w	r8, #0
    5fc0:	d014      	beq.n	5fec <__gnu_unwind_execute+0x1ac>
    5fc2:	2000      	movs	r0, #0
    5fc4:	e76a      	b.n	5e9c <__gnu_unwind_execute+0x5c>
    5fc6:	4630      	mov	r0, r6
    5fc8:	f7ff ff0e 	bl	5de8 <next_unwind_byte>
    5fcc:	2800      	cmp	r0, #0
    5fce:	f43f af64 	beq.w	5e9a <__gnu_unwind_execute+0x5a>
    5fd2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5fd6:	f47f af60 	bne.w	5e9a <__gnu_unwind_execute+0x5a>
    5fda:	4602      	mov	r2, r0
    5fdc:	4619      	mov	r1, r3
    5fde:	4628      	mov	r0, r5
    5fe0:	f7ff fcea 	bl	59b8 <_Unwind_VRS_Pop>
    5fe4:	2800      	cmp	r0, #0
    5fe6:	f43f af32 	beq.w	5e4e <__gnu_unwind_execute+0xe>
    5fea:	e756      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    5fec:	ac03      	add	r4, sp, #12
    5fee:	4643      	mov	r3, r8
    5ff0:	220e      	movs	r2, #14
    5ff2:	4641      	mov	r1, r8
    5ff4:	9400      	str	r4, [sp, #0]
    5ff6:	4628      	mov	r0, r5
    5ff8:	f7ff faee 	bl	55d8 <_Unwind_VRS_Get>
    5ffc:	9400      	str	r4, [sp, #0]
    5ffe:	4628      	mov	r0, r5
    6000:	4643      	mov	r3, r8
    6002:	220f      	movs	r2, #15
    6004:	4641      	mov	r1, r8
    6006:	f7ff fb09 	bl	561c <_Unwind_VRS_Set>
    600a:	4640      	mov	r0, r8
    600c:	e746      	b.n	5e9c <__gnu_unwind_execute+0x5c>
    600e:	4630      	mov	r0, r6
    6010:	f7ff feea 	bl	5de8 <next_unwind_byte>
    6014:	2301      	movs	r3, #1
    6016:	0301      	lsls	r1, r0, #12
    6018:	f000 000f 	and.w	r0, r0, #15
    601c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6020:	18c2      	adds	r2, r0, r3
    6022:	430a      	orrs	r2, r1
    6024:	4628      	mov	r0, r5
    6026:	4619      	mov	r1, r3
    6028:	f7ff fcc6 	bl	59b8 <_Unwind_VRS_Pop>
    602c:	2800      	cmp	r0, #0
    602e:	f43f af0e 	beq.w	5e4e <__gnu_unwind_execute+0xe>
    6032:	e732      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    6034:	4630      	mov	r0, r6
    6036:	f7ff fed7 	bl	5de8 <next_unwind_byte>
    603a:	0301      	lsls	r1, r0, #12
    603c:	f000 000f 	and.w	r0, r0, #15
    6040:	2303      	movs	r3, #3
    6042:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6046:	1c42      	adds	r2, r0, #1
    6048:	e7eb      	b.n	6022 <__gnu_unwind_execute+0x1e2>
    604a:	4630      	mov	r0, r6
    604c:	f7ff fecc 	bl	5de8 <next_unwind_byte>
    6050:	4602      	mov	r2, r0
    6052:	2800      	cmp	r0, #0
    6054:	f43f af21 	beq.w	5e9a <__gnu_unwind_execute+0x5a>
    6058:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    605c:	f47f af1d 	bne.w	5e9a <__gnu_unwind_execute+0x5a>
    6060:	2104      	movs	r1, #4
    6062:	4628      	mov	r0, r5
    6064:	f7ff fca8 	bl	59b8 <_Unwind_VRS_Pop>
    6068:	2800      	cmp	r0, #0
    606a:	f43f aef0 	beq.w	5e4e <__gnu_unwind_execute+0xe>
    606e:	e714      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    6070:	2303      	movs	r3, #3
    6072:	f000 020f 	and.w	r2, r0, #15
    6076:	3201      	adds	r2, #1
    6078:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    607c:	4619      	mov	r1, r3
    607e:	4628      	mov	r0, r5
    6080:	f7ff fc9a 	bl	59b8 <_Unwind_VRS_Pop>
    6084:	2800      	cmp	r0, #0
    6086:	f43f aee2 	beq.w	5e4e <__gnu_unwind_execute+0xe>
    608a:	e706      	b.n	5e9a <__gnu_unwind_execute+0x5a>
    608c:	4630      	mov	r0, r6
    608e:	f7ff feab 	bl	5de8 <next_unwind_byte>
    6092:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    6096:	f000 030f 	and.w	r3, r0, #15
    609a:	3210      	adds	r2, #16
    609c:	3301      	adds	r3, #1
    609e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    60a2:	e6f3      	b.n	5e8c <__gnu_unwind_execute+0x4c>
    60a4:	2300      	movs	r3, #0
    60a6:	f10d 090c 	add.w	r9, sp, #12
    60aa:	220d      	movs	r2, #13
    60ac:	4619      	mov	r1, r3
    60ae:	f8cd 9000 	str.w	r9, [sp]
    60b2:	4628      	mov	r0, r5
    60b4:	f7ff fa90 	bl	55d8 <_Unwind_VRS_Get>
    60b8:	4630      	mov	r0, r6
    60ba:	f7ff fe95 	bl	5de8 <next_unwind_byte>
    60be:	0602      	lsls	r2, r0, #24
    60c0:	f04f 0702 	mov.w	r7, #2
    60c4:	d50c      	bpl.n	60e0 <__gnu_unwind_execute+0x2a0>
    60c6:	9b03      	ldr	r3, [sp, #12]
    60c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    60cc:	40b8      	lsls	r0, r7
    60ce:	4403      	add	r3, r0
    60d0:	4630      	mov	r0, r6
    60d2:	9303      	str	r3, [sp, #12]
    60d4:	f7ff fe88 	bl	5de8 <next_unwind_byte>
    60d8:	0603      	lsls	r3, r0, #24
    60da:	f107 0707 	add.w	r7, r7, #7
    60de:	d4f2      	bmi.n	60c6 <__gnu_unwind_execute+0x286>
    60e0:	2300      	movs	r3, #0
    60e2:	9a03      	ldr	r2, [sp, #12]
    60e4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    60e8:	40bc      	lsls	r4, r7
    60ea:	f502 7201 	add.w	r2, r2, #516	; 0x204
    60ee:	4414      	add	r4, r2
    60f0:	f8cd 9000 	str.w	r9, [sp]
    60f4:	4619      	mov	r1, r3
    60f6:	220d      	movs	r2, #13
    60f8:	4628      	mov	r0, r5
    60fa:	9403      	str	r4, [sp, #12]
    60fc:	f7ff fa8e 	bl	561c <_Unwind_VRS_Set>
    6100:	e6a5      	b.n	5e4e <__gnu_unwind_execute+0xe>
    6102:	bf00      	nop

00006104 <__gnu_unwind_frame>:
    6104:	b530      	push	{r4, r5, lr}
    6106:	2403      	movs	r4, #3
    6108:	460d      	mov	r5, r1
    610a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    610c:	b085      	sub	sp, #20
    610e:	685a      	ldr	r2, [r3, #4]
    6110:	f88d 400c 	strb.w	r4, [sp, #12]
    6114:	79dc      	ldrb	r4, [r3, #7]
    6116:	0212      	lsls	r2, r2, #8
    6118:	3308      	adds	r3, #8
    611a:	a901      	add	r1, sp, #4
    611c:	4628      	mov	r0, r5
    611e:	9201      	str	r2, [sp, #4]
    6120:	f88d 400d 	strb.w	r4, [sp, #13]
    6124:	9302      	str	r3, [sp, #8]
    6126:	f7ff fe8b 	bl	5e40 <__gnu_unwind_execute>
    612a:	b005      	add	sp, #20
    612c:	bd30      	pop	{r4, r5, pc}
    612e:	bf00      	nop

00006130 <_Unwind_GetRegionStart>:
    6130:	b508      	push	{r3, lr}
    6132:	f7ff fe83 	bl	5e3c <unwind_UCB_from_context>
    6136:	6c80      	ldr	r0, [r0, #72]	; 0x48
    6138:	bd08      	pop	{r3, pc}
    613a:	bf00      	nop

0000613c <_Unwind_GetLanguageSpecificData>:
    613c:	b508      	push	{r3, lr}
    613e:	f7ff fe7d 	bl	5e3c <unwind_UCB_from_context>
    6142:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6144:	79c3      	ldrb	r3, [r0, #7]
    6146:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    614a:	3008      	adds	r0, #8
    614c:	bd08      	pop	{r3, pc}
    614e:	bf00      	nop

00006150 <_Unwind_GetDataRelBase>:
    6150:	b508      	push	{r3, lr}
    6152:	f000 f807 	bl	6164 <abort>
    6156:	bf00      	nop

00006158 <_Unwind_GetTextRelBase>:
    6158:	b508      	push	{r3, lr}
    615a:	f7ff fff9 	bl	6150 <_Unwind_GetDataRelBase>
    615e:	bf00      	nop

00006160 <__aeabi_idiv0>:
    6160:	4770      	bx	lr
    6162:	bf00      	nop

00006164 <abort>:
    6164:	b508      	push	{r3, lr}
    6166:	2006      	movs	r0, #6
    6168:	f000 f864 	bl	6234 <raise>
    616c:	2001      	movs	r0, #1
    616e:	f7fb f8d9 	bl	1324 <_exit>
    6172:	Address 0x0000000000006172 is out of bounds.


00006174 <__libc_init_array>:
    6174:	b570      	push	{r4, r5, r6, lr}
    6176:	2500      	movs	r5, #0
    6178:	4e0c      	ldr	r6, [pc, #48]	; (61ac <__libc_init_array+0x38>)
    617a:	4c0d      	ldr	r4, [pc, #52]	; (61b0 <__libc_init_array+0x3c>)
    617c:	1ba4      	subs	r4, r4, r6
    617e:	10a4      	asrs	r4, r4, #2
    6180:	42a5      	cmp	r5, r4
    6182:	d109      	bne.n	6198 <__libc_init_array+0x24>
    6184:	f001 fbf6 	bl	7974 <_init>
    6188:	2500      	movs	r5, #0
    618a:	4e0a      	ldr	r6, [pc, #40]	; (61b4 <__libc_init_array+0x40>)
    618c:	4c0a      	ldr	r4, [pc, #40]	; (61b8 <__libc_init_array+0x44>)
    618e:	1ba4      	subs	r4, r4, r6
    6190:	10a4      	asrs	r4, r4, #2
    6192:	42a5      	cmp	r5, r4
    6194:	d105      	bne.n	61a2 <__libc_init_array+0x2e>
    6196:	bd70      	pop	{r4, r5, r6, pc}
    6198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    619c:	4798      	blx	r3
    619e:	3501      	adds	r5, #1
    61a0:	e7ee      	b.n	6180 <__libc_init_array+0xc>
    61a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    61a6:	4798      	blx	r3
    61a8:	3501      	adds	r5, #1
    61aa:	e7f2      	b.n	6192 <__libc_init_array+0x1e>
    61ac:	00007980 	.word	0x00007980
    61b0:	00007980 	.word	0x00007980
    61b4:	00007980 	.word	0x00007980
    61b8:	00007994 	.word	0x00007994

000061bc <memcpy>:
    61bc:	b510      	push	{r4, lr}
    61be:	1e43      	subs	r3, r0, #1
    61c0:	440a      	add	r2, r1
    61c2:	4291      	cmp	r1, r2
    61c4:	d100      	bne.n	61c8 <memcpy+0xc>
    61c6:	bd10      	pop	{r4, pc}
    61c8:	f811 4b01 	ldrb.w	r4, [r1], #1
    61cc:	f803 4f01 	strb.w	r4, [r3, #1]!
    61d0:	e7f7      	b.n	61c2 <memcpy+0x6>

000061d2 <memset>:
    61d2:	4603      	mov	r3, r0
    61d4:	4402      	add	r2, r0
    61d6:	4293      	cmp	r3, r2
    61d8:	d100      	bne.n	61dc <memset+0xa>
    61da:	4770      	bx	lr
    61dc:	f803 1b01 	strb.w	r1, [r3], #1
    61e0:	e7f9      	b.n	61d6 <memset+0x4>

000061e2 <_raise_r>:
    61e2:	291f      	cmp	r1, #31
    61e4:	b538      	push	{r3, r4, r5, lr}
    61e6:	4604      	mov	r4, r0
    61e8:	460d      	mov	r5, r1
    61ea:	d904      	bls.n	61f6 <_raise_r+0x14>
    61ec:	2316      	movs	r3, #22
    61ee:	6003      	str	r3, [r0, #0]
    61f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    61f4:	bd38      	pop	{r3, r4, r5, pc}
    61f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    61f8:	b112      	cbz	r2, 6200 <_raise_r+0x1e>
    61fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    61fe:	b94b      	cbnz	r3, 6214 <_raise_r+0x32>
    6200:	4620      	mov	r0, r4
    6202:	f000 f831 	bl	6268 <_getpid_r>
    6206:	462a      	mov	r2, r5
    6208:	4601      	mov	r1, r0
    620a:	4620      	mov	r0, r4
    620c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6210:	f000 b818 	b.w	6244 <_kill_r>
    6214:	2b01      	cmp	r3, #1
    6216:	d00a      	beq.n	622e <_raise_r+0x4c>
    6218:	1c59      	adds	r1, r3, #1
    621a:	d103      	bne.n	6224 <_raise_r+0x42>
    621c:	2316      	movs	r3, #22
    621e:	6003      	str	r3, [r0, #0]
    6220:	2001      	movs	r0, #1
    6222:	e7e7      	b.n	61f4 <_raise_r+0x12>
    6224:	2400      	movs	r4, #0
    6226:	4628      	mov	r0, r5
    6228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    622c:	4798      	blx	r3
    622e:	2000      	movs	r0, #0
    6230:	e7e0      	b.n	61f4 <_raise_r+0x12>
    6232:	Address 0x0000000000006232 is out of bounds.


00006234 <raise>:
    6234:	4b02      	ldr	r3, [pc, #8]	; (6240 <raise+0xc>)
    6236:	4601      	mov	r1, r0
    6238:	6818      	ldr	r0, [r3, #0]
    623a:	f7ff bfd2 	b.w	61e2 <_raise_r>
    623e:	bf00      	nop
    6240:	2007c0bc 	.word	0x2007c0bc

00006244 <_kill_r>:
    6244:	b538      	push	{r3, r4, r5, lr}
    6246:	2300      	movs	r3, #0
    6248:	4c06      	ldr	r4, [pc, #24]	; (6264 <_kill_r+0x20>)
    624a:	4605      	mov	r5, r0
    624c:	4608      	mov	r0, r1
    624e:	4611      	mov	r1, r2
    6250:	6023      	str	r3, [r4, #0]
    6252:	f7fb f81e 	bl	1292 <_kill>
    6256:	1c43      	adds	r3, r0, #1
    6258:	d102      	bne.n	6260 <_kill_r+0x1c>
    625a:	6823      	ldr	r3, [r4, #0]
    625c:	b103      	cbz	r3, 6260 <_kill_r+0x1c>
    625e:	602b      	str	r3, [r5, #0]
    6260:	bd38      	pop	{r3, r4, r5, pc}
    6262:	bf00      	nop
    6264:	2007c324 	.word	0x2007c324

00006268 <_getpid_r>:
    6268:	f7fb b80c 	b.w	1284 <_getpid>

0000626c <strlen>:
    626c:	4603      	mov	r3, r0
    626e:	f813 2b01 	ldrb.w	r2, [r3], #1
    6272:	2a00      	cmp	r2, #0
    6274:	d1fb      	bne.n	626e <strlen+0x2>
    6276:	1a18      	subs	r0, r3, r0
    6278:	3801      	subs	r0, #1
    627a:	4770      	bx	lr

0000627c <vtable for sjsu::LabGPIO>:
	...
    6284:	0179 0000 0269 0000 0359 0000 03e1 0000     y...i...Y.......
    6294:	046d 0000 0481 0000 04a1 0000               m...........

000062a0 <vtable for sjsu::Gpio>:
	...
    62a8:	483d 0000 483d 0000 483d 0000 483d 0000     =H..=H..=H..=H..
    62b8:	483d 0000 483d 0000 483d 0000 ffff ffff     =H..=H..=H......

000062c8 <std::integral_constant<long long, 100ll>::value>:
    62c8:	0064 0000 0000 0000                         d.......

000062d0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    62d0:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...
    62e0:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    62f0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6300:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6310:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    6320:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    6330:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    6340:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    6350:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    6360:	6f74 6767 696c 676e 3120 0000 6f74 6767     toggling 1..togg
    6370:	696c 676e 3220 0000 0015 0000 0b69 0000     ling 2......i...
    6380:	0001 0000 ffff ffff                         ........

00006388 <vtable for sjsu::cortex::InterruptController>:
	...
    6390:	0809 0000 085d 0000                         ....]...

00006398 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    6398:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    63a8:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    63b8:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    63c8:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    63d8:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    63e8:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    63f8:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    6408:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    6418:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    6428:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    6438:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    6448:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    6458:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    6468:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    6478:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    6488:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    6498:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    64a8:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    64b8:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    64c8:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    64d8:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    64e8:	6c6c 6465 002e 0000 5b1b 3534 206d 2020     lled.....[45m   
    64f8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    6508:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6518:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6528:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6538:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6548:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    6558:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    6568:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    6578:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    6588:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    6598:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    65a8:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    65b8:	7254 6361 3a65 000a 5b1b 3534 206d 2020     Trace:...[45m   
    65c8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    65d8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    65e8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    65f8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6608:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6618:	2820 6174 6b73 502e 6572 7552 286e 2929      (task.PreRun())
    6628:	200a 2020 2020 2020 2020 5020 6572 7552     .          PreRu
    6638:	286e 2029 6166 6c69 6465 6620 726f 7420     n() failed for t
    6648:	7361 3a6b 2520 2c73 7420 7265 696d 616e     ask: %s, termina
    6658:	6974 676e 7320 6863 6465 6c75 7265 1b21     ting scheduler!.
    6668:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3334     [0m.[0m......[43
    6678:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    6688:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6698:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    66a8:	6e41 6520 7272 726f 6f20 6363 7275 6465     An error occured
    66b8:	202c 6874 2065 6f66 6c6c 776f 6e69 2067     , the following 
    66c8:	6174 6b73 7720 6c69 206c 6562 7320 7375     task will be sus
    66d8:	6570 646e 6465 203a 7325 5b1b 6d30 5b1b     pended: %s.[0m.[
    66e8:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    66f8:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    6708:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6718:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    6728:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    6738:	6974 6e6f 5420 7365 6574 3a64 2820 6174     tion Tested: (ta
    6748:	6b73 3e2d 6547 4874 6e61 6c64 2865 2029     sk->GetHandle() 
    6758:	3d21 6e20 6c75 706c 7274 0a29 2020 2020     != nullptr).    
    6768:	2020 2020 2020 6e55 6261 656c 7420 206f           Unable to 
    6778:	7263 6165 6574 7420 7361 3a6b 2520 1b73     create task: %s.
    6788:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3534     [0m.[0m......[45
    6798:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    67a8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    67b8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    67c8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    67d8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    67e8:	6574 3a64 2820 6174 6b73 3e2d 6553 7574     ted: (task->Setu
    67f8:	2870 2929 200a 2020 2020 2020 2020 4620     p()).          F
    6808:	6961 656c 2064 6f74 6320 6d6f 6c70 7465     ailed to complet
    6818:	2065 6553 7574 2870 2029 6f66 2072 6174     e Setup() for ta
    6828:	6b73 203a 7325 5b1b 6d30 5b1b 6d30 000a     sk: %s.[0m.[0m..
    6838:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    6848:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6858:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6868:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6878:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6888:	5420 7365 6574 3a64 2820 7270 5f65 7572      Tested: (pre_ru
    6898:	5f6e 7665 6e65 5f74 7267 756f 5f70 6168     n_event_group_ha
    68a8:	646e 656c 205f 3d21 6e20 6c75 706c 7274     ndle_ != nullptr
    68b8:	0a29 2020 2020 2020 2020 2020 6146 6c69     ).          Fail
    68c8:	6465 7420 206f 7263 6165 6574 5020 6572     ed to create Pre
    68d8:	7552 206e 7645 6e65 2074 7247 756f 2170     Run Event Group!
    68e8:	5b1b 6d30 5b1b 6d30 000a ffff 6e69 6176     .[0m.[0m....inva
    68f8:	696c 0064 7061 6c70 6369 7461 6f69 006e     lid.application.
    6908:	6f68 7473 7420 7365 0074 0000 2020 6425     host test...  %d
    6918:	2029 7830 3025 5838 000a 0000 3020 2578     ) 0x%08X.... 0x%
    6928:	3830 0058 2020 6425 2029 7830 7025 000a     08X.  %d) 0x%p..
    6938:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
    6948:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
    6958:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
    6968:	7463 726f 0079 0000 0a0a 2020 5b1b 3b31     ctory.....  .[1;
    6978:	3733 006d 616d 656b 7320 6174 6b63 7274     37m.make stacktr
    6988:	6361 2d65 7325 5420 4152 4543 3d53 0022     ace-%s TRACES=".
    6998:	3020 2578 0070 0000 0a22 1b0a 305b 006d      0x%p..."...[0m.
    69a8:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
    69b8:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
    69c8:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
    69d8:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
    69e8:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
    69f8:	002e 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    6a08:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    6a18:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6a28:	1b20 305b 333b 6d37 6f4e 6920 746e 7265      .[0;37mNo inter
    6a38:	7572 7470 7320 7265 6976 6563 7220 756f     rupt service rou
    6a48:	6974 656e 6620 756f 646e 6620 726f 7420     tine found for t
    6a58:	6568 7620 6365 6f74 2072 6425 2021 6944     he vector %d! Di
    6a68:	6173 6c62 6e69 2067 5349 1b52 305b 0a6d     sabling ISR.[0m.
    6a78:	0000 0000 5b1b 3134 486d 7261 2064 6146     .....[41mHard Fa
    6a88:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
    6a98:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
    6aa8:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
    6ab8:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
    6ac8:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
    6ad8:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
    6ae8:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
    6af8:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
    6b08:	3020 2578 3830 586c 000a 0000 1b0a 315b      0x%08lX......[1
    6b18:	333b 6d37 5b1b 3234 506d 6f72 7267 6d61     ;37m.[42mProgram
    6b28:	5220 7465 7275 656e 2064 7845 7469 4320      Returned Exit C
    6b38:	646f 3a65 2520 646c 1b0a 305b 006d 0000     ode: %ld..[0m...
    6b48:	1b0a 315b 333b 6d37 5b1b 3134 506d 6f72     ..[1;37m.[41mPro
    6b58:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6b68:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6b78:	006d ffff 000a ffff                         m.......

00006b80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6b80:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6b90:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6ba0:	bc20 4cbe 6b28 4e6e 743a 0074 ffff ffff      ..L(knN:tt.....

00006bb0 <std::integral_constant<long long, 1ll>::value>:
    6bb0:	0001 0000 0000 0000                         ........

00006bb8 <config::kSystemClockRateMhz>:
    6bb8:	0000 4240                                   ..@B

00006bbc <config::kRtosFrequency>:
    6bbc:	0000 447a 6e69 6176 696c 0064 7061 6c70     ..zDinvalid.appl
    6bcc:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    6bdc:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    6bec:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    6bfc:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    6c0c:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    6c1c:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    6c2c:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    6c3c:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    6c4c:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    6c5c:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    6c6c:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    6c7c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    6c8c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    6c9c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    6cac:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    6cbc:	2067 6163 6c6c 6465 002e 0000 5b1b 3334     g called.....[43
    6ccc:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    6cdc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6cec:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6cfc:	6f4e 6920 746e 7265 7572 7470 7320 7265     No interrupt ser
    6d0c:	6976 6563 7220 756f 6974 656e 6620 756f     vice routine fou
    6d1c:	646e 6620 726f 7420 6568 7620 6365 6f74     nd for the vecto
    6d2c:	2072 6425 2021 6944 6173 6c62 6e69 2067     r %d! Disabling 
    6d3c:	5349 1b52 305b 0a6d 0000 0000 ffff ffff     ISR.[0m.........
    6d4c:	2969 0000 0001 0000 ffff ffff 5b1b 3534     i)...........[45
    6d5c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    6d6c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6d7c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6d8c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    6d9c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    6dac:	6574 3a64 2820 6157 7469 6f46 5072 6c6c     ted: (WaitForPll
    6dbc:	6f4c 6b63 7453 7461 7375 5028 6c6c 6553     LockStatus(PllSe
    6dcc:	656c 7463 3a3a 4d6b 6961 506e 6c6c 2929     lect::kMainPll))
    6ddc:	200a 2020 2020 2020 2020 5020 4c4c 2030     .          PLL0 
    6dec:	6f6c 6b63 6320 756f 646c 6e20 746f 6220     lock could not b
    6dfc:	2065 7365 6174 6c62 7369 6568 2064 6562     e established be
    6e0c:	6f66 6572 7420 6d69 6f65 7475 5b1b 6d30     fore timeout.[0m
    6e1c:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    6e2c:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    6e3c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    6e4c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6e5c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6e6c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6e7c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6e8c:	5420 7365 6574 3a64 2820 6157 7469 6f46      Tested: (WaitFo
    6e9c:	5072 6c6c 6f43 6e6e 6365 6974 6e6f 7453     rPllConnectionSt
    6eac:	7461 7375 5028 6c6c 6553 656c 7463 3a3a     atus(PllSelect::
    6ebc:	4d6b 6961 506e 6c6c 2929 200a 2020 2020     kMainPll)).     
    6ecc:	2020 2020 4620 6961 656c 2064 6f74 6320          Failed to c
    6edc:	6e6f 656e 7463 5020 4c4c 2e30 5b1b 6d30     onnect PLL0..[0m
    6eec:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
    6efc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    6f0c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6f1c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6f2c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6f3c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6f4c:	2820 496b 4373 6e61 6550 6972 6870 7265      (kIsCanPeripher
    6f5c:	6c61 0a29 2020 2020 2020 2020 2020 6854     al).          Th
    6f6c:	2065 6964 6976 6564 2072 6176 756c 2065     e divider value 
    6f7c:	666f 3620 6920 2073 6e6f 796c 7320 7075     of 6 is only sup
    6f8c:	6f70 7472 6465 6620 726f 4320 4e41 7020     ported for CAN p
    6f9c:	7265 7069 6568 6172 736c 1b2e 305b 1b6d     eripherals..[0m.
    6fac:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    6fbc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    6fcc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6fdc:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6fec:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6ffc:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    700c:	2820 6b21 7349 6143 506e 7265 7069 6568      (!kIsCanPeriphe
    701c:	6172 296c 200a 2020 2020 2020 2020 5420     ral).          T
    702c:	6568 6420 7669 6469 7265 7620 6c61 6575     he divider value
    703c:	6f20 2066 2038 7369 6e20 746f 7320 7075      of 8 is not sup
    704c:	6f70 7472 6465 6620 726f 4320 4e41 7020     ported for CAN p
    705c:	7265 7069 6568 6172 736c 1b2e 305b 1b6d     eripherals..[0m.
    706c:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    707c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    708c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    709c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    70ac:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    70bc:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    70cc:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
    70dc:	2020 4f20 6c6e 2079 6874 2065 6f66 6c6c        Only the foll
    70ec:	776f 6e69 2067 6570 6972 6870 7265 6c61     owing peripheral
    70fc:	6420 7669 6469 7265 7620 6c61 6575 2073      divider values 
    710c:	7261 2065 7573 7070 726f 6574 3a64 3120     are supported: 1
    711c:	202c 2c32 3420 202c 2e38 5420 6568 6420     , 2, 4, 8. The d
    712c:	7669 6469 7265 7620 6c61 6575 6f20 2066     ivider value of 
    713c:	2036 7369 7320 7075 6f70 7472 6465 6620     6 is supported f
    714c:	726f 4320 4e41 7020 7265 7069 6568 6172     or CAN periphera
    715c:	736c 1b2e 305b 1b6d 305b 0a6d 0000 0000     ls..[0m.[0m.....
    716c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    717c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    718c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    719c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    71ac:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    71bc:	5420 7365 6574 3a64 2820 6e69 7570 5f74      Tested: (input_
    71cc:	7266 7165 6575 636e 2079 203e 4d6b 6e69     frequency > kMin
    71dc:	6d69 6d75 6c50 306c 6e49 7570 4674 6572     imumPll0InputFre
    71ec:	7571 6e65 7963 2620 2026 6e69 7570 5f74     quency && input_
    71fc:	7266 7165 6575 636e 2079 203c 4d6b 7861     frequency < kMax
    720c:	6d69 6d75 6c50 306c 6e49 7570 4674 6572     imumPll0InputFre
    721c:	7571 6e65 7963 0a29 2020 2020 2020 2020     quency).        
    722c:	2020 6854 2065 6e69 7570 2074 4c50 304c       The input PLL0
    723c:	6620 6572 7571 6e65 7963 6d20 7375 2074      frequency must 
    724c:	6562 6220 7465 6577 6e65 3320 6b32 7a48     be between 32kHz
    725c:	6120 646e 3520 4d30 7a48 5b1b 6d30 5b1b      and 50MHz.[0m.[
    726c:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    727c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    728c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    729c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    72ac:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    72bc:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    72cc:	6973 6572 5f64 7073 6565 2064 203c 4d6b     sired_speed < kM
    72dc:	7861 5043 5355 6570 6465 0a29 2020 2020     axCPUSpeed).    
    72ec:	2020 2020 2020 6854 2065 6564 6973 6572           The desire
    72fc:	2064 5043 2055 7073 6565 2064 6163 6e6e     d CPU speed cann
    730c:	746f 6520 6378 6565 2064 6874 2065 616d     ot exceed the ma
    731c:	6978 756d 206d 6c61 6f6c 2077 5043 2055     ximum allow CPU 
    732c:	7073 6565 2e64 5b1b 6d30 5b1b 6d30 000a     speed..[0m.[0m..
    733c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    734c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    735c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    736c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    737c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    738c:	5420 7365 6574 3a64 2820 6166 736c 2965      Tested: (false)
    739c:	200a 2020 2020 2020 2020 4620 6961 656c     .          Faile
    73ac:	2064 6f74 6320 6c61 7563 616c 6574 7420     d to calculate t
    73bc:	6568 5020 4c4c 2030 6573 7474 6e69 7367     he PLL0 settings
    73cc:	6620 726f 7420 6568 6420 7365 7269 6465      for the desired
    73dc:	6620 6572 7571 6e65 7963 1b2e 305b 1b6d      frequency..[0m.
    73ec:	305b 0a6d 0000 0000 011a 010a 0218 0208     [0m.............
    73fc:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    740c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    741c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    742c:	333b 6d37 6e55 7573 7070 726f 6574 2064     ;37mUnsupported 
    743c:	706f 7265 7461 6f69 1b6e 305b 0a6d 0000     operation.[0m...
    744c:	fffb ffff 4761 0000 0001 0000 ffff ffff     ....aG..........
    745c:	fffe ffff 4791 0000 0001 0000 ffff ffff     .....G..........
    746c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    747c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    748c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    749c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    74ac:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    74bc:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    74cc:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    74dc:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    74ec:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    74fc:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    750c:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    751c:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    752c:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..

0000753c <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    753c:	6390 0000                                   .c..

00007540 <sjsu::lpc17xx::SystemController::Peripherals::kUart0>:
    7540:	ff03 ffff                                   ....

00007544 <sjsu::lpc17xx::SystemController::Oscillator::kSelect>:
    7544:	0200 ffff                                   ....

00007548 <sjsu::lpc17xx::SystemController::CpuClock::kDivider>:
    7548:	0800 ffff                                   ....

0000754c <sjsu::lpc17xx::SystemController::MainPll::kMultiplier>:
    754c:	0f00 ffff                                   ....

00007550 <sjsu::lpc17xx::SystemController::MainPll::kPreDivider>:
    7550:	0810 ffff                                   ....

00007554 <sjsu::lpc17xx::SystemController::kDefaultIRCFrequency>:
    7554:	2400 4a74                                   .$tJ

00007558 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7558:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7568:	2e72 7068 0070 ffff                         r.hpp...

00007570 <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7570:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7580:	2e72 7068 0070 ffff                         r.hpp...

00007588 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    7588:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7598:	2e72 7068 0070 ffff                         r.hpp...

000075a0 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    75a0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    75b0:	2e72 7068 0070 ffff                         r.hpp...

000075b8 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    75b8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    75c8:	2e72 7068 0070 ffff                         r.hpp...

000075d0 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    75d0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    75e0:	2e72 7068 0070 ffff                         r.hpp...

000075e8 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    75e8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    75f8:	2e72 7068 0070 ffff                         r.hpp...

00007600 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7600:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7610:	2e72 7068 0070 ffff                         r.hpp...

00007618 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7618:	0302 0100                                   ....

0000761c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    761c:	6970 2e6e 7068 0070                         pin.hpp.

00007624 <sjsu::lpc40xx::Pin::kFunction>:
    7624:	0300 ffff                                   ....

00007628 <sjsu::lpc40xx::Pin::kResistor>:
    7628:	0203 ffff                                   ....

0000762c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    762c:	0107 ffff                                   ....

00007630 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7630:	010a ffff                                   ....

00007634 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7634:	76c4 0000 0802 0000                         .v......

0000763c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    763c:	76c4 0000 0902 0000                         .v......

00007644 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    7644:	76c4 0000 1c04 0000                         .v......

0000764c <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    764c:	76c4 0000 1d04 0000                         .v......

00007654 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    7654:	76c4 0000 1d01 0000                         .v......

0000765c <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    765c:	76c4 0000 0902 0000                         .v......

00007664 <sjsu::lpc17xx::UartPort::kUart0Tx>:
    7664:	76dc 0000 0200 0204                         .v......

0000766c <sjsu::lpc17xx::UartPort::kUart0Rx>:
    766c:	76dc 0000 0300 0206                         .v......

00007674 <sjsu::lpc17xx::UartPort::kUart2Tx>:
    7674:	76dc 0000 0802 0210                         .v......

0000767c <sjsu::lpc17xx::UartPort::kUart2Rx>:
    767c:	76dc 0000 0902 0212                         .v......

00007684 <sjsu::lpc17xx::UartPort::kUart3Tx>:
    7684:	76dc 0000 1c04 0218                         .v......

0000768c <sjsu::lpc17xx::UartPort::kUart3Rx>:
    768c:	76dc 0000 1d04 021a                         .v......

00007694 <sjsu::InitializePlatform()::file>:
    7694:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000076a0 <vtable for sjsu::lpc40xx::Uart>:
	...
    76a8:	3cd9 0000 3d99 0000 3e25 0000 3ec9 0000     .<...=..%>...>..
    76b8:	3f99 0000                                   .?..

000076bc <vtable for sjsu::lpc40xx::Pin>:
	...
    76c4:	380d 0000 3841 0000 38b1 0000 3875 0000     .8..A8...8..u8..

000076d4 <vtable for sjsu::lpc17xx::Pin>:
	...
    76dc:	36ad 0000 370d 0000 3795 0000 3769 0000     .6...7...7..i7..

000076ec <vtable for sjsu::lpc17xx::SystemController>:
	...
    76f4:	2d41 0000 2f05 0000 3039 0000 30b9 0000     A-.../..90...0..
    7704:	30d5 0000 3101 0000 3135 0000               .0...1..51..

00007710 <vtable for sjsu::cortex::SystemTimer>:
	...
    7718:	29d1 0000 29e5 0000 2bad 0000 2a05 0000     .)...)...+...*..

00007728 <sjsu::lpc17xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    7728:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7738:	3a75 6c3a 6370 3731 7878 3a3a 7953 7473     u::lpc17xx::Syst
    7748:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    7758:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    7768:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    7778:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    7788:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    7798:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    77a8:	736e 0074                                   nst.

000077ac <sjsu::lpc17xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    77ac:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    77bc:	3a75 6c3a 6370 3731 7878 3a3a 7953 7473     u::lpc17xx::Syst
    77cc:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    77dc:	5374 7379 6574 436d 6f6c 6b63 7246 7165     tSystemClockFreq
    77ec:	6575 636e 2879 6e75 7469 3a73 663a 6572     uency(units::fre
    77fc:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    780c:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00007818 <sjsu::lpc17xx::SystemController::CalculatePll0(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7818:	6a73 7573 3a3a 706c 3163 7837 3a78 533a     sjsu::lpc17xx::S
    7828:	7379 6574 436d 6e6f 7274 6c6f 656c 3a72     ystemController:
    7838:	503a 6c6c 5330 7465 6974 676e 5f73 2074     :Pll0Settings_t 
    7848:	6a73 7573 3a3a 706c 3163 7837 3a78 533a     sjsu::lpc17xx::S
    7858:	7379 6574 436d 6e6f 7274 6c6f 656c 3a72     ystemController:
    7868:	433a 6c61 7563 616c 6574 6c50 306c 7528     :CalculatePll0(u
    7878:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    7888:	683a 7265 7a74 745f 202c 6e75 7469 3a73     :hertz_t, units:
    7898:	663a 6572 7571 6e65 7963 3a3a 6568 7472     :frequency::hert
    78a8:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

000078b4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::__PRETTY_FUNCTION__>:
    78b4:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    78c4:	3a75 6c3a 6370 3731 7878 3a3a 6950 3a6e     u::lpc17xx::Pin:
    78d4:	533a 7465 7341 6e41 6c61 676f 6f4d 6564     :SetAsAnalogMode
    78e4:	6228 6f6f 296c 6320 6e6f 7473 ff00 ffff     (bool) const....

000078f4 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    78f4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    7904:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

00007914 <__sf_fake_stderr>:
	...

00007934 <__sf_fake_stdin>:
	...

00007954 <__sf_fake_stdout>:
	...

00007974 <_init>:
    7974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7976:	bf00      	nop
    7978:	bcf8      	pop	{r3, r4, r5, r6, r7}
    797a:	bc08      	pop	{r3}
    797c:	469e      	mov	lr, r3
    797e:	4770      	bx	lr

00007980 <__init_array_start>:
    7980:	00000105 	.word	0x00000105
    7984:	000004fd 	.word	0x000004fd
    7988:	00000da5 	.word	0x00000da5
    798c:	000011b1 	.word	0x000011b1
    7990:	00004745 	.word	0x00004745

00007994 <_fini>:
    7994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7996:	bf00      	nop
    7998:	bcf8      	pop	{r3, r4, r5, r6, r7}
    799a:	bc08      	pop	{r3}
    799c:	469e      	mov	lr, r3
    799e:	4770      	bx	lr
