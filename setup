#!/bin/bash

####################
# Global Variables #
####################

# Get base path
BASE=$(dirname "$0")
BASE=$(
  cd $BASE
  pwd -P
)
# Stash the tool directory
TOOLDIR=$BASE/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Define name of the arm version we are downloading
TOOLS_BUNDLE_BASE_URL="https://github.com/kammce/SJSU-Dev2/releases/download/v2.0/tools-bundle"
TOOLS_BUNDLE_URL_LINUX="$TOOLS_BUNDLE_BASE_URL-linux.tar.bz2"
TOOLS_BUNDLE_URL_OSX="$TOOLS_BUNDLE_BASE_URL-osx.tar.bz2"
# Set later
TOOLS_BUNDLE_URL=
TOOLS_FILE_COUNT=9642

PREREQUISITES=1
TOOL_BUNDLE=1
PYTHON_TOOLS=1
NXPPROG=1
LOCATION_FILE=1
LINK_PROJECTS=1

# Make sure only non-root users can run our script
function quit_if_script_was_run_as_root() {
  if [[ $EUID -eq 0 ]]; then
    echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
    exit 1
  fi
}

function request_sudo_privileges() {
  echo " ──────────────────────────────────────────────────┐"
  echo "            Acquiring sudo privileges               "
  echo "└────────────────────────────────────────────────── "
  sudo echo "" || exit 1
}

function quit_if_not_64_bit() {
  echo " ──────────────────────────────────────────────────┐"
  echo "              Detecting your platform               "
  echo "└────────────────────────────────────────────────── "
  if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]; then
    echo 'Only 64-bit architecture systems are supported!'
    exit 1
  fi
}

function install_linux_prerequisites() {
  echo " ──────────────────────────────────────────────────┐"
  echo ""
  echo "            Installing Linux Prerequisites          "
  echo ""
  echo "└────────────────────────────────────────────────── "
  echo " ───────────────────────────────────────────────────┐"
  echo "                   Updating Apt                      "
  echo "└─────────────────────────────────────────────────── "
  sudo apt update
  local apt_update=$?
  echo " ───────────────────────────────────────────────────┐"
  echo "    Installing git, make python3, pip3, curl, tar    "
  echo "└─────────────────────────────────────────────────── "
  sudo apt -y install git make python3 python3-pip curl tar
  local apt_install=$?
  echo " ──────────────────────────────────────────────────┐"
  echo "       Adding current user to 'dialout' group        "
  echo "└────────────────────────────────────────────────── "
  sudo adduser $USER dialout
  sudo udevadm control --reload-rules && sudo udevadm trigger

  return $(($apt_update + $apt_install))
}

function install_mac_osx_prerequisites() {
  echo " ──────────────────────────────────────────────────┐"
  echo ""
  echo "           Installing Mac OSX Prerequisites         "
  echo ""
  echo "└────────────────────────────────────────────────── "
  echo " ───────────────────────────────────────────────────┐"
  echo "    Install XCode Command Line Tools (GCC, make)     "
  echo "└─────────────────────────────────────────────────── "
  # Install Command Line tools (make etc...)
  xcode-select --install &>/dev/null
  # Accept User Agreement
  sudo xcodebuild -license accept
  local xcodebuild_status=$?
  echo " ───────────────────────────────────────────────────┐"
  echo "          Prompt Git installer by invoking it        "
  echo "└─────────────────────────────────────────────────── "
  git --version
  local git_status=$?
  echo " ───────────────────────────────────────────────────┐"
  echo "        Installing PIP via bootstrap.pypa.io         "
  echo "└─────────────────────────────────────────────────── "
  curl https://bootstrap.pypa.io/get-pip.py | python3
  local pip_install_status=$?

  return $(($xcodebuild_status + $git_status + $pip_install_status))
}

function install_python_tools()
{
  echo " ───────────────────────────────────────────────────┐"
  echo "                  Upgrading PIP                      "
  echo "└─────────────────────────────────────────────────── "
  sudo -H python3 -m pip install --upgrade pip
  local pip_status=$?
  echo " ───────────────────────────────────────────────────┐"
  echo "                 Installing Gcovr                    "
  echo "└─────────────────────────────────────────────────── "
  sudo -H python3 -m pip install gcovr
  local gcovr_status=$?
  echo " ───────────────────────────────────────────────────┐"
  echo "           Installing/Upgrading Virtualenv           "
  echo "└─────────────────────────────────────────────────── "
  sudo -H python3 -m pip install --upgrade virtualenv
  local virtualenv_status=$?

  return $(($pip_status + $gcovr_status + $virtualenv_status))
}

function get_file_count()
{
  if [ ! -d "$1" ]; then
    echo 0
  else
    echo $(tree -a "$1" | wc -l)
  fi
}

function download_and_extract_tool_bundle()
{
  local tools_bundle_file_count=9621
  cd "$TOOLDIR/"
  echo " ───────────────────────────────────────────────────┐"
  echo "             Downloading Tools Bundle                "
  echo "└─────────────────────────────────────────────────── "
  local skipped_download=0
  local temporary_name=temp_toolkit.tar.bz2
  # Check that the file exists, if not, download it
  if [ ! -f $(basename $TOOLS_BUNDLE_URL) ]; then
    # Store file in temporary name first, so if this fails, this step does not
    # get skipped.
    echo "$TOOLS_BUNDLE_URL"
    curl -L0 -o $temporary_name "$TOOLS_BUNDLE_URL"
    mv $temporary_name "$(basename $TOOLS_BUNDLE_URL)"
  else
    echo "Tools bundle \"$(basename $TOOLS_BUNDLE_URL)\" already downloaded!"
    echo "Skipping download..."
    skipped_download=1
  fi

  echo " ──────────────────────────────────────────────────┐"
  echo "             Extracting tools bundle                "
  echo "└────────────────────────────────────────────────── "
  # Check to see if tools have already been extracted
  local openocd_file_count=$(get_file_count "openocd")
  local gcc_arm_file_count=$(get_file_count gcc-arm*)
  local clang_llvm_file_count=$(get_file_count clang+llvm*)
  local total=$((openocd_file_count+gcc_arm_file_count+clang_llvm_file_count))

  if [ "$total" -eq "$TOOLS_FILE_COUNT" ] && \
     [ "$skipped_download" -eq "1" ]
  then
    echo "Tools bundle \"$(basename $TOOLS_BUNDLE_URL)\" already extracted!"
    echo "Skipping extraction..."
    return 0
  else
    # Delete old toolkit folders
    rm -r "openocd" &> /dev/null
    rm -r "gcc-arm*" &> /dev/null
    rm -r "clang+llvm*" &> /dev/null

    tar --verbose --extract --bzip --file="$(basename $TOOLS_BUNDLE_URL)" \
      2> /dev/null |
    while read line; do
        x=$((x+1))
        echo -en "\rExtracting Progress: $(($x*100/$TOOLS_FILE_COUNT))% "
    done
    local extract=$?
    echo -en "\rExtracting Progress: 100% \n"

    # Verify that each directory exists
    ls clang+llvm-*/ &> /dev/null
    local clang_exists=$?
    ls gcc-arm*/ &> /dev/null
    local gcc_exists=$?
    ls openocd/ &> /dev/null
    local openocd_exists=$?

    return $(($extract + $clang_exists + $gcc_exists + $openocd_exists))
  fi
  return 1
}

function install_nxpprog()
{
  cd "$TOOLDIR"
  echo " ───────────────────────────────────────────────────┐"
  echo "                Setting Up nxpprog                   "
  echo "└─────────────────────────────────────────────────── "
  rm -rf "nxpprog/"
  git clone https://github.com/kammce/nxpprog.git "nxpprog/"
  local git_clone=$?

  cd "nxpprog/"

  git checkout --quiet ea28bd0
  local git_checkout=$?

  ./setup
  local setup_status=$?

  return $(($git_clone + $setup_status + $git_checkout))
}

function generate_location_file()
{
  echo " ───────────────────────────────────────────────────┐"
  echo "         Generating SJSU-Dev2 Location File          "
  echo "└─────────────────────────────────────────────────── "
  local SETUP_VERSION=$(cat $BASE/setup_version.txt)
  cat >~/.sjsu_dev2.mk <<EOL
# Location of SJSU-Dev2 folder
SJSU_DEV2_BASE         = $BASE
PREVIOUS_SETUP_VERSION = $SETUP_VERSION

ifeq (,\$(wildcard \$(SJSU_DEV2_BASE)/))
\$(info +-------------- SJSU-Dev2 Folder Not Found Error ---------------+)
\$(info |                                                               |)
\$(info | To update the location of SJSU-Dev2's folder run ./setup      |)
\$(info |                                                               |)
\$(info +---------------------------------------------------------------+)
\$(error )
endif

EOL
  return $?
}

function link_projects()
{
  cd "$BASE"
  echo " ───────────────────────────────────────────────────┐"
  echo "      Linking Files to Firmware Project Folder       "
  echo "└─────────────────────────────────────────────────── "
  ./tools/link_projects.sh
  return $?
}

function print_status
{
  if [[ $1 -ne 0 ]]
  then
    printf "\e[31m✘\e[0;31m"
  else
    printf "\e[32m✔\e[0;31m"
  fi
}

function final_install_check
{
  local prerequisites="$(print_status $PREREQUISITES)"
  local tool_bundle="$(print_status $TOOL_BUNDLE)"
  local python_tools="$(print_status $PYTHON_TOOLS)"
  local nxpprog="$(print_status $NXPPROG)"
  local location_file="$(print_status $LOCATION_FILE)"
  local project_link="$(print_status $LINK_PROJECTS)"

  local install_was_successful=$(($PREREQUISITES + $TOOL_BUNDLE + \
                                  $PYTHON_TOOLS + $NXPPROG + $LOCATION_FILE + \
                                  $LINK_PROJECTS))

  if [[ $install_was_successful -ne "0" ]]
    then
    printf "\e[0;31m"
    echo   " =========================== "
    echo   "|   Something went wrong!   |"
    echo   "|                           |"
    echo   "|      (╯°□ °)╯︵ ┻━┻       |"  ; printf "\e[0;31m"
    echo   "|                           |"
    echo   "| Prerequisites Install . %b |" $prerequisites ; printf "\n"
    echo   "| Tools Install ......... %b |" $tool_bundle   ; printf "\n"
    echo   "| Python Tools .......... %b |" $python_tools  ; printf "\n"
    echo   "| Setup nxpprog ......... %b |" $nxpprog       ; printf "\n"
    echo   "| Setup Location File ... %b |" $location_file ; printf "\n"
    echo   "| Project Linking ....... %b |" $project_link  ; printf "\n"
    echo   "|                           |"
    echo   " =========================== "
    printf "\e[0m\n"
    exit 1
  else
    printf "\e[0;32m"
    echo   " =========================== "
    echo   "|                           |"
    printf "| Prerequisites Install . %b " $prerequisites ; printf "\e[0;32m|\n"
    printf "| Tools Install ......... %b " $tool_bundle   ; printf "\e[0;32m|\n"
    printf "| Python Tools .......... %b " $python_tools  ; printf "\e[0;32m|\n"
    printf "| Setup nxpprog ......... %b " $nxpprog       ; printf "\e[0;32m|\n"
    printf "| Setup Location File ... %b " $location_file ; printf "\e[0;32m|\n"
    printf "| Project Linking ....... %b " $project_link  ; printf "\e[0;32m|\n"
    echo   "|                           |"
    printf "|          (•_•)            |\r"
    sleep .5
    printf "|          ( •_•)>⌐▪-▪      |\r"
    sleep .5
    printf "|          (⌐▪_▪)           |\n"
    sleep .5
    echo   "|                           |"
    echo   "|      SETUP COMPLETE!      |"
    echo   "|                           |"
    printf " =========================== "
    printf "\e[0m\n"
    exit 0
  fi
}

###############
# Setup Start #
###############

quit_if_script_was_run_as_root
quit_if_not_64_bit

echo " ──────────────────────────────────────────────────┐"
echo "  List of software installed globally:              "
echo "   1) Python3                                       "
echo "   2) pip (Python3 package manager)                 "
echo "   3) Curl                                          "
echo "   4) Git                                           "
echo "   5) Gcovr                                         "
echo "   6) XCode CLI tools (OSX Only)                    "
echo "└────────────────────────────────────────────────── "

request_sudo_privileges

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "    Starting SJSU-Dev2 Environment Setup Script     "
echo ""
echo "└────────────────────────────────────────────────── "

if [[ "$OS" == "Linux" ]] # Linux or Windows WSL
then
  echo "Operating System: Linux"
  TOOLS_BUNDLE_URL=$TOOLS_BUNDLE_URL_LINUX
  install_linux_prerequisites   ; PREREQUISITES=$?
elif [[ "$OS" == "Darwin" ]] # Mac OSX
then
  echo "Operating System: Mac OSX Darvin"
  TOOLS_BUNDLE_URL=$TOOLS_BUNDLE_URL_OSX
  install_mac_osx_prerequisites ; PREREQUISITES=$?
else
  # Default if Operating System other than Mac or Linux
  echo -n "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems "
  echo "are supported! Exiting..."
  exit 1
fi

if [ "$PREREQUISITES" -ne "0" ]; then
  printf "\e[0;31m"
  printf " ─────────────────────────────────────────────────────────┐"
  echo ""
  printf "                 Prequisite Install Failed.                "
  echo ""
  echo  "  Make sure:                                               "
  echo  "     - Nothing else is currently being installed using APT "
  echo  "     - You are connected to the internet                   "
  echo ""
  printf "└───────────────────────────────────────────────────────── "
  printf "\e[0m\n"
  exit 1
fi

download_and_extract_tool_bundle  ; TOOL_BUNDLE=$?
install_python_tools              ; PYTHON_TOOLS=$?
install_nxpprog                   ; NXPPROG=$?
generate_location_file            ; LOCATION_FILE=$?
link_projects                     ; LINK_PROJECTS=$?

echo ""

final_install_check
